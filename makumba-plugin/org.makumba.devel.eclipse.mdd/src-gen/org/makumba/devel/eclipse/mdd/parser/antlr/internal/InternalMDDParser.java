package org.makumba.devel.eclipse.mdd.parser.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.xtext.parsetree.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.eclipse.xtext.conversion.ValueConverterException;
import org.makumba.devel.eclipse.mdd.services.MDDGrammarAccess;



import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
@SuppressWarnings("all")
public class InternalMDDParser extends AbstractInternalAntlrParser {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "RULE_LINEBREAK", "RULE_FIELDCOMMENT", "RULE_ID", "RULE_STRING", "RULE_INT", "RULE_SIGNED_INT", "RULE_HEX", "RULE_SL_COMMENT", "RULE_WS", "'='", "'unique'", "'fixed'", "'not'", "'null'", "'empty'", "'set'", "'int'", "'real'", "'boolean'", "'text'", "'binary'", "'file'", "'date'", "'{'", "','", "'}'", "'char'", "'deprecated'", "'['", "']'", "'ptr'", "'->'", "'.'", "'!'", "'title'", "'include'", "'type'", "'compare'", "'upper'", "'('", "')'", "'lower'", "'<'", "'>'", "'<='", "'>='", "'!='", "'^='", "'<>'", "'like'", "'$now'", "'$today'", "'+'", "'-'", "'range'", "'length'", "'matches'", "'..'", "'?'", "':'", "'notNull'", "'NaN'", "'notEmpty'", "'notInt'", "'notReal'", "'notBoolean'", "'%'", "'union'", "'||'", "'*'", "'/'", "'$'", "'e'", "'f'", "'d'", "'l'", "'SELECT'", "'Select'", "'select'", "'DISTINCT'", "'Distinct'", "'distinct'", "'NEW'", "'New'", "'new'", "'OBJECT'", "'Object'", "'object'", "'FROM'", "'From'", "'from'", "'LEFT'", "'Left'", "'left'", "'RIGHT'", "'Right'", "'right'", "'OUTER'", "'Outer'", "'outer'", "'FULL'", "'Full'", "'full'", "'INNER'", "'Inner'", "'inner'", "'JOIN'", "'Join'", "'join'", "'FETCH'", "'Fetch'", "'fetch'", "'WITH'", "'With'", "'with'", "'IN'", "'In'", "'in'", "'CLASS'", "'Class'", "'class'", "'ELEMENTS'", "'Elements'", "'elements'", "'AS'", "'As'", "'as'", "'PROPERTIES'", "'Properties'", "'properties'", "'GROUP'", "'Group'", "'group'", "'ORDER'", "'Order'", "'order'", "'BY'", "'By'", "'by'", "'ASC'", "'Asc'", "'asc'", "'ASCENDING'", "'Ascending'", "'ascending'", "'DESC'", "'Desc'", "'desc'", "'DESCENDING'", "'Descending'", "'descending'", "'HAVING'", "'Having'", "'having'", "'WHERE'", "'Where'", "'where'", "'OR'", "'Or'", "'or'", "'AND'", "'And'", "'and'", "'NOT'", "'Not'", "'IS'", "'Is'", "'is'", "'BETWEEN'", "'Between'", "'between'", "'LIKE'", "'Like'", "'MEMBER'", "'Member'", "'member'", "'OF'", "'Of'", "'of'", "'ESCAPE'", "'Escape'", "'escape'", "'CASE'", "'Case'", "'case'", "'END'", "'End'", "'end'", "'WHEN'", "'When'", "'when'", "'THEN'", "'Then'", "'then'", "'ELSE'", "'Else'", "'else'", "'SOME'", "'Some'", "'some'", "'EXISTS'", "'Exists'", "'exists'", "'ALL'", "'All'", "'all'", "'ANY'", "'Any'", "'any'", "'SUM'", "'Sum'", "'sum'", "'AVG'", "'Avg'", "'avg'", "'MAX'", "'Max'", "'max'", "'MIN'", "'Min'", "'min'", "'COUNT'", "'Count'", "'count'", "'INDICES'", "'Indices'", "'indices'", "'TRAILING'", "'Trailing'", "'trailing'", "'LEADING'", "'Leading'", "'leading'", "'BOTH'", "'Both'", "'both'", "'NULL'", "'Null'", "'TRUE'", "'True'", "'true'", "'FALSE'", "'False'", "'false'", "'EMPTY'", "'Empty'"
    };
    public static final int RULE_ID=6;
    public static final int RULE_HEX=10;
    public static final int RULE_STRING=7;
    public static final int RULE_LINEBREAK=4;
    public static final int RULE_FIELDCOMMENT=5;
    public static final int RULE_INT=8;
    public static final int RULE_SIGNED_INT=9;
    public static final int RULE_WS=12;
    public static final int RULE_SL_COMMENT=11;
    public static final int EOF=-1;

        public InternalMDDParser(TokenStream input) {
            super(input);
            ruleMemo = new HashMap[691+1];
         }
        

    public String[] getTokenNames() { return tokenNames; }
    public String getGrammarFileName() { return "../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g"; }



    /*
      This grammar contains a lot of empty actions to work around a bug in ANTLR.
      Otherwise the ANTLR tool will create synpreds that cannot be compiled in some rare cases.
    */
     
     	private MDDGrammarAccess grammarAccess;
     	
        public InternalMDDParser(TokenStream input, IAstFactory factory, MDDGrammarAccess grammarAccess) {
            this(input);
            this.factory = factory;
            registerRules(grammarAccess.getGrammar());
            this.grammarAccess = grammarAccess;
        }
        
        @Override
        protected InputStream getTokenFile() {
        	ClassLoader classLoader = getClass().getClassLoader();
        	return classLoader.getResourceAsStream("org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.tokens");
        }
        
        @Override
        protected String getFirstRuleName() {
        	return "DataDefinition";	
       	}
       	
       	@Override
       	protected MDDGrammarAccess getGrammarAccess() {
       		return grammarAccess;
       	}



    // $ANTLR start entryRuleDataDefinition
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:83:1: entryRuleDataDefinition returns [EObject current=null] : iv_ruleDataDefinition= ruleDataDefinition EOF ;
    public final EObject entryRuleDataDefinition() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleDataDefinition = null;


        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:84:2: (iv_ruleDataDefinition= ruleDataDefinition EOF )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:85:2: iv_ruleDataDefinition= ruleDataDefinition EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getDataDefinitionRule(), currentNode); 
            }
            pushFollow(FOLLOW_ruleDataDefinition_in_entryRuleDataDefinition81);
            iv_ruleDataDefinition=ruleDataDefinition();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruleDataDefinition; 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleDataDefinition91); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuleDataDefinition


    // $ANTLR start ruleDataDefinition
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:92:1: ruleDataDefinition returns [EObject current=null] : ( ( RULE_LINEBREAK )* ( (lv_d_1_0= ruleDeclaration ) )? ( ( RULE_LINEBREAK )+ ( (lv_d_3_0= ruleDeclaration ) ) )* ( RULE_LINEBREAK )* ) ;
    public final EObject ruleDataDefinition() throws RecognitionException {
        EObject current = null;

        EObject lv_d_1_0 = null;

        EObject lv_d_3_0 = null;


         EObject temp=null; setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:97:6: ( ( ( RULE_LINEBREAK )* ( (lv_d_1_0= ruleDeclaration ) )? ( ( RULE_LINEBREAK )+ ( (lv_d_3_0= ruleDeclaration ) ) )* ( RULE_LINEBREAK )* ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:98:1: ( ( RULE_LINEBREAK )* ( (lv_d_1_0= ruleDeclaration ) )? ( ( RULE_LINEBREAK )+ ( (lv_d_3_0= ruleDeclaration ) ) )* ( RULE_LINEBREAK )* )
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:98:1: ( ( RULE_LINEBREAK )* ( (lv_d_1_0= ruleDeclaration ) )? ( ( RULE_LINEBREAK )+ ( (lv_d_3_0= ruleDeclaration ) ) )* ( RULE_LINEBREAK )* )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:98:2: ( RULE_LINEBREAK )* ( (lv_d_1_0= ruleDeclaration ) )? ( ( RULE_LINEBREAK )+ ( (lv_d_3_0= ruleDeclaration ) ) )* ( RULE_LINEBREAK )*
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:98:2: ( RULE_LINEBREAK )*
            loop1:
            do {
                int alt1=2;
                int LA1_0 = input.LA(1);

                if ( (LA1_0==RULE_LINEBREAK) ) {
                    int LA1_2 = input.LA(2);

                    if ( (synpred1()) ) {
                        alt1=1;
                    }


                }


                switch (alt1) {
            	case 1 :
            	    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:98:3: RULE_LINEBREAK
            	    {
            	    match(input,RULE_LINEBREAK,FOLLOW_RULE_LINEBREAK_in_ruleDataDefinition126); if (failed) return current;
            	    if ( backtracking==0 ) {
            	       
            	          createLeafNode(grammarAccess.getDataDefinitionAccess().getLINEBREAKTerminalRuleCall_0(), null); 
            	          
            	    }

            	    }
            	    break;

            	default :
            	    break loop1;
                }
            } while (true);

            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:102:3: ( (lv_d_1_0= ruleDeclaration ) )?
            int alt2=2;
            int LA2_0 = input.LA(1);

            if ( (LA2_0==RULE_ID||LA2_0==14||LA2_0==23||(LA2_0>=25 && LA2_0<=26)||LA2_0==30||(LA2_0>=37 && LA2_0<=38)||(LA2_0>=40 && LA2_0<=41)||(LA2_0>=58 && LA2_0<=60)||LA2_0==91||LA2_0==179||LA2_0==191||LA2_0==194||LA2_0==197||LA2_0==209||LA2_0==221) ) {
                alt2=1;
            }
            switch (alt2) {
                case 1 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:103:1: (lv_d_1_0= ruleDeclaration )
                    {
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:103:1: (lv_d_1_0= ruleDeclaration )
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:104:3: lv_d_1_0= ruleDeclaration
                    {
                    if ( backtracking==0 ) {
                       
                      	        currentNode=createCompositeNode(grammarAccess.getDataDefinitionAccess().getDDeclarationParserRuleCall_1_0(), currentNode); 
                      	    
                    }
                    pushFollow(FOLLOW_ruleDeclaration_in_ruleDataDefinition148);
                    lv_d_1_0=ruleDeclaration();
                    _fsp--;
                    if (failed) return current;
                    if ( backtracking==0 ) {

                      	        if (current==null) {
                      	            current = factory.create(grammarAccess.getDataDefinitionRule().getType().getClassifier());
                      	            associateNodeWithAstElement(currentNode.getParent(), current);
                      	        }
                      	        try {
                      	       		add(
                      	       			current, 
                      	       			"d",
                      	        		lv_d_1_0, 
                      	        		"Declaration", 
                      	        		currentNode);
                      	        } catch (ValueConverterException vce) {
                      				handleValueConverterException(vce);
                      	        }
                      	        currentNode = currentNode.getParent();
                      	    
                    }

                    }


                    }
                    break;

            }

            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:126:3: ( ( RULE_LINEBREAK )+ ( (lv_d_3_0= ruleDeclaration ) ) )*
            loop4:
            do {
                int alt4=2;
                alt4 = dfa4.predict(input);
                switch (alt4) {
            	case 1 :
            	    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:126:4: ( RULE_LINEBREAK )+ ( (lv_d_3_0= ruleDeclaration ) )
            	    {
            	    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:126:4: ( RULE_LINEBREAK )+
            	    int cnt3=0;
            	    loop3:
            	    do {
            	        int alt3=2;
            	        int LA3_0 = input.LA(1);

            	        if ( (LA3_0==RULE_LINEBREAK) ) {
            	            alt3=1;
            	        }


            	        switch (alt3) {
            	    	case 1 :
            	    	    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:126:5: RULE_LINEBREAK
            	    	    {
            	    	    match(input,RULE_LINEBREAK,FOLLOW_RULE_LINEBREAK_in_ruleDataDefinition160); if (failed) return current;
            	    	    if ( backtracking==0 ) {
            	    	       
            	    	          createLeafNode(grammarAccess.getDataDefinitionAccess().getLINEBREAKTerminalRuleCall_2_0(), null); 
            	    	          
            	    	    }

            	    	    }
            	    	    break;

            	    	default :
            	    	    if ( cnt3 >= 1 ) break loop3;
            	    	    if (backtracking>0) {failed=true; return current;}
            	                EarlyExitException eee =
            	                    new EarlyExitException(3, input);
            	                throw eee;
            	        }
            	        cnt3++;
            	    } while (true);

            	    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:130:3: ( (lv_d_3_0= ruleDeclaration ) )
            	    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:131:1: (lv_d_3_0= ruleDeclaration )
            	    {
            	    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:131:1: (lv_d_3_0= ruleDeclaration )
            	    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:132:3: lv_d_3_0= ruleDeclaration
            	    {
            	    if ( backtracking==0 ) {
            	       
            	      	        currentNode=createCompositeNode(grammarAccess.getDataDefinitionAccess().getDDeclarationParserRuleCall_2_1_0(), currentNode); 
            	      	    
            	    }
            	    pushFollow(FOLLOW_ruleDeclaration_in_ruleDataDefinition182);
            	    lv_d_3_0=ruleDeclaration();
            	    _fsp--;
            	    if (failed) return current;
            	    if ( backtracking==0 ) {

            	      	        if (current==null) {
            	      	            current = factory.create(grammarAccess.getDataDefinitionRule().getType().getClassifier());
            	      	            associateNodeWithAstElement(currentNode.getParent(), current);
            	      	        }
            	      	        try {
            	      	       		add(
            	      	       			current, 
            	      	       			"d",
            	      	        		lv_d_3_0, 
            	      	        		"Declaration", 
            	      	        		currentNode);
            	      	        } catch (ValueConverterException vce) {
            	      				handleValueConverterException(vce);
            	      	        }
            	      	        currentNode = currentNode.getParent();
            	      	    
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop4;
                }
            } while (true);

            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:154:4: ( RULE_LINEBREAK )*
            loop5:
            do {
                int alt5=2;
                int LA5_0 = input.LA(1);

                if ( (LA5_0==RULE_LINEBREAK) ) {
                    alt5=1;
                }


                switch (alt5) {
            	case 1 :
            	    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:154:5: RULE_LINEBREAK
            	    {
            	    match(input,RULE_LINEBREAK,FOLLOW_RULE_LINEBREAK_in_ruleDataDefinition194); if (failed) return current;
            	    if ( backtracking==0 ) {
            	       
            	          createLeafNode(grammarAccess.getDataDefinitionAccess().getLINEBREAKTerminalRuleCall_3(), null); 
            	          
            	    }

            	    }
            	    break;

            	default :
            	    break loop5;
                }
            } while (true);


            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
                  	lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruleDataDefinition


    // $ANTLR start entryRuleDeclaration
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:166:1: entryRuleDeclaration returns [EObject current=null] : iv_ruleDeclaration= ruleDeclaration EOF ;
    public final EObject entryRuleDeclaration() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleDeclaration = null;


        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:167:2: (iv_ruleDeclaration= ruleDeclaration EOF )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:168:2: iv_ruleDeclaration= ruleDeclaration EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getDeclarationRule(), currentNode); 
            }
            pushFollow(FOLLOW_ruleDeclaration_in_entryRuleDeclaration231);
            iv_ruleDeclaration=ruleDeclaration();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruleDeclaration; 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleDeclaration241); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuleDeclaration


    // $ANTLR start ruleDeclaration
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:175:1: ruleDeclaration returns [EObject current=null] : ( (this_FieldDeclaration_0= ruleFieldDeclaration | this_TitleDeclaration_1= ruleTitleDeclaration | this_TypeDeclaration_2= ruleTypeDeclaration | this_IncludeDeclaration_3= ruleIncludeDeclaration | this_ValidationRuleDeclaration_4= ruleValidationRuleDeclaration | this_FunctionDeclaration_5= ruleFunctionDeclaration | this_NativeValidationRuleDeclaration_6= ruleNativeValidationRuleDeclaration | this_SubFieldDeclaration_7= ruleSubFieldDeclaration ) ( (lv_fieldComment_8_0= RULE_FIELDCOMMENT ) )? ) ;
    public final EObject ruleDeclaration() throws RecognitionException {
        EObject current = null;

        Token lv_fieldComment_8_0=null;
        EObject this_FieldDeclaration_0 = null;

        EObject this_TitleDeclaration_1 = null;

        EObject this_TypeDeclaration_2 = null;

        EObject this_IncludeDeclaration_3 = null;

        EObject this_ValidationRuleDeclaration_4 = null;

        EObject this_FunctionDeclaration_5 = null;

        EObject this_NativeValidationRuleDeclaration_6 = null;

        EObject this_SubFieldDeclaration_7 = null;


         EObject temp=null; setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:180:6: ( ( (this_FieldDeclaration_0= ruleFieldDeclaration | this_TitleDeclaration_1= ruleTitleDeclaration | this_TypeDeclaration_2= ruleTypeDeclaration | this_IncludeDeclaration_3= ruleIncludeDeclaration | this_ValidationRuleDeclaration_4= ruleValidationRuleDeclaration | this_FunctionDeclaration_5= ruleFunctionDeclaration | this_NativeValidationRuleDeclaration_6= ruleNativeValidationRuleDeclaration | this_SubFieldDeclaration_7= ruleSubFieldDeclaration ) ( (lv_fieldComment_8_0= RULE_FIELDCOMMENT ) )? ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:181:1: ( (this_FieldDeclaration_0= ruleFieldDeclaration | this_TitleDeclaration_1= ruleTitleDeclaration | this_TypeDeclaration_2= ruleTypeDeclaration | this_IncludeDeclaration_3= ruleIncludeDeclaration | this_ValidationRuleDeclaration_4= ruleValidationRuleDeclaration | this_FunctionDeclaration_5= ruleFunctionDeclaration | this_NativeValidationRuleDeclaration_6= ruleNativeValidationRuleDeclaration | this_SubFieldDeclaration_7= ruleSubFieldDeclaration ) ( (lv_fieldComment_8_0= RULE_FIELDCOMMENT ) )? )
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:181:1: ( (this_FieldDeclaration_0= ruleFieldDeclaration | this_TitleDeclaration_1= ruleTitleDeclaration | this_TypeDeclaration_2= ruleTypeDeclaration | this_IncludeDeclaration_3= ruleIncludeDeclaration | this_ValidationRuleDeclaration_4= ruleValidationRuleDeclaration | this_FunctionDeclaration_5= ruleFunctionDeclaration | this_NativeValidationRuleDeclaration_6= ruleNativeValidationRuleDeclaration | this_SubFieldDeclaration_7= ruleSubFieldDeclaration ) ( (lv_fieldComment_8_0= RULE_FIELDCOMMENT ) )? )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:181:2: (this_FieldDeclaration_0= ruleFieldDeclaration | this_TitleDeclaration_1= ruleTitleDeclaration | this_TypeDeclaration_2= ruleTypeDeclaration | this_IncludeDeclaration_3= ruleIncludeDeclaration | this_ValidationRuleDeclaration_4= ruleValidationRuleDeclaration | this_FunctionDeclaration_5= ruleFunctionDeclaration | this_NativeValidationRuleDeclaration_6= ruleNativeValidationRuleDeclaration | this_SubFieldDeclaration_7= ruleSubFieldDeclaration ) ( (lv_fieldComment_8_0= RULE_FIELDCOMMENT ) )?
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:181:2: (this_FieldDeclaration_0= ruleFieldDeclaration | this_TitleDeclaration_1= ruleTitleDeclaration | this_TypeDeclaration_2= ruleTypeDeclaration | this_IncludeDeclaration_3= ruleIncludeDeclaration | this_ValidationRuleDeclaration_4= ruleValidationRuleDeclaration | this_FunctionDeclaration_5= ruleFunctionDeclaration | this_NativeValidationRuleDeclaration_6= ruleNativeValidationRuleDeclaration | this_SubFieldDeclaration_7= ruleSubFieldDeclaration )
            int alt6=8;
            switch ( input.LA(1) ) {
            case RULE_ID:
                {
                switch ( input.LA(2) ) {
                case 43:
                case 70:
                    {
                    alt6=6;
                    }
                    break;
                case 36:
                    {
                    alt6=7;
                    }
                    break;
                case 35:
                    {
                    alt6=8;
                    }
                    break;
                case 13:
                    {
                    alt6=1;
                    }
                    break;
                default:
                    if (backtracking>0) {failed=true; return current;}
                    NoViableAltException nvae =
                        new NoViableAltException("181:2: (this_FieldDeclaration_0= ruleFieldDeclaration | this_TitleDeclaration_1= ruleTitleDeclaration | this_TypeDeclaration_2= ruleTypeDeclaration | this_IncludeDeclaration_3= ruleIncludeDeclaration | this_ValidationRuleDeclaration_4= ruleValidationRuleDeclaration | this_FunctionDeclaration_5= ruleFunctionDeclaration | this_NativeValidationRuleDeclaration_6= ruleNativeValidationRuleDeclaration | this_SubFieldDeclaration_7= ruleSubFieldDeclaration )", 6, 1, input);

                    throw nvae;
                }

                }
                break;
            case 23:
            case 25:
            case 26:
            case 30:
            case 38:
            case 40:
            case 91:
            case 179:
            case 191:
            case 194:
            case 197:
            case 209:
            case 221:
                {
                alt6=1;
                }
                break;
            case 59:
                {
                int LA6_3 = input.LA(2);

                if ( (LA6_3==13) ) {
                    alt6=1;
                }
                else if ( (LA6_3==43) ) {
                    alt6=5;
                }
                else {
                    if (backtracking>0) {failed=true; return current;}
                    NoViableAltException nvae =
                        new NoViableAltException("181:2: (this_FieldDeclaration_0= ruleFieldDeclaration | this_TitleDeclaration_1= ruleTitleDeclaration | this_TypeDeclaration_2= ruleTypeDeclaration | this_IncludeDeclaration_3= ruleIncludeDeclaration | this_ValidationRuleDeclaration_4= ruleValidationRuleDeclaration | this_FunctionDeclaration_5= ruleFunctionDeclaration | this_NativeValidationRuleDeclaration_6= ruleNativeValidationRuleDeclaration | this_SubFieldDeclaration_7= ruleSubFieldDeclaration )", 6, 3, input);

                    throw nvae;
                }
                }
                break;
            case 37:
                {
                switch ( input.LA(2) ) {
                case 40:
                    {
                    alt6=3;
                    }
                    break;
                case 38:
                    {
                    alt6=2;
                    }
                    break;
                case 39:
                    {
                    alt6=4;
                    }
                    break;
                default:
                    if (backtracking>0) {failed=true; return current;}
                    NoViableAltException nvae =
                        new NoViableAltException("181:2: (this_FieldDeclaration_0= ruleFieldDeclaration | this_TitleDeclaration_1= ruleTitleDeclaration | this_TypeDeclaration_2= ruleTypeDeclaration | this_IncludeDeclaration_3= ruleIncludeDeclaration | this_ValidationRuleDeclaration_4= ruleValidationRuleDeclaration | this_FunctionDeclaration_5= ruleFunctionDeclaration | this_NativeValidationRuleDeclaration_6= ruleNativeValidationRuleDeclaration | this_SubFieldDeclaration_7= ruleSubFieldDeclaration )", 6, 4, input);

                    throw nvae;
                }

                }
                break;
            case 14:
            case 41:
            case 58:
            case 60:
                {
                alt6=5;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("181:2: (this_FieldDeclaration_0= ruleFieldDeclaration | this_TitleDeclaration_1= ruleTitleDeclaration | this_TypeDeclaration_2= ruleTypeDeclaration | this_IncludeDeclaration_3= ruleIncludeDeclaration | this_ValidationRuleDeclaration_4= ruleValidationRuleDeclaration | this_FunctionDeclaration_5= ruleFunctionDeclaration | this_NativeValidationRuleDeclaration_6= ruleNativeValidationRuleDeclaration | this_SubFieldDeclaration_7= ruleSubFieldDeclaration )", 6, 0, input);

                throw nvae;
            }

            switch (alt6) {
                case 1 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:182:2: this_FieldDeclaration_0= ruleFieldDeclaration
                    {
                    if ( backtracking==0 ) {
                       
                      	  /* */ 
                      	
                    }
                    if ( backtracking==0 ) {
                       
                              currentNode=createCompositeNode(grammarAccess.getDeclarationAccess().getFieldDeclarationParserRuleCall_0_0(), currentNode); 
                          
                    }
                    pushFollow(FOLLOW_ruleFieldDeclaration_in_ruleDeclaration292);
                    this_FieldDeclaration_0=ruleFieldDeclaration();
                    _fsp--;
                    if (failed) return current;
                    if ( backtracking==0 ) {
                       
                              current = this_FieldDeclaration_0; 
                              currentNode = currentNode.getParent();
                          
                    }

                    }
                    break;
                case 2 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:195:2: this_TitleDeclaration_1= ruleTitleDeclaration
                    {
                    if ( backtracking==0 ) {
                       
                      	  /* */ 
                      	
                    }
                    if ( backtracking==0 ) {
                       
                              currentNode=createCompositeNode(grammarAccess.getDeclarationAccess().getTitleDeclarationParserRuleCall_0_1(), currentNode); 
                          
                    }
                    pushFollow(FOLLOW_ruleTitleDeclaration_in_ruleDeclaration322);
                    this_TitleDeclaration_1=ruleTitleDeclaration();
                    _fsp--;
                    if (failed) return current;
                    if ( backtracking==0 ) {
                       
                              current = this_TitleDeclaration_1; 
                              currentNode = currentNode.getParent();
                          
                    }

                    }
                    break;
                case 3 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:208:2: this_TypeDeclaration_2= ruleTypeDeclaration
                    {
                    if ( backtracking==0 ) {
                       
                      	  /* */ 
                      	
                    }
                    if ( backtracking==0 ) {
                       
                              currentNode=createCompositeNode(grammarAccess.getDeclarationAccess().getTypeDeclarationParserRuleCall_0_2(), currentNode); 
                          
                    }
                    pushFollow(FOLLOW_ruleTypeDeclaration_in_ruleDeclaration352);
                    this_TypeDeclaration_2=ruleTypeDeclaration();
                    _fsp--;
                    if (failed) return current;
                    if ( backtracking==0 ) {
                       
                              current = this_TypeDeclaration_2; 
                              currentNode = currentNode.getParent();
                          
                    }

                    }
                    break;
                case 4 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:221:2: this_IncludeDeclaration_3= ruleIncludeDeclaration
                    {
                    if ( backtracking==0 ) {
                       
                      	  /* */ 
                      	
                    }
                    if ( backtracking==0 ) {
                       
                              currentNode=createCompositeNode(grammarAccess.getDeclarationAccess().getIncludeDeclarationParserRuleCall_0_3(), currentNode); 
                          
                    }
                    pushFollow(FOLLOW_ruleIncludeDeclaration_in_ruleDeclaration382);
                    this_IncludeDeclaration_3=ruleIncludeDeclaration();
                    _fsp--;
                    if (failed) return current;
                    if ( backtracking==0 ) {
                       
                              current = this_IncludeDeclaration_3; 
                              currentNode = currentNode.getParent();
                          
                    }

                    }
                    break;
                case 5 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:234:2: this_ValidationRuleDeclaration_4= ruleValidationRuleDeclaration
                    {
                    if ( backtracking==0 ) {
                       
                      	  /* */ 
                      	
                    }
                    if ( backtracking==0 ) {
                       
                              currentNode=createCompositeNode(grammarAccess.getDeclarationAccess().getValidationRuleDeclarationParserRuleCall_0_4(), currentNode); 
                          
                    }
                    pushFollow(FOLLOW_ruleValidationRuleDeclaration_in_ruleDeclaration412);
                    this_ValidationRuleDeclaration_4=ruleValidationRuleDeclaration();
                    _fsp--;
                    if (failed) return current;
                    if ( backtracking==0 ) {
                       
                              current = this_ValidationRuleDeclaration_4; 
                              currentNode = currentNode.getParent();
                          
                    }

                    }
                    break;
                case 6 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:247:2: this_FunctionDeclaration_5= ruleFunctionDeclaration
                    {
                    if ( backtracking==0 ) {
                       
                      	  /* */ 
                      	
                    }
                    if ( backtracking==0 ) {
                       
                              currentNode=createCompositeNode(grammarAccess.getDeclarationAccess().getFunctionDeclarationParserRuleCall_0_5(), currentNode); 
                          
                    }
                    pushFollow(FOLLOW_ruleFunctionDeclaration_in_ruleDeclaration442);
                    this_FunctionDeclaration_5=ruleFunctionDeclaration();
                    _fsp--;
                    if (failed) return current;
                    if ( backtracking==0 ) {
                       
                              current = this_FunctionDeclaration_5; 
                              currentNode = currentNode.getParent();
                          
                    }

                    }
                    break;
                case 7 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:260:2: this_NativeValidationRuleDeclaration_6= ruleNativeValidationRuleDeclaration
                    {
                    if ( backtracking==0 ) {
                       
                      	  /* */ 
                      	
                    }
                    if ( backtracking==0 ) {
                       
                              currentNode=createCompositeNode(grammarAccess.getDeclarationAccess().getNativeValidationRuleDeclarationParserRuleCall_0_6(), currentNode); 
                          
                    }
                    pushFollow(FOLLOW_ruleNativeValidationRuleDeclaration_in_ruleDeclaration472);
                    this_NativeValidationRuleDeclaration_6=ruleNativeValidationRuleDeclaration();
                    _fsp--;
                    if (failed) return current;
                    if ( backtracking==0 ) {
                       
                              current = this_NativeValidationRuleDeclaration_6; 
                              currentNode = currentNode.getParent();
                          
                    }

                    }
                    break;
                case 8 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:273:2: this_SubFieldDeclaration_7= ruleSubFieldDeclaration
                    {
                    if ( backtracking==0 ) {
                       
                      	  /* */ 
                      	
                    }
                    if ( backtracking==0 ) {
                       
                              currentNode=createCompositeNode(grammarAccess.getDeclarationAccess().getSubFieldDeclarationParserRuleCall_0_7(), currentNode); 
                          
                    }
                    pushFollow(FOLLOW_ruleSubFieldDeclaration_in_ruleDeclaration502);
                    this_SubFieldDeclaration_7=ruleSubFieldDeclaration();
                    _fsp--;
                    if (failed) return current;
                    if ( backtracking==0 ) {
                       
                              current = this_SubFieldDeclaration_7; 
                              currentNode = currentNode.getParent();
                          
                    }

                    }
                    break;

            }

            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:284:2: ( (lv_fieldComment_8_0= RULE_FIELDCOMMENT ) )?
            int alt7=2;
            int LA7_0 = input.LA(1);

            if ( (LA7_0==RULE_FIELDCOMMENT) ) {
                int LA7_1 = input.LA(2);

                if ( (synpred13()) ) {
                    alt7=1;
                }
            }
            switch (alt7) {
                case 1 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:285:1: (lv_fieldComment_8_0= RULE_FIELDCOMMENT )
                    {
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:285:1: (lv_fieldComment_8_0= RULE_FIELDCOMMENT )
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:286:3: lv_fieldComment_8_0= RULE_FIELDCOMMENT
                    {
                    lv_fieldComment_8_0=(Token)input.LT(1);
                    match(input,RULE_FIELDCOMMENT,FOLLOW_RULE_FIELDCOMMENT_in_ruleDeclaration519); if (failed) return current;
                    if ( backtracking==0 ) {

                      			createLeafNode(grammarAccess.getDeclarationAccess().getFieldCommentFIELDCOMMENTTerminalRuleCall_1_0(), "fieldComment"); 
                      		
                    }
                    if ( backtracking==0 ) {

                      	        if (current==null) {
                      	            current = factory.create(grammarAccess.getDeclarationRule().getType().getClassifier());
                      	            associateNodeWithAstElement(currentNode, current);
                      	        }
                      	        try {
                      	       		set(
                      	       			current, 
                      	       			"fieldComment",
                      	        		lv_fieldComment_8_0, 
                      	        		"FIELDCOMMENT", 
                      	        		lastConsumedNode);
                      	        } catch (ValueConverterException vce) {
                      				handleValueConverterException(vce);
                      	        }
                      	    
                    }

                    }


                    }
                    break;

            }


            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
                  	lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruleDeclaration


    // $ANTLR start entryRuleFieldDeclaration
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:316:1: entryRuleFieldDeclaration returns [EObject current=null] : iv_ruleFieldDeclaration= ruleFieldDeclaration EOF ;
    public final EObject entryRuleFieldDeclaration() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleFieldDeclaration = null;


        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:317:2: (iv_ruleFieldDeclaration= ruleFieldDeclaration EOF )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:318:2: iv_ruleFieldDeclaration= ruleFieldDeclaration EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getFieldDeclarationRule(), currentNode); 
            }
            pushFollow(FOLLOW_ruleFieldDeclaration_in_entryRuleFieldDeclaration561);
            iv_ruleFieldDeclaration=ruleFieldDeclaration();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruleFieldDeclaration; 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleFieldDeclaration571); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuleFieldDeclaration


    // $ANTLR start ruleFieldDeclaration
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:325:1: ruleFieldDeclaration returns [EObject current=null] : ( ( (lv_name_0_0= ruleIdOrKeyword ) ) '=' ( ( (lv_modifiers_2_0= ruleModifiers ) ) ( (lv_typedef_3_0= ruleFieldType ) ) )? ) ;
    public final EObject ruleFieldDeclaration() throws RecognitionException {
        EObject current = null;

        AntlrDatatypeRuleToken lv_name_0_0 = null;

        EObject lv_modifiers_2_0 = null;

        EObject lv_typedef_3_0 = null;


         EObject temp=null; setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:330:6: ( ( ( (lv_name_0_0= ruleIdOrKeyword ) ) '=' ( ( (lv_modifiers_2_0= ruleModifiers ) ) ( (lv_typedef_3_0= ruleFieldType ) ) )? ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:331:1: ( ( (lv_name_0_0= ruleIdOrKeyword ) ) '=' ( ( (lv_modifiers_2_0= ruleModifiers ) ) ( (lv_typedef_3_0= ruleFieldType ) ) )? )
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:331:1: ( ( (lv_name_0_0= ruleIdOrKeyword ) ) '=' ( ( (lv_modifiers_2_0= ruleModifiers ) ) ( (lv_typedef_3_0= ruleFieldType ) ) )? )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:331:2: ( (lv_name_0_0= ruleIdOrKeyword ) ) '=' ( ( (lv_modifiers_2_0= ruleModifiers ) ) ( (lv_typedef_3_0= ruleFieldType ) ) )?
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:331:2: ( (lv_name_0_0= ruleIdOrKeyword ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:332:1: (lv_name_0_0= ruleIdOrKeyword )
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:332:1: (lv_name_0_0= ruleIdOrKeyword )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:333:3: lv_name_0_0= ruleIdOrKeyword
            {
            if ( backtracking==0 ) {
               
              	        currentNode=createCompositeNode(grammarAccess.getFieldDeclarationAccess().getNameIdOrKeywordParserRuleCall_0_0(), currentNode); 
              	    
            }
            pushFollow(FOLLOW_ruleIdOrKeyword_in_ruleFieldDeclaration617);
            lv_name_0_0=ruleIdOrKeyword();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {

              	        if (current==null) {
              	            current = factory.create(grammarAccess.getFieldDeclarationRule().getType().getClassifier());
              	            associateNodeWithAstElement(currentNode.getParent(), current);
              	        }
              	        try {
              	       		set(
              	       			current, 
              	       			"name",
              	        		lv_name_0_0, 
              	        		"IdOrKeyword", 
              	        		currentNode);
              	        } catch (ValueConverterException vce) {
              				handleValueConverterException(vce);
              	        }
              	        currentNode = currentNode.getParent();
              	    
            }

            }


            }

            match(input,13,FOLLOW_13_in_ruleFieldDeclaration627); if (failed) return current;
            if ( backtracking==0 ) {

                      createLeafNode(grammarAccess.getFieldDeclarationAccess().getEqualsSignKeyword_1(), null); 
                  
            }
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:359:1: ( ( (lv_modifiers_2_0= ruleModifiers ) ) ( (lv_typedef_3_0= ruleFieldType ) ) )?
            int alt8=2;
            int LA8_0 = input.LA(1);

            if ( LA8_0 ==14 && getUnorderedGroupHelper().canSelect(grammarAccess.getModifiersAccess().getUnorderedGroup(), 0) ) {
                alt8=1;
            }
            else if ( LA8_0 ==15 && getUnorderedGroupHelper().canSelect(grammarAccess.getModifiersAccess().getUnorderedGroup(), 1) ) {
                alt8=1;
            }
            else if ( LA8_0 ==16 && (getUnorderedGroupHelper().canSelect(grammarAccess.getModifiersAccess().getUnorderedGroup(), 2)||getUnorderedGroupHelper().canSelect(grammarAccess.getModifiersAccess().getUnorderedGroup(), 3)) ) {
                alt8=1;
            }
            else if ( (LA8_0==RULE_ID||(LA8_0>=19 && LA8_0<=26)||LA8_0==30||LA8_0==34) ) {
                alt8=1;
            }
            switch (alt8) {
                case 1 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:359:2: ( (lv_modifiers_2_0= ruleModifiers ) ) ( (lv_typedef_3_0= ruleFieldType ) )
                    {
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:359:2: ( (lv_modifiers_2_0= ruleModifiers ) )
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:360:1: (lv_modifiers_2_0= ruleModifiers )
                    {
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:360:1: (lv_modifiers_2_0= ruleModifiers )
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:361:3: lv_modifiers_2_0= ruleModifiers
                    {
                    if ( backtracking==0 ) {
                       
                      	        currentNode=createCompositeNode(grammarAccess.getFieldDeclarationAccess().getModifiersModifiersParserRuleCall_2_0_0(), currentNode); 
                      	    
                    }
                    pushFollow(FOLLOW_ruleModifiers_in_ruleFieldDeclaration649);
                    lv_modifiers_2_0=ruleModifiers();
                    _fsp--;
                    if (failed) return current;
                    if ( backtracking==0 ) {

                      	        if (current==null) {
                      	            current = factory.create(grammarAccess.getFieldDeclarationRule().getType().getClassifier());
                      	            associateNodeWithAstElement(currentNode.getParent(), current);
                      	        }
                      	        try {
                      	       		set(
                      	       			current, 
                      	       			"modifiers",
                      	        		lv_modifiers_2_0, 
                      	        		"Modifiers", 
                      	        		currentNode);
                      	        } catch (ValueConverterException vce) {
                      				handleValueConverterException(vce);
                      	        }
                      	        currentNode = currentNode.getParent();
                      	    
                    }

                    }


                    }

                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:383:2: ( (lv_typedef_3_0= ruleFieldType ) )
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:384:1: (lv_typedef_3_0= ruleFieldType )
                    {
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:384:1: (lv_typedef_3_0= ruleFieldType )
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:385:3: lv_typedef_3_0= ruleFieldType
                    {
                    if ( backtracking==0 ) {
                       
                      	        currentNode=createCompositeNode(grammarAccess.getFieldDeclarationAccess().getTypedefFieldTypeParserRuleCall_2_1_0(), currentNode); 
                      	    
                    }
                    pushFollow(FOLLOW_ruleFieldType_in_ruleFieldDeclaration670);
                    lv_typedef_3_0=ruleFieldType();
                    _fsp--;
                    if (failed) return current;
                    if ( backtracking==0 ) {

                      	        if (current==null) {
                      	            current = factory.create(grammarAccess.getFieldDeclarationRule().getType().getClassifier());
                      	            associateNodeWithAstElement(currentNode.getParent(), current);
                      	        }
                      	        try {
                      	       		set(
                      	       			current, 
                      	       			"typedef",
                      	        		lv_typedef_3_0, 
                      	        		"FieldType", 
                      	        		currentNode);
                      	        } catch (ValueConverterException vce) {
                      				handleValueConverterException(vce);
                      	        }
                      	        currentNode = currentNode.getParent();
                      	    
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
                  	lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruleFieldDeclaration


    // $ANTLR start entryRuleModifiers
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:415:1: entryRuleModifiers returns [EObject current=null] : iv_ruleModifiers= ruleModifiers EOF ;
    public final EObject entryRuleModifiers() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleModifiers = null;


        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:416:2: (iv_ruleModifiers= ruleModifiers EOF )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:417:2: iv_ruleModifiers= ruleModifiers EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getModifiersRule(), currentNode); 
            }
            pushFollow(FOLLOW_ruleModifiers_in_entryRuleModifiers708);
            iv_ruleModifiers=ruleModifiers();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruleModifiers; 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleModifiers718); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuleModifiers


    // $ANTLR start ruleModifiers
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:424:1: ruleModifiers returns [EObject current=null] : ( ( ( ( ({...}? => ( ( (lv_unique_1_0= 'unique' ) ) ) ) | ({...}? => ( ( (lv_fixed_2_0= 'fixed' ) ) ) ) | ({...}? => ( ( ( (lv_notNull_3_0= 'not' ) ) 'null' ) ) ) | ({...}? => ( ( ( (lv_notEmpty_5_0= 'not' ) ) 'empty' ) ) ) )* ) ) ) ;
    public final EObject ruleModifiers() throws RecognitionException {
        EObject current = null;

        Token lv_unique_1_0=null;
        Token lv_fixed_2_0=null;
        Token lv_notNull_3_0=null;
        Token lv_notEmpty_5_0=null;

         EObject temp=null; setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:429:6: ( ( ( ( ( ({...}? => ( ( (lv_unique_1_0= 'unique' ) ) ) ) | ({...}? => ( ( (lv_fixed_2_0= 'fixed' ) ) ) ) | ({...}? => ( ( ( (lv_notNull_3_0= 'not' ) ) 'null' ) ) ) | ({...}? => ( ( ( (lv_notEmpty_5_0= 'not' ) ) 'empty' ) ) ) )* ) ) ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:430:1: ( ( ( ( ({...}? => ( ( (lv_unique_1_0= 'unique' ) ) ) ) | ({...}? => ( ( (lv_fixed_2_0= 'fixed' ) ) ) ) | ({...}? => ( ( ( (lv_notNull_3_0= 'not' ) ) 'null' ) ) ) | ({...}? => ( ( ( (lv_notEmpty_5_0= 'not' ) ) 'empty' ) ) ) )* ) ) )
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:430:1: ( ( ( ( ({...}? => ( ( (lv_unique_1_0= 'unique' ) ) ) ) | ({...}? => ( ( (lv_fixed_2_0= 'fixed' ) ) ) ) | ({...}? => ( ( ( (lv_notNull_3_0= 'not' ) ) 'null' ) ) ) | ({...}? => ( ( ( (lv_notEmpty_5_0= 'not' ) ) 'empty' ) ) ) )* ) ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:432:1: ( ( ( ({...}? => ( ( (lv_unique_1_0= 'unique' ) ) ) ) | ({...}? => ( ( (lv_fixed_2_0= 'fixed' ) ) ) ) | ({...}? => ( ( ( (lv_notNull_3_0= 'not' ) ) 'null' ) ) ) | ({...}? => ( ( ( (lv_notEmpty_5_0= 'not' ) ) 'empty' ) ) ) )* ) )
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:432:1: ( ( ( ({...}? => ( ( (lv_unique_1_0= 'unique' ) ) ) ) | ({...}? => ( ( (lv_fixed_2_0= 'fixed' ) ) ) ) | ({...}? => ( ( ( (lv_notNull_3_0= 'not' ) ) 'null' ) ) ) | ({...}? => ( ( ( (lv_notEmpty_5_0= 'not' ) ) 'empty' ) ) ) )* ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:433:2: ( ( ({...}? => ( ( (lv_unique_1_0= 'unique' ) ) ) ) | ({...}? => ( ( (lv_fixed_2_0= 'fixed' ) ) ) ) | ({...}? => ( ( ( (lv_notNull_3_0= 'not' ) ) 'null' ) ) ) | ({...}? => ( ( ( (lv_notEmpty_5_0= 'not' ) ) 'empty' ) ) ) )* )
            {
            if ( backtracking==0 ) {
               
              	  getUnorderedGroupHelper().enter(grammarAccess.getModifiersAccess().getUnorderedGroup());
              	
            }
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:436:2: ( ( ({...}? => ( ( (lv_unique_1_0= 'unique' ) ) ) ) | ({...}? => ( ( (lv_fixed_2_0= 'fixed' ) ) ) ) | ({...}? => ( ( ( (lv_notNull_3_0= 'not' ) ) 'null' ) ) ) | ({...}? => ( ( ( (lv_notEmpty_5_0= 'not' ) ) 'empty' ) ) ) )* )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:437:3: ( ({...}? => ( ( (lv_unique_1_0= 'unique' ) ) ) ) | ({...}? => ( ( (lv_fixed_2_0= 'fixed' ) ) ) ) | ({...}? => ( ( ( (lv_notNull_3_0= 'not' ) ) 'null' ) ) ) | ({...}? => ( ( ( (lv_notEmpty_5_0= 'not' ) ) 'empty' ) ) ) )*
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:437:3: ( ({...}? => ( ( (lv_unique_1_0= 'unique' ) ) ) ) | ({...}? => ( ( (lv_fixed_2_0= 'fixed' ) ) ) ) | ({...}? => ( ( ( (lv_notNull_3_0= 'not' ) ) 'null' ) ) ) | ({...}? => ( ( ( (lv_notEmpty_5_0= 'not' ) ) 'empty' ) ) ) )*
            loop9:
            do {
                int alt9=5;
                int LA9_0 = input.LA(1);

                if ( LA9_0 ==14 && getUnorderedGroupHelper().canSelect(grammarAccess.getModifiersAccess().getUnorderedGroup(), 0) ) {
                    alt9=1;
                }
                else if ( LA9_0 ==15 && getUnorderedGroupHelper().canSelect(grammarAccess.getModifiersAccess().getUnorderedGroup(), 1) ) {
                    alt9=2;
                }
                else if ( (LA9_0==16) ) {
                    int LA9_4 = input.LA(2);

                    if ( LA9_4 ==17 && getUnorderedGroupHelper().canSelect(grammarAccess.getModifiersAccess().getUnorderedGroup(), 2) ) {
                        alt9=3;
                    }
                    else if ( LA9_4 ==18 && getUnorderedGroupHelper().canSelect(grammarAccess.getModifiersAccess().getUnorderedGroup(), 3) ) {
                        alt9=4;
                    }


                }


                switch (alt9) {
            	case 1 :
            	    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:439:4: ({...}? => ( ( (lv_unique_1_0= 'unique' ) ) ) )
            	    {
            	    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:439:4: ({...}? => ( ( (lv_unique_1_0= 'unique' ) ) ) )
            	    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:440:5: {...}? => ( ( (lv_unique_1_0= 'unique' ) ) )
            	    {
            	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getModifiersAccess().getUnorderedGroup(), 0) ) {
            	        if (backtracking>0) {failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleModifiers", "getUnorderedGroupHelper().canSelect(grammarAccess.getModifiersAccess().getUnorderedGroup(), 0)");
            	    }
            	    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:440:104: ( ( (lv_unique_1_0= 'unique' ) ) )
            	    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:441:6: ( (lv_unique_1_0= 'unique' ) )
            	    {
            	    if ( backtracking==0 ) {
            	       
            	      	 				  getUnorderedGroupHelper().select(grammarAccess.getModifiersAccess().getUnorderedGroup(), 0);
            	      	 				
            	    }
            	    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:444:6: ( (lv_unique_1_0= 'unique' ) )
            	    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:445:1: (lv_unique_1_0= 'unique' )
            	    {
            	    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:445:1: (lv_unique_1_0= 'unique' )
            	    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:446:3: lv_unique_1_0= 'unique'
            	    {
            	    lv_unique_1_0=(Token)input.LT(1);
            	    match(input,14,FOLLOW_14_in_ruleModifiers802); if (failed) return current;
            	    if ( backtracking==0 ) {

            	              createLeafNode(grammarAccess.getModifiersAccess().getUniqueUniqueKeyword_0_0(), "unique"); 
            	          
            	    }
            	    if ( backtracking==0 ) {

            	      	        if (current==null) {
            	      	            current = factory.create(grammarAccess.getModifiersRule().getType().getClassifier());
            	      	            associateNodeWithAstElement(currentNode, current);
            	      	        }
            	      	        
            	      	        try {
            	      	       		set(current, "unique", true, "unique", lastConsumedNode);
            	      	        } catch (ValueConverterException vce) {
            	      				handleValueConverterException(vce);
            	      	        }
            	      	    
            	    }

            	    }


            	    }

            	    if ( backtracking==0 ) {
            	       
            	      	 				  getUnorderedGroupHelper().returnFromSelection(grammarAccess.getModifiersAccess().getUnorderedGroup());
            	      	 				
            	    }

            	    }


            	    }


            	    }
            	    break;
            	case 2 :
            	    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:472:4: ({...}? => ( ( (lv_fixed_2_0= 'fixed' ) ) ) )
            	    {
            	    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:472:4: ({...}? => ( ( (lv_fixed_2_0= 'fixed' ) ) ) )
            	    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:473:5: {...}? => ( ( (lv_fixed_2_0= 'fixed' ) ) )
            	    {
            	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getModifiersAccess().getUnorderedGroup(), 1) ) {
            	        if (backtracking>0) {failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleModifiers", "getUnorderedGroupHelper().canSelect(grammarAccess.getModifiersAccess().getUnorderedGroup(), 1)");
            	    }
            	    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:473:104: ( ( (lv_fixed_2_0= 'fixed' ) ) )
            	    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:474:6: ( (lv_fixed_2_0= 'fixed' ) )
            	    {
            	    if ( backtracking==0 ) {
            	       
            	      	 				  getUnorderedGroupHelper().select(grammarAccess.getModifiersAccess().getUnorderedGroup(), 1);
            	      	 				
            	    }
            	    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:477:6: ( (lv_fixed_2_0= 'fixed' ) )
            	    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:478:1: (lv_fixed_2_0= 'fixed' )
            	    {
            	    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:478:1: (lv_fixed_2_0= 'fixed' )
            	    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:479:3: lv_fixed_2_0= 'fixed'
            	    {
            	    lv_fixed_2_0=(Token)input.LT(1);
            	    match(input,15,FOLLOW_15_in_ruleModifiers883); if (failed) return current;
            	    if ( backtracking==0 ) {

            	              createLeafNode(grammarAccess.getModifiersAccess().getFixedFixedKeyword_1_0(), "fixed"); 
            	          
            	    }
            	    if ( backtracking==0 ) {

            	      	        if (current==null) {
            	      	            current = factory.create(grammarAccess.getModifiersRule().getType().getClassifier());
            	      	            associateNodeWithAstElement(currentNode, current);
            	      	        }
            	      	        
            	      	        try {
            	      	       		set(current, "fixed", true, "fixed", lastConsumedNode);
            	      	        } catch (ValueConverterException vce) {
            	      				handleValueConverterException(vce);
            	      	        }
            	      	    
            	    }

            	    }


            	    }

            	    if ( backtracking==0 ) {
            	       
            	      	 				  getUnorderedGroupHelper().returnFromSelection(grammarAccess.getModifiersAccess().getUnorderedGroup());
            	      	 				
            	    }

            	    }


            	    }


            	    }
            	    break;
            	case 3 :
            	    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:505:4: ({...}? => ( ( ( (lv_notNull_3_0= 'not' ) ) 'null' ) ) )
            	    {
            	    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:505:4: ({...}? => ( ( ( (lv_notNull_3_0= 'not' ) ) 'null' ) ) )
            	    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:506:5: {...}? => ( ( ( (lv_notNull_3_0= 'not' ) ) 'null' ) )
            	    {
            	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getModifiersAccess().getUnorderedGroup(), 2) ) {
            	        if (backtracking>0) {failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleModifiers", "getUnorderedGroupHelper().canSelect(grammarAccess.getModifiersAccess().getUnorderedGroup(), 2)");
            	    }
            	    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:506:104: ( ( ( (lv_notNull_3_0= 'not' ) ) 'null' ) )
            	    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:507:6: ( ( (lv_notNull_3_0= 'not' ) ) 'null' )
            	    {
            	    if ( backtracking==0 ) {
            	       
            	      	 				  getUnorderedGroupHelper().select(grammarAccess.getModifiersAccess().getUnorderedGroup(), 2);
            	      	 				
            	    }
            	    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:510:6: ( ( (lv_notNull_3_0= 'not' ) ) 'null' )
            	    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:510:7: ( (lv_notNull_3_0= 'not' ) ) 'null'
            	    {
            	    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:510:7: ( (lv_notNull_3_0= 'not' ) )
            	    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:511:1: (lv_notNull_3_0= 'not' )
            	    {
            	    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:511:1: (lv_notNull_3_0= 'not' )
            	    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:512:3: lv_notNull_3_0= 'not'
            	    {
            	    lv_notNull_3_0=(Token)input.LT(1);
            	    match(input,16,FOLLOW_16_in_ruleModifiers965); if (failed) return current;
            	    if ( backtracking==0 ) {

            	              createLeafNode(grammarAccess.getModifiersAccess().getNotNullNotKeyword_2_0_0(), "notNull"); 
            	          
            	    }
            	    if ( backtracking==0 ) {

            	      	        if (current==null) {
            	      	            current = factory.create(grammarAccess.getModifiersRule().getType().getClassifier());
            	      	            associateNodeWithAstElement(currentNode, current);
            	      	        }
            	      	        
            	      	        try {
            	      	       		set(current, "notNull", true, "not", lastConsumedNode);
            	      	        } catch (ValueConverterException vce) {
            	      				handleValueConverterException(vce);
            	      	        }
            	      	    
            	    }

            	    }


            	    }

            	    match(input,17,FOLLOW_17_in_ruleModifiers988); if (failed) return current;
            	    if ( backtracking==0 ) {

            	              createLeafNode(grammarAccess.getModifiersAccess().getNullKeyword_2_1(), null); 
            	          
            	    }

            	    }

            	    if ( backtracking==0 ) {
            	       
            	      	 				  getUnorderedGroupHelper().returnFromSelection(grammarAccess.getModifiersAccess().getUnorderedGroup());
            	      	 				
            	    }

            	    }


            	    }


            	    }
            	    break;
            	case 4 :
            	    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:542:4: ({...}? => ( ( ( (lv_notEmpty_5_0= 'not' ) ) 'empty' ) ) )
            	    {
            	    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:542:4: ({...}? => ( ( ( (lv_notEmpty_5_0= 'not' ) ) 'empty' ) ) )
            	    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:543:5: {...}? => ( ( ( (lv_notEmpty_5_0= 'not' ) ) 'empty' ) )
            	    {
            	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getModifiersAccess().getUnorderedGroup(), 3) ) {
            	        if (backtracking>0) {failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleModifiers", "getUnorderedGroupHelper().canSelect(grammarAccess.getModifiersAccess().getUnorderedGroup(), 3)");
            	    }
            	    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:543:104: ( ( ( (lv_notEmpty_5_0= 'not' ) ) 'empty' ) )
            	    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:544:6: ( ( (lv_notEmpty_5_0= 'not' ) ) 'empty' )
            	    {
            	    if ( backtracking==0 ) {
            	       
            	      	 				  getUnorderedGroupHelper().select(grammarAccess.getModifiersAccess().getUnorderedGroup(), 3);
            	      	 				
            	    }
            	    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:547:6: ( ( (lv_notEmpty_5_0= 'not' ) ) 'empty' )
            	    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:547:7: ( (lv_notEmpty_5_0= 'not' ) ) 'empty'
            	    {
            	    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:547:7: ( (lv_notEmpty_5_0= 'not' ) )
            	    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:548:1: (lv_notEmpty_5_0= 'not' )
            	    {
            	    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:548:1: (lv_notEmpty_5_0= 'not' )
            	    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:549:3: lv_notEmpty_5_0= 'not'
            	    {
            	    lv_notEmpty_5_0=(Token)input.LT(1);
            	    match(input,16,FOLLOW_16_in_ruleModifiers1058); if (failed) return current;
            	    if ( backtracking==0 ) {

            	              createLeafNode(grammarAccess.getModifiersAccess().getNotEmptyNotKeyword_3_0_0(), "notEmpty"); 
            	          
            	    }
            	    if ( backtracking==0 ) {

            	      	        if (current==null) {
            	      	            current = factory.create(grammarAccess.getModifiersRule().getType().getClassifier());
            	      	            associateNodeWithAstElement(currentNode, current);
            	      	        }
            	      	        
            	      	        try {
            	      	       		set(current, "notEmpty", true, "not", lastConsumedNode);
            	      	        } catch (ValueConverterException vce) {
            	      				handleValueConverterException(vce);
            	      	        }
            	      	    
            	    }

            	    }


            	    }

            	    match(input,18,FOLLOW_18_in_ruleModifiers1081); if (failed) return current;
            	    if ( backtracking==0 ) {

            	              createLeafNode(grammarAccess.getModifiersAccess().getEmptyKeyword_3_1(), null); 
            	          
            	    }

            	    }

            	    if ( backtracking==0 ) {
            	       
            	      	 				  getUnorderedGroupHelper().returnFromSelection(grammarAccess.getModifiersAccess().getUnorderedGroup());
            	      	 				
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop9;
                }
            } while (true);


            }


            }

            if ( backtracking==0 ) {
               
              	  getUnorderedGroupHelper().leave(grammarAccess.getModifiersAccess().getUnorderedGroup());
              	
            }

            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
                  	lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruleModifiers


    // $ANTLR start entryRuleFieldType
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:594:1: entryRuleFieldType returns [EObject current=null] : iv_ruleFieldType= ruleFieldType EOF ;
    public final EObject entryRuleFieldType() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleFieldType = null;


        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:595:2: (iv_ruleFieldType= ruleFieldType EOF )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:596:2: iv_ruleFieldType= ruleFieldType EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getFieldTypeRule(), currentNode); 
            }
            pushFollow(FOLLOW_ruleFieldType_in_entryRuleFieldType1156);
            iv_ruleFieldType=ruleFieldType();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruleFieldType; 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleFieldType1166); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuleFieldType


    // $ANTLR start ruleFieldType
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:603:1: ruleFieldType returns [EObject current=null] : (this_CharType_0= ruleCharType | this_CharEnum_1= ruleCharEnum | ( 'set' this_CharEnum_3= ruleCharEnum ) | this_IntEnum_4= ruleIntEnum | ( 'set' this_IntEnum_6= ruleIntEnum ) | ( () ( ( (lv_type_8_1= 'int' | lv_type_8_2= 'real' | lv_type_8_3= 'boolean' | lv_type_8_4= 'text' | lv_type_8_5= 'binary' | lv_type_8_6= 'file' | lv_type_8_7= 'date' ) ) ) ) | this_PointerType_9= rulePointerType | this_SetType_10= ruleSetType | ( ( RULE_ID ) ) ) ;
    public final EObject ruleFieldType() throws RecognitionException {
        EObject current = null;

        Token lv_type_8_1=null;
        Token lv_type_8_2=null;
        Token lv_type_8_3=null;
        Token lv_type_8_4=null;
        Token lv_type_8_5=null;
        Token lv_type_8_6=null;
        Token lv_type_8_7=null;
        EObject this_CharType_0 = null;

        EObject this_CharEnum_1 = null;

        EObject this_CharEnum_3 = null;

        EObject this_IntEnum_4 = null;

        EObject this_IntEnum_6 = null;

        EObject this_PointerType_9 = null;

        EObject this_SetType_10 = null;


         EObject temp=null; setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:608:6: ( (this_CharType_0= ruleCharType | this_CharEnum_1= ruleCharEnum | ( 'set' this_CharEnum_3= ruleCharEnum ) | this_IntEnum_4= ruleIntEnum | ( 'set' this_IntEnum_6= ruleIntEnum ) | ( () ( ( (lv_type_8_1= 'int' | lv_type_8_2= 'real' | lv_type_8_3= 'boolean' | lv_type_8_4= 'text' | lv_type_8_5= 'binary' | lv_type_8_6= 'file' | lv_type_8_7= 'date' ) ) ) ) | this_PointerType_9= rulePointerType | this_SetType_10= ruleSetType | ( ( RULE_ID ) ) ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:609:1: (this_CharType_0= ruleCharType | this_CharEnum_1= ruleCharEnum | ( 'set' this_CharEnum_3= ruleCharEnum ) | this_IntEnum_4= ruleIntEnum | ( 'set' this_IntEnum_6= ruleIntEnum ) | ( () ( ( (lv_type_8_1= 'int' | lv_type_8_2= 'real' | lv_type_8_3= 'boolean' | lv_type_8_4= 'text' | lv_type_8_5= 'binary' | lv_type_8_6= 'file' | lv_type_8_7= 'date' ) ) ) ) | this_PointerType_9= rulePointerType | this_SetType_10= ruleSetType | ( ( RULE_ID ) ) )
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:609:1: (this_CharType_0= ruleCharType | this_CharEnum_1= ruleCharEnum | ( 'set' this_CharEnum_3= ruleCharEnum ) | this_IntEnum_4= ruleIntEnum | ( 'set' this_IntEnum_6= ruleIntEnum ) | ( () ( ( (lv_type_8_1= 'int' | lv_type_8_2= 'real' | lv_type_8_3= 'boolean' | lv_type_8_4= 'text' | lv_type_8_5= 'binary' | lv_type_8_6= 'file' | lv_type_8_7= 'date' ) ) ) ) | this_PointerType_9= rulePointerType | this_SetType_10= ruleSetType | ( ( RULE_ID ) ) )
            int alt11=9;
            switch ( input.LA(1) ) {
            case 30:
                {
                int LA11_1 = input.LA(2);

                if ( (LA11_1==27) ) {
                    alt11=2;
                }
                else if ( (LA11_1==EOF||(LA11_1>=RULE_LINEBREAK && LA11_1<=RULE_FIELDCOMMENT)||LA11_1==32) ) {
                    alt11=1;
                }
                else {
                    if (backtracking>0) {failed=true; return current;}
                    NoViableAltException nvae =
                        new NoViableAltException("609:1: (this_CharType_0= ruleCharType | this_CharEnum_1= ruleCharEnum | ( 'set' this_CharEnum_3= ruleCharEnum ) | this_IntEnum_4= ruleIntEnum | ( 'set' this_IntEnum_6= ruleIntEnum ) | ( () ( ( (lv_type_8_1= 'int' | lv_type_8_2= 'real' | lv_type_8_3= 'boolean' | lv_type_8_4= 'text' | lv_type_8_5= 'binary' | lv_type_8_6= 'file' | lv_type_8_7= 'date' ) ) ) ) | this_PointerType_9= rulePointerType | this_SetType_10= ruleSetType | ( ( RULE_ID ) ) )", 11, 1, input);

                    throw nvae;
                }
                }
                break;
            case 19:
                {
                switch ( input.LA(2) ) {
                case 30:
                    {
                    int LA11_9 = input.LA(3);

                    if ( (LA11_9==27) ) {
                        alt11=3;
                    }
                    else if ( (LA11_9==EOF||(LA11_9>=RULE_LINEBREAK && LA11_9<=RULE_FIELDCOMMENT)||LA11_9==36) ) {
                        alt11=8;
                    }
                    else {
                        if (backtracking>0) {failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("609:1: (this_CharType_0= ruleCharType | this_CharEnum_1= ruleCharEnum | ( 'set' this_CharEnum_3= ruleCharEnum ) | this_IntEnum_4= ruleIntEnum | ( 'set' this_IntEnum_6= ruleIntEnum ) | ( () ( ( (lv_type_8_1= 'int' | lv_type_8_2= 'real' | lv_type_8_3= 'boolean' | lv_type_8_4= 'text' | lv_type_8_5= 'binary' | lv_type_8_6= 'file' | lv_type_8_7= 'date' ) ) ) ) | this_PointerType_9= rulePointerType | this_SetType_10= ruleSetType | ( ( RULE_ID ) ) )", 11, 9, input);

                        throw nvae;
                    }
                    }
                    break;
                case 20:
                    {
                    alt11=5;
                    }
                    break;
                case EOF:
                case RULE_LINEBREAK:
                case RULE_FIELDCOMMENT:
                case RULE_ID:
                case 23:
                case 25:
                case 26:
                case 38:
                case 40:
                case 59:
                case 91:
                case 179:
                case 191:
                case 194:
                case 197:
                case 209:
                case 221:
                    {
                    alt11=8;
                    }
                    break;
                default:
                    if (backtracking>0) {failed=true; return current;}
                    NoViableAltException nvae =
                        new NoViableAltException("609:1: (this_CharType_0= ruleCharType | this_CharEnum_1= ruleCharEnum | ( 'set' this_CharEnum_3= ruleCharEnum ) | this_IntEnum_4= ruleIntEnum | ( 'set' this_IntEnum_6= ruleIntEnum ) | ( () ( ( (lv_type_8_1= 'int' | lv_type_8_2= 'real' | lv_type_8_3= 'boolean' | lv_type_8_4= 'text' | lv_type_8_5= 'binary' | lv_type_8_6= 'file' | lv_type_8_7= 'date' ) ) ) ) | this_PointerType_9= rulePointerType | this_SetType_10= ruleSetType | ( ( RULE_ID ) ) )", 11, 2, input);

                    throw nvae;
                }

                }
                break;
            case 20:
                {
                int LA11_3 = input.LA(2);

                if ( (LA11_3==27) ) {
                    alt11=4;
                }
                else if ( (LA11_3==EOF||(LA11_3>=RULE_LINEBREAK && LA11_3<=RULE_FIELDCOMMENT)) ) {
                    alt11=6;
                }
                else {
                    if (backtracking>0) {failed=true; return current;}
                    NoViableAltException nvae =
                        new NoViableAltException("609:1: (this_CharType_0= ruleCharType | this_CharEnum_1= ruleCharEnum | ( 'set' this_CharEnum_3= ruleCharEnum ) | this_IntEnum_4= ruleIntEnum | ( 'set' this_IntEnum_6= ruleIntEnum ) | ( () ( ( (lv_type_8_1= 'int' | lv_type_8_2= 'real' | lv_type_8_3= 'boolean' | lv_type_8_4= 'text' | lv_type_8_5= 'binary' | lv_type_8_6= 'file' | lv_type_8_7= 'date' ) ) ) ) | this_PointerType_9= rulePointerType | this_SetType_10= ruleSetType | ( ( RULE_ID ) ) )", 11, 3, input);

                    throw nvae;
                }
                }
                break;
            case 21:
            case 22:
            case 23:
            case 24:
            case 25:
            case 26:
                {
                alt11=6;
                }
                break;
            case 34:
                {
                alt11=7;
                }
                break;
            case RULE_ID:
                {
                alt11=9;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("609:1: (this_CharType_0= ruleCharType | this_CharEnum_1= ruleCharEnum | ( 'set' this_CharEnum_3= ruleCharEnum ) | this_IntEnum_4= ruleIntEnum | ( 'set' this_IntEnum_6= ruleIntEnum ) | ( () ( ( (lv_type_8_1= 'int' | lv_type_8_2= 'real' | lv_type_8_3= 'boolean' | lv_type_8_4= 'text' | lv_type_8_5= 'binary' | lv_type_8_6= 'file' | lv_type_8_7= 'date' ) ) ) ) | this_PointerType_9= rulePointerType | this_SetType_10= ruleSetType | ( ( RULE_ID ) ) )", 11, 0, input);

                throw nvae;
            }

            switch (alt11) {
                case 1 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:610:2: this_CharType_0= ruleCharType
                    {
                    if ( backtracking==0 ) {
                       
                      	  /* */ 
                      	
                    }
                    if ( backtracking==0 ) {
                       
                              currentNode=createCompositeNode(grammarAccess.getFieldTypeAccess().getCharTypeParserRuleCall_0(), currentNode); 
                          
                    }
                    pushFollow(FOLLOW_ruleCharType_in_ruleFieldType1216);
                    this_CharType_0=ruleCharType();
                    _fsp--;
                    if (failed) return current;
                    if ( backtracking==0 ) {
                       
                              current = this_CharType_0; 
                              currentNode = currentNode.getParent();
                          
                    }

                    }
                    break;
                case 2 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:623:2: this_CharEnum_1= ruleCharEnum
                    {
                    if ( backtracking==0 ) {
                       
                      	  /* */ 
                      	
                    }
                    if ( backtracking==0 ) {
                       
                              currentNode=createCompositeNode(grammarAccess.getFieldTypeAccess().getCharEnumParserRuleCall_1(), currentNode); 
                          
                    }
                    pushFollow(FOLLOW_ruleCharEnum_in_ruleFieldType1246);
                    this_CharEnum_1=ruleCharEnum();
                    _fsp--;
                    if (failed) return current;
                    if ( backtracking==0 ) {
                       
                              current = this_CharEnum_1; 
                              currentNode = currentNode.getParent();
                          
                    }

                    }
                    break;
                case 3 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:635:6: ( 'set' this_CharEnum_3= ruleCharEnum )
                    {
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:635:6: ( 'set' this_CharEnum_3= ruleCharEnum )
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:635:8: 'set' this_CharEnum_3= ruleCharEnum
                    {
                    match(input,19,FOLLOW_19_in_ruleFieldType1262); if (failed) return current;
                    if ( backtracking==0 ) {

                              createLeafNode(grammarAccess.getFieldTypeAccess().getSetKeyword_2_0(), null); 
                          
                    }
                    if ( backtracking==0 ) {
                       
                      	  /* */ 
                      	
                    }
                    if ( backtracking==0 ) {
                       
                              currentNode=createCompositeNode(grammarAccess.getFieldTypeAccess().getCharEnumParserRuleCall_2_1(), currentNode); 
                          
                    }
                    pushFollow(FOLLOW_ruleCharEnum_in_ruleFieldType1287);
                    this_CharEnum_3=ruleCharEnum();
                    _fsp--;
                    if (failed) return current;
                    if ( backtracking==0 ) {
                       
                              current = this_CharEnum_3; 
                              currentNode = currentNode.getParent();
                          
                    }

                    }


                    }
                    break;
                case 4 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:653:2: this_IntEnum_4= ruleIntEnum
                    {
                    if ( backtracking==0 ) {
                       
                      	  /* */ 
                      	
                    }
                    if ( backtracking==0 ) {
                       
                              currentNode=createCompositeNode(grammarAccess.getFieldTypeAccess().getIntEnumParserRuleCall_3(), currentNode); 
                          
                    }
                    pushFollow(FOLLOW_ruleIntEnum_in_ruleFieldType1318);
                    this_IntEnum_4=ruleIntEnum();
                    _fsp--;
                    if (failed) return current;
                    if ( backtracking==0 ) {
                       
                              current = this_IntEnum_4; 
                              currentNode = currentNode.getParent();
                          
                    }

                    }
                    break;
                case 5 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:665:6: ( 'set' this_IntEnum_6= ruleIntEnum )
                    {
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:665:6: ( 'set' this_IntEnum_6= ruleIntEnum )
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:665:8: 'set' this_IntEnum_6= ruleIntEnum
                    {
                    match(input,19,FOLLOW_19_in_ruleFieldType1334); if (failed) return current;
                    if ( backtracking==0 ) {

                              createLeafNode(grammarAccess.getFieldTypeAccess().getSetKeyword_4_0(), null); 
                          
                    }
                    if ( backtracking==0 ) {
                       
                      	  /* */ 
                      	
                    }
                    if ( backtracking==0 ) {
                       
                              currentNode=createCompositeNode(grammarAccess.getFieldTypeAccess().getIntEnumParserRuleCall_4_1(), currentNode); 
                          
                    }
                    pushFollow(FOLLOW_ruleIntEnum_in_ruleFieldType1359);
                    this_IntEnum_6=ruleIntEnum();
                    _fsp--;
                    if (failed) return current;
                    if ( backtracking==0 ) {
                       
                              current = this_IntEnum_6; 
                              currentNode = currentNode.getParent();
                          
                    }

                    }


                    }
                    break;
                case 6 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:682:6: ( () ( ( (lv_type_8_1= 'int' | lv_type_8_2= 'real' | lv_type_8_3= 'boolean' | lv_type_8_4= 'text' | lv_type_8_5= 'binary' | lv_type_8_6= 'file' | lv_type_8_7= 'date' ) ) ) )
                    {
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:682:6: ( () ( ( (lv_type_8_1= 'int' | lv_type_8_2= 'real' | lv_type_8_3= 'boolean' | lv_type_8_4= 'text' | lv_type_8_5= 'binary' | lv_type_8_6= 'file' | lv_type_8_7= 'date' ) ) ) )
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:682:7: () ( ( (lv_type_8_1= 'int' | lv_type_8_2= 'real' | lv_type_8_3= 'boolean' | lv_type_8_4= 'text' | lv_type_8_5= 'binary' | lv_type_8_6= 'file' | lv_type_8_7= 'date' ) ) )
                    {
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:682:7: ()
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:683:2: 
                    {
                    if ( backtracking==0 ) {
                       
                      	  /* */ 
                      	
                    }
                    if ( backtracking==0 ) {
                       
                              temp=factory.create(grammarAccess.getFieldTypeAccess().getFieldTypeAction_5_0().getType().getClassifier());
                              current = temp; 
                              temp = null;
                              CompositeNode newNode = createCompositeNode(grammarAccess.getFieldTypeAccess().getFieldTypeAction_5_0(), currentNode.getParent());
                          newNode.getChildren().add(currentNode);
                          moveLookaheadInfo(currentNode, newNode);
                          currentNode = newNode; 
                              associateNodeWithAstElement(currentNode, current); 
                          
                    }

                    }

                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:696:2: ( ( (lv_type_8_1= 'int' | lv_type_8_2= 'real' | lv_type_8_3= 'boolean' | lv_type_8_4= 'text' | lv_type_8_5= 'binary' | lv_type_8_6= 'file' | lv_type_8_7= 'date' ) ) )
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:697:1: ( (lv_type_8_1= 'int' | lv_type_8_2= 'real' | lv_type_8_3= 'boolean' | lv_type_8_4= 'text' | lv_type_8_5= 'binary' | lv_type_8_6= 'file' | lv_type_8_7= 'date' ) )
                    {
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:697:1: ( (lv_type_8_1= 'int' | lv_type_8_2= 'real' | lv_type_8_3= 'boolean' | lv_type_8_4= 'text' | lv_type_8_5= 'binary' | lv_type_8_6= 'file' | lv_type_8_7= 'date' ) )
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:698:1: (lv_type_8_1= 'int' | lv_type_8_2= 'real' | lv_type_8_3= 'boolean' | lv_type_8_4= 'text' | lv_type_8_5= 'binary' | lv_type_8_6= 'file' | lv_type_8_7= 'date' )
                    {
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:698:1: (lv_type_8_1= 'int' | lv_type_8_2= 'real' | lv_type_8_3= 'boolean' | lv_type_8_4= 'text' | lv_type_8_5= 'binary' | lv_type_8_6= 'file' | lv_type_8_7= 'date' )
                    int alt10=7;
                    switch ( input.LA(1) ) {
                    case 20:
                        {
                        alt10=1;
                        }
                        break;
                    case 21:
                        {
                        alt10=2;
                        }
                        break;
                    case 22:
                        {
                        alt10=3;
                        }
                        break;
                    case 23:
                        {
                        alt10=4;
                        }
                        break;
                    case 24:
                        {
                        alt10=5;
                        }
                        break;
                    case 25:
                        {
                        alt10=6;
                        }
                        break;
                    case 26:
                        {
                        alt10=7;
                        }
                        break;
                    default:
                        if (backtracking>0) {failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("698:1: (lv_type_8_1= 'int' | lv_type_8_2= 'real' | lv_type_8_3= 'boolean' | lv_type_8_4= 'text' | lv_type_8_5= 'binary' | lv_type_8_6= 'file' | lv_type_8_7= 'date' )", 10, 0, input);

                        throw nvae;
                    }

                    switch (alt10) {
                        case 1 :
                            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:699:3: lv_type_8_1= 'int'
                            {
                            lv_type_8_1=(Token)input.LT(1);
                            match(input,20,FOLLOW_20_in_ruleFieldType1398); if (failed) return current;
                            if ( backtracking==0 ) {

                                      createLeafNode(grammarAccess.getFieldTypeAccess().getTypeIntKeyword_5_1_0_0(), "type"); 
                                  
                            }
                            if ( backtracking==0 ) {

                              	        if (current==null) {
                              	            current = factory.create(grammarAccess.getFieldTypeRule().getType().getClassifier());
                              	            associateNodeWithAstElement(currentNode, current);
                              	        }
                              	        
                              	        try {
                              	       		set(current, "type", lv_type_8_1, null, lastConsumedNode);
                              	        } catch (ValueConverterException vce) {
                              				handleValueConverterException(vce);
                              	        }
                              	    
                            }

                            }
                            break;
                        case 2 :
                            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:717:8: lv_type_8_2= 'real'
                            {
                            lv_type_8_2=(Token)input.LT(1);
                            match(input,21,FOLLOW_21_in_ruleFieldType1427); if (failed) return current;
                            if ( backtracking==0 ) {

                                      createLeafNode(grammarAccess.getFieldTypeAccess().getTypeRealKeyword_5_1_0_1(), "type"); 
                                  
                            }
                            if ( backtracking==0 ) {

                              	        if (current==null) {
                              	            current = factory.create(grammarAccess.getFieldTypeRule().getType().getClassifier());
                              	            associateNodeWithAstElement(currentNode, current);
                              	        }
                              	        
                              	        try {
                              	       		set(current, "type", lv_type_8_2, null, lastConsumedNode);
                              	        } catch (ValueConverterException vce) {
                              				handleValueConverterException(vce);
                              	        }
                              	    
                            }

                            }
                            break;
                        case 3 :
                            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:735:8: lv_type_8_3= 'boolean'
                            {
                            lv_type_8_3=(Token)input.LT(1);
                            match(input,22,FOLLOW_22_in_ruleFieldType1456); if (failed) return current;
                            if ( backtracking==0 ) {

                                      createLeafNode(grammarAccess.getFieldTypeAccess().getTypeBooleanKeyword_5_1_0_2(), "type"); 
                                  
                            }
                            if ( backtracking==0 ) {

                              	        if (current==null) {
                              	            current = factory.create(grammarAccess.getFieldTypeRule().getType().getClassifier());
                              	            associateNodeWithAstElement(currentNode, current);
                              	        }
                              	        
                              	        try {
                              	       		set(current, "type", lv_type_8_3, null, lastConsumedNode);
                              	        } catch (ValueConverterException vce) {
                              				handleValueConverterException(vce);
                              	        }
                              	    
                            }

                            }
                            break;
                        case 4 :
                            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:753:8: lv_type_8_4= 'text'
                            {
                            lv_type_8_4=(Token)input.LT(1);
                            match(input,23,FOLLOW_23_in_ruleFieldType1485); if (failed) return current;
                            if ( backtracking==0 ) {

                                      createLeafNode(grammarAccess.getFieldTypeAccess().getTypeTextKeyword_5_1_0_3(), "type"); 
                                  
                            }
                            if ( backtracking==0 ) {

                              	        if (current==null) {
                              	            current = factory.create(grammarAccess.getFieldTypeRule().getType().getClassifier());
                              	            associateNodeWithAstElement(currentNode, current);
                              	        }
                              	        
                              	        try {
                              	       		set(current, "type", lv_type_8_4, null, lastConsumedNode);
                              	        } catch (ValueConverterException vce) {
                              				handleValueConverterException(vce);
                              	        }
                              	    
                            }

                            }
                            break;
                        case 5 :
                            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:771:8: lv_type_8_5= 'binary'
                            {
                            lv_type_8_5=(Token)input.LT(1);
                            match(input,24,FOLLOW_24_in_ruleFieldType1514); if (failed) return current;
                            if ( backtracking==0 ) {

                                      createLeafNode(grammarAccess.getFieldTypeAccess().getTypeBinaryKeyword_5_1_0_4(), "type"); 
                                  
                            }
                            if ( backtracking==0 ) {

                              	        if (current==null) {
                              	            current = factory.create(grammarAccess.getFieldTypeRule().getType().getClassifier());
                              	            associateNodeWithAstElement(currentNode, current);
                              	        }
                              	        
                              	        try {
                              	       		set(current, "type", lv_type_8_5, null, lastConsumedNode);
                              	        } catch (ValueConverterException vce) {
                              				handleValueConverterException(vce);
                              	        }
                              	    
                            }

                            }
                            break;
                        case 6 :
                            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:789:8: lv_type_8_6= 'file'
                            {
                            lv_type_8_6=(Token)input.LT(1);
                            match(input,25,FOLLOW_25_in_ruleFieldType1543); if (failed) return current;
                            if ( backtracking==0 ) {

                                      createLeafNode(grammarAccess.getFieldTypeAccess().getTypeFileKeyword_5_1_0_5(), "type"); 
                                  
                            }
                            if ( backtracking==0 ) {

                              	        if (current==null) {
                              	            current = factory.create(grammarAccess.getFieldTypeRule().getType().getClassifier());
                              	            associateNodeWithAstElement(currentNode, current);
                              	        }
                              	        
                              	        try {
                              	       		set(current, "type", lv_type_8_6, null, lastConsumedNode);
                              	        } catch (ValueConverterException vce) {
                              				handleValueConverterException(vce);
                              	        }
                              	    
                            }

                            }
                            break;
                        case 7 :
                            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:807:8: lv_type_8_7= 'date'
                            {
                            lv_type_8_7=(Token)input.LT(1);
                            match(input,26,FOLLOW_26_in_ruleFieldType1572); if (failed) return current;
                            if ( backtracking==0 ) {

                                      createLeafNode(grammarAccess.getFieldTypeAccess().getTypeDateKeyword_5_1_0_6(), "type"); 
                                  
                            }
                            if ( backtracking==0 ) {

                              	        if (current==null) {
                              	            current = factory.create(grammarAccess.getFieldTypeRule().getType().getClassifier());
                              	            associateNodeWithAstElement(currentNode, current);
                              	        }
                              	        
                              	        try {
                              	       		set(current, "type", lv_type_8_7, null, lastConsumedNode);
                              	        } catch (ValueConverterException vce) {
                              				handleValueConverterException(vce);
                              	        }
                              	    
                            }

                            }
                            break;

                    }


                    }


                    }


                    }


                    }
                    break;
                case 7 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:830:2: this_PointerType_9= rulePointerType
                    {
                    if ( backtracking==0 ) {
                       
                      	  /* */ 
                      	
                    }
                    if ( backtracking==0 ) {
                       
                              currentNode=createCompositeNode(grammarAccess.getFieldTypeAccess().getPointerTypeParserRuleCall_6(), currentNode); 
                          
                    }
                    pushFollow(FOLLOW_rulePointerType_in_ruleFieldType1620);
                    this_PointerType_9=rulePointerType();
                    _fsp--;
                    if (failed) return current;
                    if ( backtracking==0 ) {
                       
                              current = this_PointerType_9; 
                              currentNode = currentNode.getParent();
                          
                    }

                    }
                    break;
                case 8 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:843:2: this_SetType_10= ruleSetType
                    {
                    if ( backtracking==0 ) {
                       
                      	  /* */ 
                      	
                    }
                    if ( backtracking==0 ) {
                       
                              currentNode=createCompositeNode(grammarAccess.getFieldTypeAccess().getSetTypeParserRuleCall_7(), currentNode); 
                          
                    }
                    pushFollow(FOLLOW_ruleSetType_in_ruleFieldType1650);
                    this_SetType_10=ruleSetType();
                    _fsp--;
                    if (failed) return current;
                    if ( backtracking==0 ) {
                       
                              current = this_SetType_10; 
                              currentNode = currentNode.getParent();
                          
                    }

                    }
                    break;
                case 9 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:855:6: ( ( RULE_ID ) )
                    {
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:855:6: ( ( RULE_ID ) )
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:856:1: ( RULE_ID )
                    {
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:856:1: ( RULE_ID )
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:857:3: RULE_ID
                    {
                    if ( backtracking==0 ) {
                       
                      		  /* */ 
                      		
                    }
                    if ( backtracking==0 ) {

                      			if (current==null) {
                      	            current = factory.create(grammarAccess.getFieldTypeRule().getType().getClassifier());
                      	            associateNodeWithAstElement(currentNode, current);
                      	        }
                              
                    }
                    match(input,RULE_ID,FOLLOW_RULE_ID_in_ruleFieldType1677); if (failed) return current;
                    if ( backtracking==0 ) {

                      		createLeafNode(grammarAccess.getFieldTypeAccess().getTypeDecTypeDeclarationCrossReference_8_0(), "typeDec"); 
                      	
                    }

                    }


                    }


                    }
                    break;

            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
                  	lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruleFieldType


    // $ANTLR start entryRuleIntEnum
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:880:1: entryRuleIntEnum returns [EObject current=null] : iv_ruleIntEnum= ruleIntEnum EOF ;
    public final EObject entryRuleIntEnum() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleIntEnum = null;


        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:881:2: (iv_ruleIntEnum= ruleIntEnum EOF )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:882:2: iv_ruleIntEnum= ruleIntEnum EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getIntEnumRule(), currentNode); 
            }
            pushFollow(FOLLOW_ruleIntEnum_in_entryRuleIntEnum1713);
            iv_ruleIntEnum=ruleIntEnum();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruleIntEnum; 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleIntEnum1723); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuleIntEnum


    // $ANTLR start ruleIntEnum
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:889:1: ruleIntEnum returns [EObject current=null] : ( ( (lv_name_0_0= 'int' ) ) '{' ( (lv_values_2_0= ruleEnumValue ) ) ( ',' ( (lv_values_4_0= ruleEnumValue ) ) )* '}' ) ;
    public final EObject ruleIntEnum() throws RecognitionException {
        EObject current = null;

        Token lv_name_0_0=null;
        EObject lv_values_2_0 = null;

        EObject lv_values_4_0 = null;


         EObject temp=null; setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:894:6: ( ( ( (lv_name_0_0= 'int' ) ) '{' ( (lv_values_2_0= ruleEnumValue ) ) ( ',' ( (lv_values_4_0= ruleEnumValue ) ) )* '}' ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:895:1: ( ( (lv_name_0_0= 'int' ) ) '{' ( (lv_values_2_0= ruleEnumValue ) ) ( ',' ( (lv_values_4_0= ruleEnumValue ) ) )* '}' )
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:895:1: ( ( (lv_name_0_0= 'int' ) ) '{' ( (lv_values_2_0= ruleEnumValue ) ) ( ',' ( (lv_values_4_0= ruleEnumValue ) ) )* '}' )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:895:2: ( (lv_name_0_0= 'int' ) ) '{' ( (lv_values_2_0= ruleEnumValue ) ) ( ',' ( (lv_values_4_0= ruleEnumValue ) ) )* '}'
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:895:2: ( (lv_name_0_0= 'int' ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:896:1: (lv_name_0_0= 'int' )
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:896:1: (lv_name_0_0= 'int' )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:897:3: lv_name_0_0= 'int'
            {
            lv_name_0_0=(Token)input.LT(1);
            match(input,20,FOLLOW_20_in_ruleIntEnum1766); if (failed) return current;
            if ( backtracking==0 ) {

                      createLeafNode(grammarAccess.getIntEnumAccess().getNameIntKeyword_0_0(), "name"); 
                  
            }
            if ( backtracking==0 ) {

              	        if (current==null) {
              	            current = factory.create(grammarAccess.getIntEnumRule().getType().getClassifier());
              	            associateNodeWithAstElement(currentNode, current);
              	        }
              	        
              	        try {
              	       		set(current, "name", lv_name_0_0, "int", lastConsumedNode);
              	        } catch (ValueConverterException vce) {
              				handleValueConverterException(vce);
              	        }
              	    
            }

            }


            }

            match(input,27,FOLLOW_27_in_ruleIntEnum1789); if (failed) return current;
            if ( backtracking==0 ) {

                      createLeafNode(grammarAccess.getIntEnumAccess().getLeftCurlyBracketKeyword_1(), null); 
                  
            }
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:920:1: ( (lv_values_2_0= ruleEnumValue ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:921:1: (lv_values_2_0= ruleEnumValue )
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:921:1: (lv_values_2_0= ruleEnumValue )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:922:3: lv_values_2_0= ruleEnumValue
            {
            if ( backtracking==0 ) {
               
              	        currentNode=createCompositeNode(grammarAccess.getIntEnumAccess().getValuesEnumValueParserRuleCall_2_0(), currentNode); 
              	    
            }
            pushFollow(FOLLOW_ruleEnumValue_in_ruleIntEnum1810);
            lv_values_2_0=ruleEnumValue();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {

              	        if (current==null) {
              	            current = factory.create(grammarAccess.getIntEnumRule().getType().getClassifier());
              	            associateNodeWithAstElement(currentNode.getParent(), current);
              	        }
              	        try {
              	       		add(
              	       			current, 
              	       			"values",
              	        		lv_values_2_0, 
              	        		"EnumValue", 
              	        		currentNode);
              	        } catch (ValueConverterException vce) {
              				handleValueConverterException(vce);
              	        }
              	        currentNode = currentNode.getParent();
              	    
            }

            }


            }

            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:944:2: ( ',' ( (lv_values_4_0= ruleEnumValue ) ) )*
            loop12:
            do {
                int alt12=2;
                int LA12_0 = input.LA(1);

                if ( (LA12_0==28) ) {
                    alt12=1;
                }


                switch (alt12) {
            	case 1 :
            	    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:944:4: ',' ( (lv_values_4_0= ruleEnumValue ) )
            	    {
            	    match(input,28,FOLLOW_28_in_ruleIntEnum1821); if (failed) return current;
            	    if ( backtracking==0 ) {

            	              createLeafNode(grammarAccess.getIntEnumAccess().getCommaKeyword_3_0(), null); 
            	          
            	    }
            	    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:948:1: ( (lv_values_4_0= ruleEnumValue ) )
            	    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:949:1: (lv_values_4_0= ruleEnumValue )
            	    {
            	    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:949:1: (lv_values_4_0= ruleEnumValue )
            	    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:950:3: lv_values_4_0= ruleEnumValue
            	    {
            	    if ( backtracking==0 ) {
            	       
            	      	        currentNode=createCompositeNode(grammarAccess.getIntEnumAccess().getValuesEnumValueParserRuleCall_3_1_0(), currentNode); 
            	      	    
            	    }
            	    pushFollow(FOLLOW_ruleEnumValue_in_ruleIntEnum1842);
            	    lv_values_4_0=ruleEnumValue();
            	    _fsp--;
            	    if (failed) return current;
            	    if ( backtracking==0 ) {

            	      	        if (current==null) {
            	      	            current = factory.create(grammarAccess.getIntEnumRule().getType().getClassifier());
            	      	            associateNodeWithAstElement(currentNode.getParent(), current);
            	      	        }
            	      	        try {
            	      	       		add(
            	      	       			current, 
            	      	       			"values",
            	      	        		lv_values_4_0, 
            	      	        		"EnumValue", 
            	      	        		currentNode);
            	      	        } catch (ValueConverterException vce) {
            	      				handleValueConverterException(vce);
            	      	        }
            	      	        currentNode = currentNode.getParent();
            	      	    
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop12;
                }
            } while (true);

            match(input,29,FOLLOW_29_in_ruleIntEnum1854); if (failed) return current;
            if ( backtracking==0 ) {

                      createLeafNode(grammarAccess.getIntEnumAccess().getRightCurlyBracketKeyword_4(), null); 
                  
            }

            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
                  	lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruleIntEnum


    // $ANTLR start entryRuleCharEnum
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:984:1: entryRuleCharEnum returns [EObject current=null] : iv_ruleCharEnum= ruleCharEnum EOF ;
    public final EObject entryRuleCharEnum() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleCharEnum = null;


        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:985:2: (iv_ruleCharEnum= ruleCharEnum EOF )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:986:2: iv_ruleCharEnum= ruleCharEnum EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getCharEnumRule(), currentNode); 
            }
            pushFollow(FOLLOW_ruleCharEnum_in_entryRuleCharEnum1890);
            iv_ruleCharEnum=ruleCharEnum();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruleCharEnum; 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleCharEnum1900); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuleCharEnum


    // $ANTLR start ruleCharEnum
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:993:1: ruleCharEnum returns [EObject current=null] : ( ( (lv_name_0_0= 'char' ) ) '{' ( (lv_values_2_0= RULE_STRING ) ) ( ',' ( (lv_values_4_0= RULE_STRING ) ) )* '}' ) ;
    public final EObject ruleCharEnum() throws RecognitionException {
        EObject current = null;

        Token lv_name_0_0=null;
        Token lv_values_2_0=null;
        Token lv_values_4_0=null;

         EObject temp=null; setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:998:6: ( ( ( (lv_name_0_0= 'char' ) ) '{' ( (lv_values_2_0= RULE_STRING ) ) ( ',' ( (lv_values_4_0= RULE_STRING ) ) )* '}' ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:999:1: ( ( (lv_name_0_0= 'char' ) ) '{' ( (lv_values_2_0= RULE_STRING ) ) ( ',' ( (lv_values_4_0= RULE_STRING ) ) )* '}' )
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:999:1: ( ( (lv_name_0_0= 'char' ) ) '{' ( (lv_values_2_0= RULE_STRING ) ) ( ',' ( (lv_values_4_0= RULE_STRING ) ) )* '}' )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:999:2: ( (lv_name_0_0= 'char' ) ) '{' ( (lv_values_2_0= RULE_STRING ) ) ( ',' ( (lv_values_4_0= RULE_STRING ) ) )* '}'
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:999:2: ( (lv_name_0_0= 'char' ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1000:1: (lv_name_0_0= 'char' )
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1000:1: (lv_name_0_0= 'char' )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1001:3: lv_name_0_0= 'char'
            {
            lv_name_0_0=(Token)input.LT(1);
            match(input,30,FOLLOW_30_in_ruleCharEnum1943); if (failed) return current;
            if ( backtracking==0 ) {

                      createLeafNode(grammarAccess.getCharEnumAccess().getNameCharKeyword_0_0(), "name"); 
                  
            }
            if ( backtracking==0 ) {

              	        if (current==null) {
              	            current = factory.create(grammarAccess.getCharEnumRule().getType().getClassifier());
              	            associateNodeWithAstElement(currentNode, current);
              	        }
              	        
              	        try {
              	       		set(current, "name", lv_name_0_0, "char", lastConsumedNode);
              	        } catch (ValueConverterException vce) {
              				handleValueConverterException(vce);
              	        }
              	    
            }

            }


            }

            match(input,27,FOLLOW_27_in_ruleCharEnum1966); if (failed) return current;
            if ( backtracking==0 ) {

                      createLeafNode(grammarAccess.getCharEnumAccess().getLeftCurlyBracketKeyword_1(), null); 
                  
            }
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1024:1: ( (lv_values_2_0= RULE_STRING ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1025:1: (lv_values_2_0= RULE_STRING )
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1025:1: (lv_values_2_0= RULE_STRING )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1026:3: lv_values_2_0= RULE_STRING
            {
            lv_values_2_0=(Token)input.LT(1);
            match(input,RULE_STRING,FOLLOW_RULE_STRING_in_ruleCharEnum1983); if (failed) return current;
            if ( backtracking==0 ) {

              			createLeafNode(grammarAccess.getCharEnumAccess().getValuesSTRINGTerminalRuleCall_2_0(), "values"); 
              		
            }
            if ( backtracking==0 ) {

              	        if (current==null) {
              	            current = factory.create(grammarAccess.getCharEnumRule().getType().getClassifier());
              	            associateNodeWithAstElement(currentNode, current);
              	        }
              	        try {
              	       		add(
              	       			current, 
              	       			"values",
              	        		lv_values_2_0, 
              	        		"STRING", 
              	        		lastConsumedNode);
              	        } catch (ValueConverterException vce) {
              				handleValueConverterException(vce);
              	        }
              	    
            }

            }


            }

            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1048:2: ( ',' ( (lv_values_4_0= RULE_STRING ) ) )*
            loop13:
            do {
                int alt13=2;
                int LA13_0 = input.LA(1);

                if ( (LA13_0==28) ) {
                    alt13=1;
                }


                switch (alt13) {
            	case 1 :
            	    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1048:4: ',' ( (lv_values_4_0= RULE_STRING ) )
            	    {
            	    match(input,28,FOLLOW_28_in_ruleCharEnum1999); if (failed) return current;
            	    if ( backtracking==0 ) {

            	              createLeafNode(grammarAccess.getCharEnumAccess().getCommaKeyword_3_0(), null); 
            	          
            	    }
            	    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1052:1: ( (lv_values_4_0= RULE_STRING ) )
            	    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1053:1: (lv_values_4_0= RULE_STRING )
            	    {
            	    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1053:1: (lv_values_4_0= RULE_STRING )
            	    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1054:3: lv_values_4_0= RULE_STRING
            	    {
            	    lv_values_4_0=(Token)input.LT(1);
            	    match(input,RULE_STRING,FOLLOW_RULE_STRING_in_ruleCharEnum2016); if (failed) return current;
            	    if ( backtracking==0 ) {

            	      			createLeafNode(grammarAccess.getCharEnumAccess().getValuesSTRINGTerminalRuleCall_3_1_0(), "values"); 
            	      		
            	    }
            	    if ( backtracking==0 ) {

            	      	        if (current==null) {
            	      	            current = factory.create(grammarAccess.getCharEnumRule().getType().getClassifier());
            	      	            associateNodeWithAstElement(currentNode, current);
            	      	        }
            	      	        try {
            	      	       		add(
            	      	       			current, 
            	      	       			"values",
            	      	        		lv_values_4_0, 
            	      	        		"STRING", 
            	      	        		lastConsumedNode);
            	      	        } catch (ValueConverterException vce) {
            	      				handleValueConverterException(vce);
            	      	        }
            	      	    
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop13;
                }
            } while (true);

            match(input,29,FOLLOW_29_in_ruleCharEnum2033); if (failed) return current;
            if ( backtracking==0 ) {

                      createLeafNode(grammarAccess.getCharEnumAccess().getRightCurlyBracketKeyword_4(), null); 
                  
            }

            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
                  	lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruleCharEnum


    // $ANTLR start entryRuleEnumValue
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1088:1: entryRuleEnumValue returns [EObject current=null] : iv_ruleEnumValue= ruleEnumValue EOF ;
    public final EObject entryRuleEnumValue() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleEnumValue = null;


        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1089:2: (iv_ruleEnumValue= ruleEnumValue EOF )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1090:2: iv_ruleEnumValue= ruleEnumValue EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getEnumValueRule(), currentNode); 
            }
            pushFollow(FOLLOW_ruleEnumValue_in_entryRuleEnumValue2069);
            iv_ruleEnumValue=ruleEnumValue();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruleEnumValue; 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleEnumValue2079); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuleEnumValue


    // $ANTLR start ruleEnumValue
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1097:1: ruleEnumValue returns [EObject current=null] : ( ( (lv_name_0_0= RULE_STRING ) ) '=' ( ( (lv_value_2_1= RULE_INT | lv_value_2_2= RULE_SIGNED_INT ) ) ) ( (lv_decpricated_3_0= 'deprecated' ) )? ) ;
    public final EObject ruleEnumValue() throws RecognitionException {
        EObject current = null;

        Token lv_name_0_0=null;
        Token lv_value_2_1=null;
        Token lv_value_2_2=null;
        Token lv_decpricated_3_0=null;

         EObject temp=null; setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1102:6: ( ( ( (lv_name_0_0= RULE_STRING ) ) '=' ( ( (lv_value_2_1= RULE_INT | lv_value_2_2= RULE_SIGNED_INT ) ) ) ( (lv_decpricated_3_0= 'deprecated' ) )? ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1103:1: ( ( (lv_name_0_0= RULE_STRING ) ) '=' ( ( (lv_value_2_1= RULE_INT | lv_value_2_2= RULE_SIGNED_INT ) ) ) ( (lv_decpricated_3_0= 'deprecated' ) )? )
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1103:1: ( ( (lv_name_0_0= RULE_STRING ) ) '=' ( ( (lv_value_2_1= RULE_INT | lv_value_2_2= RULE_SIGNED_INT ) ) ) ( (lv_decpricated_3_0= 'deprecated' ) )? )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1103:2: ( (lv_name_0_0= RULE_STRING ) ) '=' ( ( (lv_value_2_1= RULE_INT | lv_value_2_2= RULE_SIGNED_INT ) ) ) ( (lv_decpricated_3_0= 'deprecated' ) )?
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1103:2: ( (lv_name_0_0= RULE_STRING ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1104:1: (lv_name_0_0= RULE_STRING )
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1104:1: (lv_name_0_0= RULE_STRING )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1105:3: lv_name_0_0= RULE_STRING
            {
            lv_name_0_0=(Token)input.LT(1);
            match(input,RULE_STRING,FOLLOW_RULE_STRING_in_ruleEnumValue2121); if (failed) return current;
            if ( backtracking==0 ) {

              			createLeafNode(grammarAccess.getEnumValueAccess().getNameSTRINGTerminalRuleCall_0_0(), "name"); 
              		
            }
            if ( backtracking==0 ) {

              	        if (current==null) {
              	            current = factory.create(grammarAccess.getEnumValueRule().getType().getClassifier());
              	            associateNodeWithAstElement(currentNode, current);
              	        }
              	        try {
              	       		set(
              	       			current, 
              	       			"name",
              	        		lv_name_0_0, 
              	        		"STRING", 
              	        		lastConsumedNode);
              	        } catch (ValueConverterException vce) {
              				handleValueConverterException(vce);
              	        }
              	    
            }

            }


            }

            match(input,13,FOLLOW_13_in_ruleEnumValue2136); if (failed) return current;
            if ( backtracking==0 ) {

                      createLeafNode(grammarAccess.getEnumValueAccess().getEqualsSignKeyword_1(), null); 
                  
            }
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1131:1: ( ( (lv_value_2_1= RULE_INT | lv_value_2_2= RULE_SIGNED_INT ) ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1132:1: ( (lv_value_2_1= RULE_INT | lv_value_2_2= RULE_SIGNED_INT ) )
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1132:1: ( (lv_value_2_1= RULE_INT | lv_value_2_2= RULE_SIGNED_INT ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1133:1: (lv_value_2_1= RULE_INT | lv_value_2_2= RULE_SIGNED_INT )
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1133:1: (lv_value_2_1= RULE_INT | lv_value_2_2= RULE_SIGNED_INT )
            int alt14=2;
            int LA14_0 = input.LA(1);

            if ( (LA14_0==RULE_INT) ) {
                alt14=1;
            }
            else if ( (LA14_0==RULE_SIGNED_INT) ) {
                alt14=2;
            }
            else {
                if (backtracking>0) {failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("1133:1: (lv_value_2_1= RULE_INT | lv_value_2_2= RULE_SIGNED_INT )", 14, 0, input);

                throw nvae;
            }
            switch (alt14) {
                case 1 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1134:3: lv_value_2_1= RULE_INT
                    {
                    lv_value_2_1=(Token)input.LT(1);
                    match(input,RULE_INT,FOLLOW_RULE_INT_in_ruleEnumValue2155); if (failed) return current;
                    if ( backtracking==0 ) {

                      			createLeafNode(grammarAccess.getEnumValueAccess().getValueINTTerminalRuleCall_2_0_0(), "value"); 
                      		
                    }
                    if ( backtracking==0 ) {

                      	        if (current==null) {
                      	            current = factory.create(grammarAccess.getEnumValueRule().getType().getClassifier());
                      	            associateNodeWithAstElement(currentNode, current);
                      	        }
                      	        try {
                      	       		set(
                      	       			current, 
                      	       			"value",
                      	        		lv_value_2_1, 
                      	        		"INT", 
                      	        		lastConsumedNode);
                      	        } catch (ValueConverterException vce) {
                      				handleValueConverterException(vce);
                      	        }
                      	    
                    }

                    }
                    break;
                case 2 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1155:8: lv_value_2_2= RULE_SIGNED_INT
                    {
                    lv_value_2_2=(Token)input.LT(1);
                    match(input,RULE_SIGNED_INT,FOLLOW_RULE_SIGNED_INT_in_ruleEnumValue2175); if (failed) return current;
                    if ( backtracking==0 ) {

                      			createLeafNode(grammarAccess.getEnumValueAccess().getValueSIGNED_INTTerminalRuleCall_2_0_1(), "value"); 
                      		
                    }
                    if ( backtracking==0 ) {

                      	        if (current==null) {
                      	            current = factory.create(grammarAccess.getEnumValueRule().getType().getClassifier());
                      	            associateNodeWithAstElement(currentNode, current);
                      	        }
                      	        try {
                      	       		set(
                      	       			current, 
                      	       			"value",
                      	        		lv_value_2_2, 
                      	        		"SIGNED_INT", 
                      	        		lastConsumedNode);
                      	        } catch (ValueConverterException vce) {
                      				handleValueConverterException(vce);
                      	        }
                      	    
                    }

                    }
                    break;

            }


            }


            }

            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1179:2: ( (lv_decpricated_3_0= 'deprecated' ) )?
            int alt15=2;
            int LA15_0 = input.LA(1);

            if ( (LA15_0==31) ) {
                alt15=1;
            }
            switch (alt15) {
                case 1 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1180:1: (lv_decpricated_3_0= 'deprecated' )
                    {
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1180:1: (lv_decpricated_3_0= 'deprecated' )
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1181:3: lv_decpricated_3_0= 'deprecated'
                    {
                    lv_decpricated_3_0=(Token)input.LT(1);
                    match(input,31,FOLLOW_31_in_ruleEnumValue2201); if (failed) return current;
                    if ( backtracking==0 ) {

                              createLeafNode(grammarAccess.getEnumValueAccess().getDecpricatedDeprecatedKeyword_3_0(), "decpricated"); 
                          
                    }
                    if ( backtracking==0 ) {

                      	        if (current==null) {
                      	            current = factory.create(grammarAccess.getEnumValueRule().getType().getClassifier());
                      	            associateNodeWithAstElement(currentNode, current);
                      	        }
                      	        
                      	        try {
                      	       		set(current, "decpricated", true, "deprecated", lastConsumedNode);
                      	        } catch (ValueConverterException vce) {
                      				handleValueConverterException(vce);
                      	        }
                      	    
                    }

                    }


                    }
                    break;

            }


            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
                  	lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruleEnumValue


    // $ANTLR start entryRuleCharType
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1208:1: entryRuleCharType returns [EObject current=null] : iv_ruleCharType= ruleCharType EOF ;
    public final EObject entryRuleCharType() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleCharType = null;


        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1209:2: (iv_ruleCharType= ruleCharType EOF )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1210:2: iv_ruleCharType= ruleCharType EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getCharTypeRule(), currentNode); 
            }
            pushFollow(FOLLOW_ruleCharType_in_entryRuleCharType2251);
            iv_ruleCharType=ruleCharType();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruleCharType; 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleCharType2261); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuleCharType


    // $ANTLR start ruleCharType
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1217:1: ruleCharType returns [EObject current=null] : ( () 'char' ( '[' ( (lv_length_3_0= RULE_INT ) )? ']' )? ) ;
    public final EObject ruleCharType() throws RecognitionException {
        EObject current = null;

        Token lv_length_3_0=null;

         EObject temp=null; setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1222:6: ( ( () 'char' ( '[' ( (lv_length_3_0= RULE_INT ) )? ']' )? ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1223:1: ( () 'char' ( '[' ( (lv_length_3_0= RULE_INT ) )? ']' )? )
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1223:1: ( () 'char' ( '[' ( (lv_length_3_0= RULE_INT ) )? ']' )? )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1223:2: () 'char' ( '[' ( (lv_length_3_0= RULE_INT ) )? ']' )?
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1223:2: ()
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1224:2: 
            {
            if ( backtracking==0 ) {
               
              	  /* */ 
              	
            }
            if ( backtracking==0 ) {
               
                      temp=factory.create(grammarAccess.getCharTypeAccess().getCharTypeAction_0().getType().getClassifier());
                      current = temp; 
                      temp = null;
                      CompositeNode newNode = createCompositeNode(grammarAccess.getCharTypeAccess().getCharTypeAction_0(), currentNode.getParent());
                  newNode.getChildren().add(currentNode);
                  moveLookaheadInfo(currentNode, newNode);
                  currentNode = newNode; 
                      associateNodeWithAstElement(currentNode, current); 
                  
            }

            }

            match(input,30,FOLLOW_30_in_ruleCharType2308); if (failed) return current;
            if ( backtracking==0 ) {

                      createLeafNode(grammarAccess.getCharTypeAccess().getCharKeyword_1(), null); 
                  
            }
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1241:1: ( '[' ( (lv_length_3_0= RULE_INT ) )? ']' )?
            int alt17=2;
            int LA17_0 = input.LA(1);

            if ( (LA17_0==32) ) {
                alt17=1;
            }
            switch (alt17) {
                case 1 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1241:3: '[' ( (lv_length_3_0= RULE_INT ) )? ']'
                    {
                    match(input,32,FOLLOW_32_in_ruleCharType2319); if (failed) return current;
                    if ( backtracking==0 ) {

                              createLeafNode(grammarAccess.getCharTypeAccess().getLeftSquareBracketKeyword_2_0(), null); 
                          
                    }
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1245:1: ( (lv_length_3_0= RULE_INT ) )?
                    int alt16=2;
                    int LA16_0 = input.LA(1);

                    if ( (LA16_0==RULE_INT) ) {
                        alt16=1;
                    }
                    switch (alt16) {
                        case 1 :
                            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1246:1: (lv_length_3_0= RULE_INT )
                            {
                            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1246:1: (lv_length_3_0= RULE_INT )
                            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1247:3: lv_length_3_0= RULE_INT
                            {
                            lv_length_3_0=(Token)input.LT(1);
                            match(input,RULE_INT,FOLLOW_RULE_INT_in_ruleCharType2336); if (failed) return current;
                            if ( backtracking==0 ) {

                              			createLeafNode(grammarAccess.getCharTypeAccess().getLengthINTTerminalRuleCall_2_1_0(), "length"); 
                              		
                            }
                            if ( backtracking==0 ) {

                              	        if (current==null) {
                              	            current = factory.create(grammarAccess.getCharTypeRule().getType().getClassifier());
                              	            associateNodeWithAstElement(currentNode, current);
                              	        }
                              	        try {
                              	       		set(
                              	       			current, 
                              	       			"length",
                              	        		lv_length_3_0, 
                              	        		"INT", 
                              	        		lastConsumedNode);
                              	        } catch (ValueConverterException vce) {
                              				handleValueConverterException(vce);
                              	        }
                              	    
                            }

                            }


                            }
                            break;

                    }

                    match(input,33,FOLLOW_33_in_ruleCharType2352); if (failed) return current;
                    if ( backtracking==0 ) {

                              createLeafNode(grammarAccess.getCharTypeAccess().getRightSquareBracketKeyword_2_2(), null); 
                          
                    }

                    }
                    break;

            }


            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
                  	lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruleCharType


    // $ANTLR start entryRulePointerType
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1281:1: entryRulePointerType returns [EObject current=null] : iv_rulePointerType= rulePointerType EOF ;
    public final EObject entryRulePointerType() throws RecognitionException {
        EObject current = null;

        EObject iv_rulePointerType = null;


        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1282:2: (iv_rulePointerType= rulePointerType EOF )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1283:2: iv_rulePointerType= rulePointerType EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getPointerTypeRule(), currentNode); 
            }
            pushFollow(FOLLOW_rulePointerType_in_entryRulePointerType2390);
            iv_rulePointerType=rulePointerType();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_rulePointerType; 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRulePointerType2400); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRulePointerType


    // $ANTLR start rulePointerType
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1290:1: rulePointerType returns [EObject current=null] : ( () 'ptr' ( ( ruleType ) )? ) ;
    public final EObject rulePointerType() throws RecognitionException {
        EObject current = null;

         EObject temp=null; setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1295:6: ( ( () 'ptr' ( ( ruleType ) )? ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1296:1: ( () 'ptr' ( ( ruleType ) )? )
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1296:1: ( () 'ptr' ( ( ruleType ) )? )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1296:2: () 'ptr' ( ( ruleType ) )?
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1296:2: ()
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1297:2: 
            {
            if ( backtracking==0 ) {
               
              	  /* */ 
              	
            }
            if ( backtracking==0 ) {
               
                      temp=factory.create(grammarAccess.getPointerTypeAccess().getPointerTypeAction_0().getType().getClassifier());
                      current = temp; 
                      temp = null;
                      CompositeNode newNode = createCompositeNode(grammarAccess.getPointerTypeAccess().getPointerTypeAction_0(), currentNode.getParent());
                  newNode.getChildren().add(currentNode);
                  moveLookaheadInfo(currentNode, newNode);
                  currentNode = newNode; 
                      associateNodeWithAstElement(currentNode, current); 
                  
            }

            }

            match(input,34,FOLLOW_34_in_rulePointerType2447); if (failed) return current;
            if ( backtracking==0 ) {

                      createLeafNode(grammarAccess.getPointerTypeAccess().getPtrKeyword_1(), null); 
                  
            }
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1314:1: ( ( ruleType ) )?
            int alt18=2;
            int LA18_0 = input.LA(1);

            if ( (LA18_0==RULE_ID||LA18_0==23||(LA18_0>=25 && LA18_0<=26)||LA18_0==30||LA18_0==38||LA18_0==40||LA18_0==59||LA18_0==91||LA18_0==179||LA18_0==191||LA18_0==194||LA18_0==197||LA18_0==209||LA18_0==221) ) {
                alt18=1;
            }
            switch (alt18) {
                case 1 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1315:1: ( ruleType )
                    {
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1315:1: ( ruleType )
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1316:3: ruleType
                    {
                    if ( backtracking==0 ) {
                       
                      		  /* */ 
                      		
                    }
                    if ( backtracking==0 ) {

                      			if (current==null) {
                      	            current = factory.create(grammarAccess.getPointerTypeRule().getType().getClassifier());
                      	            associateNodeWithAstElement(currentNode, current);
                      	        }
                              
                    }
                    if ( backtracking==0 ) {
                       
                      	        currentNode=createCompositeNode(grammarAccess.getPointerTypeAccess().getRefDataDefinitionCrossReference_2_0(), currentNode); 
                      	    
                    }
                    pushFollow(FOLLOW_ruleType_in_rulePointerType2474);
                    ruleType();
                    _fsp--;
                    if (failed) return current;
                    if ( backtracking==0 ) {
                       
                      	        currentNode = currentNode.getParent();
                      	    
                    }

                    }


                    }
                    break;

            }


            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
                  	lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end rulePointerType


    // $ANTLR start entryRuleSetType
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1341:1: entryRuleSetType returns [EObject current=null] : iv_ruleSetType= ruleSetType EOF ;
    public final EObject entryRuleSetType() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleSetType = null;


        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1342:2: (iv_ruleSetType= ruleSetType EOF )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1343:2: iv_ruleSetType= ruleSetType EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getSetTypeRule(), currentNode); 
            }
            pushFollow(FOLLOW_ruleSetType_in_entryRuleSetType2511);
            iv_ruleSetType=ruleSetType();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruleSetType; 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleSetType2521); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuleSetType


    // $ANTLR start ruleSetType
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1350:1: ruleSetType returns [EObject current=null] : ( () 'set' ( ( ruleType ) )? ) ;
    public final EObject ruleSetType() throws RecognitionException {
        EObject current = null;

         EObject temp=null; setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1355:6: ( ( () 'set' ( ( ruleType ) )? ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1356:1: ( () 'set' ( ( ruleType ) )? )
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1356:1: ( () 'set' ( ( ruleType ) )? )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1356:2: () 'set' ( ( ruleType ) )?
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1356:2: ()
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1357:2: 
            {
            if ( backtracking==0 ) {
               
              	  /* */ 
              	
            }
            if ( backtracking==0 ) {
               
                      temp=factory.create(grammarAccess.getSetTypeAccess().getSetTypeAction_0().getType().getClassifier());
                      current = temp; 
                      temp = null;
                      CompositeNode newNode = createCompositeNode(grammarAccess.getSetTypeAccess().getSetTypeAction_0(), currentNode.getParent());
                  newNode.getChildren().add(currentNode);
                  moveLookaheadInfo(currentNode, newNode);
                  currentNode = newNode; 
                      associateNodeWithAstElement(currentNode, current); 
                  
            }

            }

            match(input,19,FOLLOW_19_in_ruleSetType2568); if (failed) return current;
            if ( backtracking==0 ) {

                      createLeafNode(grammarAccess.getSetTypeAccess().getSetKeyword_1(), null); 
                  
            }
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1374:1: ( ( ruleType ) )?
            int alt19=2;
            int LA19_0 = input.LA(1);

            if ( (LA19_0==RULE_ID||LA19_0==23||(LA19_0>=25 && LA19_0<=26)||LA19_0==30||LA19_0==38||LA19_0==40||LA19_0==59||LA19_0==91||LA19_0==179||LA19_0==191||LA19_0==194||LA19_0==197||LA19_0==209||LA19_0==221) ) {
                alt19=1;
            }
            switch (alt19) {
                case 1 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1375:1: ( ruleType )
                    {
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1375:1: ( ruleType )
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1376:3: ruleType
                    {
                    if ( backtracking==0 ) {
                       
                      		  /* */ 
                      		
                    }
                    if ( backtracking==0 ) {

                      			if (current==null) {
                      	            current = factory.create(grammarAccess.getSetTypeRule().getType().getClassifier());
                      	            associateNodeWithAstElement(currentNode, current);
                      	        }
                              
                    }
                    if ( backtracking==0 ) {
                       
                      	        currentNode=createCompositeNode(grammarAccess.getSetTypeAccess().getRefDataDefinitionCrossReference_2_0(), currentNode); 
                      	    
                    }
                    pushFollow(FOLLOW_ruleType_in_ruleSetType2595);
                    ruleType();
                    _fsp--;
                    if (failed) return current;
                    if ( backtracking==0 ) {
                       
                      	        currentNode = currentNode.getParent();
                      	    
                    }

                    }


                    }
                    break;

            }


            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
                  	lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruleSetType


    // $ANTLR start entryRuleSubFieldDeclaration
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1401:1: entryRuleSubFieldDeclaration returns [EObject current=null] : iv_ruleSubFieldDeclaration= ruleSubFieldDeclaration EOF ;
    public final EObject entryRuleSubFieldDeclaration() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleSubFieldDeclaration = null;


        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1402:2: (iv_ruleSubFieldDeclaration= ruleSubFieldDeclaration EOF )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1403:2: iv_ruleSubFieldDeclaration= ruleSubFieldDeclaration EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getSubFieldDeclarationRule(), currentNode); 
            }
            pushFollow(FOLLOW_ruleSubFieldDeclaration_in_entryRuleSubFieldDeclaration2632);
            iv_ruleSubFieldDeclaration=ruleSubFieldDeclaration();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruleSubFieldDeclaration; 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleSubFieldDeclaration2642); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuleSubFieldDeclaration


    // $ANTLR start ruleSubFieldDeclaration
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1410:1: ruleSubFieldDeclaration returns [EObject current=null] : ( ( ( RULE_ID ) ) '->' ( (lv_d_2_0= ruleDeclaration ) ) ) ;
    public final EObject ruleSubFieldDeclaration() throws RecognitionException {
        EObject current = null;

        EObject lv_d_2_0 = null;


         EObject temp=null; setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1415:6: ( ( ( ( RULE_ID ) ) '->' ( (lv_d_2_0= ruleDeclaration ) ) ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1416:1: ( ( ( RULE_ID ) ) '->' ( (lv_d_2_0= ruleDeclaration ) ) )
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1416:1: ( ( ( RULE_ID ) ) '->' ( (lv_d_2_0= ruleDeclaration ) ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1416:2: ( ( RULE_ID ) ) '->' ( (lv_d_2_0= ruleDeclaration ) )
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1416:2: ( ( RULE_ID ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1417:1: ( RULE_ID )
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1417:1: ( RULE_ID )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1418:3: RULE_ID
            {
            if ( backtracking==0 ) {
               
              		  /* */ 
              		
            }
            if ( backtracking==0 ) {

              			if (current==null) {
              	            current = factory.create(grammarAccess.getSubFieldDeclarationRule().getType().getClassifier());
              	            associateNodeWithAstElement(currentNode, current);
              	        }
                      
            }
            match(input,RULE_ID,FOLLOW_RULE_ID_in_ruleSubFieldDeclaration2689); if (failed) return current;
            if ( backtracking==0 ) {

              		createLeafNode(grammarAccess.getSubFieldDeclarationAccess().getSubFieldOfFieldDeclarationCrossReference_0_0(), "subFieldOf"); 
              	
            }

            }


            }

            match(input,35,FOLLOW_35_in_ruleSubFieldDeclaration2699); if (failed) return current;
            if ( backtracking==0 ) {

                      createLeafNode(grammarAccess.getSubFieldDeclarationAccess().getHyphenMinusGreaterThanSignKeyword_1(), null); 
                  
            }
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1437:1: ( (lv_d_2_0= ruleDeclaration ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1438:1: (lv_d_2_0= ruleDeclaration )
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1438:1: (lv_d_2_0= ruleDeclaration )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1439:3: lv_d_2_0= ruleDeclaration
            {
            if ( backtracking==0 ) {
               
              	        currentNode=createCompositeNode(grammarAccess.getSubFieldDeclarationAccess().getDDeclarationParserRuleCall_2_0(), currentNode); 
              	    
            }
            pushFollow(FOLLOW_ruleDeclaration_in_ruleSubFieldDeclaration2720);
            lv_d_2_0=ruleDeclaration();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {

              	        if (current==null) {
              	            current = factory.create(grammarAccess.getSubFieldDeclarationRule().getType().getClassifier());
              	            associateNodeWithAstElement(currentNode.getParent(), current);
              	        }
              	        try {
              	       		set(
              	       			current, 
              	       			"d",
              	        		lv_d_2_0, 
              	        		"Declaration", 
              	        		currentNode);
              	        } catch (ValueConverterException vce) {
              				handleValueConverterException(vce);
              	        }
              	        currentNode = currentNode.getParent();
              	    
            }

            }


            }


            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
                  	lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruleSubFieldDeclaration


    // $ANTLR start entryRuleType
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1469:1: entryRuleType returns [String current=null] : iv_ruleType= ruleType EOF ;
    public final String entryRuleType() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleType = null;


        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1470:2: (iv_ruleType= ruleType EOF )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1471:2: iv_ruleType= ruleType EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getTypeRule(), currentNode); 
            }
            pushFollow(FOLLOW_ruleType_in_entryRuleType2757);
            iv_ruleType=ruleType();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruleType.getText(); 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleType2768); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuleType


    // $ANTLR start ruleType
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1478:1: ruleType returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (this_IdOrKeyword_0= ruleIdOrKeyword (kw= '.' this_IdOrKeyword_2= ruleIdOrKeyword )* ) ;
    public final AntlrDatatypeRuleToken ruleType() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;
        AntlrDatatypeRuleToken this_IdOrKeyword_0 = null;

        AntlrDatatypeRuleToken this_IdOrKeyword_2 = null;


         setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1483:6: ( (this_IdOrKeyword_0= ruleIdOrKeyword (kw= '.' this_IdOrKeyword_2= ruleIdOrKeyword )* ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1484:1: (this_IdOrKeyword_0= ruleIdOrKeyword (kw= '.' this_IdOrKeyword_2= ruleIdOrKeyword )* )
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1484:1: (this_IdOrKeyword_0= ruleIdOrKeyword (kw= '.' this_IdOrKeyword_2= ruleIdOrKeyword )* )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1485:5: this_IdOrKeyword_0= ruleIdOrKeyword (kw= '.' this_IdOrKeyword_2= ruleIdOrKeyword )*
            {
            if ( backtracking==0 ) {
               
                      currentNode=createCompositeNode(grammarAccess.getTypeAccess().getIdOrKeywordParserRuleCall_0(), currentNode); 
                  
            }
            pushFollow(FOLLOW_ruleIdOrKeyword_in_ruleType2815);
            this_IdOrKeyword_0=ruleIdOrKeyword();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {

              		current.merge(this_IdOrKeyword_0);
                  
            }
            if ( backtracking==0 ) {
               
                      currentNode = currentNode.getParent();
                  
            }
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1495:1: (kw= '.' this_IdOrKeyword_2= ruleIdOrKeyword )*
            loop20:
            do {
                int alt20=2;
                int LA20_0 = input.LA(1);

                if ( (LA20_0==36) ) {
                    alt20=1;
                }


                switch (alt20) {
            	case 1 :
            	    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1496:2: kw= '.' this_IdOrKeyword_2= ruleIdOrKeyword
            	    {
            	    kw=(Token)input.LT(1);
            	    match(input,36,FOLLOW_36_in_ruleType2834); if (failed) return current;
            	    if ( backtracking==0 ) {

            	              current.merge(kw);
            	              createLeafNode(grammarAccess.getTypeAccess().getFullStopKeyword_1_0(), null); 
            	          
            	    }
            	    if ( backtracking==0 ) {
            	       
            	              currentNode=createCompositeNode(grammarAccess.getTypeAccess().getIdOrKeywordParserRuleCall_1_1(), currentNode); 
            	          
            	    }
            	    pushFollow(FOLLOW_ruleIdOrKeyword_in_ruleType2856);
            	    this_IdOrKeyword_2=ruleIdOrKeyword();
            	    _fsp--;
            	    if (failed) return current;
            	    if ( backtracking==0 ) {

            	      		current.merge(this_IdOrKeyword_2);
            	          
            	    }
            	    if ( backtracking==0 ) {
            	       
            	              currentNode = currentNode.getParent();
            	          
            	    }

            	    }
            	    break;

            	default :
            	    break loop20;
                }
            } while (true);


            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
              	    lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruleType


    // $ANTLR start entryRuleTitleDeclaration
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1520:1: entryRuleTitleDeclaration returns [EObject current=null] : iv_ruleTitleDeclaration= ruleTitleDeclaration EOF ;
    public final EObject entryRuleTitleDeclaration() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleTitleDeclaration = null;


        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1521:2: (iv_ruleTitleDeclaration= ruleTitleDeclaration EOF )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1522:2: iv_ruleTitleDeclaration= ruleTitleDeclaration EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getTitleDeclarationRule(), currentNode); 
            }
            pushFollow(FOLLOW_ruleTitleDeclaration_in_entryRuleTitleDeclaration2903);
            iv_ruleTitleDeclaration=ruleTitleDeclaration();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruleTitleDeclaration; 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleTitleDeclaration2913); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuleTitleDeclaration


    // $ANTLR start ruleTitleDeclaration
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1529:1: ruleTitleDeclaration returns [EObject current=null] : ( '!' 'title' '=' ( ( (lv_field_3_0= ruleFieldPath ) ) | ( (lv_function_4_0= ruleFunctionCall ) ) ) ) ;
    public final EObject ruleTitleDeclaration() throws RecognitionException {
        EObject current = null;

        EObject lv_field_3_0 = null;

        EObject lv_function_4_0 = null;


         EObject temp=null; setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1534:6: ( ( '!' 'title' '=' ( ( (lv_field_3_0= ruleFieldPath ) ) | ( (lv_function_4_0= ruleFunctionCall ) ) ) ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1535:1: ( '!' 'title' '=' ( ( (lv_field_3_0= ruleFieldPath ) ) | ( (lv_function_4_0= ruleFunctionCall ) ) ) )
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1535:1: ( '!' 'title' '=' ( ( (lv_field_3_0= ruleFieldPath ) ) | ( (lv_function_4_0= ruleFunctionCall ) ) ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1535:3: '!' 'title' '=' ( ( (lv_field_3_0= ruleFieldPath ) ) | ( (lv_function_4_0= ruleFunctionCall ) ) )
            {
            match(input,37,FOLLOW_37_in_ruleTitleDeclaration2948); if (failed) return current;
            if ( backtracking==0 ) {

                      createLeafNode(grammarAccess.getTitleDeclarationAccess().getExclamationMarkKeyword_0(), null); 
                  
            }
            match(input,38,FOLLOW_38_in_ruleTitleDeclaration2958); if (failed) return current;
            if ( backtracking==0 ) {

                      createLeafNode(grammarAccess.getTitleDeclarationAccess().getTitleKeyword_1(), null); 
                  
            }
            match(input,13,FOLLOW_13_in_ruleTitleDeclaration2968); if (failed) return current;
            if ( backtracking==0 ) {

                      createLeafNode(grammarAccess.getTitleDeclarationAccess().getEqualsSignKeyword_2(), null); 
                  
            }
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1547:1: ( ( (lv_field_3_0= ruleFieldPath ) ) | ( (lv_function_4_0= ruleFunctionCall ) ) )
            int alt21=2;
            int LA21_0 = input.LA(1);

            if ( (LA21_0==RULE_ID) ) {
                int LA21_1 = input.LA(2);

                if ( (LA21_1==EOF||(LA21_1>=RULE_LINEBREAK && LA21_1<=RULE_FIELDCOMMENT)||LA21_1==36) ) {
                    alt21=1;
                }
                else if ( (LA21_1==43) ) {
                    alt21=2;
                }
                else {
                    if (backtracking>0) {failed=true; return current;}
                    NoViableAltException nvae =
                        new NoViableAltException("1547:1: ( ( (lv_field_3_0= ruleFieldPath ) ) | ( (lv_function_4_0= ruleFunctionCall ) ) )", 21, 1, input);

                    throw nvae;
                }
            }
            else if ( (LA21_0==23||(LA21_0>=25 && LA21_0<=26)||LA21_0==30||LA21_0==38||LA21_0==40||LA21_0==59||LA21_0==91||LA21_0==179||LA21_0==191||LA21_0==194||LA21_0==197||LA21_0==209||LA21_0==221) ) {
                alt21=1;
            }
            else {
                if (backtracking>0) {failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("1547:1: ( ( (lv_field_3_0= ruleFieldPath ) ) | ( (lv_function_4_0= ruleFunctionCall ) ) )", 21, 0, input);

                throw nvae;
            }
            switch (alt21) {
                case 1 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1547:2: ( (lv_field_3_0= ruleFieldPath ) )
                    {
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1547:2: ( (lv_field_3_0= ruleFieldPath ) )
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1548:1: (lv_field_3_0= ruleFieldPath )
                    {
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1548:1: (lv_field_3_0= ruleFieldPath )
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1549:3: lv_field_3_0= ruleFieldPath
                    {
                    if ( backtracking==0 ) {
                       
                      	        currentNode=createCompositeNode(grammarAccess.getTitleDeclarationAccess().getFieldFieldPathParserRuleCall_3_0_0(), currentNode); 
                      	    
                    }
                    pushFollow(FOLLOW_ruleFieldPath_in_ruleTitleDeclaration2990);
                    lv_field_3_0=ruleFieldPath();
                    _fsp--;
                    if (failed) return current;
                    if ( backtracking==0 ) {

                      	        if (current==null) {
                      	            current = factory.create(grammarAccess.getTitleDeclarationRule().getType().getClassifier());
                      	            associateNodeWithAstElement(currentNode.getParent(), current);
                      	        }
                      	        try {
                      	       		set(
                      	       			current, 
                      	       			"field",
                      	        		lv_field_3_0, 
                      	        		"FieldPath", 
                      	        		currentNode);
                      	        } catch (ValueConverterException vce) {
                      				handleValueConverterException(vce);
                      	        }
                      	        currentNode = currentNode.getParent();
                      	    
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1572:6: ( (lv_function_4_0= ruleFunctionCall ) )
                    {
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1572:6: ( (lv_function_4_0= ruleFunctionCall ) )
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1573:1: (lv_function_4_0= ruleFunctionCall )
                    {
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1573:1: (lv_function_4_0= ruleFunctionCall )
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1574:3: lv_function_4_0= ruleFunctionCall
                    {
                    if ( backtracking==0 ) {
                       
                      	        currentNode=createCompositeNode(grammarAccess.getTitleDeclarationAccess().getFunctionFunctionCallParserRuleCall_3_1_0(), currentNode); 
                      	    
                    }
                    pushFollow(FOLLOW_ruleFunctionCall_in_ruleTitleDeclaration3017);
                    lv_function_4_0=ruleFunctionCall();
                    _fsp--;
                    if (failed) return current;
                    if ( backtracking==0 ) {

                      	        if (current==null) {
                      	            current = factory.create(grammarAccess.getTitleDeclarationRule().getType().getClassifier());
                      	            associateNodeWithAstElement(currentNode.getParent(), current);
                      	        }
                      	        try {
                      	       		set(
                      	       			current, 
                      	       			"function",
                      	        		lv_function_4_0, 
                      	        		"FunctionCall", 
                      	        		currentNode);
                      	        } catch (ValueConverterException vce) {
                      				handleValueConverterException(vce);
                      	        }
                      	        currentNode = currentNode.getParent();
                      	    
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
                  	lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruleTitleDeclaration


    // $ANTLR start entryRuleIncludeDeclaration
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1604:1: entryRuleIncludeDeclaration returns [EObject current=null] : iv_ruleIncludeDeclaration= ruleIncludeDeclaration EOF ;
    public final EObject entryRuleIncludeDeclaration() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleIncludeDeclaration = null;


        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1605:2: (iv_ruleIncludeDeclaration= ruleIncludeDeclaration EOF )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1606:2: iv_ruleIncludeDeclaration= ruleIncludeDeclaration EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getIncludeDeclarationRule(), currentNode); 
            }
            pushFollow(FOLLOW_ruleIncludeDeclaration_in_entryRuleIncludeDeclaration3054);
            iv_ruleIncludeDeclaration=ruleIncludeDeclaration();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruleIncludeDeclaration; 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleIncludeDeclaration3064); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuleIncludeDeclaration


    // $ANTLR start ruleIncludeDeclaration
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1613:1: ruleIncludeDeclaration returns [EObject current=null] : ( '!' 'include' '=' ( ( ruleType ) ) ) ;
    public final EObject ruleIncludeDeclaration() throws RecognitionException {
        EObject current = null;

         EObject temp=null; setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1618:6: ( ( '!' 'include' '=' ( ( ruleType ) ) ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1619:1: ( '!' 'include' '=' ( ( ruleType ) ) )
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1619:1: ( '!' 'include' '=' ( ( ruleType ) ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1619:3: '!' 'include' '=' ( ( ruleType ) )
            {
            match(input,37,FOLLOW_37_in_ruleIncludeDeclaration3099); if (failed) return current;
            if ( backtracking==0 ) {

                      createLeafNode(grammarAccess.getIncludeDeclarationAccess().getExclamationMarkKeyword_0(), null); 
                  
            }
            match(input,39,FOLLOW_39_in_ruleIncludeDeclaration3109); if (failed) return current;
            if ( backtracking==0 ) {

                      createLeafNode(grammarAccess.getIncludeDeclarationAccess().getIncludeKeyword_1(), null); 
                  
            }
            match(input,13,FOLLOW_13_in_ruleIncludeDeclaration3119); if (failed) return current;
            if ( backtracking==0 ) {

                      createLeafNode(grammarAccess.getIncludeDeclarationAccess().getEqualsSignKeyword_2(), null); 
                  
            }
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1631:1: ( ( ruleType ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1632:1: ( ruleType )
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1632:1: ( ruleType )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1633:3: ruleType
            {
            if ( backtracking==0 ) {
               
              		  /* */ 
              		
            }
            if ( backtracking==0 ) {

              			if (current==null) {
              	            current = factory.create(grammarAccess.getIncludeDeclarationRule().getType().getClassifier());
              	            associateNodeWithAstElement(currentNode, current);
              	        }
                      
            }
            if ( backtracking==0 ) {
               
              	        currentNode=createCompositeNode(grammarAccess.getIncludeDeclarationAccess().getImportedNamespaceDataDefinitionCrossReference_3_0(), currentNode); 
              	    
            }
            pushFollow(FOLLOW_ruleType_in_ruleIncludeDeclaration3146);
            ruleType();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               
              	        currentNode = currentNode.getParent();
              	    
            }

            }


            }


            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
                  	lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruleIncludeDeclaration


    // $ANTLR start entryRuleTypeDeclaration
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1658:1: entryRuleTypeDeclaration returns [EObject current=null] : iv_ruleTypeDeclaration= ruleTypeDeclaration EOF ;
    public final EObject entryRuleTypeDeclaration() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleTypeDeclaration = null;


        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1659:2: (iv_ruleTypeDeclaration= ruleTypeDeclaration EOF )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1660:2: iv_ruleTypeDeclaration= ruleTypeDeclaration EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getTypeDeclarationRule(), currentNode); 
            }
            pushFollow(FOLLOW_ruleTypeDeclaration_in_entryRuleTypeDeclaration3182);
            iv_ruleTypeDeclaration=ruleTypeDeclaration();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruleTypeDeclaration; 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleTypeDeclaration3192); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuleTypeDeclaration


    // $ANTLR start ruleTypeDeclaration
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1667:1: ruleTypeDeclaration returns [EObject current=null] : ( '!' 'type' '.' ( (lv_name_3_0= RULE_ID ) ) '=' ( (lv_fieldType_5_0= ruleFieldType ) ) ) ;
    public final EObject ruleTypeDeclaration() throws RecognitionException {
        EObject current = null;

        Token lv_name_3_0=null;
        EObject lv_fieldType_5_0 = null;


         EObject temp=null; setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1672:6: ( ( '!' 'type' '.' ( (lv_name_3_0= RULE_ID ) ) '=' ( (lv_fieldType_5_0= ruleFieldType ) ) ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1673:1: ( '!' 'type' '.' ( (lv_name_3_0= RULE_ID ) ) '=' ( (lv_fieldType_5_0= ruleFieldType ) ) )
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1673:1: ( '!' 'type' '.' ( (lv_name_3_0= RULE_ID ) ) '=' ( (lv_fieldType_5_0= ruleFieldType ) ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1673:3: '!' 'type' '.' ( (lv_name_3_0= RULE_ID ) ) '=' ( (lv_fieldType_5_0= ruleFieldType ) )
            {
            match(input,37,FOLLOW_37_in_ruleTypeDeclaration3227); if (failed) return current;
            if ( backtracking==0 ) {

                      createLeafNode(grammarAccess.getTypeDeclarationAccess().getExclamationMarkKeyword_0(), null); 
                  
            }
            match(input,40,FOLLOW_40_in_ruleTypeDeclaration3237); if (failed) return current;
            if ( backtracking==0 ) {

                      createLeafNode(grammarAccess.getTypeDeclarationAccess().getTypeKeyword_1(), null); 
                  
            }
            match(input,36,FOLLOW_36_in_ruleTypeDeclaration3247); if (failed) return current;
            if ( backtracking==0 ) {

                      createLeafNode(grammarAccess.getTypeDeclarationAccess().getFullStopKeyword_2(), null); 
                  
            }
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1685:1: ( (lv_name_3_0= RULE_ID ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1686:1: (lv_name_3_0= RULE_ID )
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1686:1: (lv_name_3_0= RULE_ID )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1687:3: lv_name_3_0= RULE_ID
            {
            lv_name_3_0=(Token)input.LT(1);
            match(input,RULE_ID,FOLLOW_RULE_ID_in_ruleTypeDeclaration3264); if (failed) return current;
            if ( backtracking==0 ) {

              			createLeafNode(grammarAccess.getTypeDeclarationAccess().getNameIDTerminalRuleCall_3_0(), "name"); 
              		
            }
            if ( backtracking==0 ) {

              	        if (current==null) {
              	            current = factory.create(grammarAccess.getTypeDeclarationRule().getType().getClassifier());
              	            associateNodeWithAstElement(currentNode, current);
              	        }
              	        try {
              	       		set(
              	       			current, 
              	       			"name",
              	        		lv_name_3_0, 
              	        		"ID", 
              	        		lastConsumedNode);
              	        } catch (ValueConverterException vce) {
              				handleValueConverterException(vce);
              	        }
              	    
            }

            }


            }

            match(input,13,FOLLOW_13_in_ruleTypeDeclaration3279); if (failed) return current;
            if ( backtracking==0 ) {

                      createLeafNode(grammarAccess.getTypeDeclarationAccess().getEqualsSignKeyword_4(), null); 
                  
            }
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1713:1: ( (lv_fieldType_5_0= ruleFieldType ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1714:1: (lv_fieldType_5_0= ruleFieldType )
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1714:1: (lv_fieldType_5_0= ruleFieldType )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1715:3: lv_fieldType_5_0= ruleFieldType
            {
            if ( backtracking==0 ) {
               
              	        currentNode=createCompositeNode(grammarAccess.getTypeDeclarationAccess().getFieldTypeFieldTypeParserRuleCall_5_0(), currentNode); 
              	    
            }
            pushFollow(FOLLOW_ruleFieldType_in_ruleTypeDeclaration3300);
            lv_fieldType_5_0=ruleFieldType();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {

              	        if (current==null) {
              	            current = factory.create(grammarAccess.getTypeDeclarationRule().getType().getClassifier());
              	            associateNodeWithAstElement(currentNode.getParent(), current);
              	        }
              	        try {
              	       		set(
              	       			current, 
              	       			"fieldType",
              	        		lv_fieldType_5_0, 
              	        		"FieldType", 
              	        		currentNode);
              	        } catch (ValueConverterException vce) {
              				handleValueConverterException(vce);
              	        }
              	        currentNode = currentNode.getParent();
              	    
            }

            }


            }


            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
                  	lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruleTypeDeclaration


    // $ANTLR start entryRuleValidationRuleDeclaration
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1745:1: entryRuleValidationRuleDeclaration returns [EObject current=null] : iv_ruleValidationRuleDeclaration= ruleValidationRuleDeclaration EOF ;
    public final EObject entryRuleValidationRuleDeclaration() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleValidationRuleDeclaration = null;


        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1746:2: (iv_ruleValidationRuleDeclaration= ruleValidationRuleDeclaration EOF )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1747:2: iv_ruleValidationRuleDeclaration= ruleValidationRuleDeclaration EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getValidationRuleDeclarationRule(), currentNode); 
            }
            pushFollow(FOLLOW_ruleValidationRuleDeclaration_in_entryRuleValidationRuleDeclaration3336);
            iv_ruleValidationRuleDeclaration=ruleValidationRuleDeclaration();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruleValidationRuleDeclaration; 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleValidationRuleDeclaration3346); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuleValidationRuleDeclaration


    // $ANTLR start ruleValidationRuleDeclaration
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1754:1: ruleValidationRuleDeclaration returns [EObject current=null] : ( (this_RangeValidationRuleDeclaration_0= ruleRangeValidationRuleDeclaration | this_UniquenessValidationRuleDeclaration_1= ruleUniquenessValidationRuleDeclaration | this_ComparisonValidationRuleDeclaration_2= ruleComparisonValidationRuleDeclaration | this_RegexValidationRuleDeclaration_3= ruleRegexValidationRuleDeclaration ) ( (lv_errorMessage_4_0= ruleErrorMessage ) ) ) ;
    public final EObject ruleValidationRuleDeclaration() throws RecognitionException {
        EObject current = null;

        EObject this_RangeValidationRuleDeclaration_0 = null;

        EObject this_UniquenessValidationRuleDeclaration_1 = null;

        EObject this_ComparisonValidationRuleDeclaration_2 = null;

        EObject this_RegexValidationRuleDeclaration_3 = null;

        EObject lv_errorMessage_4_0 = null;


         EObject temp=null; setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1759:6: ( ( (this_RangeValidationRuleDeclaration_0= ruleRangeValidationRuleDeclaration | this_UniquenessValidationRuleDeclaration_1= ruleUniquenessValidationRuleDeclaration | this_ComparisonValidationRuleDeclaration_2= ruleComparisonValidationRuleDeclaration | this_RegexValidationRuleDeclaration_3= ruleRegexValidationRuleDeclaration ) ( (lv_errorMessage_4_0= ruleErrorMessage ) ) ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1760:1: ( (this_RangeValidationRuleDeclaration_0= ruleRangeValidationRuleDeclaration | this_UniquenessValidationRuleDeclaration_1= ruleUniquenessValidationRuleDeclaration | this_ComparisonValidationRuleDeclaration_2= ruleComparisonValidationRuleDeclaration | this_RegexValidationRuleDeclaration_3= ruleRegexValidationRuleDeclaration ) ( (lv_errorMessage_4_0= ruleErrorMessage ) ) )
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1760:1: ( (this_RangeValidationRuleDeclaration_0= ruleRangeValidationRuleDeclaration | this_UniquenessValidationRuleDeclaration_1= ruleUniquenessValidationRuleDeclaration | this_ComparisonValidationRuleDeclaration_2= ruleComparisonValidationRuleDeclaration | this_RegexValidationRuleDeclaration_3= ruleRegexValidationRuleDeclaration ) ( (lv_errorMessage_4_0= ruleErrorMessage ) ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1760:2: (this_RangeValidationRuleDeclaration_0= ruleRangeValidationRuleDeclaration | this_UniquenessValidationRuleDeclaration_1= ruleUniquenessValidationRuleDeclaration | this_ComparisonValidationRuleDeclaration_2= ruleComparisonValidationRuleDeclaration | this_RegexValidationRuleDeclaration_3= ruleRegexValidationRuleDeclaration ) ( (lv_errorMessage_4_0= ruleErrorMessage ) )
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1760:2: (this_RangeValidationRuleDeclaration_0= ruleRangeValidationRuleDeclaration | this_UniquenessValidationRuleDeclaration_1= ruleUniquenessValidationRuleDeclaration | this_ComparisonValidationRuleDeclaration_2= ruleComparisonValidationRuleDeclaration | this_RegexValidationRuleDeclaration_3= ruleRegexValidationRuleDeclaration )
            int alt22=4;
            switch ( input.LA(1) ) {
            case 58:
            case 59:
                {
                alt22=1;
                }
                break;
            case 14:
                {
                alt22=2;
                }
                break;
            case 41:
                {
                alt22=3;
                }
                break;
            case 60:
                {
                alt22=4;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("1760:2: (this_RangeValidationRuleDeclaration_0= ruleRangeValidationRuleDeclaration | this_UniquenessValidationRuleDeclaration_1= ruleUniquenessValidationRuleDeclaration | this_ComparisonValidationRuleDeclaration_2= ruleComparisonValidationRuleDeclaration | this_RegexValidationRuleDeclaration_3= ruleRegexValidationRuleDeclaration )", 22, 0, input);

                throw nvae;
            }

            switch (alt22) {
                case 1 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1761:2: this_RangeValidationRuleDeclaration_0= ruleRangeValidationRuleDeclaration
                    {
                    if ( backtracking==0 ) {
                       
                      	  /* */ 
                      	
                    }
                    if ( backtracking==0 ) {
                       
                              currentNode=createCompositeNode(grammarAccess.getValidationRuleDeclarationAccess().getRangeValidationRuleDeclarationParserRuleCall_0_0(), currentNode); 
                          
                    }
                    pushFollow(FOLLOW_ruleRangeValidationRuleDeclaration_in_ruleValidationRuleDeclaration3397);
                    this_RangeValidationRuleDeclaration_0=ruleRangeValidationRuleDeclaration();
                    _fsp--;
                    if (failed) return current;
                    if ( backtracking==0 ) {
                       
                              current = this_RangeValidationRuleDeclaration_0; 
                              currentNode = currentNode.getParent();
                          
                    }

                    }
                    break;
                case 2 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1774:2: this_UniquenessValidationRuleDeclaration_1= ruleUniquenessValidationRuleDeclaration
                    {
                    if ( backtracking==0 ) {
                       
                      	  /* */ 
                      	
                    }
                    if ( backtracking==0 ) {
                       
                              currentNode=createCompositeNode(grammarAccess.getValidationRuleDeclarationAccess().getUniquenessValidationRuleDeclarationParserRuleCall_0_1(), currentNode); 
                          
                    }
                    pushFollow(FOLLOW_ruleUniquenessValidationRuleDeclaration_in_ruleValidationRuleDeclaration3427);
                    this_UniquenessValidationRuleDeclaration_1=ruleUniquenessValidationRuleDeclaration();
                    _fsp--;
                    if (failed) return current;
                    if ( backtracking==0 ) {
                       
                              current = this_UniquenessValidationRuleDeclaration_1; 
                              currentNode = currentNode.getParent();
                          
                    }

                    }
                    break;
                case 3 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1787:2: this_ComparisonValidationRuleDeclaration_2= ruleComparisonValidationRuleDeclaration
                    {
                    if ( backtracking==0 ) {
                       
                      	  /* */ 
                      	
                    }
                    if ( backtracking==0 ) {
                       
                              currentNode=createCompositeNode(grammarAccess.getValidationRuleDeclarationAccess().getComparisonValidationRuleDeclarationParserRuleCall_0_2(), currentNode); 
                          
                    }
                    pushFollow(FOLLOW_ruleComparisonValidationRuleDeclaration_in_ruleValidationRuleDeclaration3457);
                    this_ComparisonValidationRuleDeclaration_2=ruleComparisonValidationRuleDeclaration();
                    _fsp--;
                    if (failed) return current;
                    if ( backtracking==0 ) {
                       
                              current = this_ComparisonValidationRuleDeclaration_2; 
                              currentNode = currentNode.getParent();
                          
                    }

                    }
                    break;
                case 4 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1800:2: this_RegexValidationRuleDeclaration_3= ruleRegexValidationRuleDeclaration
                    {
                    if ( backtracking==0 ) {
                       
                      	  /* */ 
                      	
                    }
                    if ( backtracking==0 ) {
                       
                              currentNode=createCompositeNode(grammarAccess.getValidationRuleDeclarationAccess().getRegexValidationRuleDeclarationParserRuleCall_0_3(), currentNode); 
                          
                    }
                    pushFollow(FOLLOW_ruleRegexValidationRuleDeclaration_in_ruleValidationRuleDeclaration3487);
                    this_RegexValidationRuleDeclaration_3=ruleRegexValidationRuleDeclaration();
                    _fsp--;
                    if (failed) return current;
                    if ( backtracking==0 ) {
                       
                              current = this_RegexValidationRuleDeclaration_3; 
                              currentNode = currentNode.getParent();
                          
                    }

                    }
                    break;

            }

            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1811:2: ( (lv_errorMessage_4_0= ruleErrorMessage ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1812:1: (lv_errorMessage_4_0= ruleErrorMessage )
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1812:1: (lv_errorMessage_4_0= ruleErrorMessage )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1813:3: lv_errorMessage_4_0= ruleErrorMessage
            {
            if ( backtracking==0 ) {
               
              	        currentNode=createCompositeNode(grammarAccess.getValidationRuleDeclarationAccess().getErrorMessageErrorMessageParserRuleCall_1_0(), currentNode); 
              	    
            }
            pushFollow(FOLLOW_ruleErrorMessage_in_ruleValidationRuleDeclaration3508);
            lv_errorMessage_4_0=ruleErrorMessage();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {

              	        if (current==null) {
              	            current = factory.create(grammarAccess.getValidationRuleDeclarationRule().getType().getClassifier());
              	            associateNodeWithAstElement(currentNode.getParent(), current);
              	        }
              	        try {
              	       		set(
              	       			current, 
              	       			"errorMessage",
              	        		lv_errorMessage_4_0, 
              	        		"ErrorMessage", 
              	        		currentNode);
              	        } catch (ValueConverterException vce) {
              				handleValueConverterException(vce);
              	        }
              	        currentNode = currentNode.getParent();
              	    
            }

            }


            }


            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
                  	lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruleValidationRuleDeclaration


    // $ANTLR start entryRuleComparisonValidationRuleDeclaration
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1843:1: entryRuleComparisonValidationRuleDeclaration returns [EObject current=null] : iv_ruleComparisonValidationRuleDeclaration= ruleComparisonValidationRuleDeclaration EOF ;
    public final EObject entryRuleComparisonValidationRuleDeclaration() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleComparisonValidationRuleDeclaration = null;


        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1844:2: (iv_ruleComparisonValidationRuleDeclaration= ruleComparisonValidationRuleDeclaration EOF )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1845:2: iv_ruleComparisonValidationRuleDeclaration= ruleComparisonValidationRuleDeclaration EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getComparisonValidationRuleDeclarationRule(), currentNode); 
            }
            pushFollow(FOLLOW_ruleComparisonValidationRuleDeclaration_in_entryRuleComparisonValidationRuleDeclaration3544);
            iv_ruleComparisonValidationRuleDeclaration=ruleComparisonValidationRuleDeclaration();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruleComparisonValidationRuleDeclaration; 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleComparisonValidationRuleDeclaration3554); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuleComparisonValidationRuleDeclaration


    // $ANTLR start ruleComparisonValidationRuleDeclaration
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1852:1: ruleComparisonValidationRuleDeclaration returns [EObject current=null] : ( ( (lv_name_0_0= 'compare' ) ) ( (lv_args_1_0= ruleFunctionArguments ) ) '{' ( (lv_comparisonExp_3_0= ruleComparisonExpression ) ) '}' ) ;
    public final EObject ruleComparisonValidationRuleDeclaration() throws RecognitionException {
        EObject current = null;

        Token lv_name_0_0=null;
        EObject lv_args_1_0 = null;

        EObject lv_comparisonExp_3_0 = null;


         EObject temp=null; setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1857:6: ( ( ( (lv_name_0_0= 'compare' ) ) ( (lv_args_1_0= ruleFunctionArguments ) ) '{' ( (lv_comparisonExp_3_0= ruleComparisonExpression ) ) '}' ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1858:1: ( ( (lv_name_0_0= 'compare' ) ) ( (lv_args_1_0= ruleFunctionArguments ) ) '{' ( (lv_comparisonExp_3_0= ruleComparisonExpression ) ) '}' )
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1858:1: ( ( (lv_name_0_0= 'compare' ) ) ( (lv_args_1_0= ruleFunctionArguments ) ) '{' ( (lv_comparisonExp_3_0= ruleComparisonExpression ) ) '}' )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1858:2: ( (lv_name_0_0= 'compare' ) ) ( (lv_args_1_0= ruleFunctionArguments ) ) '{' ( (lv_comparisonExp_3_0= ruleComparisonExpression ) ) '}'
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1858:2: ( (lv_name_0_0= 'compare' ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1859:1: (lv_name_0_0= 'compare' )
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1859:1: (lv_name_0_0= 'compare' )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1860:3: lv_name_0_0= 'compare'
            {
            lv_name_0_0=(Token)input.LT(1);
            match(input,41,FOLLOW_41_in_ruleComparisonValidationRuleDeclaration3597); if (failed) return current;
            if ( backtracking==0 ) {

                      createLeafNode(grammarAccess.getComparisonValidationRuleDeclarationAccess().getNameCompareKeyword_0_0(), "name"); 
                  
            }
            if ( backtracking==0 ) {

              	        if (current==null) {
              	            current = factory.create(grammarAccess.getComparisonValidationRuleDeclarationRule().getType().getClassifier());
              	            associateNodeWithAstElement(currentNode, current);
              	        }
              	        
              	        try {
              	       		set(current, "name", lv_name_0_0, "compare", lastConsumedNode);
              	        } catch (ValueConverterException vce) {
              				handleValueConverterException(vce);
              	        }
              	    
            }

            }


            }

            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1879:2: ( (lv_args_1_0= ruleFunctionArguments ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1880:1: (lv_args_1_0= ruleFunctionArguments )
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1880:1: (lv_args_1_0= ruleFunctionArguments )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1881:3: lv_args_1_0= ruleFunctionArguments
            {
            if ( backtracking==0 ) {
               
              	        currentNode=createCompositeNode(grammarAccess.getComparisonValidationRuleDeclarationAccess().getArgsFunctionArgumentsParserRuleCall_1_0(), currentNode); 
              	    
            }
            pushFollow(FOLLOW_ruleFunctionArguments_in_ruleComparisonValidationRuleDeclaration3631);
            lv_args_1_0=ruleFunctionArguments();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {

              	        if (current==null) {
              	            current = factory.create(grammarAccess.getComparisonValidationRuleDeclarationRule().getType().getClassifier());
              	            associateNodeWithAstElement(currentNode.getParent(), current);
              	        }
              	        try {
              	       		set(
              	       			current, 
              	       			"args",
              	        		lv_args_1_0, 
              	        		"FunctionArguments", 
              	        		currentNode);
              	        } catch (ValueConverterException vce) {
              				handleValueConverterException(vce);
              	        }
              	        currentNode = currentNode.getParent();
              	    
            }

            }


            }

            match(input,27,FOLLOW_27_in_ruleComparisonValidationRuleDeclaration3641); if (failed) return current;
            if ( backtracking==0 ) {

                      createLeafNode(grammarAccess.getComparisonValidationRuleDeclarationAccess().getLeftCurlyBracketKeyword_2(), null); 
                  
            }
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1907:1: ( (lv_comparisonExp_3_0= ruleComparisonExpression ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1908:1: (lv_comparisonExp_3_0= ruleComparisonExpression )
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1908:1: (lv_comparisonExp_3_0= ruleComparisonExpression )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1909:3: lv_comparisonExp_3_0= ruleComparisonExpression
            {
            if ( backtracking==0 ) {
               
              	        currentNode=createCompositeNode(grammarAccess.getComparisonValidationRuleDeclarationAccess().getComparisonExpComparisonExpressionParserRuleCall_3_0(), currentNode); 
              	    
            }
            pushFollow(FOLLOW_ruleComparisonExpression_in_ruleComparisonValidationRuleDeclaration3662);
            lv_comparisonExp_3_0=ruleComparisonExpression();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {

              	        if (current==null) {
              	            current = factory.create(grammarAccess.getComparisonValidationRuleDeclarationRule().getType().getClassifier());
              	            associateNodeWithAstElement(currentNode.getParent(), current);
              	        }
              	        try {
              	       		set(
              	       			current, 
              	       			"comparisonExp",
              	        		lv_comparisonExp_3_0, 
              	        		"ComparisonExpression", 
              	        		currentNode);
              	        } catch (ValueConverterException vce) {
              				handleValueConverterException(vce);
              	        }
              	        currentNode = currentNode.getParent();
              	    
            }

            }


            }

            match(input,29,FOLLOW_29_in_ruleComparisonValidationRuleDeclaration3672); if (failed) return current;
            if ( backtracking==0 ) {

                      createLeafNode(grammarAccess.getComparisonValidationRuleDeclarationAccess().getRightCurlyBracketKeyword_4(), null); 
                  
            }

            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
                  	lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruleComparisonValidationRuleDeclaration


    // $ANTLR start entryRuleComparisonExpression
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1943:1: entryRuleComparisonExpression returns [EObject current=null] : iv_ruleComparisonExpression= ruleComparisonExpression EOF ;
    public final EObject entryRuleComparisonExpression() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleComparisonExpression = null;


        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1944:2: (iv_ruleComparisonExpression= ruleComparisonExpression EOF )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1945:2: iv_ruleComparisonExpression= ruleComparisonExpression EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getComparisonExpressionRule(), currentNode); 
            }
            pushFollow(FOLLOW_ruleComparisonExpression_in_entryRuleComparisonExpression3708);
            iv_ruleComparisonExpression=ruleComparisonExpression();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruleComparisonExpression; 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleComparisonExpression3718); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuleComparisonExpression


    // $ANTLR start ruleComparisonExpression
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1952:1: ruleComparisonExpression returns [EObject current=null] : ( ( (lv_lhs_0_0= ruleComparisonPart ) ) ( (lv_o_1_0= ruleOperator ) ) ( (lv_rhs_2_0= ruleComparisonPart ) ) ) ;
    public final EObject ruleComparisonExpression() throws RecognitionException {
        EObject current = null;

        EObject lv_lhs_0_0 = null;

        AntlrDatatypeRuleToken lv_o_1_0 = null;

        EObject lv_rhs_2_0 = null;


         EObject temp=null; setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1957:6: ( ( ( (lv_lhs_0_0= ruleComparisonPart ) ) ( (lv_o_1_0= ruleOperator ) ) ( (lv_rhs_2_0= ruleComparisonPart ) ) ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1958:1: ( ( (lv_lhs_0_0= ruleComparisonPart ) ) ( (lv_o_1_0= ruleOperator ) ) ( (lv_rhs_2_0= ruleComparisonPart ) ) )
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1958:1: ( ( (lv_lhs_0_0= ruleComparisonPart ) ) ( (lv_o_1_0= ruleOperator ) ) ( (lv_rhs_2_0= ruleComparisonPart ) ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1958:2: ( (lv_lhs_0_0= ruleComparisonPart ) ) ( (lv_o_1_0= ruleOperator ) ) ( (lv_rhs_2_0= ruleComparisonPart ) )
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1958:2: ( (lv_lhs_0_0= ruleComparisonPart ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1959:1: (lv_lhs_0_0= ruleComparisonPart )
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1959:1: (lv_lhs_0_0= ruleComparisonPart )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1960:3: lv_lhs_0_0= ruleComparisonPart
            {
            if ( backtracking==0 ) {
               
              	        currentNode=createCompositeNode(grammarAccess.getComparisonExpressionAccess().getLhsComparisonPartParserRuleCall_0_0(), currentNode); 
              	    
            }
            pushFollow(FOLLOW_ruleComparisonPart_in_ruleComparisonExpression3764);
            lv_lhs_0_0=ruleComparisonPart();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {

              	        if (current==null) {
              	            current = factory.create(grammarAccess.getComparisonExpressionRule().getType().getClassifier());
              	            associateNodeWithAstElement(currentNode.getParent(), current);
              	        }
              	        try {
              	       		set(
              	       			current, 
              	       			"lhs",
              	        		lv_lhs_0_0, 
              	        		"ComparisonPart", 
              	        		currentNode);
              	        } catch (ValueConverterException vce) {
              				handleValueConverterException(vce);
              	        }
              	        currentNode = currentNode.getParent();
              	    
            }

            }


            }

            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1982:2: ( (lv_o_1_0= ruleOperator ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1983:1: (lv_o_1_0= ruleOperator )
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1983:1: (lv_o_1_0= ruleOperator )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:1984:3: lv_o_1_0= ruleOperator
            {
            if ( backtracking==0 ) {
               
              	        currentNode=createCompositeNode(grammarAccess.getComparisonExpressionAccess().getOOperatorParserRuleCall_1_0(), currentNode); 
              	    
            }
            pushFollow(FOLLOW_ruleOperator_in_ruleComparisonExpression3785);
            lv_o_1_0=ruleOperator();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {

              	        if (current==null) {
              	            current = factory.create(grammarAccess.getComparisonExpressionRule().getType().getClassifier());
              	            associateNodeWithAstElement(currentNode.getParent(), current);
              	        }
              	        try {
              	       		set(
              	       			current, 
              	       			"o",
              	        		lv_o_1_0, 
              	        		"Operator", 
              	        		currentNode);
              	        } catch (ValueConverterException vce) {
              				handleValueConverterException(vce);
              	        }
              	        currentNode = currentNode.getParent();
              	    
            }

            }


            }

            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2006:2: ( (lv_rhs_2_0= ruleComparisonPart ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2007:1: (lv_rhs_2_0= ruleComparisonPart )
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2007:1: (lv_rhs_2_0= ruleComparisonPart )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2008:3: lv_rhs_2_0= ruleComparisonPart
            {
            if ( backtracking==0 ) {
               
              	        currentNode=createCompositeNode(grammarAccess.getComparisonExpressionAccess().getRhsComparisonPartParserRuleCall_2_0(), currentNode); 
              	    
            }
            pushFollow(FOLLOW_ruleComparisonPart_in_ruleComparisonExpression3806);
            lv_rhs_2_0=ruleComparisonPart();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {

              	        if (current==null) {
              	            current = factory.create(grammarAccess.getComparisonExpressionRule().getType().getClassifier());
              	            associateNodeWithAstElement(currentNode.getParent(), current);
              	        }
              	        try {
              	       		set(
              	       			current, 
              	       			"rhs",
              	        		lv_rhs_2_0, 
              	        		"ComparisonPart", 
              	        		currentNode);
              	        } catch (ValueConverterException vce) {
              				handleValueConverterException(vce);
              	        }
              	        currentNode = currentNode.getParent();
              	    
            }

            }


            }


            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
                  	lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruleComparisonExpression


    // $ANTLR start entryRuleComparisonPart
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2038:1: entryRuleComparisonPart returns [EObject current=null] : iv_ruleComparisonPart= ruleComparisonPart EOF ;
    public final EObject entryRuleComparisonPart() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleComparisonPart = null;


        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2039:2: (iv_ruleComparisonPart= ruleComparisonPart EOF )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2040:2: iv_ruleComparisonPart= ruleComparisonPart EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getComparisonPartRule(), currentNode); 
            }
            pushFollow(FOLLOW_ruleComparisonPart_in_entryRuleComparisonPart3842);
            iv_ruleComparisonPart=ruleComparisonPart();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruleComparisonPart; 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleComparisonPart3852); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuleComparisonPart


    // $ANTLR start ruleComparisonPart
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2047:1: ruleComparisonPart returns [EObject current=null] : ( ( (lv_field_0_0= ruleFieldPath ) ) | ( (lv_n_1_0= RULE_INT ) ) | ( (lv_df_2_0= ruleDateFunction ) ) | ( (lv_u_3_0= ruleUpperFunction ) ) | ( (lv_l_4_0= ruleLowerFunction ) ) | ( (lv_d_5_0= ruleDateConstant ) ) ) ;
    public final EObject ruleComparisonPart() throws RecognitionException {
        EObject current = null;

        Token lv_n_1_0=null;
        EObject lv_field_0_0 = null;

        AntlrDatatypeRuleToken lv_df_2_0 = null;

        EObject lv_u_3_0 = null;

        EObject lv_l_4_0 = null;

        AntlrDatatypeRuleToken lv_d_5_0 = null;


         EObject temp=null; setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2052:6: ( ( ( (lv_field_0_0= ruleFieldPath ) ) | ( (lv_n_1_0= RULE_INT ) ) | ( (lv_df_2_0= ruleDateFunction ) ) | ( (lv_u_3_0= ruleUpperFunction ) ) | ( (lv_l_4_0= ruleLowerFunction ) ) | ( (lv_d_5_0= ruleDateConstant ) ) ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2053:1: ( ( (lv_field_0_0= ruleFieldPath ) ) | ( (lv_n_1_0= RULE_INT ) ) | ( (lv_df_2_0= ruleDateFunction ) ) | ( (lv_u_3_0= ruleUpperFunction ) ) | ( (lv_l_4_0= ruleLowerFunction ) ) | ( (lv_d_5_0= ruleDateConstant ) ) )
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2053:1: ( ( (lv_field_0_0= ruleFieldPath ) ) | ( (lv_n_1_0= RULE_INT ) ) | ( (lv_df_2_0= ruleDateFunction ) ) | ( (lv_u_3_0= ruleUpperFunction ) ) | ( (lv_l_4_0= ruleLowerFunction ) ) | ( (lv_d_5_0= ruleDateConstant ) ) )
            int alt23=6;
            switch ( input.LA(1) ) {
            case RULE_ID:
            case 23:
            case 25:
            case 30:
            case 38:
            case 40:
            case 59:
            case 91:
            case 179:
            case 191:
            case 194:
            case 197:
            case 209:
            case 221:
                {
                alt23=1;
                }
                break;
            case 26:
                {
                int LA23_2 = input.LA(2);

                if ( (LA23_2==43) ) {
                    alt23=3;
                }
                else if ( (LA23_2==EOF||LA23_2==13||LA23_2==29||LA23_2==36||(LA23_2>=46 && LA23_2<=53)) ) {
                    alt23=1;
                }
                else {
                    if (backtracking>0) {failed=true; return current;}
                    NoViableAltException nvae =
                        new NoViableAltException("2053:1: ( ( (lv_field_0_0= ruleFieldPath ) ) | ( (lv_n_1_0= RULE_INT ) ) | ( (lv_df_2_0= ruleDateFunction ) ) | ( (lv_u_3_0= ruleUpperFunction ) ) | ( (lv_l_4_0= ruleLowerFunction ) ) | ( (lv_d_5_0= ruleDateConstant ) ) )", 23, 2, input);

                    throw nvae;
                }
                }
                break;
            case RULE_INT:
                {
                alt23=2;
                }
                break;
            case 42:
                {
                alt23=4;
                }
                break;
            case 45:
                {
                alt23=5;
                }
                break;
            case 54:
            case 55:
                {
                alt23=6;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("2053:1: ( ( (lv_field_0_0= ruleFieldPath ) ) | ( (lv_n_1_0= RULE_INT ) ) | ( (lv_df_2_0= ruleDateFunction ) ) | ( (lv_u_3_0= ruleUpperFunction ) ) | ( (lv_l_4_0= ruleLowerFunction ) ) | ( (lv_d_5_0= ruleDateConstant ) ) )", 23, 0, input);

                throw nvae;
            }

            switch (alt23) {
                case 1 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2053:2: ( (lv_field_0_0= ruleFieldPath ) )
                    {
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2053:2: ( (lv_field_0_0= ruleFieldPath ) )
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2054:1: (lv_field_0_0= ruleFieldPath )
                    {
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2054:1: (lv_field_0_0= ruleFieldPath )
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2055:3: lv_field_0_0= ruleFieldPath
                    {
                    if ( backtracking==0 ) {
                       
                      	        currentNode=createCompositeNode(grammarAccess.getComparisonPartAccess().getFieldFieldPathParserRuleCall_0_0(), currentNode); 
                      	    
                    }
                    pushFollow(FOLLOW_ruleFieldPath_in_ruleComparisonPart3898);
                    lv_field_0_0=ruleFieldPath();
                    _fsp--;
                    if (failed) return current;
                    if ( backtracking==0 ) {

                      	        if (current==null) {
                      	            current = factory.create(grammarAccess.getComparisonPartRule().getType().getClassifier());
                      	            associateNodeWithAstElement(currentNode.getParent(), current);
                      	        }
                      	        try {
                      	       		set(
                      	       			current, 
                      	       			"field",
                      	        		lv_field_0_0, 
                      	        		"FieldPath", 
                      	        		currentNode);
                      	        } catch (ValueConverterException vce) {
                      				handleValueConverterException(vce);
                      	        }
                      	        currentNode = currentNode.getParent();
                      	    
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2078:6: ( (lv_n_1_0= RULE_INT ) )
                    {
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2078:6: ( (lv_n_1_0= RULE_INT ) )
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2079:1: (lv_n_1_0= RULE_INT )
                    {
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2079:1: (lv_n_1_0= RULE_INT )
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2080:3: lv_n_1_0= RULE_INT
                    {
                    lv_n_1_0=(Token)input.LT(1);
                    match(input,RULE_INT,FOLLOW_RULE_INT_in_ruleComparisonPart3921); if (failed) return current;
                    if ( backtracking==0 ) {

                      			createLeafNode(grammarAccess.getComparisonPartAccess().getNINTTerminalRuleCall_1_0(), "n"); 
                      		
                    }
                    if ( backtracking==0 ) {

                      	        if (current==null) {
                      	            current = factory.create(grammarAccess.getComparisonPartRule().getType().getClassifier());
                      	            associateNodeWithAstElement(currentNode, current);
                      	        }
                      	        try {
                      	       		set(
                      	       			current, 
                      	       			"n",
                      	        		lv_n_1_0, 
                      	        		"INT", 
                      	        		lastConsumedNode);
                      	        } catch (ValueConverterException vce) {
                      				handleValueConverterException(vce);
                      	        }
                      	    
                    }

                    }


                    }


                    }
                    break;
                case 3 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2103:6: ( (lv_df_2_0= ruleDateFunction ) )
                    {
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2103:6: ( (lv_df_2_0= ruleDateFunction ) )
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2104:1: (lv_df_2_0= ruleDateFunction )
                    {
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2104:1: (lv_df_2_0= ruleDateFunction )
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2105:3: lv_df_2_0= ruleDateFunction
                    {
                    if ( backtracking==0 ) {
                       
                      	        currentNode=createCompositeNode(grammarAccess.getComparisonPartAccess().getDfDateFunctionParserRuleCall_2_0(), currentNode); 
                      	    
                    }
                    pushFollow(FOLLOW_ruleDateFunction_in_ruleComparisonPart3953);
                    lv_df_2_0=ruleDateFunction();
                    _fsp--;
                    if (failed) return current;
                    if ( backtracking==0 ) {

                      	        if (current==null) {
                      	            current = factory.create(grammarAccess.getComparisonPartRule().getType().getClassifier());
                      	            associateNodeWithAstElement(currentNode.getParent(), current);
                      	        }
                      	        try {
                      	       		set(
                      	       			current, 
                      	       			"df",
                      	        		lv_df_2_0, 
                      	        		"DateFunction", 
                      	        		currentNode);
                      	        } catch (ValueConverterException vce) {
                      				handleValueConverterException(vce);
                      	        }
                      	        currentNode = currentNode.getParent();
                      	    
                    }

                    }


                    }


                    }
                    break;
                case 4 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2128:6: ( (lv_u_3_0= ruleUpperFunction ) )
                    {
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2128:6: ( (lv_u_3_0= ruleUpperFunction ) )
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2129:1: (lv_u_3_0= ruleUpperFunction )
                    {
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2129:1: (lv_u_3_0= ruleUpperFunction )
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2130:3: lv_u_3_0= ruleUpperFunction
                    {
                    if ( backtracking==0 ) {
                       
                      	        currentNode=createCompositeNode(grammarAccess.getComparisonPartAccess().getUUpperFunctionParserRuleCall_3_0(), currentNode); 
                      	    
                    }
                    pushFollow(FOLLOW_ruleUpperFunction_in_ruleComparisonPart3980);
                    lv_u_3_0=ruleUpperFunction();
                    _fsp--;
                    if (failed) return current;
                    if ( backtracking==0 ) {

                      	        if (current==null) {
                      	            current = factory.create(grammarAccess.getComparisonPartRule().getType().getClassifier());
                      	            associateNodeWithAstElement(currentNode.getParent(), current);
                      	        }
                      	        try {
                      	       		set(
                      	       			current, 
                      	       			"u",
                      	        		lv_u_3_0, 
                      	        		"UpperFunction", 
                      	        		currentNode);
                      	        } catch (ValueConverterException vce) {
                      				handleValueConverterException(vce);
                      	        }
                      	        currentNode = currentNode.getParent();
                      	    
                    }

                    }


                    }


                    }
                    break;
                case 5 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2153:6: ( (lv_l_4_0= ruleLowerFunction ) )
                    {
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2153:6: ( (lv_l_4_0= ruleLowerFunction ) )
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2154:1: (lv_l_4_0= ruleLowerFunction )
                    {
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2154:1: (lv_l_4_0= ruleLowerFunction )
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2155:3: lv_l_4_0= ruleLowerFunction
                    {
                    if ( backtracking==0 ) {
                       
                      	        currentNode=createCompositeNode(grammarAccess.getComparisonPartAccess().getLLowerFunctionParserRuleCall_4_0(), currentNode); 
                      	    
                    }
                    pushFollow(FOLLOW_ruleLowerFunction_in_ruleComparisonPart4007);
                    lv_l_4_0=ruleLowerFunction();
                    _fsp--;
                    if (failed) return current;
                    if ( backtracking==0 ) {

                      	        if (current==null) {
                      	            current = factory.create(grammarAccess.getComparisonPartRule().getType().getClassifier());
                      	            associateNodeWithAstElement(currentNode.getParent(), current);
                      	        }
                      	        try {
                      	       		set(
                      	       			current, 
                      	       			"l",
                      	        		lv_l_4_0, 
                      	        		"LowerFunction", 
                      	        		currentNode);
                      	        } catch (ValueConverterException vce) {
                      				handleValueConverterException(vce);
                      	        }
                      	        currentNode = currentNode.getParent();
                      	    
                    }

                    }


                    }


                    }
                    break;
                case 6 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2178:6: ( (lv_d_5_0= ruleDateConstant ) )
                    {
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2178:6: ( (lv_d_5_0= ruleDateConstant ) )
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2179:1: (lv_d_5_0= ruleDateConstant )
                    {
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2179:1: (lv_d_5_0= ruleDateConstant )
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2180:3: lv_d_5_0= ruleDateConstant
                    {
                    if ( backtracking==0 ) {
                       
                      	        currentNode=createCompositeNode(grammarAccess.getComparisonPartAccess().getDDateConstantParserRuleCall_5_0(), currentNode); 
                      	    
                    }
                    pushFollow(FOLLOW_ruleDateConstant_in_ruleComparisonPart4034);
                    lv_d_5_0=ruleDateConstant();
                    _fsp--;
                    if (failed) return current;
                    if ( backtracking==0 ) {

                      	        if (current==null) {
                      	            current = factory.create(grammarAccess.getComparisonPartRule().getType().getClassifier());
                      	            associateNodeWithAstElement(currentNode.getParent(), current);
                      	        }
                      	        try {
                      	       		set(
                      	       			current, 
                      	       			"d",
                      	        		lv_d_5_0, 
                      	        		"DateConstant", 
                      	        		currentNode);
                      	        } catch (ValueConverterException vce) {
                      				handleValueConverterException(vce);
                      	        }
                      	        currentNode = currentNode.getParent();
                      	    
                    }

                    }


                    }


                    }
                    break;

            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
                  	lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruleComparisonPart


    // $ANTLR start entryRuleUpperFunction
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2210:1: entryRuleUpperFunction returns [EObject current=null] : iv_ruleUpperFunction= ruleUpperFunction EOF ;
    public final EObject entryRuleUpperFunction() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleUpperFunction = null;


        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2211:2: (iv_ruleUpperFunction= ruleUpperFunction EOF )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2212:2: iv_ruleUpperFunction= ruleUpperFunction EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getUpperFunctionRule(), currentNode); 
            }
            pushFollow(FOLLOW_ruleUpperFunction_in_entryRuleUpperFunction4070);
            iv_ruleUpperFunction=ruleUpperFunction();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruleUpperFunction; 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleUpperFunction4080); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuleUpperFunction


    // $ANTLR start ruleUpperFunction
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2219:1: ruleUpperFunction returns [EObject current=null] : ( 'upper' '(' ( (lv_field_2_0= ruleFieldPath ) ) ')' ) ;
    public final EObject ruleUpperFunction() throws RecognitionException {
        EObject current = null;

        EObject lv_field_2_0 = null;


         EObject temp=null; setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2224:6: ( ( 'upper' '(' ( (lv_field_2_0= ruleFieldPath ) ) ')' ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2225:1: ( 'upper' '(' ( (lv_field_2_0= ruleFieldPath ) ) ')' )
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2225:1: ( 'upper' '(' ( (lv_field_2_0= ruleFieldPath ) ) ')' )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2225:3: 'upper' '(' ( (lv_field_2_0= ruleFieldPath ) ) ')'
            {
            match(input,42,FOLLOW_42_in_ruleUpperFunction4115); if (failed) return current;
            if ( backtracking==0 ) {

                      createLeafNode(grammarAccess.getUpperFunctionAccess().getUpperKeyword_0(), null); 
                  
            }
            match(input,43,FOLLOW_43_in_ruleUpperFunction4125); if (failed) return current;
            if ( backtracking==0 ) {

                      createLeafNode(grammarAccess.getUpperFunctionAccess().getLeftParenthesisKeyword_1(), null); 
                  
            }
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2233:1: ( (lv_field_2_0= ruleFieldPath ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2234:1: (lv_field_2_0= ruleFieldPath )
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2234:1: (lv_field_2_0= ruleFieldPath )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2235:3: lv_field_2_0= ruleFieldPath
            {
            if ( backtracking==0 ) {
               
              	        currentNode=createCompositeNode(grammarAccess.getUpperFunctionAccess().getFieldFieldPathParserRuleCall_2_0(), currentNode); 
              	    
            }
            pushFollow(FOLLOW_ruleFieldPath_in_ruleUpperFunction4146);
            lv_field_2_0=ruleFieldPath();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {

              	        if (current==null) {
              	            current = factory.create(grammarAccess.getUpperFunctionRule().getType().getClassifier());
              	            associateNodeWithAstElement(currentNode.getParent(), current);
              	        }
              	        try {
              	       		set(
              	       			current, 
              	       			"field",
              	        		lv_field_2_0, 
              	        		"FieldPath", 
              	        		currentNode);
              	        } catch (ValueConverterException vce) {
              				handleValueConverterException(vce);
              	        }
              	        currentNode = currentNode.getParent();
              	    
            }

            }


            }

            match(input,44,FOLLOW_44_in_ruleUpperFunction4156); if (failed) return current;
            if ( backtracking==0 ) {

                      createLeafNode(grammarAccess.getUpperFunctionAccess().getRightParenthesisKeyword_3(), null); 
                  
            }

            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
                  	lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruleUpperFunction


    // $ANTLR start entryRuleLowerFunction
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2269:1: entryRuleLowerFunction returns [EObject current=null] : iv_ruleLowerFunction= ruleLowerFunction EOF ;
    public final EObject entryRuleLowerFunction() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleLowerFunction = null;


        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2270:2: (iv_ruleLowerFunction= ruleLowerFunction EOF )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2271:2: iv_ruleLowerFunction= ruleLowerFunction EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getLowerFunctionRule(), currentNode); 
            }
            pushFollow(FOLLOW_ruleLowerFunction_in_entryRuleLowerFunction4192);
            iv_ruleLowerFunction=ruleLowerFunction();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruleLowerFunction; 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleLowerFunction4202); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuleLowerFunction


    // $ANTLR start ruleLowerFunction
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2278:1: ruleLowerFunction returns [EObject current=null] : ( 'lower' '(' ( (lv_field_2_0= ruleFieldPath ) ) ')' ) ;
    public final EObject ruleLowerFunction() throws RecognitionException {
        EObject current = null;

        EObject lv_field_2_0 = null;


         EObject temp=null; setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2283:6: ( ( 'lower' '(' ( (lv_field_2_0= ruleFieldPath ) ) ')' ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2284:1: ( 'lower' '(' ( (lv_field_2_0= ruleFieldPath ) ) ')' )
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2284:1: ( 'lower' '(' ( (lv_field_2_0= ruleFieldPath ) ) ')' )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2284:3: 'lower' '(' ( (lv_field_2_0= ruleFieldPath ) ) ')'
            {
            match(input,45,FOLLOW_45_in_ruleLowerFunction4237); if (failed) return current;
            if ( backtracking==0 ) {

                      createLeafNode(grammarAccess.getLowerFunctionAccess().getLowerKeyword_0(), null); 
                  
            }
            match(input,43,FOLLOW_43_in_ruleLowerFunction4247); if (failed) return current;
            if ( backtracking==0 ) {

                      createLeafNode(grammarAccess.getLowerFunctionAccess().getLeftParenthesisKeyword_1(), null); 
                  
            }
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2292:1: ( (lv_field_2_0= ruleFieldPath ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2293:1: (lv_field_2_0= ruleFieldPath )
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2293:1: (lv_field_2_0= ruleFieldPath )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2294:3: lv_field_2_0= ruleFieldPath
            {
            if ( backtracking==0 ) {
               
              	        currentNode=createCompositeNode(grammarAccess.getLowerFunctionAccess().getFieldFieldPathParserRuleCall_2_0(), currentNode); 
              	    
            }
            pushFollow(FOLLOW_ruleFieldPath_in_ruleLowerFunction4268);
            lv_field_2_0=ruleFieldPath();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {

              	        if (current==null) {
              	            current = factory.create(grammarAccess.getLowerFunctionRule().getType().getClassifier());
              	            associateNodeWithAstElement(currentNode.getParent(), current);
              	        }
              	        try {
              	       		set(
              	       			current, 
              	       			"field",
              	        		lv_field_2_0, 
              	        		"FieldPath", 
              	        		currentNode);
              	        } catch (ValueConverterException vce) {
              				handleValueConverterException(vce);
              	        }
              	        currentNode = currentNode.getParent();
              	    
            }

            }


            }

            match(input,44,FOLLOW_44_in_ruleLowerFunction4278); if (failed) return current;
            if ( backtracking==0 ) {

                      createLeafNode(grammarAccess.getLowerFunctionAccess().getRightParenthesisKeyword_3(), null); 
                  
            }

            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
                  	lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruleLowerFunction


    // $ANTLR start entryRuleOperator
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2328:1: entryRuleOperator returns [String current=null] : iv_ruleOperator= ruleOperator EOF ;
    public final String entryRuleOperator() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleOperator = null;


        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2329:2: (iv_ruleOperator= ruleOperator EOF )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2330:2: iv_ruleOperator= ruleOperator EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getOperatorRule(), currentNode); 
            }
            pushFollow(FOLLOW_ruleOperator_in_entryRuleOperator4315);
            iv_ruleOperator=ruleOperator();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruleOperator.getText(); 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleOperator4326); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuleOperator


    // $ANTLR start ruleOperator
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2337:1: ruleOperator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (kw= '=' | kw= '<' | kw= '>' | kw= '<=' | kw= '>=' | kw= '!=' | kw= '^=' | kw= '<>' | kw= 'like' ) ;
    public final AntlrDatatypeRuleToken ruleOperator() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;

         setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2342:6: ( (kw= '=' | kw= '<' | kw= '>' | kw= '<=' | kw= '>=' | kw= '!=' | kw= '^=' | kw= '<>' | kw= 'like' ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2343:1: (kw= '=' | kw= '<' | kw= '>' | kw= '<=' | kw= '>=' | kw= '!=' | kw= '^=' | kw= '<>' | kw= 'like' )
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2343:1: (kw= '=' | kw= '<' | kw= '>' | kw= '<=' | kw= '>=' | kw= '!=' | kw= '^=' | kw= '<>' | kw= 'like' )
            int alt24=9;
            switch ( input.LA(1) ) {
            case 13:
                {
                alt24=1;
                }
                break;
            case 46:
                {
                alt24=2;
                }
                break;
            case 47:
                {
                alt24=3;
                }
                break;
            case 48:
                {
                alt24=4;
                }
                break;
            case 49:
                {
                alt24=5;
                }
                break;
            case 50:
                {
                alt24=6;
                }
                break;
            case 51:
                {
                alt24=7;
                }
                break;
            case 52:
                {
                alt24=8;
                }
                break;
            case 53:
                {
                alt24=9;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("2343:1: (kw= '=' | kw= '<' | kw= '>' | kw= '<=' | kw= '>=' | kw= '!=' | kw= '^=' | kw= '<>' | kw= 'like' )", 24, 0, input);

                throw nvae;
            }

            switch (alt24) {
                case 1 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2344:2: kw= '='
                    {
                    kw=(Token)input.LT(1);
                    match(input,13,FOLLOW_13_in_ruleOperator4364); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getOperatorAccess().getEqualsSignKeyword_0(), null); 
                          
                    }

                    }
                    break;
                case 2 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2351:2: kw= '<'
                    {
                    kw=(Token)input.LT(1);
                    match(input,46,FOLLOW_46_in_ruleOperator4383); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getOperatorAccess().getLessThanSignKeyword_1(), null); 
                          
                    }

                    }
                    break;
                case 3 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2358:2: kw= '>'
                    {
                    kw=(Token)input.LT(1);
                    match(input,47,FOLLOW_47_in_ruleOperator4402); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getOperatorAccess().getGreaterThanSignKeyword_2(), null); 
                          
                    }

                    }
                    break;
                case 4 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2365:2: kw= '<='
                    {
                    kw=(Token)input.LT(1);
                    match(input,48,FOLLOW_48_in_ruleOperator4421); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getOperatorAccess().getLessThanSignEqualsSignKeyword_3(), null); 
                          
                    }

                    }
                    break;
                case 5 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2372:2: kw= '>='
                    {
                    kw=(Token)input.LT(1);
                    match(input,49,FOLLOW_49_in_ruleOperator4440); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getOperatorAccess().getGreaterThanSignEqualsSignKeyword_4(), null); 
                          
                    }

                    }
                    break;
                case 6 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2379:2: kw= '!='
                    {
                    kw=(Token)input.LT(1);
                    match(input,50,FOLLOW_50_in_ruleOperator4459); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getOperatorAccess().getExclamationMarkEqualsSignKeyword_5(), null); 
                          
                    }

                    }
                    break;
                case 7 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2386:2: kw= '^='
                    {
                    kw=(Token)input.LT(1);
                    match(input,51,FOLLOW_51_in_ruleOperator4478); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getOperatorAccess().getCircumflexAccentEqualsSignKeyword_6(), null); 
                          
                    }

                    }
                    break;
                case 8 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2393:2: kw= '<>'
                    {
                    kw=(Token)input.LT(1);
                    match(input,52,FOLLOW_52_in_ruleOperator4497); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getOperatorAccess().getLessThanSignGreaterThanSignKeyword_7(), null); 
                          
                    }

                    }
                    break;
                case 9 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2400:2: kw= 'like'
                    {
                    kw=(Token)input.LT(1);
                    match(input,53,FOLLOW_53_in_ruleOperator4516); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getOperatorAccess().getLikeKeyword_8(), null); 
                          
                    }

                    }
                    break;

            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
              	    lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruleOperator


    // $ANTLR start entryRuleDateConstant
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2413:1: entryRuleDateConstant returns [String current=null] : iv_ruleDateConstant= ruleDateConstant EOF ;
    public final String entryRuleDateConstant() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleDateConstant = null;


        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2414:2: (iv_ruleDateConstant= ruleDateConstant EOF )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2415:2: iv_ruleDateConstant= ruleDateConstant EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getDateConstantRule(), currentNode); 
            }
            pushFollow(FOLLOW_ruleDateConstant_in_entryRuleDateConstant4557);
            iv_ruleDateConstant=ruleDateConstant();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruleDateConstant.getText(); 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleDateConstant4568); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuleDateConstant


    // $ANTLR start ruleDateConstant
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2422:1: ruleDateConstant returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (kw= '$now' | kw= '$today' ) ;
    public final AntlrDatatypeRuleToken ruleDateConstant() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;

         setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2427:6: ( (kw= '$now' | kw= '$today' ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2428:1: (kw= '$now' | kw= '$today' )
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2428:1: (kw= '$now' | kw= '$today' )
            int alt25=2;
            int LA25_0 = input.LA(1);

            if ( (LA25_0==54) ) {
                alt25=1;
            }
            else if ( (LA25_0==55) ) {
                alt25=2;
            }
            else {
                if (backtracking>0) {failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("2428:1: (kw= '$now' | kw= '$today' )", 25, 0, input);

                throw nvae;
            }
            switch (alt25) {
                case 1 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2429:2: kw= '$now'
                    {
                    kw=(Token)input.LT(1);
                    match(input,54,FOLLOW_54_in_ruleDateConstant4606); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getDateConstantAccess().getNowKeyword_0(), null); 
                          
                    }

                    }
                    break;
                case 2 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2436:2: kw= '$today'
                    {
                    kw=(Token)input.LT(1);
                    match(input,55,FOLLOW_55_in_ruleDateConstant4625); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getDateConstantAccess().getTodayKeyword_1(), null); 
                          
                    }

                    }
                    break;

            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
              	    lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruleDateConstant


    // $ANTLR start entryRuleDateFunction
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2449:1: entryRuleDateFunction returns [String current=null] : iv_ruleDateFunction= ruleDateFunction EOF ;
    public final String entryRuleDateFunction() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleDateFunction = null;


        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2450:2: (iv_ruleDateFunction= ruleDateFunction EOF )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2451:2: iv_ruleDateFunction= ruleDateFunction EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getDateFunctionRule(), currentNode); 
            }
            pushFollow(FOLLOW_ruleDateFunction_in_entryRuleDateFunction4666);
            iv_ruleDateFunction=ruleDateFunction();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruleDateFunction.getText(); 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleDateFunction4677); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuleDateFunction


    // $ANTLR start ruleDateFunction
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2458:1: ruleDateFunction returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (kw= 'date' kw= '(' this_DateFunctionArgument_2= ruleDateFunctionArgument (kw= ',' this_DateFunctionArgument_4= ruleDateFunctionArgument )* kw= ')' ) ;
    public final AntlrDatatypeRuleToken ruleDateFunction() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;
        AntlrDatatypeRuleToken this_DateFunctionArgument_2 = null;

        AntlrDatatypeRuleToken this_DateFunctionArgument_4 = null;


         setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2463:6: ( (kw= 'date' kw= '(' this_DateFunctionArgument_2= ruleDateFunctionArgument (kw= ',' this_DateFunctionArgument_4= ruleDateFunctionArgument )* kw= ')' ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2464:1: (kw= 'date' kw= '(' this_DateFunctionArgument_2= ruleDateFunctionArgument (kw= ',' this_DateFunctionArgument_4= ruleDateFunctionArgument )* kw= ')' )
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2464:1: (kw= 'date' kw= '(' this_DateFunctionArgument_2= ruleDateFunctionArgument (kw= ',' this_DateFunctionArgument_4= ruleDateFunctionArgument )* kw= ')' )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2465:2: kw= 'date' kw= '(' this_DateFunctionArgument_2= ruleDateFunctionArgument (kw= ',' this_DateFunctionArgument_4= ruleDateFunctionArgument )* kw= ')'
            {
            kw=(Token)input.LT(1);
            match(input,26,FOLLOW_26_in_ruleDateFunction4715); if (failed) return current;
            if ( backtracking==0 ) {

                      current.merge(kw);
                      createLeafNode(grammarAccess.getDateFunctionAccess().getDateKeyword_0(), null); 
                  
            }
            kw=(Token)input.LT(1);
            match(input,43,FOLLOW_43_in_ruleDateFunction4728); if (failed) return current;
            if ( backtracking==0 ) {

                      current.merge(kw);
                      createLeafNode(grammarAccess.getDateFunctionAccess().getLeftParenthesisKeyword_1(), null); 
                  
            }
            if ( backtracking==0 ) {
               
                      currentNode=createCompositeNode(grammarAccess.getDateFunctionAccess().getDateFunctionArgumentParserRuleCall_2(), currentNode); 
                  
            }
            pushFollow(FOLLOW_ruleDateFunctionArgument_in_ruleDateFunction4750);
            this_DateFunctionArgument_2=ruleDateFunctionArgument();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {

              		current.merge(this_DateFunctionArgument_2);
                  
            }
            if ( backtracking==0 ) {
               
                      currentNode = currentNode.getParent();
                  
            }
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2487:1: (kw= ',' this_DateFunctionArgument_4= ruleDateFunctionArgument )*
            loop26:
            do {
                int alt26=2;
                int LA26_0 = input.LA(1);

                if ( (LA26_0==28) ) {
                    alt26=1;
                }


                switch (alt26) {
            	case 1 :
            	    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2488:2: kw= ',' this_DateFunctionArgument_4= ruleDateFunctionArgument
            	    {
            	    kw=(Token)input.LT(1);
            	    match(input,28,FOLLOW_28_in_ruleDateFunction4769); if (failed) return current;
            	    if ( backtracking==0 ) {

            	              current.merge(kw);
            	              createLeafNode(grammarAccess.getDateFunctionAccess().getCommaKeyword_3_0(), null); 
            	          
            	    }
            	    if ( backtracking==0 ) {
            	       
            	              currentNode=createCompositeNode(grammarAccess.getDateFunctionAccess().getDateFunctionArgumentParserRuleCall_3_1(), currentNode); 
            	          
            	    }
            	    pushFollow(FOLLOW_ruleDateFunctionArgument_in_ruleDateFunction4791);
            	    this_DateFunctionArgument_4=ruleDateFunctionArgument();
            	    _fsp--;
            	    if (failed) return current;
            	    if ( backtracking==0 ) {

            	      		current.merge(this_DateFunctionArgument_4);
            	          
            	    }
            	    if ( backtracking==0 ) {
            	       
            	              currentNode = currentNode.getParent();
            	          
            	    }

            	    }
            	    break;

            	default :
            	    break loop26;
                }
            } while (true);

            kw=(Token)input.LT(1);
            match(input,44,FOLLOW_44_in_ruleDateFunction4811); if (failed) return current;
            if ( backtracking==0 ) {

                      current.merge(kw);
                      createLeafNode(grammarAccess.getDateFunctionAccess().getRightParenthesisKeyword_4(), null); 
                  
            }

            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
              	    lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruleDateFunction


    // $ANTLR start entryRuleDateFunctionArgument
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2518:1: entryRuleDateFunctionArgument returns [String current=null] : iv_ruleDateFunctionArgument= ruleDateFunctionArgument EOF ;
    public final String entryRuleDateFunctionArgument() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleDateFunctionArgument = null;


        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2519:2: (iv_ruleDateFunctionArgument= ruleDateFunctionArgument EOF )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2520:2: iv_ruleDateFunctionArgument= ruleDateFunctionArgument EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getDateFunctionArgumentRule(), currentNode); 
            }
            pushFollow(FOLLOW_ruleDateFunctionArgument_in_entryRuleDateFunctionArgument4852);
            iv_ruleDateFunctionArgument=ruleDateFunctionArgument();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruleDateFunctionArgument.getText(); 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleDateFunctionArgument4863); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuleDateFunctionArgument


    // $ANTLR start ruleDateFunctionArgument
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2527:1: ruleDateFunctionArgument returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (this_DateFunctionArgumentMember_0= ruleDateFunctionArgumentMember ( (kw= '+' | kw= '-' ) this_DateFunctionArgumentMember_3= ruleDateFunctionArgumentMember )? ) ;
    public final AntlrDatatypeRuleToken ruleDateFunctionArgument() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;
        AntlrDatatypeRuleToken this_DateFunctionArgumentMember_0 = null;

        AntlrDatatypeRuleToken this_DateFunctionArgumentMember_3 = null;


         setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2532:6: ( (this_DateFunctionArgumentMember_0= ruleDateFunctionArgumentMember ( (kw= '+' | kw= '-' ) this_DateFunctionArgumentMember_3= ruleDateFunctionArgumentMember )? ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2533:1: (this_DateFunctionArgumentMember_0= ruleDateFunctionArgumentMember ( (kw= '+' | kw= '-' ) this_DateFunctionArgumentMember_3= ruleDateFunctionArgumentMember )? )
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2533:1: (this_DateFunctionArgumentMember_0= ruleDateFunctionArgumentMember ( (kw= '+' | kw= '-' ) this_DateFunctionArgumentMember_3= ruleDateFunctionArgumentMember )? )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2534:5: this_DateFunctionArgumentMember_0= ruleDateFunctionArgumentMember ( (kw= '+' | kw= '-' ) this_DateFunctionArgumentMember_3= ruleDateFunctionArgumentMember )?
            {
            if ( backtracking==0 ) {
               
                      currentNode=createCompositeNode(grammarAccess.getDateFunctionArgumentAccess().getDateFunctionArgumentMemberParserRuleCall_0(), currentNode); 
                  
            }
            pushFollow(FOLLOW_ruleDateFunctionArgumentMember_in_ruleDateFunctionArgument4910);
            this_DateFunctionArgumentMember_0=ruleDateFunctionArgumentMember();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {

              		current.merge(this_DateFunctionArgumentMember_0);
                  
            }
            if ( backtracking==0 ) {
               
                      currentNode = currentNode.getParent();
                  
            }
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2544:1: ( (kw= '+' | kw= '-' ) this_DateFunctionArgumentMember_3= ruleDateFunctionArgumentMember )?
            int alt28=2;
            int LA28_0 = input.LA(1);

            if ( ((LA28_0>=56 && LA28_0<=57)) ) {
                alt28=1;
            }
            switch (alt28) {
                case 1 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2544:2: (kw= '+' | kw= '-' ) this_DateFunctionArgumentMember_3= ruleDateFunctionArgumentMember
                    {
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2544:2: (kw= '+' | kw= '-' )
                    int alt27=2;
                    int LA27_0 = input.LA(1);

                    if ( (LA27_0==56) ) {
                        alt27=1;
                    }
                    else if ( (LA27_0==57) ) {
                        alt27=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("2544:2: (kw= '+' | kw= '-' )", 27, 0, input);

                        throw nvae;
                    }
                    switch (alt27) {
                        case 1 :
                            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2545:2: kw= '+'
                            {
                            kw=(Token)input.LT(1);
                            match(input,56,FOLLOW_56_in_ruleDateFunctionArgument4930); if (failed) return current;
                            if ( backtracking==0 ) {

                                      current.merge(kw);
                                      createLeafNode(grammarAccess.getDateFunctionArgumentAccess().getPlusSignKeyword_1_0_0(), null); 
                                  
                            }

                            }
                            break;
                        case 2 :
                            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2552:2: kw= '-'
                            {
                            kw=(Token)input.LT(1);
                            match(input,57,FOLLOW_57_in_ruleDateFunctionArgument4949); if (failed) return current;
                            if ( backtracking==0 ) {

                                      current.merge(kw);
                                      createLeafNode(grammarAccess.getDateFunctionArgumentAccess().getHyphenMinusKeyword_1_0_1(), null); 
                                  
                            }

                            }
                            break;

                    }

                    if ( backtracking==0 ) {
                       
                              currentNode=createCompositeNode(grammarAccess.getDateFunctionArgumentAccess().getDateFunctionArgumentMemberParserRuleCall_1_1(), currentNode); 
                          
                    }
                    pushFollow(FOLLOW_ruleDateFunctionArgumentMember_in_ruleDateFunctionArgument4972);
                    this_DateFunctionArgumentMember_3=ruleDateFunctionArgumentMember();
                    _fsp--;
                    if (failed) return current;
                    if ( backtracking==0 ) {

                      		current.merge(this_DateFunctionArgumentMember_3);
                          
                    }
                    if ( backtracking==0 ) {
                       
                              currentNode = currentNode.getParent();
                          
                    }

                    }
                    break;

            }


            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
              	    lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruleDateFunctionArgument


    // $ANTLR start entryRuleDateFunctionArgumentMember
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2576:1: entryRuleDateFunctionArgumentMember returns [String current=null] : iv_ruleDateFunctionArgumentMember= ruleDateFunctionArgumentMember EOF ;
    public final String entryRuleDateFunctionArgumentMember() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleDateFunctionArgumentMember = null;


        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2577:2: (iv_ruleDateFunctionArgumentMember= ruleDateFunctionArgumentMember EOF )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2578:2: iv_ruleDateFunctionArgumentMember= ruleDateFunctionArgumentMember EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getDateFunctionArgumentMemberRule(), currentNode); 
            }
            pushFollow(FOLLOW_ruleDateFunctionArgumentMember_in_entryRuleDateFunctionArgumentMember5020);
            iv_ruleDateFunctionArgumentMember=ruleDateFunctionArgumentMember();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruleDateFunctionArgumentMember.getText(); 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleDateFunctionArgumentMember5031); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuleDateFunctionArgumentMember


    // $ANTLR start ruleDateFunctionArgumentMember
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2585:1: ruleDateFunctionArgumentMember returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (this_INT_0= RULE_INT | this_DateConstant_1= ruleDateConstant ) ;
    public final AntlrDatatypeRuleToken ruleDateFunctionArgumentMember() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token this_INT_0=null;
        AntlrDatatypeRuleToken this_DateConstant_1 = null;


         setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2590:6: ( (this_INT_0= RULE_INT | this_DateConstant_1= ruleDateConstant ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2591:1: (this_INT_0= RULE_INT | this_DateConstant_1= ruleDateConstant )
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2591:1: (this_INT_0= RULE_INT | this_DateConstant_1= ruleDateConstant )
            int alt29=2;
            int LA29_0 = input.LA(1);

            if ( (LA29_0==RULE_INT) ) {
                alt29=1;
            }
            else if ( ((LA29_0>=54 && LA29_0<=55)) ) {
                alt29=2;
            }
            else {
                if (backtracking>0) {failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("2591:1: (this_INT_0= RULE_INT | this_DateConstant_1= ruleDateConstant )", 29, 0, input);

                throw nvae;
            }
            switch (alt29) {
                case 1 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2591:6: this_INT_0= RULE_INT
                    {
                    this_INT_0=(Token)input.LT(1);
                    match(input,RULE_INT,FOLLOW_RULE_INT_in_ruleDateFunctionArgumentMember5071); if (failed) return current;
                    if ( backtracking==0 ) {

                      		current.merge(this_INT_0);
                          
                    }
                    if ( backtracking==0 ) {
                       
                          createLeafNode(grammarAccess.getDateFunctionArgumentMemberAccess().getINTTerminalRuleCall_0(), null); 
                          
                    }

                    }
                    break;
                case 2 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2600:5: this_DateConstant_1= ruleDateConstant
                    {
                    if ( backtracking==0 ) {
                       
                              currentNode=createCompositeNode(grammarAccess.getDateFunctionArgumentMemberAccess().getDateConstantParserRuleCall_1(), currentNode); 
                          
                    }
                    pushFollow(FOLLOW_ruleDateConstant_in_ruleDateFunctionArgumentMember5104);
                    this_DateConstant_1=ruleDateConstant();
                    _fsp--;
                    if (failed) return current;
                    if ( backtracking==0 ) {

                      		current.merge(this_DateConstant_1);
                          
                    }
                    if ( backtracking==0 ) {
                       
                              currentNode = currentNode.getParent();
                          
                    }

                    }
                    break;

            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
              	    lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruleDateFunctionArgumentMember


    // $ANTLR start entryRuleRangeValidationRuleDeclaration
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2618:1: entryRuleRangeValidationRuleDeclaration returns [EObject current=null] : iv_ruleRangeValidationRuleDeclaration= ruleRangeValidationRuleDeclaration EOF ;
    public final EObject entryRuleRangeValidationRuleDeclaration() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleRangeValidationRuleDeclaration = null;


        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2619:2: (iv_ruleRangeValidationRuleDeclaration= ruleRangeValidationRuleDeclaration EOF )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2620:2: iv_ruleRangeValidationRuleDeclaration= ruleRangeValidationRuleDeclaration EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getRangeValidationRuleDeclarationRule(), currentNode); 
            }
            pushFollow(FOLLOW_ruleRangeValidationRuleDeclaration_in_entryRuleRangeValidationRuleDeclaration5149);
            iv_ruleRangeValidationRuleDeclaration=ruleRangeValidationRuleDeclaration();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruleRangeValidationRuleDeclaration; 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleRangeValidationRuleDeclaration5159); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuleRangeValidationRuleDeclaration


    // $ANTLR start ruleRangeValidationRuleDeclaration
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2627:1: ruleRangeValidationRuleDeclaration returns [EObject current=null] : ( ( ( (lv_name_0_1= 'range' | lv_name_0_2= 'length' ) ) ) '(' ( (lv_arg_2_0= ruleFieldReference ) ) ')' '{' ( (lv_range_5_0= ruleRange ) ) '}' ) ;
    public final EObject ruleRangeValidationRuleDeclaration() throws RecognitionException {
        EObject current = null;

        Token lv_name_0_1=null;
        Token lv_name_0_2=null;
        EObject lv_arg_2_0 = null;

        EObject lv_range_5_0 = null;


         EObject temp=null; setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2632:6: ( ( ( ( (lv_name_0_1= 'range' | lv_name_0_2= 'length' ) ) ) '(' ( (lv_arg_2_0= ruleFieldReference ) ) ')' '{' ( (lv_range_5_0= ruleRange ) ) '}' ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2633:1: ( ( ( (lv_name_0_1= 'range' | lv_name_0_2= 'length' ) ) ) '(' ( (lv_arg_2_0= ruleFieldReference ) ) ')' '{' ( (lv_range_5_0= ruleRange ) ) '}' )
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2633:1: ( ( ( (lv_name_0_1= 'range' | lv_name_0_2= 'length' ) ) ) '(' ( (lv_arg_2_0= ruleFieldReference ) ) ')' '{' ( (lv_range_5_0= ruleRange ) ) '}' )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2633:2: ( ( (lv_name_0_1= 'range' | lv_name_0_2= 'length' ) ) ) '(' ( (lv_arg_2_0= ruleFieldReference ) ) ')' '{' ( (lv_range_5_0= ruleRange ) ) '}'
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2633:2: ( ( (lv_name_0_1= 'range' | lv_name_0_2= 'length' ) ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2634:1: ( (lv_name_0_1= 'range' | lv_name_0_2= 'length' ) )
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2634:1: ( (lv_name_0_1= 'range' | lv_name_0_2= 'length' ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2635:1: (lv_name_0_1= 'range' | lv_name_0_2= 'length' )
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2635:1: (lv_name_0_1= 'range' | lv_name_0_2= 'length' )
            int alt30=2;
            int LA30_0 = input.LA(1);

            if ( (LA30_0==58) ) {
                alt30=1;
            }
            else if ( (LA30_0==59) ) {
                alt30=2;
            }
            else {
                if (backtracking>0) {failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("2635:1: (lv_name_0_1= 'range' | lv_name_0_2= 'length' )", 30, 0, input);

                throw nvae;
            }
            switch (alt30) {
                case 1 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2636:3: lv_name_0_1= 'range'
                    {
                    lv_name_0_1=(Token)input.LT(1);
                    match(input,58,FOLLOW_58_in_ruleRangeValidationRuleDeclaration5204); if (failed) return current;
                    if ( backtracking==0 ) {

                              createLeafNode(grammarAccess.getRangeValidationRuleDeclarationAccess().getNameRangeKeyword_0_0_0(), "name"); 
                          
                    }
                    if ( backtracking==0 ) {

                      	        if (current==null) {
                      	            current = factory.create(grammarAccess.getRangeValidationRuleDeclarationRule().getType().getClassifier());
                      	            associateNodeWithAstElement(currentNode, current);
                      	        }
                      	        
                      	        try {
                      	       		set(current, "name", lv_name_0_1, null, lastConsumedNode);
                      	        } catch (ValueConverterException vce) {
                      				handleValueConverterException(vce);
                      	        }
                      	    
                    }

                    }
                    break;
                case 2 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2654:8: lv_name_0_2= 'length'
                    {
                    lv_name_0_2=(Token)input.LT(1);
                    match(input,59,FOLLOW_59_in_ruleRangeValidationRuleDeclaration5233); if (failed) return current;
                    if ( backtracking==0 ) {

                              createLeafNode(grammarAccess.getRangeValidationRuleDeclarationAccess().getNameLengthKeyword_0_0_1(), "name"); 
                          
                    }
                    if ( backtracking==0 ) {

                      	        if (current==null) {
                      	            current = factory.create(grammarAccess.getRangeValidationRuleDeclarationRule().getType().getClassifier());
                      	            associateNodeWithAstElement(currentNode, current);
                      	        }
                      	        
                      	        try {
                      	       		set(current, "name", lv_name_0_2, null, lastConsumedNode);
                      	        } catch (ValueConverterException vce) {
                      				handleValueConverterException(vce);
                      	        }
                      	    
                    }

                    }
                    break;

            }


            }


            }

            match(input,43,FOLLOW_43_in_ruleRangeValidationRuleDeclaration5259); if (failed) return current;
            if ( backtracking==0 ) {

                      createLeafNode(grammarAccess.getRangeValidationRuleDeclarationAccess().getLeftParenthesisKeyword_1(), null); 
                  
            }
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2679:1: ( (lv_arg_2_0= ruleFieldReference ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2680:1: (lv_arg_2_0= ruleFieldReference )
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2680:1: (lv_arg_2_0= ruleFieldReference )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2681:3: lv_arg_2_0= ruleFieldReference
            {
            if ( backtracking==0 ) {
               
              	        currentNode=createCompositeNode(grammarAccess.getRangeValidationRuleDeclarationAccess().getArgFieldReferenceParserRuleCall_2_0(), currentNode); 
              	    
            }
            pushFollow(FOLLOW_ruleFieldReference_in_ruleRangeValidationRuleDeclaration5280);
            lv_arg_2_0=ruleFieldReference();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {

              	        if (current==null) {
              	            current = factory.create(grammarAccess.getRangeValidationRuleDeclarationRule().getType().getClassifier());
              	            associateNodeWithAstElement(currentNode.getParent(), current);
              	        }
              	        try {
              	       		set(
              	       			current, 
              	       			"arg",
              	        		lv_arg_2_0, 
              	        		"FieldReference", 
              	        		currentNode);
              	        } catch (ValueConverterException vce) {
              				handleValueConverterException(vce);
              	        }
              	        currentNode = currentNode.getParent();
              	    
            }

            }


            }

            match(input,44,FOLLOW_44_in_ruleRangeValidationRuleDeclaration5290); if (failed) return current;
            if ( backtracking==0 ) {

                      createLeafNode(grammarAccess.getRangeValidationRuleDeclarationAccess().getRightParenthesisKeyword_3(), null); 
                  
            }
            match(input,27,FOLLOW_27_in_ruleRangeValidationRuleDeclaration5300); if (failed) return current;
            if ( backtracking==0 ) {

                      createLeafNode(grammarAccess.getRangeValidationRuleDeclarationAccess().getLeftCurlyBracketKeyword_4(), null); 
                  
            }
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2711:1: ( (lv_range_5_0= ruleRange ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2712:1: (lv_range_5_0= ruleRange )
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2712:1: (lv_range_5_0= ruleRange )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2713:3: lv_range_5_0= ruleRange
            {
            if ( backtracking==0 ) {
               
              	        currentNode=createCompositeNode(grammarAccess.getRangeValidationRuleDeclarationAccess().getRangeRangeParserRuleCall_5_0(), currentNode); 
              	    
            }
            pushFollow(FOLLOW_ruleRange_in_ruleRangeValidationRuleDeclaration5321);
            lv_range_5_0=ruleRange();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {

              	        if (current==null) {
              	            current = factory.create(grammarAccess.getRangeValidationRuleDeclarationRule().getType().getClassifier());
              	            associateNodeWithAstElement(currentNode.getParent(), current);
              	        }
              	        try {
              	       		set(
              	       			current, 
              	       			"range",
              	        		lv_range_5_0, 
              	        		"Range", 
              	        		currentNode);
              	        } catch (ValueConverterException vce) {
              				handleValueConverterException(vce);
              	        }
              	        currentNode = currentNode.getParent();
              	    
            }

            }


            }

            match(input,29,FOLLOW_29_in_ruleRangeValidationRuleDeclaration5331); if (failed) return current;
            if ( backtracking==0 ) {

                      createLeafNode(grammarAccess.getRangeValidationRuleDeclarationAccess().getRightCurlyBracketKeyword_6(), null); 
                  
            }

            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
                  	lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruleRangeValidationRuleDeclaration


    // $ANTLR start entryRuleRegexValidationRuleDeclaration
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2747:1: entryRuleRegexValidationRuleDeclaration returns [EObject current=null] : iv_ruleRegexValidationRuleDeclaration= ruleRegexValidationRuleDeclaration EOF ;
    public final EObject entryRuleRegexValidationRuleDeclaration() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleRegexValidationRuleDeclaration = null;


        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2748:2: (iv_ruleRegexValidationRuleDeclaration= ruleRegexValidationRuleDeclaration EOF )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2749:2: iv_ruleRegexValidationRuleDeclaration= ruleRegexValidationRuleDeclaration EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getRegexValidationRuleDeclarationRule(), currentNode); 
            }
            pushFollow(FOLLOW_ruleRegexValidationRuleDeclaration_in_entryRuleRegexValidationRuleDeclaration5367);
            iv_ruleRegexValidationRuleDeclaration=ruleRegexValidationRuleDeclaration();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruleRegexValidationRuleDeclaration; 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleRegexValidationRuleDeclaration5377); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuleRegexValidationRuleDeclaration


    // $ANTLR start ruleRegexValidationRuleDeclaration
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2756:1: ruleRegexValidationRuleDeclaration returns [EObject current=null] : ( ( (lv_name_0_0= 'matches' ) ) '(' ( (lv_arg_2_0= ruleFieldReference ) ) ')' '{' ( (lv_exp_5_0= ruleREGEX ) ) '}' ) ;
    public final EObject ruleRegexValidationRuleDeclaration() throws RecognitionException {
        EObject current = null;

        Token lv_name_0_0=null;
        EObject lv_arg_2_0 = null;

        AntlrDatatypeRuleToken lv_exp_5_0 = null;


         EObject temp=null; setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2761:6: ( ( ( (lv_name_0_0= 'matches' ) ) '(' ( (lv_arg_2_0= ruleFieldReference ) ) ')' '{' ( (lv_exp_5_0= ruleREGEX ) ) '}' ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2762:1: ( ( (lv_name_0_0= 'matches' ) ) '(' ( (lv_arg_2_0= ruleFieldReference ) ) ')' '{' ( (lv_exp_5_0= ruleREGEX ) ) '}' )
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2762:1: ( ( (lv_name_0_0= 'matches' ) ) '(' ( (lv_arg_2_0= ruleFieldReference ) ) ')' '{' ( (lv_exp_5_0= ruleREGEX ) ) '}' )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2762:2: ( (lv_name_0_0= 'matches' ) ) '(' ( (lv_arg_2_0= ruleFieldReference ) ) ')' '{' ( (lv_exp_5_0= ruleREGEX ) ) '}'
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2762:2: ( (lv_name_0_0= 'matches' ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2763:1: (lv_name_0_0= 'matches' )
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2763:1: (lv_name_0_0= 'matches' )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2764:3: lv_name_0_0= 'matches'
            {
            lv_name_0_0=(Token)input.LT(1);
            match(input,60,FOLLOW_60_in_ruleRegexValidationRuleDeclaration5420); if (failed) return current;
            if ( backtracking==0 ) {

                      createLeafNode(grammarAccess.getRegexValidationRuleDeclarationAccess().getNameMatchesKeyword_0_0(), "name"); 
                  
            }
            if ( backtracking==0 ) {

              	        if (current==null) {
              	            current = factory.create(grammarAccess.getRegexValidationRuleDeclarationRule().getType().getClassifier());
              	            associateNodeWithAstElement(currentNode, current);
              	        }
              	        
              	        try {
              	       		set(current, "name", lv_name_0_0, "matches", lastConsumedNode);
              	        } catch (ValueConverterException vce) {
              				handleValueConverterException(vce);
              	        }
              	    
            }

            }


            }

            match(input,43,FOLLOW_43_in_ruleRegexValidationRuleDeclaration5443); if (failed) return current;
            if ( backtracking==0 ) {

                      createLeafNode(grammarAccess.getRegexValidationRuleDeclarationAccess().getLeftParenthesisKeyword_1(), null); 
                  
            }
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2787:1: ( (lv_arg_2_0= ruleFieldReference ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2788:1: (lv_arg_2_0= ruleFieldReference )
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2788:1: (lv_arg_2_0= ruleFieldReference )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2789:3: lv_arg_2_0= ruleFieldReference
            {
            if ( backtracking==0 ) {
               
              	        currentNode=createCompositeNode(grammarAccess.getRegexValidationRuleDeclarationAccess().getArgFieldReferenceParserRuleCall_2_0(), currentNode); 
              	    
            }
            pushFollow(FOLLOW_ruleFieldReference_in_ruleRegexValidationRuleDeclaration5464);
            lv_arg_2_0=ruleFieldReference();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {

              	        if (current==null) {
              	            current = factory.create(grammarAccess.getRegexValidationRuleDeclarationRule().getType().getClassifier());
              	            associateNodeWithAstElement(currentNode.getParent(), current);
              	        }
              	        try {
              	       		set(
              	       			current, 
              	       			"arg",
              	        		lv_arg_2_0, 
              	        		"FieldReference", 
              	        		currentNode);
              	        } catch (ValueConverterException vce) {
              				handleValueConverterException(vce);
              	        }
              	        currentNode = currentNode.getParent();
              	    
            }

            }


            }

            match(input,44,FOLLOW_44_in_ruleRegexValidationRuleDeclaration5474); if (failed) return current;
            if ( backtracking==0 ) {

                      createLeafNode(grammarAccess.getRegexValidationRuleDeclarationAccess().getRightParenthesisKeyword_3(), null); 
                  
            }
            match(input,27,FOLLOW_27_in_ruleRegexValidationRuleDeclaration5484); if (failed) return current;
            if ( backtracking==0 ) {

                      createLeafNode(grammarAccess.getRegexValidationRuleDeclarationAccess().getLeftCurlyBracketKeyword_4(), null); 
                  
            }
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2819:1: ( (lv_exp_5_0= ruleREGEX ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2820:1: (lv_exp_5_0= ruleREGEX )
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2820:1: (lv_exp_5_0= ruleREGEX )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2821:3: lv_exp_5_0= ruleREGEX
            {
            if ( backtracking==0 ) {
               
              	        currentNode=createCompositeNode(grammarAccess.getRegexValidationRuleDeclarationAccess().getExpREGEXParserRuleCall_5_0(), currentNode); 
              	    
            }
            pushFollow(FOLLOW_ruleREGEX_in_ruleRegexValidationRuleDeclaration5505);
            lv_exp_5_0=ruleREGEX();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {

              	        if (current==null) {
              	            current = factory.create(grammarAccess.getRegexValidationRuleDeclarationRule().getType().getClassifier());
              	            associateNodeWithAstElement(currentNode.getParent(), current);
              	        }
              	        try {
              	       		set(
              	       			current, 
              	       			"exp",
              	        		lv_exp_5_0, 
              	        		"REGEX", 
              	        		currentNode);
              	        } catch (ValueConverterException vce) {
              				handleValueConverterException(vce);
              	        }
              	        currentNode = currentNode.getParent();
              	    
            }

            }


            }

            match(input,29,FOLLOW_29_in_ruleRegexValidationRuleDeclaration5515); if (failed) return current;
            if ( backtracking==0 ) {

                      createLeafNode(grammarAccess.getRegexValidationRuleDeclarationAccess().getRightCurlyBracketKeyword_6(), null); 
                  
            }

            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
                  	lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruleRegexValidationRuleDeclaration


    // $ANTLR start entryRuleREGEX
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2855:1: entryRuleREGEX returns [String current=null] : iv_ruleREGEX= ruleREGEX EOF ;
    public final String entryRuleREGEX() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleREGEX = null;


        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2856:2: (iv_ruleREGEX= ruleREGEX EOF )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2857:2: iv_ruleREGEX= ruleREGEX EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getREGEXRule(), currentNode); 
            }
            pushFollow(FOLLOW_ruleREGEX_in_entryRuleREGEX5552);
            iv_ruleREGEX=ruleREGEX();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruleREGEX.getText(); 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleREGEX5563); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuleREGEX


    // $ANTLR start ruleREGEX
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2864:1: ruleREGEX returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : this_STRING_0= RULE_STRING ;
    public final AntlrDatatypeRuleToken ruleREGEX() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token this_STRING_0=null;

         setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2869:6: (this_STRING_0= RULE_STRING )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2870:5: this_STRING_0= RULE_STRING
            {
            this_STRING_0=(Token)input.LT(1);
            match(input,RULE_STRING,FOLLOW_RULE_STRING_in_ruleREGEX5602); if (failed) return current;
            if ( backtracking==0 ) {

              		current.merge(this_STRING_0);
                  
            }
            if ( backtracking==0 ) {
               
                  createLeafNode(grammarAccess.getREGEXAccess().getSTRINGTerminalRuleCall(), null); 
                  
            }

            }

            if ( backtracking==0 ) {
               resetLookahead(); 
              	    lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruleREGEX


    // $ANTLR start entryRuleRange
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2885:1: entryRuleRange returns [EObject current=null] : iv_ruleRange= ruleRange EOF ;
    public final EObject entryRuleRange() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleRange = null;


        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2886:2: (iv_ruleRange= ruleRange EOF )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2887:2: iv_ruleRange= ruleRange EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getRangeRule(), currentNode); 
            }
            pushFollow(FOLLOW_ruleRange_in_entryRuleRange5646);
            iv_ruleRange=ruleRange();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruleRange; 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleRange5656); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuleRange


    // $ANTLR start ruleRange
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2894:1: ruleRange returns [EObject current=null] : ( ( (lv_f_0_0= ruleRangeBound ) ) '..' ( (lv_t_2_0= ruleRangeBound ) ) ) ;
    public final EObject ruleRange() throws RecognitionException {
        EObject current = null;

        AntlrDatatypeRuleToken lv_f_0_0 = null;

        AntlrDatatypeRuleToken lv_t_2_0 = null;


         EObject temp=null; setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2899:6: ( ( ( (lv_f_0_0= ruleRangeBound ) ) '..' ( (lv_t_2_0= ruleRangeBound ) ) ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2900:1: ( ( (lv_f_0_0= ruleRangeBound ) ) '..' ( (lv_t_2_0= ruleRangeBound ) ) )
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2900:1: ( ( (lv_f_0_0= ruleRangeBound ) ) '..' ( (lv_t_2_0= ruleRangeBound ) ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2900:2: ( (lv_f_0_0= ruleRangeBound ) ) '..' ( (lv_t_2_0= ruleRangeBound ) )
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2900:2: ( (lv_f_0_0= ruleRangeBound ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2901:1: (lv_f_0_0= ruleRangeBound )
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2901:1: (lv_f_0_0= ruleRangeBound )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2902:3: lv_f_0_0= ruleRangeBound
            {
            if ( backtracking==0 ) {
               
              	        currentNode=createCompositeNode(grammarAccess.getRangeAccess().getFRangeBoundParserRuleCall_0_0(), currentNode); 
              	    
            }
            pushFollow(FOLLOW_ruleRangeBound_in_ruleRange5702);
            lv_f_0_0=ruleRangeBound();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {

              	        if (current==null) {
              	            current = factory.create(grammarAccess.getRangeRule().getType().getClassifier());
              	            associateNodeWithAstElement(currentNode.getParent(), current);
              	        }
              	        try {
              	       		set(
              	       			current, 
              	       			"f",
              	        		lv_f_0_0, 
              	        		"RangeBound", 
              	        		currentNode);
              	        } catch (ValueConverterException vce) {
              				handleValueConverterException(vce);
              	        }
              	        currentNode = currentNode.getParent();
              	    
            }

            }


            }

            match(input,61,FOLLOW_61_in_ruleRange5712); if (failed) return current;
            if ( backtracking==0 ) {

                      createLeafNode(grammarAccess.getRangeAccess().getFullStopFullStopKeyword_1(), null); 
                  
            }
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2928:1: ( (lv_t_2_0= ruleRangeBound ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2929:1: (lv_t_2_0= ruleRangeBound )
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2929:1: (lv_t_2_0= ruleRangeBound )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2930:3: lv_t_2_0= ruleRangeBound
            {
            if ( backtracking==0 ) {
               
              	        currentNode=createCompositeNode(grammarAccess.getRangeAccess().getTRangeBoundParserRuleCall_2_0(), currentNode); 
              	    
            }
            pushFollow(FOLLOW_ruleRangeBound_in_ruleRange5733);
            lv_t_2_0=ruleRangeBound();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {

              	        if (current==null) {
              	            current = factory.create(grammarAccess.getRangeRule().getType().getClassifier());
              	            associateNodeWithAstElement(currentNode.getParent(), current);
              	        }
              	        try {
              	       		set(
              	       			current, 
              	       			"t",
              	        		lv_t_2_0, 
              	        		"RangeBound", 
              	        		currentNode);
              	        } catch (ValueConverterException vce) {
              				handleValueConverterException(vce);
              	        }
              	        currentNode = currentNode.getParent();
              	    
            }

            }


            }


            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
                  	lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruleRange


    // $ANTLR start entryRuleRangeBound
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2960:1: entryRuleRangeBound returns [String current=null] : iv_ruleRangeBound= ruleRangeBound EOF ;
    public final String entryRuleRangeBound() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleRangeBound = null;


        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2961:2: (iv_ruleRangeBound= ruleRangeBound EOF )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2962:2: iv_ruleRangeBound= ruleRangeBound EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getRangeBoundRule(), currentNode); 
            }
            pushFollow(FOLLOW_ruleRangeBound_in_entryRuleRangeBound5770);
            iv_ruleRangeBound=ruleRangeBound();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruleRangeBound.getText(); 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleRangeBound5781); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuleRangeBound


    // $ANTLR start ruleRangeBound
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2969:1: ruleRangeBound returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (this_INT_0= RULE_INT | kw= '?' ) ;
    public final AntlrDatatypeRuleToken ruleRangeBound() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token this_INT_0=null;
        Token kw=null;

         setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2974:6: ( (this_INT_0= RULE_INT | kw= '?' ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2975:1: (this_INT_0= RULE_INT | kw= '?' )
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2975:1: (this_INT_0= RULE_INT | kw= '?' )
            int alt31=2;
            int LA31_0 = input.LA(1);

            if ( (LA31_0==RULE_INT) ) {
                alt31=1;
            }
            else if ( (LA31_0==62) ) {
                alt31=2;
            }
            else {
                if (backtracking>0) {failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("2975:1: (this_INT_0= RULE_INT | kw= '?' )", 31, 0, input);

                throw nvae;
            }
            switch (alt31) {
                case 1 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2975:6: this_INT_0= RULE_INT
                    {
                    this_INT_0=(Token)input.LT(1);
                    match(input,RULE_INT,FOLLOW_RULE_INT_in_ruleRangeBound5821); if (failed) return current;
                    if ( backtracking==0 ) {

                      		current.merge(this_INT_0);
                          
                    }
                    if ( backtracking==0 ) {
                       
                          createLeafNode(grammarAccess.getRangeBoundAccess().getINTTerminalRuleCall_0(), null); 
                          
                    }

                    }
                    break;
                case 2 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2984:2: kw= '?'
                    {
                    kw=(Token)input.LT(1);
                    match(input,62,FOLLOW_62_in_ruleRangeBound5845); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getRangeBoundAccess().getQuestionMarkKeyword_1(), null); 
                          
                    }

                    }
                    break;

            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
              	    lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruleRangeBound


    // $ANTLR start entryRuleUniquenessValidationRuleDeclaration
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2997:1: entryRuleUniquenessValidationRuleDeclaration returns [EObject current=null] : iv_ruleUniquenessValidationRuleDeclaration= ruleUniquenessValidationRuleDeclaration EOF ;
    public final EObject entryRuleUniquenessValidationRuleDeclaration() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleUniquenessValidationRuleDeclaration = null;


        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2998:2: (iv_ruleUniquenessValidationRuleDeclaration= ruleUniquenessValidationRuleDeclaration EOF )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:2999:2: iv_ruleUniquenessValidationRuleDeclaration= ruleUniquenessValidationRuleDeclaration EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getUniquenessValidationRuleDeclarationRule(), currentNode); 
            }
            pushFollow(FOLLOW_ruleUniquenessValidationRuleDeclaration_in_entryRuleUniquenessValidationRuleDeclaration5885);
            iv_ruleUniquenessValidationRuleDeclaration=ruleUniquenessValidationRuleDeclaration();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruleUniquenessValidationRuleDeclaration; 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleUniquenessValidationRuleDeclaration5895); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuleUniquenessValidationRuleDeclaration


    // $ANTLR start ruleUniquenessValidationRuleDeclaration
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3006:1: ruleUniquenessValidationRuleDeclaration returns [EObject current=null] : ( ( (lv_name_0_0= 'unique' ) ) ( (lv_args_1_0= ruleFunctionArguments ) ) ) ;
    public final EObject ruleUniquenessValidationRuleDeclaration() throws RecognitionException {
        EObject current = null;

        Token lv_name_0_0=null;
        EObject lv_args_1_0 = null;


         EObject temp=null; setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3011:6: ( ( ( (lv_name_0_0= 'unique' ) ) ( (lv_args_1_0= ruleFunctionArguments ) ) ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3012:1: ( ( (lv_name_0_0= 'unique' ) ) ( (lv_args_1_0= ruleFunctionArguments ) ) )
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3012:1: ( ( (lv_name_0_0= 'unique' ) ) ( (lv_args_1_0= ruleFunctionArguments ) ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3012:2: ( (lv_name_0_0= 'unique' ) ) ( (lv_args_1_0= ruleFunctionArguments ) )
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3012:2: ( (lv_name_0_0= 'unique' ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3013:1: (lv_name_0_0= 'unique' )
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3013:1: (lv_name_0_0= 'unique' )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3014:3: lv_name_0_0= 'unique'
            {
            lv_name_0_0=(Token)input.LT(1);
            match(input,14,FOLLOW_14_in_ruleUniquenessValidationRuleDeclaration5938); if (failed) return current;
            if ( backtracking==0 ) {

                      createLeafNode(grammarAccess.getUniquenessValidationRuleDeclarationAccess().getNameUniqueKeyword_0_0(), "name"); 
                  
            }
            if ( backtracking==0 ) {

              	        if (current==null) {
              	            current = factory.create(grammarAccess.getUniquenessValidationRuleDeclarationRule().getType().getClassifier());
              	            associateNodeWithAstElement(currentNode, current);
              	        }
              	        
              	        try {
              	       		set(current, "name", lv_name_0_0, "unique", lastConsumedNode);
              	        } catch (ValueConverterException vce) {
              				handleValueConverterException(vce);
              	        }
              	    
            }

            }


            }

            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3033:2: ( (lv_args_1_0= ruleFunctionArguments ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3034:1: (lv_args_1_0= ruleFunctionArguments )
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3034:1: (lv_args_1_0= ruleFunctionArguments )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3035:3: lv_args_1_0= ruleFunctionArguments
            {
            if ( backtracking==0 ) {
               
              	        currentNode=createCompositeNode(grammarAccess.getUniquenessValidationRuleDeclarationAccess().getArgsFunctionArgumentsParserRuleCall_1_0(), currentNode); 
              	    
            }
            pushFollow(FOLLOW_ruleFunctionArguments_in_ruleUniquenessValidationRuleDeclaration5972);
            lv_args_1_0=ruleFunctionArguments();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {

              	        if (current==null) {
              	            current = factory.create(grammarAccess.getUniquenessValidationRuleDeclarationRule().getType().getClassifier());
              	            associateNodeWithAstElement(currentNode.getParent(), current);
              	        }
              	        try {
              	       		set(
              	       			current, 
              	       			"args",
              	        		lv_args_1_0, 
              	        		"FunctionArguments", 
              	        		currentNode);
              	        } catch (ValueConverterException vce) {
              				handleValueConverterException(vce);
              	        }
              	        currentNode = currentNode.getParent();
              	    
            }

            }


            }


            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
                  	lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruleUniquenessValidationRuleDeclaration


    // $ANTLR start entryRuleErrorMessage
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3065:1: entryRuleErrorMessage returns [EObject current=null] : iv_ruleErrorMessage= ruleErrorMessage EOF ;
    public final EObject entryRuleErrorMessage() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleErrorMessage = null;


        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3066:2: (iv_ruleErrorMessage= ruleErrorMessage EOF )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3067:2: iv_ruleErrorMessage= ruleErrorMessage EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getErrorMessageRule(), currentNode); 
            }
            pushFollow(FOLLOW_ruleErrorMessage_in_entryRuleErrorMessage6008);
            iv_ruleErrorMessage=ruleErrorMessage();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruleErrorMessage; 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleErrorMessage6018); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuleErrorMessage


    // $ANTLR start ruleErrorMessage
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3074:1: ruleErrorMessage returns [EObject current=null] : ( ':' ( (lv_message_1_0= RULE_STRING ) ) ) ;
    public final EObject ruleErrorMessage() throws RecognitionException {
        EObject current = null;

        Token lv_message_1_0=null;

         EObject temp=null; setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3079:6: ( ( ':' ( (lv_message_1_0= RULE_STRING ) ) ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3080:1: ( ':' ( (lv_message_1_0= RULE_STRING ) ) )
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3080:1: ( ':' ( (lv_message_1_0= RULE_STRING ) ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3080:3: ':' ( (lv_message_1_0= RULE_STRING ) )
            {
            match(input,63,FOLLOW_63_in_ruleErrorMessage6053); if (failed) return current;
            if ( backtracking==0 ) {

                      createLeafNode(grammarAccess.getErrorMessageAccess().getColonKeyword_0(), null); 
                  
            }
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3084:1: ( (lv_message_1_0= RULE_STRING ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3085:1: (lv_message_1_0= RULE_STRING )
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3085:1: (lv_message_1_0= RULE_STRING )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3086:3: lv_message_1_0= RULE_STRING
            {
            lv_message_1_0=(Token)input.LT(1);
            match(input,RULE_STRING,FOLLOW_RULE_STRING_in_ruleErrorMessage6070); if (failed) return current;
            if ( backtracking==0 ) {

              			createLeafNode(grammarAccess.getErrorMessageAccess().getMessageSTRINGTerminalRuleCall_1_0(), "message"); 
              		
            }
            if ( backtracking==0 ) {

              	        if (current==null) {
              	            current = factory.create(grammarAccess.getErrorMessageRule().getType().getClassifier());
              	            associateNodeWithAstElement(currentNode, current);
              	        }
              	        try {
              	       		set(
              	       			current, 
              	       			"message",
              	        		lv_message_1_0, 
              	        		"STRING", 
              	        		lastConsumedNode);
              	        } catch (ValueConverterException vce) {
              				handleValueConverterException(vce);
              	        }
              	    
            }

            }


            }


            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
                  	lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruleErrorMessage


    // $ANTLR start entryRuleNativeValidationRuleDeclaration
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3116:1: entryRuleNativeValidationRuleDeclaration returns [EObject current=null] : iv_ruleNativeValidationRuleDeclaration= ruleNativeValidationRuleDeclaration EOF ;
    public final EObject entryRuleNativeValidationRuleDeclaration() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleNativeValidationRuleDeclaration = null;


        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3117:2: (iv_ruleNativeValidationRuleDeclaration= ruleNativeValidationRuleDeclaration EOF )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3118:2: iv_ruleNativeValidationRuleDeclaration= ruleNativeValidationRuleDeclaration EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getNativeValidationRuleDeclarationRule(), currentNode); 
            }
            pushFollow(FOLLOW_ruleNativeValidationRuleDeclaration_in_entryRuleNativeValidationRuleDeclaration6111);
            iv_ruleNativeValidationRuleDeclaration=ruleNativeValidationRuleDeclaration();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruleNativeValidationRuleDeclaration; 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleNativeValidationRuleDeclaration6121); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuleNativeValidationRuleDeclaration


    // $ANTLR start ruleNativeValidationRuleDeclaration
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3125:1: ruleNativeValidationRuleDeclaration returns [EObject current=null] : ( ( ( RULE_ID ) ) '.' ( ( (lv_type_2_1= 'unique' | lv_type_2_2= 'notNull' | lv_type_2_3= 'NaN' | lv_type_2_4= 'notEmpty' | lv_type_2_5= 'notInt' | lv_type_2_6= 'notReal' | lv_type_2_7= 'notBoolean' ) ) ) '=' ( (lv_message_4_0= RULE_STRING ) ) ) ;
    public final EObject ruleNativeValidationRuleDeclaration() throws RecognitionException {
        EObject current = null;

        Token lv_type_2_1=null;
        Token lv_type_2_2=null;
        Token lv_type_2_3=null;
        Token lv_type_2_4=null;
        Token lv_type_2_5=null;
        Token lv_type_2_6=null;
        Token lv_type_2_7=null;
        Token lv_message_4_0=null;

         EObject temp=null; setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3130:6: ( ( ( ( RULE_ID ) ) '.' ( ( (lv_type_2_1= 'unique' | lv_type_2_2= 'notNull' | lv_type_2_3= 'NaN' | lv_type_2_4= 'notEmpty' | lv_type_2_5= 'notInt' | lv_type_2_6= 'notReal' | lv_type_2_7= 'notBoolean' ) ) ) '=' ( (lv_message_4_0= RULE_STRING ) ) ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3131:1: ( ( ( RULE_ID ) ) '.' ( ( (lv_type_2_1= 'unique' | lv_type_2_2= 'notNull' | lv_type_2_3= 'NaN' | lv_type_2_4= 'notEmpty' | lv_type_2_5= 'notInt' | lv_type_2_6= 'notReal' | lv_type_2_7= 'notBoolean' ) ) ) '=' ( (lv_message_4_0= RULE_STRING ) ) )
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3131:1: ( ( ( RULE_ID ) ) '.' ( ( (lv_type_2_1= 'unique' | lv_type_2_2= 'notNull' | lv_type_2_3= 'NaN' | lv_type_2_4= 'notEmpty' | lv_type_2_5= 'notInt' | lv_type_2_6= 'notReal' | lv_type_2_7= 'notBoolean' ) ) ) '=' ( (lv_message_4_0= RULE_STRING ) ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3131:2: ( ( RULE_ID ) ) '.' ( ( (lv_type_2_1= 'unique' | lv_type_2_2= 'notNull' | lv_type_2_3= 'NaN' | lv_type_2_4= 'notEmpty' | lv_type_2_5= 'notInt' | lv_type_2_6= 'notReal' | lv_type_2_7= 'notBoolean' ) ) ) '=' ( (lv_message_4_0= RULE_STRING ) )
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3131:2: ( ( RULE_ID ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3132:1: ( RULE_ID )
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3132:1: ( RULE_ID )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3133:3: RULE_ID
            {
            if ( backtracking==0 ) {
               
              		  /* */ 
              		
            }
            if ( backtracking==0 ) {

              			if (current==null) {
              	            current = factory.create(grammarAccess.getNativeValidationRuleDeclarationRule().getType().getClassifier());
              	            associateNodeWithAstElement(currentNode, current);
              	        }
                      
            }
            match(input,RULE_ID,FOLLOW_RULE_ID_in_ruleNativeValidationRuleDeclaration6168); if (failed) return current;
            if ( backtracking==0 ) {

              		createLeafNode(grammarAccess.getNativeValidationRuleDeclarationAccess().getFieldFieldDeclarationCrossReference_0_0(), "field"); 
              	
            }

            }


            }

            match(input,36,FOLLOW_36_in_ruleNativeValidationRuleDeclaration6178); if (failed) return current;
            if ( backtracking==0 ) {

                      createLeafNode(grammarAccess.getNativeValidationRuleDeclarationAccess().getFullStopKeyword_1(), null); 
                  
            }
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3152:1: ( ( (lv_type_2_1= 'unique' | lv_type_2_2= 'notNull' | lv_type_2_3= 'NaN' | lv_type_2_4= 'notEmpty' | lv_type_2_5= 'notInt' | lv_type_2_6= 'notReal' | lv_type_2_7= 'notBoolean' ) ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3153:1: ( (lv_type_2_1= 'unique' | lv_type_2_2= 'notNull' | lv_type_2_3= 'NaN' | lv_type_2_4= 'notEmpty' | lv_type_2_5= 'notInt' | lv_type_2_6= 'notReal' | lv_type_2_7= 'notBoolean' ) )
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3153:1: ( (lv_type_2_1= 'unique' | lv_type_2_2= 'notNull' | lv_type_2_3= 'NaN' | lv_type_2_4= 'notEmpty' | lv_type_2_5= 'notInt' | lv_type_2_6= 'notReal' | lv_type_2_7= 'notBoolean' ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3154:1: (lv_type_2_1= 'unique' | lv_type_2_2= 'notNull' | lv_type_2_3= 'NaN' | lv_type_2_4= 'notEmpty' | lv_type_2_5= 'notInt' | lv_type_2_6= 'notReal' | lv_type_2_7= 'notBoolean' )
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3154:1: (lv_type_2_1= 'unique' | lv_type_2_2= 'notNull' | lv_type_2_3= 'NaN' | lv_type_2_4= 'notEmpty' | lv_type_2_5= 'notInt' | lv_type_2_6= 'notReal' | lv_type_2_7= 'notBoolean' )
            int alt32=7;
            switch ( input.LA(1) ) {
            case 14:
                {
                alt32=1;
                }
                break;
            case 64:
                {
                alt32=2;
                }
                break;
            case 65:
                {
                alt32=3;
                }
                break;
            case 66:
                {
                alt32=4;
                }
                break;
            case 67:
                {
                alt32=5;
                }
                break;
            case 68:
                {
                alt32=6;
                }
                break;
            case 69:
                {
                alt32=7;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("3154:1: (lv_type_2_1= 'unique' | lv_type_2_2= 'notNull' | lv_type_2_3= 'NaN' | lv_type_2_4= 'notEmpty' | lv_type_2_5= 'notInt' | lv_type_2_6= 'notReal' | lv_type_2_7= 'notBoolean' )", 32, 0, input);

                throw nvae;
            }

            switch (alt32) {
                case 1 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3155:3: lv_type_2_1= 'unique'
                    {
                    lv_type_2_1=(Token)input.LT(1);
                    match(input,14,FOLLOW_14_in_ruleNativeValidationRuleDeclaration6198); if (failed) return current;
                    if ( backtracking==0 ) {

                              createLeafNode(grammarAccess.getNativeValidationRuleDeclarationAccess().getTypeUniqueKeyword_2_0_0(), "type"); 
                          
                    }
                    if ( backtracking==0 ) {

                      	        if (current==null) {
                      	            current = factory.create(grammarAccess.getNativeValidationRuleDeclarationRule().getType().getClassifier());
                      	            associateNodeWithAstElement(currentNode, current);
                      	        }
                      	        
                      	        try {
                      	       		set(current, "type", lv_type_2_1, null, lastConsumedNode);
                      	        } catch (ValueConverterException vce) {
                      				handleValueConverterException(vce);
                      	        }
                      	    
                    }

                    }
                    break;
                case 2 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3173:8: lv_type_2_2= 'notNull'
                    {
                    lv_type_2_2=(Token)input.LT(1);
                    match(input,64,FOLLOW_64_in_ruleNativeValidationRuleDeclaration6227); if (failed) return current;
                    if ( backtracking==0 ) {

                              createLeafNode(grammarAccess.getNativeValidationRuleDeclarationAccess().getTypeNotNullKeyword_2_0_1(), "type"); 
                          
                    }
                    if ( backtracking==0 ) {

                      	        if (current==null) {
                      	            current = factory.create(grammarAccess.getNativeValidationRuleDeclarationRule().getType().getClassifier());
                      	            associateNodeWithAstElement(currentNode, current);
                      	        }
                      	        
                      	        try {
                      	       		set(current, "type", lv_type_2_2, null, lastConsumedNode);
                      	        } catch (ValueConverterException vce) {
                      				handleValueConverterException(vce);
                      	        }
                      	    
                    }

                    }
                    break;
                case 3 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3191:8: lv_type_2_3= 'NaN'
                    {
                    lv_type_2_3=(Token)input.LT(1);
                    match(input,65,FOLLOW_65_in_ruleNativeValidationRuleDeclaration6256); if (failed) return current;
                    if ( backtracking==0 ) {

                              createLeafNode(grammarAccess.getNativeValidationRuleDeclarationAccess().getTypeNaNKeyword_2_0_2(), "type"); 
                          
                    }
                    if ( backtracking==0 ) {

                      	        if (current==null) {
                      	            current = factory.create(grammarAccess.getNativeValidationRuleDeclarationRule().getType().getClassifier());
                      	            associateNodeWithAstElement(currentNode, current);
                      	        }
                      	        
                      	        try {
                      	       		set(current, "type", lv_type_2_3, null, lastConsumedNode);
                      	        } catch (ValueConverterException vce) {
                      				handleValueConverterException(vce);
                      	        }
                      	    
                    }

                    }
                    break;
                case 4 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3209:8: lv_type_2_4= 'notEmpty'
                    {
                    lv_type_2_4=(Token)input.LT(1);
                    match(input,66,FOLLOW_66_in_ruleNativeValidationRuleDeclaration6285); if (failed) return current;
                    if ( backtracking==0 ) {

                              createLeafNode(grammarAccess.getNativeValidationRuleDeclarationAccess().getTypeNotEmptyKeyword_2_0_3(), "type"); 
                          
                    }
                    if ( backtracking==0 ) {

                      	        if (current==null) {
                      	            current = factory.create(grammarAccess.getNativeValidationRuleDeclarationRule().getType().getClassifier());
                      	            associateNodeWithAstElement(currentNode, current);
                      	        }
                      	        
                      	        try {
                      	       		set(current, "type", lv_type_2_4, null, lastConsumedNode);
                      	        } catch (ValueConverterException vce) {
                      				handleValueConverterException(vce);
                      	        }
                      	    
                    }

                    }
                    break;
                case 5 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3227:8: lv_type_2_5= 'notInt'
                    {
                    lv_type_2_5=(Token)input.LT(1);
                    match(input,67,FOLLOW_67_in_ruleNativeValidationRuleDeclaration6314); if (failed) return current;
                    if ( backtracking==0 ) {

                              createLeafNode(grammarAccess.getNativeValidationRuleDeclarationAccess().getTypeNotIntKeyword_2_0_4(), "type"); 
                          
                    }
                    if ( backtracking==0 ) {

                      	        if (current==null) {
                      	            current = factory.create(grammarAccess.getNativeValidationRuleDeclarationRule().getType().getClassifier());
                      	            associateNodeWithAstElement(currentNode, current);
                      	        }
                      	        
                      	        try {
                      	       		set(current, "type", lv_type_2_5, null, lastConsumedNode);
                      	        } catch (ValueConverterException vce) {
                      				handleValueConverterException(vce);
                      	        }
                      	    
                    }

                    }
                    break;
                case 6 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3245:8: lv_type_2_6= 'notReal'
                    {
                    lv_type_2_6=(Token)input.LT(1);
                    match(input,68,FOLLOW_68_in_ruleNativeValidationRuleDeclaration6343); if (failed) return current;
                    if ( backtracking==0 ) {

                              createLeafNode(grammarAccess.getNativeValidationRuleDeclarationAccess().getTypeNotRealKeyword_2_0_5(), "type"); 
                          
                    }
                    if ( backtracking==0 ) {

                      	        if (current==null) {
                      	            current = factory.create(grammarAccess.getNativeValidationRuleDeclarationRule().getType().getClassifier());
                      	            associateNodeWithAstElement(currentNode, current);
                      	        }
                      	        
                      	        try {
                      	       		set(current, "type", lv_type_2_6, null, lastConsumedNode);
                      	        } catch (ValueConverterException vce) {
                      				handleValueConverterException(vce);
                      	        }
                      	    
                    }

                    }
                    break;
                case 7 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3263:8: lv_type_2_7= 'notBoolean'
                    {
                    lv_type_2_7=(Token)input.LT(1);
                    match(input,69,FOLLOW_69_in_ruleNativeValidationRuleDeclaration6372); if (failed) return current;
                    if ( backtracking==0 ) {

                              createLeafNode(grammarAccess.getNativeValidationRuleDeclarationAccess().getTypeNotBooleanKeyword_2_0_6(), "type"); 
                          
                    }
                    if ( backtracking==0 ) {

                      	        if (current==null) {
                      	            current = factory.create(grammarAccess.getNativeValidationRuleDeclarationRule().getType().getClassifier());
                      	            associateNodeWithAstElement(currentNode, current);
                      	        }
                      	        
                      	        try {
                      	       		set(current, "type", lv_type_2_7, null, lastConsumedNode);
                      	        } catch (ValueConverterException vce) {
                      				handleValueConverterException(vce);
                      	        }
                      	    
                    }

                    }
                    break;

            }


            }


            }

            match(input,13,FOLLOW_13_in_ruleNativeValidationRuleDeclaration6398); if (failed) return current;
            if ( backtracking==0 ) {

                      createLeafNode(grammarAccess.getNativeValidationRuleDeclarationAccess().getEqualsSignKeyword_3(), null); 
                  
            }
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3288:1: ( (lv_message_4_0= RULE_STRING ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3289:1: (lv_message_4_0= RULE_STRING )
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3289:1: (lv_message_4_0= RULE_STRING )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3290:3: lv_message_4_0= RULE_STRING
            {
            lv_message_4_0=(Token)input.LT(1);
            match(input,RULE_STRING,FOLLOW_RULE_STRING_in_ruleNativeValidationRuleDeclaration6415); if (failed) return current;
            if ( backtracking==0 ) {

              			createLeafNode(grammarAccess.getNativeValidationRuleDeclarationAccess().getMessageSTRINGTerminalRuleCall_4_0(), "message"); 
              		
            }
            if ( backtracking==0 ) {

              	        if (current==null) {
              	            current = factory.create(grammarAccess.getNativeValidationRuleDeclarationRule().getType().getClassifier());
              	            associateNodeWithAstElement(currentNode, current);
              	        }
              	        try {
              	       		set(
              	       			current, 
              	       			"message",
              	        		lv_message_4_0, 
              	        		"STRING", 
              	        		lastConsumedNode);
              	        } catch (ValueConverterException vce) {
              				handleValueConverterException(vce);
              	        }
              	    
            }

            }


            }


            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
                  	lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruleNativeValidationRuleDeclaration


    // $ANTLR start entryRuleFunctionDeclaration
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3320:1: entryRuleFunctionDeclaration returns [EObject current=null] : iv_ruleFunctionDeclaration= ruleFunctionDeclaration EOF ;
    public final EObject entryRuleFunctionDeclaration() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleFunctionDeclaration = null;


        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3321:2: (iv_ruleFunctionDeclaration= ruleFunctionDeclaration EOF )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3322:2: iv_ruleFunctionDeclaration= ruleFunctionDeclaration EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getFunctionDeclarationRule(), currentNode); 
            }
            pushFollow(FOLLOW_ruleFunctionDeclaration_in_entryRuleFunctionDeclaration6456);
            iv_ruleFunctionDeclaration=ruleFunctionDeclaration();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruleFunctionDeclaration; 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleFunctionDeclaration6466); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuleFunctionDeclaration


    // $ANTLR start ruleFunctionDeclaration
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3329:1: ruleFunctionDeclaration returns [EObject current=null] : ( ( ( (lv_b_0_0= RULE_ID ) ) '%' )? ( (lv_name_2_0= RULE_ID ) ) ( (lv_arg_3_0= ruleFunctionArgumentDeclaration ) ) ( (lv_body_4_0= ruleFunctionBody ) ) ( (lv_m_5_0= ruleErrorMessage ) )? ) ;
    public final EObject ruleFunctionDeclaration() throws RecognitionException {
        EObject current = null;

        Token lv_b_0_0=null;
        Token lv_name_2_0=null;
        EObject lv_arg_3_0 = null;

        EObject lv_body_4_0 = null;

        EObject lv_m_5_0 = null;


         EObject temp=null; setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3334:6: ( ( ( ( (lv_b_0_0= RULE_ID ) ) '%' )? ( (lv_name_2_0= RULE_ID ) ) ( (lv_arg_3_0= ruleFunctionArgumentDeclaration ) ) ( (lv_body_4_0= ruleFunctionBody ) ) ( (lv_m_5_0= ruleErrorMessage ) )? ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3335:1: ( ( ( (lv_b_0_0= RULE_ID ) ) '%' )? ( (lv_name_2_0= RULE_ID ) ) ( (lv_arg_3_0= ruleFunctionArgumentDeclaration ) ) ( (lv_body_4_0= ruleFunctionBody ) ) ( (lv_m_5_0= ruleErrorMessage ) )? )
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3335:1: ( ( ( (lv_b_0_0= RULE_ID ) ) '%' )? ( (lv_name_2_0= RULE_ID ) ) ( (lv_arg_3_0= ruleFunctionArgumentDeclaration ) ) ( (lv_body_4_0= ruleFunctionBody ) ) ( (lv_m_5_0= ruleErrorMessage ) )? )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3335:2: ( ( (lv_b_0_0= RULE_ID ) ) '%' )? ( (lv_name_2_0= RULE_ID ) ) ( (lv_arg_3_0= ruleFunctionArgumentDeclaration ) ) ( (lv_body_4_0= ruleFunctionBody ) ) ( (lv_m_5_0= ruleErrorMessage ) )?
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3335:2: ( ( (lv_b_0_0= RULE_ID ) ) '%' )?
            int alt33=2;
            int LA33_0 = input.LA(1);

            if ( (LA33_0==RULE_ID) ) {
                int LA33_1 = input.LA(2);

                if ( (LA33_1==70) ) {
                    alt33=1;
                }
            }
            switch (alt33) {
                case 1 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3335:3: ( (lv_b_0_0= RULE_ID ) ) '%'
                    {
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3335:3: ( (lv_b_0_0= RULE_ID ) )
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3336:1: (lv_b_0_0= RULE_ID )
                    {
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3336:1: (lv_b_0_0= RULE_ID )
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3337:3: lv_b_0_0= RULE_ID
                    {
                    lv_b_0_0=(Token)input.LT(1);
                    match(input,RULE_ID,FOLLOW_RULE_ID_in_ruleFunctionDeclaration6509); if (failed) return current;
                    if ( backtracking==0 ) {

                      			createLeafNode(grammarAccess.getFunctionDeclarationAccess().getBIDTerminalRuleCall_0_0_0(), "b"); 
                      		
                    }
                    if ( backtracking==0 ) {

                      	        if (current==null) {
                      	            current = factory.create(grammarAccess.getFunctionDeclarationRule().getType().getClassifier());
                      	            associateNodeWithAstElement(currentNode, current);
                      	        }
                      	        try {
                      	       		set(
                      	       			current, 
                      	       			"b",
                      	        		lv_b_0_0, 
                      	        		"ID", 
                      	        		lastConsumedNode);
                      	        } catch (ValueConverterException vce) {
                      				handleValueConverterException(vce);
                      	        }
                      	    
                    }

                    }


                    }

                    match(input,70,FOLLOW_70_in_ruleFunctionDeclaration6524); if (failed) return current;
                    if ( backtracking==0 ) {

                              createLeafNode(grammarAccess.getFunctionDeclarationAccess().getPercentSignKeyword_0_1(), null); 
                          
                    }

                    }
                    break;

            }

            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3363:3: ( (lv_name_2_0= RULE_ID ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3364:1: (lv_name_2_0= RULE_ID )
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3364:1: (lv_name_2_0= RULE_ID )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3365:3: lv_name_2_0= RULE_ID
            {
            lv_name_2_0=(Token)input.LT(1);
            match(input,RULE_ID,FOLLOW_RULE_ID_in_ruleFunctionDeclaration6543); if (failed) return current;
            if ( backtracking==0 ) {

              			createLeafNode(grammarAccess.getFunctionDeclarationAccess().getNameIDTerminalRuleCall_1_0(), "name"); 
              		
            }
            if ( backtracking==0 ) {

              	        if (current==null) {
              	            current = factory.create(grammarAccess.getFunctionDeclarationRule().getType().getClassifier());
              	            associateNodeWithAstElement(currentNode, current);
              	        }
              	        try {
              	       		set(
              	       			current, 
              	       			"name",
              	        		lv_name_2_0, 
              	        		"ID", 
              	        		lastConsumedNode);
              	        } catch (ValueConverterException vce) {
              				handleValueConverterException(vce);
              	        }
              	    
            }

            }


            }

            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3387:2: ( (lv_arg_3_0= ruleFunctionArgumentDeclaration ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3388:1: (lv_arg_3_0= ruleFunctionArgumentDeclaration )
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3388:1: (lv_arg_3_0= ruleFunctionArgumentDeclaration )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3389:3: lv_arg_3_0= ruleFunctionArgumentDeclaration
            {
            if ( backtracking==0 ) {
               
              	        currentNode=createCompositeNode(grammarAccess.getFunctionDeclarationAccess().getArgFunctionArgumentDeclarationParserRuleCall_2_0(), currentNode); 
              	    
            }
            pushFollow(FOLLOW_ruleFunctionArgumentDeclaration_in_ruleFunctionDeclaration6569);
            lv_arg_3_0=ruleFunctionArgumentDeclaration();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {

              	        if (current==null) {
              	            current = factory.create(grammarAccess.getFunctionDeclarationRule().getType().getClassifier());
              	            associateNodeWithAstElement(currentNode.getParent(), current);
              	        }
              	        try {
              	       		set(
              	       			current, 
              	       			"arg",
              	        		lv_arg_3_0, 
              	        		"FunctionArgumentDeclaration", 
              	        		currentNode);
              	        } catch (ValueConverterException vce) {
              				handleValueConverterException(vce);
              	        }
              	        currentNode = currentNode.getParent();
              	    
            }

            }


            }

            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3411:2: ( (lv_body_4_0= ruleFunctionBody ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3412:1: (lv_body_4_0= ruleFunctionBody )
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3412:1: (lv_body_4_0= ruleFunctionBody )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3413:3: lv_body_4_0= ruleFunctionBody
            {
            if ( backtracking==0 ) {
               
              	        currentNode=createCompositeNode(grammarAccess.getFunctionDeclarationAccess().getBodyFunctionBodyParserRuleCall_3_0(), currentNode); 
              	    
            }
            pushFollow(FOLLOW_ruleFunctionBody_in_ruleFunctionDeclaration6590);
            lv_body_4_0=ruleFunctionBody();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {

              	        if (current==null) {
              	            current = factory.create(grammarAccess.getFunctionDeclarationRule().getType().getClassifier());
              	            associateNodeWithAstElement(currentNode.getParent(), current);
              	        }
              	        try {
              	       		set(
              	       			current, 
              	       			"body",
              	        		lv_body_4_0, 
              	        		"FunctionBody", 
              	        		currentNode);
              	        } catch (ValueConverterException vce) {
              				handleValueConverterException(vce);
              	        }
              	        currentNode = currentNode.getParent();
              	    
            }

            }


            }

            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3435:2: ( (lv_m_5_0= ruleErrorMessage ) )?
            int alt34=2;
            int LA34_0 = input.LA(1);

            if ( (LA34_0==63) ) {
                alt34=1;
            }
            switch (alt34) {
                case 1 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3436:1: (lv_m_5_0= ruleErrorMessage )
                    {
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3436:1: (lv_m_5_0= ruleErrorMessage )
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3437:3: lv_m_5_0= ruleErrorMessage
                    {
                    if ( backtracking==0 ) {
                       
                      	        currentNode=createCompositeNode(grammarAccess.getFunctionDeclarationAccess().getMErrorMessageParserRuleCall_4_0(), currentNode); 
                      	    
                    }
                    pushFollow(FOLLOW_ruleErrorMessage_in_ruleFunctionDeclaration6611);
                    lv_m_5_0=ruleErrorMessage();
                    _fsp--;
                    if (failed) return current;
                    if ( backtracking==0 ) {

                      	        if (current==null) {
                      	            current = factory.create(grammarAccess.getFunctionDeclarationRule().getType().getClassifier());
                      	            associateNodeWithAstElement(currentNode.getParent(), current);
                      	        }
                      	        try {
                      	       		set(
                      	       			current, 
                      	       			"m",
                      	        		lv_m_5_0, 
                      	        		"ErrorMessage", 
                      	        		currentNode);
                      	        } catch (ValueConverterException vce) {
                      				handleValueConverterException(vce);
                      	        }
                      	        currentNode = currentNode.getParent();
                      	    
                    }

                    }


                    }
                    break;

            }


            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
                  	lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruleFunctionDeclaration


    // $ANTLR start entryRuleFunctionArgumentDeclaration
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3467:1: entryRuleFunctionArgumentDeclaration returns [EObject current=null] : iv_ruleFunctionArgumentDeclaration= ruleFunctionArgumentDeclaration EOF ;
    public final EObject entryRuleFunctionArgumentDeclaration() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleFunctionArgumentDeclaration = null;


        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3468:2: (iv_ruleFunctionArgumentDeclaration= ruleFunctionArgumentDeclaration EOF )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3469:2: iv_ruleFunctionArgumentDeclaration= ruleFunctionArgumentDeclaration EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getFunctionArgumentDeclarationRule(), currentNode); 
            }
            pushFollow(FOLLOW_ruleFunctionArgumentDeclaration_in_entryRuleFunctionArgumentDeclaration6648);
            iv_ruleFunctionArgumentDeclaration=ruleFunctionArgumentDeclaration();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruleFunctionArgumentDeclaration; 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleFunctionArgumentDeclaration6658); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuleFunctionArgumentDeclaration


    // $ANTLR start ruleFunctionArgumentDeclaration
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3476:1: ruleFunctionArgumentDeclaration returns [EObject current=null] : ( () '(' ( (lv_f_2_0= ruleFunctionArgumentBody ) )? ( ',' ( (lv_f_4_0= ruleFunctionArgumentBody ) ) )* ')' ) ;
    public final EObject ruleFunctionArgumentDeclaration() throws RecognitionException {
        EObject current = null;

        EObject lv_f_2_0 = null;

        EObject lv_f_4_0 = null;


         EObject temp=null; setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3481:6: ( ( () '(' ( (lv_f_2_0= ruleFunctionArgumentBody ) )? ( ',' ( (lv_f_4_0= ruleFunctionArgumentBody ) ) )* ')' ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3482:1: ( () '(' ( (lv_f_2_0= ruleFunctionArgumentBody ) )? ( ',' ( (lv_f_4_0= ruleFunctionArgumentBody ) ) )* ')' )
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3482:1: ( () '(' ( (lv_f_2_0= ruleFunctionArgumentBody ) )? ( ',' ( (lv_f_4_0= ruleFunctionArgumentBody ) ) )* ')' )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3482:2: () '(' ( (lv_f_2_0= ruleFunctionArgumentBody ) )? ( ',' ( (lv_f_4_0= ruleFunctionArgumentBody ) ) )* ')'
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3482:2: ()
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3483:2: 
            {
            if ( backtracking==0 ) {
               
              	  /* */ 
              	
            }
            if ( backtracking==0 ) {
               
                      temp=factory.create(grammarAccess.getFunctionArgumentDeclarationAccess().getFunctionArgumentDeclarationAction_0().getType().getClassifier());
                      current = temp; 
                      temp = null;
                      CompositeNode newNode = createCompositeNode(grammarAccess.getFunctionArgumentDeclarationAccess().getFunctionArgumentDeclarationAction_0(), currentNode.getParent());
                  newNode.getChildren().add(currentNode);
                  moveLookaheadInfo(currentNode, newNode);
                  currentNode = newNode; 
                      associateNodeWithAstElement(currentNode, current); 
                  
            }

            }

            match(input,43,FOLLOW_43_in_ruleFunctionArgumentDeclaration6705); if (failed) return current;
            if ( backtracking==0 ) {

                      createLeafNode(grammarAccess.getFunctionArgumentDeclarationAccess().getLeftParenthesisKeyword_1(), null); 
                  
            }
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3500:1: ( (lv_f_2_0= ruleFunctionArgumentBody ) )?
            int alt35=2;
            int LA35_0 = input.LA(1);

            if ( ((LA35_0>=19 && LA35_0<=26)||LA35_0==30||LA35_0==34) ) {
                alt35=1;
            }
            switch (alt35) {
                case 1 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3501:1: (lv_f_2_0= ruleFunctionArgumentBody )
                    {
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3501:1: (lv_f_2_0= ruleFunctionArgumentBody )
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3502:3: lv_f_2_0= ruleFunctionArgumentBody
                    {
                    if ( backtracking==0 ) {
                       
                      	        currentNode=createCompositeNode(grammarAccess.getFunctionArgumentDeclarationAccess().getFFunctionArgumentBodyParserRuleCall_2_0(), currentNode); 
                      	    
                    }
                    pushFollow(FOLLOW_ruleFunctionArgumentBody_in_ruleFunctionArgumentDeclaration6726);
                    lv_f_2_0=ruleFunctionArgumentBody();
                    _fsp--;
                    if (failed) return current;
                    if ( backtracking==0 ) {

                      	        if (current==null) {
                      	            current = factory.create(grammarAccess.getFunctionArgumentDeclarationRule().getType().getClassifier());
                      	            associateNodeWithAstElement(currentNode.getParent(), current);
                      	        }
                      	        try {
                      	       		add(
                      	       			current, 
                      	       			"f",
                      	        		lv_f_2_0, 
                      	        		"FunctionArgumentBody", 
                      	        		currentNode);
                      	        } catch (ValueConverterException vce) {
                      				handleValueConverterException(vce);
                      	        }
                      	        currentNode = currentNode.getParent();
                      	    
                    }

                    }


                    }
                    break;

            }

            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3524:3: ( ',' ( (lv_f_4_0= ruleFunctionArgumentBody ) ) )*
            loop36:
            do {
                int alt36=2;
                int LA36_0 = input.LA(1);

                if ( (LA36_0==28) ) {
                    alt36=1;
                }


                switch (alt36) {
            	case 1 :
            	    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3524:5: ',' ( (lv_f_4_0= ruleFunctionArgumentBody ) )
            	    {
            	    match(input,28,FOLLOW_28_in_ruleFunctionArgumentDeclaration6738); if (failed) return current;
            	    if ( backtracking==0 ) {

            	              createLeafNode(grammarAccess.getFunctionArgumentDeclarationAccess().getCommaKeyword_3_0(), null); 
            	          
            	    }
            	    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3528:1: ( (lv_f_4_0= ruleFunctionArgumentBody ) )
            	    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3529:1: (lv_f_4_0= ruleFunctionArgumentBody )
            	    {
            	    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3529:1: (lv_f_4_0= ruleFunctionArgumentBody )
            	    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3530:3: lv_f_4_0= ruleFunctionArgumentBody
            	    {
            	    if ( backtracking==0 ) {
            	       
            	      	        currentNode=createCompositeNode(grammarAccess.getFunctionArgumentDeclarationAccess().getFFunctionArgumentBodyParserRuleCall_3_1_0(), currentNode); 
            	      	    
            	    }
            	    pushFollow(FOLLOW_ruleFunctionArgumentBody_in_ruleFunctionArgumentDeclaration6759);
            	    lv_f_4_0=ruleFunctionArgumentBody();
            	    _fsp--;
            	    if (failed) return current;
            	    if ( backtracking==0 ) {

            	      	        if (current==null) {
            	      	            current = factory.create(grammarAccess.getFunctionArgumentDeclarationRule().getType().getClassifier());
            	      	            associateNodeWithAstElement(currentNode.getParent(), current);
            	      	        }
            	      	        try {
            	      	       		add(
            	      	       			current, 
            	      	       			"f",
            	      	        		lv_f_4_0, 
            	      	        		"FunctionArgumentBody", 
            	      	        		currentNode);
            	      	        } catch (ValueConverterException vce) {
            	      				handleValueConverterException(vce);
            	      	        }
            	      	        currentNode = currentNode.getParent();
            	      	    
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop36;
                }
            } while (true);

            match(input,44,FOLLOW_44_in_ruleFunctionArgumentDeclaration6771); if (failed) return current;
            if ( backtracking==0 ) {

                      createLeafNode(grammarAccess.getFunctionArgumentDeclarationAccess().getRightParenthesisKeyword_4(), null); 
                  
            }

            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
                  	lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruleFunctionArgumentDeclaration


    // $ANTLR start entryRuleFunctionArgumentBody
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3564:1: entryRuleFunctionArgumentBody returns [EObject current=null] : iv_ruleFunctionArgumentBody= ruleFunctionArgumentBody EOF ;
    public final EObject entryRuleFunctionArgumentBody() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleFunctionArgumentBody = null;


        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3565:2: (iv_ruleFunctionArgumentBody= ruleFunctionArgumentBody EOF )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3566:2: iv_ruleFunctionArgumentBody= ruleFunctionArgumentBody EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getFunctionArgumentBodyRule(), currentNode); 
            }
            pushFollow(FOLLOW_ruleFunctionArgumentBody_in_entryRuleFunctionArgumentBody6807);
            iv_ruleFunctionArgumentBody=ruleFunctionArgumentBody();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruleFunctionArgumentBody; 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleFunctionArgumentBody6817); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuleFunctionArgumentBody


    // $ANTLR start ruleFunctionArgumentBody
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3573:1: ruleFunctionArgumentBody returns [EObject current=null] : ( (this_CharType_0= ruleCharType | this_IntEnum_1= ruleIntEnum | ( 'set' this_IntEnum_3= ruleIntEnum ) | this_CharEnum_4= ruleCharEnum | ( 'set' this_CharEnum_6= ruleCharEnum ) | 'int' | 'real' | 'boolean' | 'text' | 'binary' | 'file' | 'date' | ( 'ptr' ruleType ) | ( 'set' ruleType ) ) ( (lv_name_18_0= ruleIdOrKeyword ) ) ) ;
    public final EObject ruleFunctionArgumentBody() throws RecognitionException {
        EObject current = null;

        EObject this_CharType_0 = null;

        EObject this_IntEnum_1 = null;

        EObject this_IntEnum_3 = null;

        EObject this_CharEnum_4 = null;

        EObject this_CharEnum_6 = null;

        AntlrDatatypeRuleToken lv_name_18_0 = null;


         EObject temp=null; setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3578:6: ( ( (this_CharType_0= ruleCharType | this_IntEnum_1= ruleIntEnum | ( 'set' this_IntEnum_3= ruleIntEnum ) | this_CharEnum_4= ruleCharEnum | ( 'set' this_CharEnum_6= ruleCharEnum ) | 'int' | 'real' | 'boolean' | 'text' | 'binary' | 'file' | 'date' | ( 'ptr' ruleType ) | ( 'set' ruleType ) ) ( (lv_name_18_0= ruleIdOrKeyword ) ) ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3579:1: ( (this_CharType_0= ruleCharType | this_IntEnum_1= ruleIntEnum | ( 'set' this_IntEnum_3= ruleIntEnum ) | this_CharEnum_4= ruleCharEnum | ( 'set' this_CharEnum_6= ruleCharEnum ) | 'int' | 'real' | 'boolean' | 'text' | 'binary' | 'file' | 'date' | ( 'ptr' ruleType ) | ( 'set' ruleType ) ) ( (lv_name_18_0= ruleIdOrKeyword ) ) )
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3579:1: ( (this_CharType_0= ruleCharType | this_IntEnum_1= ruleIntEnum | ( 'set' this_IntEnum_3= ruleIntEnum ) | this_CharEnum_4= ruleCharEnum | ( 'set' this_CharEnum_6= ruleCharEnum ) | 'int' | 'real' | 'boolean' | 'text' | 'binary' | 'file' | 'date' | ( 'ptr' ruleType ) | ( 'set' ruleType ) ) ( (lv_name_18_0= ruleIdOrKeyword ) ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3579:2: (this_CharType_0= ruleCharType | this_IntEnum_1= ruleIntEnum | ( 'set' this_IntEnum_3= ruleIntEnum ) | this_CharEnum_4= ruleCharEnum | ( 'set' this_CharEnum_6= ruleCharEnum ) | 'int' | 'real' | 'boolean' | 'text' | 'binary' | 'file' | 'date' | ( 'ptr' ruleType ) | ( 'set' ruleType ) ) ( (lv_name_18_0= ruleIdOrKeyword ) )
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3579:2: (this_CharType_0= ruleCharType | this_IntEnum_1= ruleIntEnum | ( 'set' this_IntEnum_3= ruleIntEnum ) | this_CharEnum_4= ruleCharEnum | ( 'set' this_CharEnum_6= ruleCharEnum ) | 'int' | 'real' | 'boolean' | 'text' | 'binary' | 'file' | 'date' | ( 'ptr' ruleType ) | ( 'set' ruleType ) )
            int alt37=14;
            switch ( input.LA(1) ) {
            case 30:
                {
                int LA37_1 = input.LA(2);

                if ( (LA37_1==27) ) {
                    alt37=4;
                }
                else if ( (LA37_1==RULE_ID||LA37_1==23||(LA37_1>=25 && LA37_1<=26)||LA37_1==30||LA37_1==32||LA37_1==38||LA37_1==40||LA37_1==59||LA37_1==91||LA37_1==179||LA37_1==191||LA37_1==194||LA37_1==197||LA37_1==209||LA37_1==221) ) {
                    alt37=1;
                }
                else {
                    if (backtracking>0) {failed=true; return current;}
                    NoViableAltException nvae =
                        new NoViableAltException("3579:2: (this_CharType_0= ruleCharType | this_IntEnum_1= ruleIntEnum | ( 'set' this_IntEnum_3= ruleIntEnum ) | this_CharEnum_4= ruleCharEnum | ( 'set' this_CharEnum_6= ruleCharEnum ) | 'int' | 'real' | 'boolean' | 'text' | 'binary' | 'file' | 'date' | ( 'ptr' ruleType ) | ( 'set' ruleType ) )", 37, 1, input);

                    throw nvae;
                }
                }
                break;
            case 20:
                {
                int LA37_2 = input.LA(2);

                if ( (LA37_2==27) ) {
                    alt37=2;
                }
                else if ( (LA37_2==RULE_ID||LA37_2==23||(LA37_2>=25 && LA37_2<=26)||LA37_2==30||LA37_2==38||LA37_2==40||LA37_2==59||LA37_2==91||LA37_2==179||LA37_2==191||LA37_2==194||LA37_2==197||LA37_2==209||LA37_2==221) ) {
                    alt37=6;
                }
                else {
                    if (backtracking>0) {failed=true; return current;}
                    NoViableAltException nvae =
                        new NoViableAltException("3579:2: (this_CharType_0= ruleCharType | this_IntEnum_1= ruleIntEnum | ( 'set' this_IntEnum_3= ruleIntEnum ) | this_CharEnum_4= ruleCharEnum | ( 'set' this_CharEnum_6= ruleCharEnum ) | 'int' | 'real' | 'boolean' | 'text' | 'binary' | 'file' | 'date' | ( 'ptr' ruleType ) | ( 'set' ruleType ) )", 37, 2, input);

                    throw nvae;
                }
                }
                break;
            case 19:
                {
                switch ( input.LA(2) ) {
                case 20:
                    {
                    alt37=3;
                    }
                    break;
                case RULE_ID:
                case 23:
                case 25:
                case 26:
                case 38:
                case 40:
                case 59:
                case 91:
                case 179:
                case 191:
                case 194:
                case 197:
                case 209:
                case 221:
                    {
                    alt37=14;
                    }
                    break;
                case 30:
                    {
                    int LA37_17 = input.LA(3);

                    if ( (LA37_17==27) ) {
                        alt37=5;
                    }
                    else if ( (LA37_17==RULE_ID||LA37_17==23||(LA37_17>=25 && LA37_17<=26)||LA37_17==30||LA37_17==36||LA37_17==38||LA37_17==40||LA37_17==59||LA37_17==91||LA37_17==179||LA37_17==191||LA37_17==194||LA37_17==197||LA37_17==209||LA37_17==221) ) {
                        alt37=14;
                    }
                    else {
                        if (backtracking>0) {failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("3579:2: (this_CharType_0= ruleCharType | this_IntEnum_1= ruleIntEnum | ( 'set' this_IntEnum_3= ruleIntEnum ) | this_CharEnum_4= ruleCharEnum | ( 'set' this_CharEnum_6= ruleCharEnum ) | 'int' | 'real' | 'boolean' | 'text' | 'binary' | 'file' | 'date' | ( 'ptr' ruleType ) | ( 'set' ruleType ) )", 37, 17, input);

                        throw nvae;
                    }
                    }
                    break;
                default:
                    if (backtracking>0) {failed=true; return current;}
                    NoViableAltException nvae =
                        new NoViableAltException("3579:2: (this_CharType_0= ruleCharType | this_IntEnum_1= ruleIntEnum | ( 'set' this_IntEnum_3= ruleIntEnum ) | this_CharEnum_4= ruleCharEnum | ( 'set' this_CharEnum_6= ruleCharEnum ) | 'int' | 'real' | 'boolean' | 'text' | 'binary' | 'file' | 'date' | ( 'ptr' ruleType ) | ( 'set' ruleType ) )", 37, 3, input);

                    throw nvae;
                }

                }
                break;
            case 21:
                {
                alt37=7;
                }
                break;
            case 22:
                {
                alt37=8;
                }
                break;
            case 23:
                {
                alt37=9;
                }
                break;
            case 24:
                {
                alt37=10;
                }
                break;
            case 25:
                {
                alt37=11;
                }
                break;
            case 26:
                {
                alt37=12;
                }
                break;
            case 34:
                {
                alt37=13;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("3579:2: (this_CharType_0= ruleCharType | this_IntEnum_1= ruleIntEnum | ( 'set' this_IntEnum_3= ruleIntEnum ) | this_CharEnum_4= ruleCharEnum | ( 'set' this_CharEnum_6= ruleCharEnum ) | 'int' | 'real' | 'boolean' | 'text' | 'binary' | 'file' | 'date' | ( 'ptr' ruleType ) | ( 'set' ruleType ) )", 37, 0, input);

                throw nvae;
            }

            switch (alt37) {
                case 1 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3580:2: this_CharType_0= ruleCharType
                    {
                    if ( backtracking==0 ) {
                       
                      	  /* */ 
                      	
                    }
                    if ( backtracking==0 ) {
                       
                              currentNode=createCompositeNode(grammarAccess.getFunctionArgumentBodyAccess().getCharTypeParserRuleCall_0_0(), currentNode); 
                          
                    }
                    pushFollow(FOLLOW_ruleCharType_in_ruleFunctionArgumentBody6868);
                    this_CharType_0=ruleCharType();
                    _fsp--;
                    if (failed) return current;
                    if ( backtracking==0 ) {
                       
                              current = this_CharType_0; 
                              currentNode = currentNode.getParent();
                          
                    }

                    }
                    break;
                case 2 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3593:2: this_IntEnum_1= ruleIntEnum
                    {
                    if ( backtracking==0 ) {
                       
                      	  /* */ 
                      	
                    }
                    if ( backtracking==0 ) {
                       
                              currentNode=createCompositeNode(grammarAccess.getFunctionArgumentBodyAccess().getIntEnumParserRuleCall_0_1(), currentNode); 
                          
                    }
                    pushFollow(FOLLOW_ruleIntEnum_in_ruleFunctionArgumentBody6898);
                    this_IntEnum_1=ruleIntEnum();
                    _fsp--;
                    if (failed) return current;
                    if ( backtracking==0 ) {
                       
                              current = this_IntEnum_1; 
                              currentNode = currentNode.getParent();
                          
                    }

                    }
                    break;
                case 3 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3605:6: ( 'set' this_IntEnum_3= ruleIntEnum )
                    {
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3605:6: ( 'set' this_IntEnum_3= ruleIntEnum )
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3605:8: 'set' this_IntEnum_3= ruleIntEnum
                    {
                    match(input,19,FOLLOW_19_in_ruleFunctionArgumentBody6914); if (failed) return current;
                    if ( backtracking==0 ) {

                              createLeafNode(grammarAccess.getFunctionArgumentBodyAccess().getSetKeyword_0_2_0(), null); 
                          
                    }
                    if ( backtracking==0 ) {
                       
                      	  /* */ 
                      	
                    }
                    if ( backtracking==0 ) {
                       
                              currentNode=createCompositeNode(grammarAccess.getFunctionArgumentBodyAccess().getIntEnumParserRuleCall_0_2_1(), currentNode); 
                          
                    }
                    pushFollow(FOLLOW_ruleIntEnum_in_ruleFunctionArgumentBody6939);
                    this_IntEnum_3=ruleIntEnum();
                    _fsp--;
                    if (failed) return current;
                    if ( backtracking==0 ) {
                       
                              current = this_IntEnum_3; 
                              currentNode = currentNode.getParent();
                          
                    }

                    }


                    }
                    break;
                case 4 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3623:2: this_CharEnum_4= ruleCharEnum
                    {
                    if ( backtracking==0 ) {
                       
                      	  /* */ 
                      	
                    }
                    if ( backtracking==0 ) {
                       
                              currentNode=createCompositeNode(grammarAccess.getFunctionArgumentBodyAccess().getCharEnumParserRuleCall_0_3(), currentNode); 
                          
                    }
                    pushFollow(FOLLOW_ruleCharEnum_in_ruleFunctionArgumentBody6970);
                    this_CharEnum_4=ruleCharEnum();
                    _fsp--;
                    if (failed) return current;
                    if ( backtracking==0 ) {
                       
                              current = this_CharEnum_4; 
                              currentNode = currentNode.getParent();
                          
                    }

                    }
                    break;
                case 5 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3635:6: ( 'set' this_CharEnum_6= ruleCharEnum )
                    {
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3635:6: ( 'set' this_CharEnum_6= ruleCharEnum )
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3635:8: 'set' this_CharEnum_6= ruleCharEnum
                    {
                    match(input,19,FOLLOW_19_in_ruleFunctionArgumentBody6986); if (failed) return current;
                    if ( backtracking==0 ) {

                              createLeafNode(grammarAccess.getFunctionArgumentBodyAccess().getSetKeyword_0_4_0(), null); 
                          
                    }
                    if ( backtracking==0 ) {
                       
                      	  /* */ 
                      	
                    }
                    if ( backtracking==0 ) {
                       
                              currentNode=createCompositeNode(grammarAccess.getFunctionArgumentBodyAccess().getCharEnumParserRuleCall_0_4_1(), currentNode); 
                          
                    }
                    pushFollow(FOLLOW_ruleCharEnum_in_ruleFunctionArgumentBody7011);
                    this_CharEnum_6=ruleCharEnum();
                    _fsp--;
                    if (failed) return current;
                    if ( backtracking==0 ) {
                       
                              current = this_CharEnum_6; 
                              currentNode = currentNode.getParent();
                          
                    }

                    }


                    }
                    break;
                case 6 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3652:7: 'int'
                    {
                    match(input,20,FOLLOW_20_in_ruleFunctionArgumentBody7027); if (failed) return current;
                    if ( backtracking==0 ) {

                              createLeafNode(grammarAccess.getFunctionArgumentBodyAccess().getIntKeyword_0_5(), null); 
                          
                    }

                    }
                    break;
                case 7 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3657:7: 'real'
                    {
                    match(input,21,FOLLOW_21_in_ruleFunctionArgumentBody7043); if (failed) return current;
                    if ( backtracking==0 ) {

                              createLeafNode(grammarAccess.getFunctionArgumentBodyAccess().getRealKeyword_0_6(), null); 
                          
                    }

                    }
                    break;
                case 8 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3662:7: 'boolean'
                    {
                    match(input,22,FOLLOW_22_in_ruleFunctionArgumentBody7059); if (failed) return current;
                    if ( backtracking==0 ) {

                              createLeafNode(grammarAccess.getFunctionArgumentBodyAccess().getBooleanKeyword_0_7(), null); 
                          
                    }

                    }
                    break;
                case 9 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3667:7: 'text'
                    {
                    match(input,23,FOLLOW_23_in_ruleFunctionArgumentBody7075); if (failed) return current;
                    if ( backtracking==0 ) {

                              createLeafNode(grammarAccess.getFunctionArgumentBodyAccess().getTextKeyword_0_8(), null); 
                          
                    }

                    }
                    break;
                case 10 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3672:7: 'binary'
                    {
                    match(input,24,FOLLOW_24_in_ruleFunctionArgumentBody7091); if (failed) return current;
                    if ( backtracking==0 ) {

                              createLeafNode(grammarAccess.getFunctionArgumentBodyAccess().getBinaryKeyword_0_9(), null); 
                          
                    }

                    }
                    break;
                case 11 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3677:7: 'file'
                    {
                    match(input,25,FOLLOW_25_in_ruleFunctionArgumentBody7107); if (failed) return current;
                    if ( backtracking==0 ) {

                              createLeafNode(grammarAccess.getFunctionArgumentBodyAccess().getFileKeyword_0_10(), null); 
                          
                    }

                    }
                    break;
                case 12 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3682:7: 'date'
                    {
                    match(input,26,FOLLOW_26_in_ruleFunctionArgumentBody7123); if (failed) return current;
                    if ( backtracking==0 ) {

                              createLeafNode(grammarAccess.getFunctionArgumentBodyAccess().getDateKeyword_0_11(), null); 
                          
                    }

                    }
                    break;
                case 13 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3687:6: ( 'ptr' ruleType )
                    {
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3687:6: ( 'ptr' ruleType )
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3687:8: 'ptr' ruleType
                    {
                    match(input,34,FOLLOW_34_in_ruleFunctionArgumentBody7140); if (failed) return current;
                    if ( backtracking==0 ) {

                              createLeafNode(grammarAccess.getFunctionArgumentBodyAccess().getPtrKeyword_0_12_0(), null); 
                          
                    }
                    pushFollow(FOLLOW_ruleType_in_ruleFunctionArgumentBody7149);
                    ruleType();
                    _fsp--;
                    if (failed) return current;

                    }


                    }
                    break;
                case 14 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3692:6: ( 'set' ruleType )
                    {
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3692:6: ( 'set' ruleType )
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3692:8: 'set' ruleType
                    {
                    match(input,19,FOLLOW_19_in_ruleFunctionArgumentBody7159); if (failed) return current;
                    if ( backtracking==0 ) {

                              createLeafNode(grammarAccess.getFunctionArgumentBodyAccess().getSetKeyword_0_13_0(), null); 
                          
                    }
                    pushFollow(FOLLOW_ruleType_in_ruleFunctionArgumentBody7168);
                    ruleType();
                    _fsp--;
                    if (failed) return current;

                    }


                    }
                    break;

            }

            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3696:11: ( (lv_name_18_0= ruleIdOrKeyword ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3697:1: (lv_name_18_0= ruleIdOrKeyword )
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3697:1: (lv_name_18_0= ruleIdOrKeyword )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3698:3: lv_name_18_0= ruleIdOrKeyword
            {
            if ( backtracking==0 ) {
               
              	        currentNode=createCompositeNode(grammarAccess.getFunctionArgumentBodyAccess().getNameIdOrKeywordParserRuleCall_1_0(), currentNode); 
              	    
            }
            pushFollow(FOLLOW_ruleIdOrKeyword_in_ruleFunctionArgumentBody7183);
            lv_name_18_0=ruleIdOrKeyword();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {

              	        if (current==null) {
              	            current = factory.create(grammarAccess.getFunctionArgumentBodyRule().getType().getClassifier());
              	            associateNodeWithAstElement(currentNode.getParent(), current);
              	        }
              	        try {
              	       		set(
              	       			current, 
              	       			"name",
              	        		lv_name_18_0, 
              	        		"IdOrKeyword", 
              	        		currentNode);
              	        } catch (ValueConverterException vce) {
              				handleValueConverterException(vce);
              	        }
              	        currentNode = currentNode.getParent();
              	    
            }

            }


            }


            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
                  	lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruleFunctionArgumentBody


    // $ANTLR start entryRuleFunctionCall
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3728:1: entryRuleFunctionCall returns [EObject current=null] : iv_ruleFunctionCall= ruleFunctionCall EOF ;
    public final EObject entryRuleFunctionCall() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleFunctionCall = null;


        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3729:2: (iv_ruleFunctionCall= ruleFunctionCall EOF )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3730:2: iv_ruleFunctionCall= ruleFunctionCall EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getFunctionCallRule(), currentNode); 
            }
            pushFollow(FOLLOW_ruleFunctionCall_in_entryRuleFunctionCall7219);
            iv_ruleFunctionCall=ruleFunctionCall();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruleFunctionCall; 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleFunctionCall7229); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuleFunctionCall


    // $ANTLR start ruleFunctionCall
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3737:1: ruleFunctionCall returns [EObject current=null] : ( ( ( RULE_ID ) ) ( (lv_f_1_0= ruleFunctionArguments ) ) ) ;
    public final EObject ruleFunctionCall() throws RecognitionException {
        EObject current = null;

        EObject lv_f_1_0 = null;


         EObject temp=null; setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3742:6: ( ( ( ( RULE_ID ) ) ( (lv_f_1_0= ruleFunctionArguments ) ) ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3743:1: ( ( ( RULE_ID ) ) ( (lv_f_1_0= ruleFunctionArguments ) ) )
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3743:1: ( ( ( RULE_ID ) ) ( (lv_f_1_0= ruleFunctionArguments ) ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3743:2: ( ( RULE_ID ) ) ( (lv_f_1_0= ruleFunctionArguments ) )
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3743:2: ( ( RULE_ID ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3744:1: ( RULE_ID )
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3744:1: ( RULE_ID )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3745:3: RULE_ID
            {
            if ( backtracking==0 ) {
               
              		  /* */ 
              		
            }
            if ( backtracking==0 ) {

              			if (current==null) {
              	            current = factory.create(grammarAccess.getFunctionCallRule().getType().getClassifier());
              	            associateNodeWithAstElement(currentNode, current);
              	        }
                      
            }
            match(input,RULE_ID,FOLLOW_RULE_ID_in_ruleFunctionCall7276); if (failed) return current;
            if ( backtracking==0 ) {

              		createLeafNode(grammarAccess.getFunctionCallAccess().getFunctionFunctionDeclarationCrossReference_0_0(), "function"); 
              	
            }

            }


            }

            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3760:2: ( (lv_f_1_0= ruleFunctionArguments ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3761:1: (lv_f_1_0= ruleFunctionArguments )
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3761:1: (lv_f_1_0= ruleFunctionArguments )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3762:3: lv_f_1_0= ruleFunctionArguments
            {
            if ( backtracking==0 ) {
               
              	        currentNode=createCompositeNode(grammarAccess.getFunctionCallAccess().getFFunctionArgumentsParserRuleCall_1_0(), currentNode); 
              	    
            }
            pushFollow(FOLLOW_ruleFunctionArguments_in_ruleFunctionCall7297);
            lv_f_1_0=ruleFunctionArguments();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {

              	        if (current==null) {
              	            current = factory.create(grammarAccess.getFunctionCallRule().getType().getClassifier());
              	            associateNodeWithAstElement(currentNode.getParent(), current);
              	        }
              	        try {
              	       		set(
              	       			current, 
              	       			"f",
              	        		lv_f_1_0, 
              	        		"FunctionArguments", 
              	        		currentNode);
              	        } catch (ValueConverterException vce) {
              				handleValueConverterException(vce);
              	        }
              	        currentNode = currentNode.getParent();
              	    
            }

            }


            }


            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
                  	lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruleFunctionCall


    // $ANTLR start entryRuleFieldPath
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3792:1: entryRuleFieldPath returns [EObject current=null] : iv_ruleFieldPath= ruleFieldPath EOF ;
    public final EObject entryRuleFieldPath() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleFieldPath = null;


        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3793:2: (iv_ruleFieldPath= ruleFieldPath EOF )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3794:2: iv_ruleFieldPath= ruleFieldPath EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getFieldPathRule(), currentNode); 
            }
            pushFollow(FOLLOW_ruleFieldPath_in_entryRuleFieldPath7333);
            iv_ruleFieldPath=ruleFieldPath();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruleFieldPath; 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleFieldPath7343); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuleFieldPath


    // $ANTLR start ruleFieldPath
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3801:1: ruleFieldPath returns [EObject current=null] : ( ( ( ruleIdOrKeyword ) ) ( '.' ( (lv_subField_2_0= ruleFieldPath ) ) )? ) ;
    public final EObject ruleFieldPath() throws RecognitionException {
        EObject current = null;

        EObject lv_subField_2_0 = null;


         EObject temp=null; setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3806:6: ( ( ( ( ruleIdOrKeyword ) ) ( '.' ( (lv_subField_2_0= ruleFieldPath ) ) )? ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3807:1: ( ( ( ruleIdOrKeyword ) ) ( '.' ( (lv_subField_2_0= ruleFieldPath ) ) )? )
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3807:1: ( ( ( ruleIdOrKeyword ) ) ( '.' ( (lv_subField_2_0= ruleFieldPath ) ) )? )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3807:2: ( ( ruleIdOrKeyword ) ) ( '.' ( (lv_subField_2_0= ruleFieldPath ) ) )?
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3807:2: ( ( ruleIdOrKeyword ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3808:1: ( ruleIdOrKeyword )
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3808:1: ( ruleIdOrKeyword )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3809:3: ruleIdOrKeyword
            {
            if ( backtracking==0 ) {
               
              		  /* */ 
              		
            }
            if ( backtracking==0 ) {

              			if (current==null) {
              	            current = factory.create(grammarAccess.getFieldPathRule().getType().getClassifier());
              	            associateNodeWithAstElement(currentNode, current);
              	        }
                      
            }
            if ( backtracking==0 ) {
               
              	        currentNode=createCompositeNode(grammarAccess.getFieldPathAccess().getFieldFieldDeclarationCrossReference_0_0(), currentNode); 
              	    
            }
            pushFollow(FOLLOW_ruleIdOrKeyword_in_ruleFieldPath7395);
            ruleIdOrKeyword();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               
              	        currentNode = currentNode.getParent();
              	    
            }

            }


            }

            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3826:2: ( '.' ( (lv_subField_2_0= ruleFieldPath ) ) )?
            int alt38=2;
            int LA38_0 = input.LA(1);

            if ( (LA38_0==36) ) {
                alt38=1;
            }
            switch (alt38) {
                case 1 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3826:4: '.' ( (lv_subField_2_0= ruleFieldPath ) )
                    {
                    match(input,36,FOLLOW_36_in_ruleFieldPath7406); if (failed) return current;
                    if ( backtracking==0 ) {

                              createLeafNode(grammarAccess.getFieldPathAccess().getFullStopKeyword_1_0(), null); 
                          
                    }
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3830:1: ( (lv_subField_2_0= ruleFieldPath ) )
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3831:1: (lv_subField_2_0= ruleFieldPath )
                    {
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3831:1: (lv_subField_2_0= ruleFieldPath )
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3832:3: lv_subField_2_0= ruleFieldPath
                    {
                    if ( backtracking==0 ) {
                       
                      	        currentNode=createCompositeNode(grammarAccess.getFieldPathAccess().getSubFieldFieldPathParserRuleCall_1_1_0(), currentNode); 
                      	    
                    }
                    pushFollow(FOLLOW_ruleFieldPath_in_ruleFieldPath7427);
                    lv_subField_2_0=ruleFieldPath();
                    _fsp--;
                    if (failed) return current;
                    if ( backtracking==0 ) {

                      	        if (current==null) {
                      	            current = factory.create(grammarAccess.getFieldPathRule().getType().getClassifier());
                      	            associateNodeWithAstElement(currentNode.getParent(), current);
                      	        }
                      	        try {
                      	       		set(
                      	       			current, 
                      	       			"subField",
                      	        		lv_subField_2_0, 
                      	        		"FieldPath", 
                      	        		currentNode);
                      	        } catch (ValueConverterException vce) {
                      				handleValueConverterException(vce);
                      	        }
                      	        currentNode = currentNode.getParent();
                      	    
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
                  	lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruleFieldPath


    // $ANTLR start entryRuleFieldReference
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3862:1: entryRuleFieldReference returns [EObject current=null] : iv_ruleFieldReference= ruleFieldReference EOF ;
    public final EObject entryRuleFieldReference() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleFieldReference = null;


        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3863:2: (iv_ruleFieldReference= ruleFieldReference EOF )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3864:2: iv_ruleFieldReference= ruleFieldReference EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getFieldReferenceRule(), currentNode); 
            }
            pushFollow(FOLLOW_ruleFieldReference_in_entryRuleFieldReference7465);
            iv_ruleFieldReference=ruleFieldReference();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruleFieldReference; 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleFieldReference7475); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuleFieldReference


    // $ANTLR start ruleFieldReference
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3871:1: ruleFieldReference returns [EObject current=null] : ( ( ruleIdOrKeyword ) ) ;
    public final EObject ruleFieldReference() throws RecognitionException {
        EObject current = null;

         EObject temp=null; setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3876:6: ( ( ( ruleIdOrKeyword ) ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3877:1: ( ( ruleIdOrKeyword ) )
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3877:1: ( ( ruleIdOrKeyword ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3878:1: ( ruleIdOrKeyword )
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3878:1: ( ruleIdOrKeyword )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3879:3: ruleIdOrKeyword
            {
            if ( backtracking==0 ) {
               
              		  /* */ 
              		
            }
            if ( backtracking==0 ) {

              			if (current==null) {
              	            current = factory.create(grammarAccess.getFieldReferenceRule().getType().getClassifier());
              	            associateNodeWithAstElement(currentNode, current);
              	        }
                      
            }
            if ( backtracking==0 ) {
               
              	        currentNode=createCompositeNode(grammarAccess.getFieldReferenceAccess().getFieldFieldDeclarationCrossReference_0(), currentNode); 
              	    
            }
            pushFollow(FOLLOW_ruleIdOrKeyword_in_ruleFieldReference7526);
            ruleIdOrKeyword();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               
              	        currentNode = currentNode.getParent();
              	    
            }

            }


            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
                  	lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruleFieldReference


    // $ANTLR start entryRuleFunctionArguments
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3904:1: entryRuleFunctionArguments returns [EObject current=null] : iv_ruleFunctionArguments= ruleFunctionArguments EOF ;
    public final EObject entryRuleFunctionArguments() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleFunctionArguments = null;


        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3905:2: (iv_ruleFunctionArguments= ruleFunctionArguments EOF )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3906:2: iv_ruleFunctionArguments= ruleFunctionArguments EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getFunctionArgumentsRule(), currentNode); 
            }
            pushFollow(FOLLOW_ruleFunctionArguments_in_entryRuleFunctionArguments7561);
            iv_ruleFunctionArguments=ruleFunctionArguments();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruleFunctionArguments; 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleFunctionArguments7571); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuleFunctionArguments


    // $ANTLR start ruleFunctionArguments
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3913:1: ruleFunctionArguments returns [EObject current=null] : ( () '(' ( ( (lv_args_2_0= ruleFieldPath ) ) ( ',' ( (lv_args_4_0= ruleFieldPath ) ) )* )? ')' ) ;
    public final EObject ruleFunctionArguments() throws RecognitionException {
        EObject current = null;

        EObject lv_args_2_0 = null;

        EObject lv_args_4_0 = null;


         EObject temp=null; setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3918:6: ( ( () '(' ( ( (lv_args_2_0= ruleFieldPath ) ) ( ',' ( (lv_args_4_0= ruleFieldPath ) ) )* )? ')' ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3919:1: ( () '(' ( ( (lv_args_2_0= ruleFieldPath ) ) ( ',' ( (lv_args_4_0= ruleFieldPath ) ) )* )? ')' )
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3919:1: ( () '(' ( ( (lv_args_2_0= ruleFieldPath ) ) ( ',' ( (lv_args_4_0= ruleFieldPath ) ) )* )? ')' )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3919:2: () '(' ( ( (lv_args_2_0= ruleFieldPath ) ) ( ',' ( (lv_args_4_0= ruleFieldPath ) ) )* )? ')'
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3919:2: ()
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3920:2: 
            {
            if ( backtracking==0 ) {
               
              	  /* */ 
              	
            }
            if ( backtracking==0 ) {
               
                      temp=factory.create(grammarAccess.getFunctionArgumentsAccess().getFunctionArgumentsAction_0().getType().getClassifier());
                      current = temp; 
                      temp = null;
                      CompositeNode newNode = createCompositeNode(grammarAccess.getFunctionArgumentsAccess().getFunctionArgumentsAction_0(), currentNode.getParent());
                  newNode.getChildren().add(currentNode);
                  moveLookaheadInfo(currentNode, newNode);
                  currentNode = newNode; 
                      associateNodeWithAstElement(currentNode, current); 
                  
            }

            }

            match(input,43,FOLLOW_43_in_ruleFunctionArguments7618); if (failed) return current;
            if ( backtracking==0 ) {

                      createLeafNode(grammarAccess.getFunctionArgumentsAccess().getLeftParenthesisKeyword_1(), null); 
                  
            }
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3937:1: ( ( (lv_args_2_0= ruleFieldPath ) ) ( ',' ( (lv_args_4_0= ruleFieldPath ) ) )* )?
            int alt40=2;
            int LA40_0 = input.LA(1);

            if ( (LA40_0==RULE_ID||LA40_0==23||(LA40_0>=25 && LA40_0<=26)||LA40_0==30||LA40_0==38||LA40_0==40||LA40_0==59||LA40_0==91||LA40_0==179||LA40_0==191||LA40_0==194||LA40_0==197||LA40_0==209||LA40_0==221) ) {
                alt40=1;
            }
            switch (alt40) {
                case 1 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3937:2: ( (lv_args_2_0= ruleFieldPath ) ) ( ',' ( (lv_args_4_0= ruleFieldPath ) ) )*
                    {
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3937:2: ( (lv_args_2_0= ruleFieldPath ) )
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3938:1: (lv_args_2_0= ruleFieldPath )
                    {
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3938:1: (lv_args_2_0= ruleFieldPath )
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3939:3: lv_args_2_0= ruleFieldPath
                    {
                    if ( backtracking==0 ) {
                       
                      	        currentNode=createCompositeNode(grammarAccess.getFunctionArgumentsAccess().getArgsFieldPathParserRuleCall_2_0_0(), currentNode); 
                      	    
                    }
                    pushFollow(FOLLOW_ruleFieldPath_in_ruleFunctionArguments7640);
                    lv_args_2_0=ruleFieldPath();
                    _fsp--;
                    if (failed) return current;
                    if ( backtracking==0 ) {

                      	        if (current==null) {
                      	            current = factory.create(grammarAccess.getFunctionArgumentsRule().getType().getClassifier());
                      	            associateNodeWithAstElement(currentNode.getParent(), current);
                      	        }
                      	        try {
                      	       		add(
                      	       			current, 
                      	       			"args",
                      	        		lv_args_2_0, 
                      	        		"FieldPath", 
                      	        		currentNode);
                      	        } catch (ValueConverterException vce) {
                      				handleValueConverterException(vce);
                      	        }
                      	        currentNode = currentNode.getParent();
                      	    
                    }

                    }


                    }

                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3961:2: ( ',' ( (lv_args_4_0= ruleFieldPath ) ) )*
                    loop39:
                    do {
                        int alt39=2;
                        int LA39_0 = input.LA(1);

                        if ( (LA39_0==28) ) {
                            alt39=1;
                        }


                        switch (alt39) {
                    	case 1 :
                    	    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3961:4: ',' ( (lv_args_4_0= ruleFieldPath ) )
                    	    {
                    	    match(input,28,FOLLOW_28_in_ruleFunctionArguments7651); if (failed) return current;
                    	    if ( backtracking==0 ) {

                    	              createLeafNode(grammarAccess.getFunctionArgumentsAccess().getCommaKeyword_2_1_0(), null); 
                    	          
                    	    }
                    	    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3965:1: ( (lv_args_4_0= ruleFieldPath ) )
                    	    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3966:1: (lv_args_4_0= ruleFieldPath )
                    	    {
                    	    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3966:1: (lv_args_4_0= ruleFieldPath )
                    	    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:3967:3: lv_args_4_0= ruleFieldPath
                    	    {
                    	    if ( backtracking==0 ) {
                    	       
                    	      	        currentNode=createCompositeNode(grammarAccess.getFunctionArgumentsAccess().getArgsFieldPathParserRuleCall_2_1_1_0(), currentNode); 
                    	      	    
                    	    }
                    	    pushFollow(FOLLOW_ruleFieldPath_in_ruleFunctionArguments7672);
                    	    lv_args_4_0=ruleFieldPath();
                    	    _fsp--;
                    	    if (failed) return current;
                    	    if ( backtracking==0 ) {

                    	      	        if (current==null) {
                    	      	            current = factory.create(grammarAccess.getFunctionArgumentsRule().getType().getClassifier());
                    	      	            associateNodeWithAstElement(currentNode.getParent(), current);
                    	      	        }
                    	      	        try {
                    	      	       		add(
                    	      	       			current, 
                    	      	       			"args",
                    	      	        		lv_args_4_0, 
                    	      	        		"FieldPath", 
                    	      	        		currentNode);
                    	      	        } catch (ValueConverterException vce) {
                    	      				handleValueConverterException(vce);
                    	      	        }
                    	      	        currentNode = currentNode.getParent();
                    	      	    
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop39;
                        }
                    } while (true);


                    }
                    break;

            }

            match(input,44,FOLLOW_44_in_ruleFunctionArguments7686); if (failed) return current;
            if ( backtracking==0 ) {

                      createLeafNode(grammarAccess.getFunctionArgumentsAccess().getRightParenthesisKeyword_3(), null); 
                  
            }

            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
                  	lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruleFunctionArguments


    // $ANTLR start entryRuleFunctionBody
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4001:1: entryRuleFunctionBody returns [EObject current=null] : iv_ruleFunctionBody= ruleFunctionBody EOF ;
    public final EObject entryRuleFunctionBody() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleFunctionBody = null;


        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4002:2: (iv_ruleFunctionBody= ruleFunctionBody EOF )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4003:2: iv_ruleFunctionBody= ruleFunctionBody EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getFunctionBodyRule(), currentNode); 
            }
            pushFollow(FOLLOW_ruleFunctionBody_in_entryRuleFunctionBody7722);
            iv_ruleFunctionBody=ruleFunctionBody();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruleFunctionBody; 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleFunctionBody7732); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuleFunctionBody


    // $ANTLR start ruleFunctionBody
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4010:1: ruleFunctionBody returns [EObject current=null] : ( '{' ( ( (lv_s_1_0= ruleStatement ) ) | ( (lv_e_2_0= ruleExpression ) ) ) '}' ) ;
    public final EObject ruleFunctionBody() throws RecognitionException {
        EObject current = null;

        EObject lv_s_1_0 = null;

        EObject lv_e_2_0 = null;


         EObject temp=null; setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4015:6: ( ( '{' ( ( (lv_s_1_0= ruleStatement ) ) | ( (lv_e_2_0= ruleExpression ) ) ) '}' ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4016:1: ( '{' ( ( (lv_s_1_0= ruleStatement ) ) | ( (lv_e_2_0= ruleExpression ) ) ) '}' )
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4016:1: ( '{' ( ( (lv_s_1_0= ruleStatement ) ) | ( (lv_e_2_0= ruleExpression ) ) ) '}' )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4016:3: '{' ( ( (lv_s_1_0= ruleStatement ) ) | ( (lv_e_2_0= ruleExpression ) ) ) '}'
            {
            match(input,27,FOLLOW_27_in_ruleFunctionBody7767); if (failed) return current;
            if ( backtracking==0 ) {

                      createLeafNode(grammarAccess.getFunctionBodyAccess().getLeftCurlyBracketKeyword_0(), null); 
                  
            }
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4020:1: ( ( (lv_s_1_0= ruleStatement ) ) | ( (lv_e_2_0= ruleExpression ) ) )
            int alt41=2;
            alt41 = dfa41.predict(input);
            switch (alt41) {
                case 1 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4020:2: ( (lv_s_1_0= ruleStatement ) )
                    {
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4020:2: ( (lv_s_1_0= ruleStatement ) )
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4021:1: (lv_s_1_0= ruleStatement )
                    {
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4021:1: (lv_s_1_0= ruleStatement )
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4022:3: lv_s_1_0= ruleStatement
                    {
                    if ( backtracking==0 ) {
                       
                      	        currentNode=createCompositeNode(grammarAccess.getFunctionBodyAccess().getSStatementParserRuleCall_1_0_0(), currentNode); 
                      	    
                    }
                    pushFollow(FOLLOW_ruleStatement_in_ruleFunctionBody7789);
                    lv_s_1_0=ruleStatement();
                    _fsp--;
                    if (failed) return current;
                    if ( backtracking==0 ) {

                      	        if (current==null) {
                      	            current = factory.create(grammarAccess.getFunctionBodyRule().getType().getClassifier());
                      	            associateNodeWithAstElement(currentNode.getParent(), current);
                      	        }
                      	        try {
                      	       		set(
                      	       			current, 
                      	       			"s",
                      	        		lv_s_1_0, 
                      	        		"Statement", 
                      	        		currentNode);
                      	        } catch (ValueConverterException vce) {
                      				handleValueConverterException(vce);
                      	        }
                      	        currentNode = currentNode.getParent();
                      	    
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4045:6: ( (lv_e_2_0= ruleExpression ) )
                    {
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4045:6: ( (lv_e_2_0= ruleExpression ) )
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4046:1: (lv_e_2_0= ruleExpression )
                    {
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4046:1: (lv_e_2_0= ruleExpression )
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4047:3: lv_e_2_0= ruleExpression
                    {
                    if ( backtracking==0 ) {
                       
                      	        currentNode=createCompositeNode(grammarAccess.getFunctionBodyAccess().getEExpressionParserRuleCall_1_1_0(), currentNode); 
                      	    
                    }
                    pushFollow(FOLLOW_ruleExpression_in_ruleFunctionBody7816);
                    lv_e_2_0=ruleExpression();
                    _fsp--;
                    if (failed) return current;
                    if ( backtracking==0 ) {

                      	        if (current==null) {
                      	            current = factory.create(grammarAccess.getFunctionBodyRule().getType().getClassifier());
                      	            associateNodeWithAstElement(currentNode.getParent(), current);
                      	        }
                      	        try {
                      	       		set(
                      	       			current, 
                      	       			"e",
                      	        		lv_e_2_0, 
                      	        		"Expression", 
                      	        		currentNode);
                      	        } catch (ValueConverterException vce) {
                      				handleValueConverterException(vce);
                      	        }
                      	        currentNode = currentNode.getParent();
                      	    
                    }

                    }


                    }


                    }
                    break;

            }

            match(input,29,FOLLOW_29_in_ruleFunctionBody7827); if (failed) return current;
            if ( backtracking==0 ) {

                      createLeafNode(grammarAccess.getFunctionBodyAccess().getRightCurlyBracketKeyword_2(), null); 
                  
            }

            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
                  	lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruleFunctionBody


    // $ANTLR start entryRuleStatement
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4081:1: entryRuleStatement returns [EObject current=null] : iv_ruleStatement= ruleStatement EOF ;
    public final EObject entryRuleStatement() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleStatement = null;


        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4082:2: (iv_ruleStatement= ruleStatement EOF )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4083:2: iv_ruleStatement= ruleStatement EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getStatementRule(), currentNode); 
            }
            pushFollow(FOLLOW_ruleStatement_in_entryRuleStatement7863);
            iv_ruleStatement=ruleStatement();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruleStatement; 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleStatement7873); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuleStatement


    // $ANTLR start ruleStatement
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4090:1: ruleStatement returns [EObject current=null] : this_QueryRule_0= ruleQueryRule ;
    public final EObject ruleStatement() throws RecognitionException {
        EObject current = null;

        EObject this_QueryRule_0 = null;


         EObject temp=null; setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4095:6: (this_QueryRule_0= ruleQueryRule )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4097:2: this_QueryRule_0= ruleQueryRule
            {
            if ( backtracking==0 ) {
               
              	  /* */ 
              	
            }
            if ( backtracking==0 ) {
               
                      currentNode=createCompositeNode(grammarAccess.getStatementAccess().getQueryRuleParserRuleCall(), currentNode); 
                  
            }
            pushFollow(FOLLOW_ruleQueryRule_in_ruleStatement7922);
            this_QueryRule_0=ruleQueryRule();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               
                      current = this_QueryRule_0; 
                      currentNode = currentNode.getParent();
                  
            }

            }

            if ( backtracking==0 ) {
               resetLookahead(); 
                  	lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruleStatement


    // $ANTLR start entryRuleUnionRule
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4116:1: entryRuleUnionRule returns [EObject current=null] : iv_ruleUnionRule= ruleUnionRule EOF ;
    public final EObject entryRuleUnionRule() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleUnionRule = null;


        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4117:2: (iv_ruleUnionRule= ruleUnionRule EOF )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4118:2: iv_ruleUnionRule= ruleUnionRule EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getUnionRuleRule(), currentNode); 
            }
            pushFollow(FOLLOW_ruleUnionRule_in_entryRuleUnionRule7956);
            iv_ruleUnionRule=ruleUnionRule();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruleUnionRule; 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleUnionRule7966); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuleUnionRule


    // $ANTLR start ruleUnionRule
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4125:1: ruleUnionRule returns [EObject current=null] : ( ( (lv_q_0_0= ruleQueryRule ) ) ( 'union' ( (lv_q_2_0= ruleQueryRule ) ) )* ) ;
    public final EObject ruleUnionRule() throws RecognitionException {
        EObject current = null;

        EObject lv_q_0_0 = null;

        EObject lv_q_2_0 = null;


         EObject temp=null; setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4130:6: ( ( ( (lv_q_0_0= ruleQueryRule ) ) ( 'union' ( (lv_q_2_0= ruleQueryRule ) ) )* ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4131:1: ( ( (lv_q_0_0= ruleQueryRule ) ) ( 'union' ( (lv_q_2_0= ruleQueryRule ) ) )* )
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4131:1: ( ( (lv_q_0_0= ruleQueryRule ) ) ( 'union' ( (lv_q_2_0= ruleQueryRule ) ) )* )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4131:2: ( (lv_q_0_0= ruleQueryRule ) ) ( 'union' ( (lv_q_2_0= ruleQueryRule ) ) )*
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4131:2: ( (lv_q_0_0= ruleQueryRule ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4132:1: (lv_q_0_0= ruleQueryRule )
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4132:1: (lv_q_0_0= ruleQueryRule )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4133:3: lv_q_0_0= ruleQueryRule
            {
            if ( backtracking==0 ) {
               
              	        currentNode=createCompositeNode(grammarAccess.getUnionRuleAccess().getQQueryRuleParserRuleCall_0_0(), currentNode); 
              	    
            }
            pushFollow(FOLLOW_ruleQueryRule_in_ruleUnionRule8012);
            lv_q_0_0=ruleQueryRule();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {

              	        if (current==null) {
              	            current = factory.create(grammarAccess.getUnionRuleRule().getType().getClassifier());
              	            associateNodeWithAstElement(currentNode.getParent(), current);
              	        }
              	        try {
              	       		add(
              	       			current, 
              	       			"q",
              	        		lv_q_0_0, 
              	        		"QueryRule", 
              	        		currentNode);
              	        } catch (ValueConverterException vce) {
              				handleValueConverterException(vce);
              	        }
              	        currentNode = currentNode.getParent();
              	    
            }

            }


            }

            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4155:2: ( 'union' ( (lv_q_2_0= ruleQueryRule ) ) )*
            loop42:
            do {
                int alt42=2;
                int LA42_0 = input.LA(1);

                if ( (LA42_0==71) ) {
                    alt42=1;
                }


                switch (alt42) {
            	case 1 :
            	    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4155:4: 'union' ( (lv_q_2_0= ruleQueryRule ) )
            	    {
            	    match(input,71,FOLLOW_71_in_ruleUnionRule8023); if (failed) return current;
            	    if ( backtracking==0 ) {

            	              createLeafNode(grammarAccess.getUnionRuleAccess().getUnionKeyword_1_0(), null); 
            	          
            	    }
            	    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4159:1: ( (lv_q_2_0= ruleQueryRule ) )
            	    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4160:1: (lv_q_2_0= ruleQueryRule )
            	    {
            	    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4160:1: (lv_q_2_0= ruleQueryRule )
            	    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4161:3: lv_q_2_0= ruleQueryRule
            	    {
            	    if ( backtracking==0 ) {
            	       
            	      	        currentNode=createCompositeNode(grammarAccess.getUnionRuleAccess().getQQueryRuleParserRuleCall_1_1_0(), currentNode); 
            	      	    
            	    }
            	    pushFollow(FOLLOW_ruleQueryRule_in_ruleUnionRule8044);
            	    lv_q_2_0=ruleQueryRule();
            	    _fsp--;
            	    if (failed) return current;
            	    if ( backtracking==0 ) {

            	      	        if (current==null) {
            	      	            current = factory.create(grammarAccess.getUnionRuleRule().getType().getClassifier());
            	      	            associateNodeWithAstElement(currentNode.getParent(), current);
            	      	        }
            	      	        try {
            	      	       		add(
            	      	       			current, 
            	      	       			"q",
            	      	        		lv_q_2_0, 
            	      	        		"QueryRule", 
            	      	        		currentNode);
            	      	        } catch (ValueConverterException vce) {
            	      				handleValueConverterException(vce);
            	      	        }
            	      	        currentNode = currentNode.getParent();
            	      	    
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop42;
                }
            } while (true);


            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
                  	lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruleUnionRule


    // $ANTLR start entryRuleQueryRule
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4191:1: entryRuleQueryRule returns [EObject current=null] : iv_ruleQueryRule= ruleQueryRule EOF ;
    public final EObject entryRuleQueryRule() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleQueryRule = null;


        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4192:2: (iv_ruleQueryRule= ruleQueryRule EOF )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4193:2: iv_ruleQueryRule= ruleQueryRule EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getQueryRuleRule(), currentNode); 
            }
            pushFollow(FOLLOW_ruleQueryRule_in_entryRuleQueryRule8082);
            iv_ruleQueryRule=ruleQueryRule();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruleQueryRule; 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleQueryRule8092); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuleQueryRule


    // $ANTLR start ruleQueryRule
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4200:1: ruleQueryRule returns [EObject current=null] : (this_SelectFrom_0= ruleSelectFrom ( (lv_where_1_0= ruleWhereClause ) )? ( (lv_groupBy_2_0= ruleGroupByClause ) )? ( (lv_orderBy_3_0= ruleOrderByClause ) )? ) ;
    public final EObject ruleQueryRule() throws RecognitionException {
        EObject current = null;

        EObject this_SelectFrom_0 = null;

        EObject lv_where_1_0 = null;

        EObject lv_groupBy_2_0 = null;

        EObject lv_orderBy_3_0 = null;


         EObject temp=null; setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4205:6: ( (this_SelectFrom_0= ruleSelectFrom ( (lv_where_1_0= ruleWhereClause ) )? ( (lv_groupBy_2_0= ruleGroupByClause ) )? ( (lv_orderBy_3_0= ruleOrderByClause ) )? ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4206:1: (this_SelectFrom_0= ruleSelectFrom ( (lv_where_1_0= ruleWhereClause ) )? ( (lv_groupBy_2_0= ruleGroupByClause ) )? ( (lv_orderBy_3_0= ruleOrderByClause ) )? )
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4206:1: (this_SelectFrom_0= ruleSelectFrom ( (lv_where_1_0= ruleWhereClause ) )? ( (lv_groupBy_2_0= ruleGroupByClause ) )? ( (lv_orderBy_3_0= ruleOrderByClause ) )? )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4207:2: this_SelectFrom_0= ruleSelectFrom ( (lv_where_1_0= ruleWhereClause ) )? ( (lv_groupBy_2_0= ruleGroupByClause ) )? ( (lv_orderBy_3_0= ruleOrderByClause ) )?
            {
            if ( backtracking==0 ) {
               
              	  /* */ 
              	
            }
            if ( backtracking==0 ) {
               
                      currentNode=createCompositeNode(grammarAccess.getQueryRuleAccess().getSelectFromParserRuleCall_0(), currentNode); 
                  
            }
            pushFollow(FOLLOW_ruleSelectFrom_in_ruleQueryRule8142);
            this_SelectFrom_0=ruleSelectFrom();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               
                      current = this_SelectFrom_0; 
                      currentNode = currentNode.getParent();
                  
            }
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4218:1: ( (lv_where_1_0= ruleWhereClause ) )?
            int alt43=2;
            int LA43_0 = input.LA(1);

            if ( ((LA43_0>=158 && LA43_0<=160)) ) {
                alt43=1;
            }
            switch (alt43) {
                case 1 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4219:1: (lv_where_1_0= ruleWhereClause )
                    {
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4219:1: (lv_where_1_0= ruleWhereClause )
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4220:3: lv_where_1_0= ruleWhereClause
                    {
                    if ( backtracking==0 ) {
                       
                      	        currentNode=createCompositeNode(grammarAccess.getQueryRuleAccess().getWhereWhereClauseParserRuleCall_1_0(), currentNode); 
                      	    
                    }
                    pushFollow(FOLLOW_ruleWhereClause_in_ruleQueryRule8162);
                    lv_where_1_0=ruleWhereClause();
                    _fsp--;
                    if (failed) return current;
                    if ( backtracking==0 ) {

                      	        if (current==null) {
                      	            current = factory.create(grammarAccess.getQueryRuleRule().getType().getClassifier());
                      	            associateNodeWithAstElement(currentNode.getParent(), current);
                      	        }
                      	        try {
                      	       		set(
                      	       			current, 
                      	       			"where",
                      	        		lv_where_1_0, 
                      	        		"WhereClause", 
                      	        		currentNode);
                      	        } catch (ValueConverterException vce) {
                      				handleValueConverterException(vce);
                      	        }
                      	        currentNode = currentNode.getParent();
                      	    
                    }

                    }


                    }
                    break;

            }

            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4242:3: ( (lv_groupBy_2_0= ruleGroupByClause ) )?
            int alt44=2;
            int LA44_0 = input.LA(1);

            if ( ((LA44_0>=134 && LA44_0<=136)) ) {
                alt44=1;
            }
            switch (alt44) {
                case 1 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4243:1: (lv_groupBy_2_0= ruleGroupByClause )
                    {
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4243:1: (lv_groupBy_2_0= ruleGroupByClause )
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4244:3: lv_groupBy_2_0= ruleGroupByClause
                    {
                    if ( backtracking==0 ) {
                       
                      	        currentNode=createCompositeNode(grammarAccess.getQueryRuleAccess().getGroupByGroupByClauseParserRuleCall_2_0(), currentNode); 
                      	    
                    }
                    pushFollow(FOLLOW_ruleGroupByClause_in_ruleQueryRule8184);
                    lv_groupBy_2_0=ruleGroupByClause();
                    _fsp--;
                    if (failed) return current;
                    if ( backtracking==0 ) {

                      	        if (current==null) {
                      	            current = factory.create(grammarAccess.getQueryRuleRule().getType().getClassifier());
                      	            associateNodeWithAstElement(currentNode.getParent(), current);
                      	        }
                      	        try {
                      	       		set(
                      	       			current, 
                      	       			"groupBy",
                      	        		lv_groupBy_2_0, 
                      	        		"GroupByClause", 
                      	        		currentNode);
                      	        } catch (ValueConverterException vce) {
                      				handleValueConverterException(vce);
                      	        }
                      	        currentNode = currentNode.getParent();
                      	    
                    }

                    }


                    }
                    break;

            }

            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4266:3: ( (lv_orderBy_3_0= ruleOrderByClause ) )?
            int alt45=2;
            int LA45_0 = input.LA(1);

            if ( ((LA45_0>=137 && LA45_0<=139)) ) {
                alt45=1;
            }
            switch (alt45) {
                case 1 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4267:1: (lv_orderBy_3_0= ruleOrderByClause )
                    {
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4267:1: (lv_orderBy_3_0= ruleOrderByClause )
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4268:3: lv_orderBy_3_0= ruleOrderByClause
                    {
                    if ( backtracking==0 ) {
                       
                      	        currentNode=createCompositeNode(grammarAccess.getQueryRuleAccess().getOrderByOrderByClauseParserRuleCall_3_0(), currentNode); 
                      	    
                    }
                    pushFollow(FOLLOW_ruleOrderByClause_in_ruleQueryRule8206);
                    lv_orderBy_3_0=ruleOrderByClause();
                    _fsp--;
                    if (failed) return current;
                    if ( backtracking==0 ) {

                      	        if (current==null) {
                      	            current = factory.create(grammarAccess.getQueryRuleRule().getType().getClassifier());
                      	            associateNodeWithAstElement(currentNode.getParent(), current);
                      	        }
                      	        try {
                      	       		set(
                      	       			current, 
                      	       			"orderBy",
                      	        		lv_orderBy_3_0, 
                      	        		"OrderByClause", 
                      	        		currentNode);
                      	        } catch (ValueConverterException vce) {
                      				handleValueConverterException(vce);
                      	        }
                      	        currentNode = currentNode.getParent();
                      	    
                    }

                    }


                    }
                    break;

            }


            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
                  	lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruleQueryRule


    // $ANTLR start entryRuleSelectFrom
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4298:1: entryRuleSelectFrom returns [EObject current=null] : iv_ruleSelectFrom= ruleSelectFrom EOF ;
    public final EObject entryRuleSelectFrom() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleSelectFrom = null;


        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4299:2: (iv_ruleSelectFrom= ruleSelectFrom EOF )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4300:2: iv_ruleSelectFrom= ruleSelectFrom EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getSelectFromRule(), currentNode); 
            }
            pushFollow(FOLLOW_ruleSelectFrom_in_entryRuleSelectFrom8243);
            iv_ruleSelectFrom=ruleSelectFrom();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruleSelectFrom; 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleSelectFrom8253); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuleSelectFrom


    // $ANTLR start ruleSelectFrom
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4307:1: ruleSelectFrom returns [EObject current=null] : ( () ( (lv_s_1_0= ruleSelectClause ) )? ( (lv_from_2_0= ruleFromClause ) )? ) ;
    public final EObject ruleSelectFrom() throws RecognitionException {
        EObject current = null;

        EObject lv_s_1_0 = null;

        EObject lv_from_2_0 = null;


         EObject temp=null; setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4312:6: ( ( () ( (lv_s_1_0= ruleSelectClause ) )? ( (lv_from_2_0= ruleFromClause ) )? ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4313:1: ( () ( (lv_s_1_0= ruleSelectClause ) )? ( (lv_from_2_0= ruleFromClause ) )? )
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4313:1: ( () ( (lv_s_1_0= ruleSelectClause ) )? ( (lv_from_2_0= ruleFromClause ) )? )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4313:2: () ( (lv_s_1_0= ruleSelectClause ) )? ( (lv_from_2_0= ruleFromClause ) )?
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4313:2: ()
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4314:2: 
            {
            if ( backtracking==0 ) {
               
              	  /* */ 
              	
            }
            if ( backtracking==0 ) {
               
                      temp=factory.create(grammarAccess.getSelectFromAccess().getSelectFromAction_0().getType().getClassifier());
                      current = temp; 
                      temp = null;
                      CompositeNode newNode = createCompositeNode(grammarAccess.getSelectFromAccess().getSelectFromAction_0(), currentNode.getParent());
                  newNode.getChildren().add(currentNode);
                  moveLookaheadInfo(currentNode, newNode);
                  currentNode = newNode; 
                      associateNodeWithAstElement(currentNode, current); 
                  
            }

            }

            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4327:2: ( (lv_s_1_0= ruleSelectClause ) )?
            int alt46=2;
            int LA46_0 = input.LA(1);

            if ( ((LA46_0>=80 && LA46_0<=82)) ) {
                alt46=1;
            }
            switch (alt46) {
                case 1 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4328:1: (lv_s_1_0= ruleSelectClause )
                    {
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4328:1: (lv_s_1_0= ruleSelectClause )
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4329:3: lv_s_1_0= ruleSelectClause
                    {
                    if ( backtracking==0 ) {
                       
                      	        currentNode=createCompositeNode(grammarAccess.getSelectFromAccess().getSSelectClauseParserRuleCall_1_0(), currentNode); 
                      	    
                    }
                    pushFollow(FOLLOW_ruleSelectClause_in_ruleSelectFrom8311);
                    lv_s_1_0=ruleSelectClause();
                    _fsp--;
                    if (failed) return current;
                    if ( backtracking==0 ) {

                      	        if (current==null) {
                      	            current = factory.create(grammarAccess.getSelectFromRule().getType().getClassifier());
                      	            associateNodeWithAstElement(currentNode.getParent(), current);
                      	        }
                      	        try {
                      	       		set(
                      	       			current, 
                      	       			"s",
                      	        		lv_s_1_0, 
                      	        		"SelectClause", 
                      	        		currentNode);
                      	        } catch (ValueConverterException vce) {
                      				handleValueConverterException(vce);
                      	        }
                      	        currentNode = currentNode.getParent();
                      	    
                    }

                    }


                    }
                    break;

            }

            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4351:3: ( (lv_from_2_0= ruleFromClause ) )?
            int alt47=2;
            int LA47_0 = input.LA(1);

            if ( ((LA47_0>=92 && LA47_0<=94)) ) {
                alt47=1;
            }
            switch (alt47) {
                case 1 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4352:1: (lv_from_2_0= ruleFromClause )
                    {
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4352:1: (lv_from_2_0= ruleFromClause )
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4353:3: lv_from_2_0= ruleFromClause
                    {
                    if ( backtracking==0 ) {
                       
                      	        currentNode=createCompositeNode(grammarAccess.getSelectFromAccess().getFromFromClauseParserRuleCall_2_0(), currentNode); 
                      	    
                    }
                    pushFollow(FOLLOW_ruleFromClause_in_ruleSelectFrom8333);
                    lv_from_2_0=ruleFromClause();
                    _fsp--;
                    if (failed) return current;
                    if ( backtracking==0 ) {

                      	        if (current==null) {
                      	            current = factory.create(grammarAccess.getSelectFromRule().getType().getClassifier());
                      	            associateNodeWithAstElement(currentNode.getParent(), current);
                      	        }
                      	        try {
                      	       		set(
                      	       			current, 
                      	       			"from",
                      	        		lv_from_2_0, 
                      	        		"FromClause", 
                      	        		currentNode);
                      	        } catch (ValueConverterException vce) {
                      				handleValueConverterException(vce);
                      	        }
                      	        currentNode = currentNode.getParent();
                      	    
                    }

                    }


                    }
                    break;

            }


            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
                  	lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruleSelectFrom


    // $ANTLR start entryRuleSelectClause
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4383:1: entryRuleSelectClause returns [EObject current=null] : iv_ruleSelectClause= ruleSelectClause EOF ;
    public final EObject entryRuleSelectClause() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleSelectClause = null;


        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4384:2: (iv_ruleSelectClause= ruleSelectClause EOF )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4385:2: iv_ruleSelectClause= ruleSelectClause EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getSelectClauseRule(), currentNode); 
            }
            pushFollow(FOLLOW_ruleSelectClause_in_entryRuleSelectClause8370);
            iv_ruleSelectClause=ruleSelectClause();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruleSelectClause; 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleSelectClause8380); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuleSelectClause


    // $ANTLR start ruleSelectClause
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4392:1: ruleSelectClause returns [EObject current=null] : ( () ruleSELECT ( ruleDISTINCT )? ( ( (lv_s_3_0= ruleSelectedPropertiesList ) ) | ( (lv_n_4_0= ruleNewExpression ) ) | ruleSelectObject ) ) ;
    public final EObject ruleSelectClause() throws RecognitionException {
        EObject current = null;

        EObject lv_s_3_0 = null;

        EObject lv_n_4_0 = null;


         EObject temp=null; setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4397:6: ( ( () ruleSELECT ( ruleDISTINCT )? ( ( (lv_s_3_0= ruleSelectedPropertiesList ) ) | ( (lv_n_4_0= ruleNewExpression ) ) | ruleSelectObject ) ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4398:1: ( () ruleSELECT ( ruleDISTINCT )? ( ( (lv_s_3_0= ruleSelectedPropertiesList ) ) | ( (lv_n_4_0= ruleNewExpression ) ) | ruleSelectObject ) )
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4398:1: ( () ruleSELECT ( ruleDISTINCT )? ( ( (lv_s_3_0= ruleSelectedPropertiesList ) ) | ( (lv_n_4_0= ruleNewExpression ) ) | ruleSelectObject ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4398:2: () ruleSELECT ( ruleDISTINCT )? ( ( (lv_s_3_0= ruleSelectedPropertiesList ) ) | ( (lv_n_4_0= ruleNewExpression ) ) | ruleSelectObject )
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4398:2: ()
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4399:2: 
            {
            if ( backtracking==0 ) {
               
              	  /* */ 
              	
            }
            if ( backtracking==0 ) {
               
                      temp=factory.create(grammarAccess.getSelectClauseAccess().getSelectClauseAction_0().getType().getClassifier());
                      current = temp; 
                      temp = null;
                      CompositeNode newNode = createCompositeNode(grammarAccess.getSelectClauseAccess().getSelectClauseAction_0(), currentNode.getParent());
                  newNode.getChildren().add(currentNode);
                  moveLookaheadInfo(currentNode, newNode);
                  currentNode = newNode; 
                      associateNodeWithAstElement(currentNode, current); 
                  
            }

            }

            pushFollow(FOLLOW_ruleSELECT_in_ruleSelectClause8426);
            ruleSELECT();
            _fsp--;
            if (failed) return current;
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4412:12: ( ruleDISTINCT )?
            int alt48=2;
            int LA48_0 = input.LA(1);

            if ( ((LA48_0>=83 && LA48_0<=85)) ) {
                alt48=1;
            }
            switch (alt48) {
                case 1 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4412:13: ruleDISTINCT
                    {
                    pushFollow(FOLLOW_ruleDISTINCT_in_ruleSelectClause8428);
                    ruleDISTINCT();
                    _fsp--;
                    if (failed) return current;

                    }
                    break;

            }

            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4412:27: ( ( (lv_s_3_0= ruleSelectedPropertiesList ) ) | ( (lv_n_4_0= ruleNewExpression ) ) | ruleSelectObject )
            int alt49=3;
            switch ( input.LA(1) ) {
            case RULE_ID:
            case RULE_STRING:
            case RULE_INT:
            case RULE_SIGNED_INT:
            case RULE_HEX:
            case 16:
            case 17:
            case 18:
            case 26:
            case 36:
            case 38:
            case 39:
            case 40:
            case 42:
            case 43:
            case 45:
            case 54:
            case 55:
            case 56:
            case 57:
            case 59:
            case 62:
            case 63:
            case 75:
            case 76:
            case 77:
            case 78:
            case 92:
            case 93:
            case 94:
            case 125:
            case 126:
            case 127:
            case 167:
            case 168:
            case 177:
            case 178:
            case 179:
            case 186:
            case 187:
            case 188:
            case 189:
            case 190:
            case 191:
            case 192:
            case 193:
            case 194:
            case 201:
            case 202:
            case 203:
            case 204:
            case 205:
            case 206:
            case 207:
            case 208:
            case 209:
            case 210:
            case 211:
            case 212:
            case 213:
            case 214:
            case 215:
            case 216:
            case 217:
            case 218:
            case 219:
            case 220:
            case 221:
            case 222:
            case 223:
            case 224:
            case 225:
            case 226:
            case 227:
            case 228:
            case 229:
            case 230:
            case 240:
            case 241:
            case 242:
            case 243:
            case 244:
            case 245:
            case 246:
            case 247:
            case 248:
            case 249:
                {
                alt49=1;
                }
                break;
            case 86:
            case 87:
            case 88:
                {
                alt49=2;
                }
                break;
            case 89:
            case 90:
            case 91:
                {
                alt49=3;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("4412:27: ( ( (lv_s_3_0= ruleSelectedPropertiesList ) ) | ( (lv_n_4_0= ruleNewExpression ) ) | ruleSelectObject )", 49, 0, input);

                throw nvae;
            }

            switch (alt49) {
                case 1 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4412:28: ( (lv_s_3_0= ruleSelectedPropertiesList ) )
                    {
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4412:28: ( (lv_s_3_0= ruleSelectedPropertiesList ) )
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4413:1: (lv_s_3_0= ruleSelectedPropertiesList )
                    {
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4413:1: (lv_s_3_0= ruleSelectedPropertiesList )
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4414:3: lv_s_3_0= ruleSelectedPropertiesList
                    {
                    if ( backtracking==0 ) {
                       
                      	        currentNode=createCompositeNode(grammarAccess.getSelectClauseAccess().getSSelectedPropertiesListParserRuleCall_3_0_0(), currentNode); 
                      	    
                    }
                    pushFollow(FOLLOW_ruleSelectedPropertiesList_in_ruleSelectClause8444);
                    lv_s_3_0=ruleSelectedPropertiesList();
                    _fsp--;
                    if (failed) return current;
                    if ( backtracking==0 ) {

                      	        if (current==null) {
                      	            current = factory.create(grammarAccess.getSelectClauseRule().getType().getClassifier());
                      	            associateNodeWithAstElement(currentNode.getParent(), current);
                      	        }
                      	        try {
                      	       		set(
                      	       			current, 
                      	       			"s",
                      	        		lv_s_3_0, 
                      	        		"SelectedPropertiesList", 
                      	        		currentNode);
                      	        } catch (ValueConverterException vce) {
                      				handleValueConverterException(vce);
                      	        }
                      	        currentNode = currentNode.getParent();
                      	    
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4437:6: ( (lv_n_4_0= ruleNewExpression ) )
                    {
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4437:6: ( (lv_n_4_0= ruleNewExpression ) )
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4438:1: (lv_n_4_0= ruleNewExpression )
                    {
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4438:1: (lv_n_4_0= ruleNewExpression )
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4439:3: lv_n_4_0= ruleNewExpression
                    {
                    if ( backtracking==0 ) {
                       
                      	        currentNode=createCompositeNode(grammarAccess.getSelectClauseAccess().getNNewExpressionParserRuleCall_3_1_0(), currentNode); 
                      	    
                    }
                    pushFollow(FOLLOW_ruleNewExpression_in_ruleSelectClause8471);
                    lv_n_4_0=ruleNewExpression();
                    _fsp--;
                    if (failed) return current;
                    if ( backtracking==0 ) {

                      	        if (current==null) {
                      	            current = factory.create(grammarAccess.getSelectClauseRule().getType().getClassifier());
                      	            associateNodeWithAstElement(currentNode.getParent(), current);
                      	        }
                      	        try {
                      	       		set(
                      	       			current, 
                      	       			"n",
                      	        		lv_n_4_0, 
                      	        		"NewExpression", 
                      	        		currentNode);
                      	        } catch (ValueConverterException vce) {
                      				handleValueConverterException(vce);
                      	        }
                      	        currentNode = currentNode.getParent();
                      	    
                    }

                    }


                    }


                    }
                    break;
                case 3 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4462:6: ruleSelectObject
                    {
                    pushFollow(FOLLOW_ruleSelectObject_in_ruleSelectClause8486);
                    ruleSelectObject();
                    _fsp--;
                    if (failed) return current;

                    }
                    break;

            }


            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
                  	lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruleSelectClause


    // $ANTLR start entryRuleNewExpression
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4470:1: entryRuleNewExpression returns [EObject current=null] : iv_ruleNewExpression= ruleNewExpression EOF ;
    public final EObject entryRuleNewExpression() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleNewExpression = null;


        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4471:2: (iv_ruleNewExpression= ruleNewExpression EOF )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4472:2: iv_ruleNewExpression= ruleNewExpression EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getNewExpressionRule(), currentNode); 
            }
            pushFollow(FOLLOW_ruleNewExpression_in_entryRuleNewExpression8515);
            iv_ruleNewExpression=ruleNewExpression();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruleNewExpression; 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleNewExpression8525); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuleNewExpression


    // $ANTLR start ruleNewExpression
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4479:1: ruleNewExpression returns [EObject current=null] : ( ruleNEW ( (lv_p_1_0= rulePath ) ) '(' ( (lv_s_3_0= ruleSelectedPropertiesList ) ) ')' ) ;
    public final EObject ruleNewExpression() throws RecognitionException {
        EObject current = null;

        AntlrDatatypeRuleToken lv_p_1_0 = null;

        EObject lv_s_3_0 = null;


         EObject temp=null; setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4484:6: ( ( ruleNEW ( (lv_p_1_0= rulePath ) ) '(' ( (lv_s_3_0= ruleSelectedPropertiesList ) ) ')' ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4485:1: ( ruleNEW ( (lv_p_1_0= rulePath ) ) '(' ( (lv_s_3_0= ruleSelectedPropertiesList ) ) ')' )
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4485:1: ( ruleNEW ( (lv_p_1_0= rulePath ) ) '(' ( (lv_s_3_0= ruleSelectedPropertiesList ) ) ')' )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4485:2: ruleNEW ( (lv_p_1_0= rulePath ) ) '(' ( (lv_s_3_0= ruleSelectedPropertiesList ) ) ')'
            {
            pushFollow(FOLLOW_ruleNEW_in_ruleNewExpression8559);
            ruleNEW();
            _fsp--;
            if (failed) return current;
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4485:9: ( (lv_p_1_0= rulePath ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4486:1: (lv_p_1_0= rulePath )
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4486:1: (lv_p_1_0= rulePath )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4487:3: lv_p_1_0= rulePath
            {
            if ( backtracking==0 ) {
               
              	        currentNode=createCompositeNode(grammarAccess.getNewExpressionAccess().getPPathParserRuleCall_1_0(), currentNode); 
              	    
            }
            pushFollow(FOLLOW_rulePath_in_ruleNewExpression8572);
            lv_p_1_0=rulePath();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {

              	        if (current==null) {
              	            current = factory.create(grammarAccess.getNewExpressionRule().getType().getClassifier());
              	            associateNodeWithAstElement(currentNode.getParent(), current);
              	        }
              	        try {
              	       		set(
              	       			current, 
              	       			"p",
              	        		lv_p_1_0, 
              	        		"Path", 
              	        		currentNode);
              	        } catch (ValueConverterException vce) {
              				handleValueConverterException(vce);
              	        }
              	        currentNode = currentNode.getParent();
              	    
            }

            }


            }

            match(input,43,FOLLOW_43_in_ruleNewExpression8582); if (failed) return current;
            if ( backtracking==0 ) {

                      createLeafNode(grammarAccess.getNewExpressionAccess().getLeftParenthesisKeyword_2(), null); 
                  
            }
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4513:1: ( (lv_s_3_0= ruleSelectedPropertiesList ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4514:1: (lv_s_3_0= ruleSelectedPropertiesList )
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4514:1: (lv_s_3_0= ruleSelectedPropertiesList )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4515:3: lv_s_3_0= ruleSelectedPropertiesList
            {
            if ( backtracking==0 ) {
               
              	        currentNode=createCompositeNode(grammarAccess.getNewExpressionAccess().getSSelectedPropertiesListParserRuleCall_3_0(), currentNode); 
              	    
            }
            pushFollow(FOLLOW_ruleSelectedPropertiesList_in_ruleNewExpression8603);
            lv_s_3_0=ruleSelectedPropertiesList();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {

              	        if (current==null) {
              	            current = factory.create(grammarAccess.getNewExpressionRule().getType().getClassifier());
              	            associateNodeWithAstElement(currentNode.getParent(), current);
              	        }
              	        try {
              	       		set(
              	       			current, 
              	       			"s",
              	        		lv_s_3_0, 
              	        		"SelectedPropertiesList", 
              	        		currentNode);
              	        } catch (ValueConverterException vce) {
              				handleValueConverterException(vce);
              	        }
              	        currentNode = currentNode.getParent();
              	    
            }

            }


            }

            match(input,44,FOLLOW_44_in_ruleNewExpression8613); if (failed) return current;
            if ( backtracking==0 ) {

                      createLeafNode(grammarAccess.getNewExpressionAccess().getRightParenthesisKeyword_4(), null); 
                  
            }

            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
                  	lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruleNewExpression


    // $ANTLR start entryRuleSelectObject
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4549:1: entryRuleSelectObject returns [String current=null] : iv_ruleSelectObject= ruleSelectObject EOF ;
    public final String entryRuleSelectObject() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleSelectObject = null;


        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4550:2: (iv_ruleSelectObject= ruleSelectObject EOF )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4551:2: iv_ruleSelectObject= ruleSelectObject EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getSelectObjectRule(), currentNode); 
            }
            pushFollow(FOLLOW_ruleSelectObject_in_entryRuleSelectObject8650);
            iv_ruleSelectObject=ruleSelectObject();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruleSelectObject.getText(); 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleSelectObject8661); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuleSelectObject


    // $ANTLR start ruleSelectObject
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4558:1: ruleSelectObject returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (this_OBJECT_0= ruleOBJECT kw= '(' this_Identifier_2= ruleIdentifier kw= ')' ) ;
    public final AntlrDatatypeRuleToken ruleSelectObject() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;
        AntlrDatatypeRuleToken this_OBJECT_0 = null;

        AntlrDatatypeRuleToken this_Identifier_2 = null;


         setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4563:6: ( (this_OBJECT_0= ruleOBJECT kw= '(' this_Identifier_2= ruleIdentifier kw= ')' ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4564:1: (this_OBJECT_0= ruleOBJECT kw= '(' this_Identifier_2= ruleIdentifier kw= ')' )
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4564:1: (this_OBJECT_0= ruleOBJECT kw= '(' this_Identifier_2= ruleIdentifier kw= ')' )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4565:5: this_OBJECT_0= ruleOBJECT kw= '(' this_Identifier_2= ruleIdentifier kw= ')'
            {
            if ( backtracking==0 ) {
               
                      currentNode=createCompositeNode(grammarAccess.getSelectObjectAccess().getOBJECTParserRuleCall_0(), currentNode); 
                  
            }
            pushFollow(FOLLOW_ruleOBJECT_in_ruleSelectObject8708);
            this_OBJECT_0=ruleOBJECT();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {

              		current.merge(this_OBJECT_0);
                  
            }
            if ( backtracking==0 ) {
               
                      currentNode = currentNode.getParent();
                  
            }
            kw=(Token)input.LT(1);
            match(input,43,FOLLOW_43_in_ruleSelectObject8726); if (failed) return current;
            if ( backtracking==0 ) {

                      current.merge(kw);
                      createLeafNode(grammarAccess.getSelectObjectAccess().getLeftParenthesisKeyword_1(), null); 
                  
            }
            if ( backtracking==0 ) {
               
                      currentNode=createCompositeNode(grammarAccess.getSelectObjectAccess().getIdentifierParserRuleCall_2(), currentNode); 
                  
            }
            pushFollow(FOLLOW_ruleIdentifier_in_ruleSelectObject8748);
            this_Identifier_2=ruleIdentifier();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {

              		current.merge(this_Identifier_2);
                  
            }
            if ( backtracking==0 ) {
               
                      currentNode = currentNode.getParent();
                  
            }
            kw=(Token)input.LT(1);
            match(input,44,FOLLOW_44_in_ruleSelectObject8766); if (failed) return current;
            if ( backtracking==0 ) {

                      current.merge(kw);
                      createLeafNode(grammarAccess.getSelectObjectAccess().getRightParenthesisKeyword_3(), null); 
                  
            }

            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
              	    lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruleSelectObject


    // $ANTLR start entryRuleFromClause
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4606:1: entryRuleFromClause returns [EObject current=null] : iv_ruleFromClause= ruleFromClause EOF ;
    public final EObject entryRuleFromClause() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleFromClause = null;


        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4607:2: (iv_ruleFromClause= ruleFromClause EOF )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4608:2: iv_ruleFromClause= ruleFromClause EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getFromClauseRule(), currentNode); 
            }
            pushFollow(FOLLOW_ruleFromClause_in_entryRuleFromClause8806);
            iv_ruleFromClause=ruleFromClause();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruleFromClause; 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleFromClause8816); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuleFromClause


    // $ANTLR start ruleFromClause
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4615:1: ruleFromClause returns [EObject current=null] : ( ruleFROM ( (lv_fromRange_1_0= ruleFromRange ) ) ( ( (lv_fromJoin_2_0= ruleFromJoin ) ) | ( ',' ( (lv_fromRange_4_0= ruleFromRange ) ) ) )* ) ;
    public final EObject ruleFromClause() throws RecognitionException {
        EObject current = null;

        EObject lv_fromRange_1_0 = null;

        EObject lv_fromJoin_2_0 = null;

        EObject lv_fromRange_4_0 = null;


         EObject temp=null; setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4620:6: ( ( ruleFROM ( (lv_fromRange_1_0= ruleFromRange ) ) ( ( (lv_fromJoin_2_0= ruleFromJoin ) ) | ( ',' ( (lv_fromRange_4_0= ruleFromRange ) ) ) )* ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4621:1: ( ruleFROM ( (lv_fromRange_1_0= ruleFromRange ) ) ( ( (lv_fromJoin_2_0= ruleFromJoin ) ) | ( ',' ( (lv_fromRange_4_0= ruleFromRange ) ) ) )* )
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4621:1: ( ruleFROM ( (lv_fromRange_1_0= ruleFromRange ) ) ( ( (lv_fromJoin_2_0= ruleFromJoin ) ) | ( ',' ( (lv_fromRange_4_0= ruleFromRange ) ) ) )* )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4621:2: ruleFROM ( (lv_fromRange_1_0= ruleFromRange ) ) ( ( (lv_fromJoin_2_0= ruleFromJoin ) ) | ( ',' ( (lv_fromRange_4_0= ruleFromRange ) ) ) )*
            {
            pushFollow(FOLLOW_ruleFROM_in_ruleFromClause8850);
            ruleFROM();
            _fsp--;
            if (failed) return current;
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4621:10: ( (lv_fromRange_1_0= ruleFromRange ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4622:1: (lv_fromRange_1_0= ruleFromRange )
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4622:1: (lv_fromRange_1_0= ruleFromRange )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4623:3: lv_fromRange_1_0= ruleFromRange
            {
            if ( backtracking==0 ) {
               
              	        currentNode=createCompositeNode(grammarAccess.getFromClauseAccess().getFromRangeFromRangeParserRuleCall_1_0(), currentNode); 
              	    
            }
            pushFollow(FOLLOW_ruleFromRange_in_ruleFromClause8863);
            lv_fromRange_1_0=ruleFromRange();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {

              	        if (current==null) {
              	            current = factory.create(grammarAccess.getFromClauseRule().getType().getClassifier());
              	            associateNodeWithAstElement(currentNode.getParent(), current);
              	        }
              	        try {
              	       		add(
              	       			current, 
              	       			"fromRange",
              	        		lv_fromRange_1_0, 
              	        		"FromRange", 
              	        		currentNode);
              	        } catch (ValueConverterException vce) {
              				handleValueConverterException(vce);
              	        }
              	        currentNode = currentNode.getParent();
              	    
            }

            }


            }

            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4645:2: ( ( (lv_fromJoin_2_0= ruleFromJoin ) ) | ( ',' ( (lv_fromRange_4_0= ruleFromRange ) ) ) )*
            loop50:
            do {
                int alt50=3;
                int LA50_0 = input.LA(1);

                if ( ((LA50_0>=95 && LA50_0<=100)||(LA50_0>=104 && LA50_0<=112)) ) {
                    alt50=1;
                }
                else if ( (LA50_0==28) ) {
                    alt50=2;
                }


                switch (alt50) {
            	case 1 :
            	    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4645:3: ( (lv_fromJoin_2_0= ruleFromJoin ) )
            	    {
            	    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4645:3: ( (lv_fromJoin_2_0= ruleFromJoin ) )
            	    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4646:1: (lv_fromJoin_2_0= ruleFromJoin )
            	    {
            	    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4646:1: (lv_fromJoin_2_0= ruleFromJoin )
            	    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4647:3: lv_fromJoin_2_0= ruleFromJoin
            	    {
            	    if ( backtracking==0 ) {
            	       
            	      	        currentNode=createCompositeNode(grammarAccess.getFromClauseAccess().getFromJoinFromJoinParserRuleCall_2_0_0(), currentNode); 
            	      	    
            	    }
            	    pushFollow(FOLLOW_ruleFromJoin_in_ruleFromClause8885);
            	    lv_fromJoin_2_0=ruleFromJoin();
            	    _fsp--;
            	    if (failed) return current;
            	    if ( backtracking==0 ) {

            	      	        if (current==null) {
            	      	            current = factory.create(grammarAccess.getFromClauseRule().getType().getClassifier());
            	      	            associateNodeWithAstElement(currentNode.getParent(), current);
            	      	        }
            	      	        try {
            	      	       		add(
            	      	       			current, 
            	      	       			"fromJoin",
            	      	        		lv_fromJoin_2_0, 
            	      	        		"FromJoin", 
            	      	        		currentNode);
            	      	        } catch (ValueConverterException vce) {
            	      				handleValueConverterException(vce);
            	      	        }
            	      	        currentNode = currentNode.getParent();
            	      	    
            	    }

            	    }


            	    }


            	    }
            	    break;
            	case 2 :
            	    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4670:6: ( ',' ( (lv_fromRange_4_0= ruleFromRange ) ) )
            	    {
            	    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4670:6: ( ',' ( (lv_fromRange_4_0= ruleFromRange ) ) )
            	    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4670:8: ',' ( (lv_fromRange_4_0= ruleFromRange ) )
            	    {
            	    match(input,28,FOLLOW_28_in_ruleFromClause8902); if (failed) return current;
            	    if ( backtracking==0 ) {

            	              createLeafNode(grammarAccess.getFromClauseAccess().getCommaKeyword_2_1_0(), null); 
            	          
            	    }
            	    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4674:1: ( (lv_fromRange_4_0= ruleFromRange ) )
            	    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4675:1: (lv_fromRange_4_0= ruleFromRange )
            	    {
            	    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4675:1: (lv_fromRange_4_0= ruleFromRange )
            	    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4676:3: lv_fromRange_4_0= ruleFromRange
            	    {
            	    if ( backtracking==0 ) {
            	       
            	      	        currentNode=createCompositeNode(grammarAccess.getFromClauseAccess().getFromRangeFromRangeParserRuleCall_2_1_1_0(), currentNode); 
            	      	    
            	    }
            	    pushFollow(FOLLOW_ruleFromRange_in_ruleFromClause8923);
            	    lv_fromRange_4_0=ruleFromRange();
            	    _fsp--;
            	    if (failed) return current;
            	    if ( backtracking==0 ) {

            	      	        if (current==null) {
            	      	            current = factory.create(grammarAccess.getFromClauseRule().getType().getClassifier());
            	      	            associateNodeWithAstElement(currentNode.getParent(), current);
            	      	        }
            	      	        try {
            	      	       		add(
            	      	       			current, 
            	      	       			"fromRange",
            	      	        		lv_fromRange_4_0, 
            	      	        		"FromRange", 
            	      	        		currentNode);
            	      	        } catch (ValueConverterException vce) {
            	      				handleValueConverterException(vce);
            	      	        }
            	      	        currentNode = currentNode.getParent();
            	      	    
            	    }

            	    }


            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop50;
                }
            } while (true);


            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
                  	lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruleFromClause


    // $ANTLR start entryRuleFromJoin
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4706:1: entryRuleFromJoin returns [EObject current=null] : iv_ruleFromJoin= ruleFromJoin EOF ;
    public final EObject entryRuleFromJoin() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleFromJoin = null;


        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4707:2: (iv_ruleFromJoin= ruleFromJoin EOF )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4708:2: iv_ruleFromJoin= ruleFromJoin EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getFromJoinRule(), currentNode); 
            }
            pushFollow(FOLLOW_ruleFromJoin_in_entryRuleFromJoin8962);
            iv_ruleFromJoin=ruleFromJoin();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruleFromJoin; 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleFromJoin8972); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuleFromJoin


    // $ANTLR start ruleFromJoin
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4715:1: ruleFromJoin returns [EObject current=null] : ( ( ( ( ruleLEFT | ruleRIGHT ) ( ruleOUTER )? ) | ruleFULL | ruleINNER )? ruleJOIN ( ruleFETCH )? this_FromClassOrOuterQueryPath_7= ruleFromClassOrOuterQueryPath ( (lv_w_8_0= ruleWithClause ) )? ) ;
    public final EObject ruleFromJoin() throws RecognitionException {
        EObject current = null;

        EObject this_FromClassOrOuterQueryPath_7 = null;

        EObject lv_w_8_0 = null;


         EObject temp=null; setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4720:6: ( ( ( ( ( ruleLEFT | ruleRIGHT ) ( ruleOUTER )? ) | ruleFULL | ruleINNER )? ruleJOIN ( ruleFETCH )? this_FromClassOrOuterQueryPath_7= ruleFromClassOrOuterQueryPath ( (lv_w_8_0= ruleWithClause ) )? ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4721:1: ( ( ( ( ruleLEFT | ruleRIGHT ) ( ruleOUTER )? ) | ruleFULL | ruleINNER )? ruleJOIN ( ruleFETCH )? this_FromClassOrOuterQueryPath_7= ruleFromClassOrOuterQueryPath ( (lv_w_8_0= ruleWithClause ) )? )
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4721:1: ( ( ( ( ruleLEFT | ruleRIGHT ) ( ruleOUTER )? ) | ruleFULL | ruleINNER )? ruleJOIN ( ruleFETCH )? this_FromClassOrOuterQueryPath_7= ruleFromClassOrOuterQueryPath ( (lv_w_8_0= ruleWithClause ) )? )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4721:2: ( ( ( ruleLEFT | ruleRIGHT ) ( ruleOUTER )? ) | ruleFULL | ruleINNER )? ruleJOIN ( ruleFETCH )? this_FromClassOrOuterQueryPath_7= ruleFromClassOrOuterQueryPath ( (lv_w_8_0= ruleWithClause ) )?
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4721:2: ( ( ( ruleLEFT | ruleRIGHT ) ( ruleOUTER )? ) | ruleFULL | ruleINNER )?
            int alt53=4;
            switch ( input.LA(1) ) {
                case 95:
                case 96:
                case 97:
                case 98:
                case 99:
                case 100:
                    {
                    alt53=1;
                    }
                    break;
                case 104:
                case 105:
                case 106:
                    {
                    alt53=2;
                    }
                    break;
                case 107:
                case 108:
                case 109:
                    {
                    alt53=3;
                    }
                    break;
            }

            switch (alt53) {
                case 1 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4721:3: ( ( ruleLEFT | ruleRIGHT ) ( ruleOUTER )? )
                    {
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4721:3: ( ( ruleLEFT | ruleRIGHT ) ( ruleOUTER )? )
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4721:4: ( ruleLEFT | ruleRIGHT ) ( ruleOUTER )?
                    {
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4721:4: ( ruleLEFT | ruleRIGHT )
                    int alt51=2;
                    int LA51_0 = input.LA(1);

                    if ( ((LA51_0>=95 && LA51_0<=97)) ) {
                        alt51=1;
                    }
                    else if ( ((LA51_0>=98 && LA51_0<=100)) ) {
                        alt51=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("4721:4: ( ruleLEFT | ruleRIGHT )", 51, 0, input);

                        throw nvae;
                    }
                    switch (alt51) {
                        case 1 :
                            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4721:5: ruleLEFT
                            {
                            pushFollow(FOLLOW_ruleLEFT_in_ruleFromJoin9009);
                            ruleLEFT();
                            _fsp--;
                            if (failed) return current;

                            }
                            break;
                        case 2 :
                            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4722:6: ruleRIGHT
                            {
                            pushFollow(FOLLOW_ruleRIGHT_in_ruleFromJoin9016);
                            ruleRIGHT();
                            _fsp--;
                            if (failed) return current;

                            }
                            break;

                    }

                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4722:16: ( ruleOUTER )?
                    int alt52=2;
                    int LA52_0 = input.LA(1);

                    if ( ((LA52_0>=101 && LA52_0<=103)) ) {
                        alt52=1;
                    }
                    switch (alt52) {
                        case 1 :
                            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4722:17: ruleOUTER
                            {
                            pushFollow(FOLLOW_ruleOUTER_in_ruleFromJoin9019);
                            ruleOUTER();
                            _fsp--;
                            if (failed) return current;

                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4723:6: ruleFULL
                    {
                    pushFollow(FOLLOW_ruleFULL_in_ruleFromJoin9029);
                    ruleFULL();
                    _fsp--;
                    if (failed) return current;

                    }
                    break;
                case 3 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4724:6: ruleINNER
                    {
                    pushFollow(FOLLOW_ruleINNER_in_ruleFromJoin9036);
                    ruleINNER();
                    _fsp--;
                    if (failed) return current;

                    }
                    break;

            }

            pushFollow(FOLLOW_ruleJOIN_in_ruleFromJoin9039);
            ruleJOIN();
            _fsp--;
            if (failed) return current;
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4724:25: ( ruleFETCH )?
            int alt54=2;
            int LA54_0 = input.LA(1);

            if ( ((LA54_0>=113 && LA54_0<=115)) ) {
                alt54=1;
            }
            switch (alt54) {
                case 1 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4724:26: ruleFETCH
                    {
                    pushFollow(FOLLOW_ruleFETCH_in_ruleFromJoin9041);
                    ruleFETCH();
                    _fsp--;
                    if (failed) return current;

                    }
                    break;

            }

            if ( backtracking==0 ) {
               
              	  /* */ 
              	
            }
            if ( backtracking==0 ) {
               
                      currentNode=createCompositeNode(grammarAccess.getFromJoinAccess().getFromClassOrOuterQueryPathParserRuleCall_3(), currentNode); 
                  
            }
            pushFollow(FOLLOW_ruleFromClassOrOuterQueryPath_in_ruleFromJoin9060);
            this_FromClassOrOuterQueryPath_7=ruleFromClassOrOuterQueryPath();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               
                      current = this_FromClassOrOuterQueryPath_7; 
                      currentNode = currentNode.getParent();
                  
            }
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4736:1: ( (lv_w_8_0= ruleWithClause ) )?
            int alt55=2;
            int LA55_0 = input.LA(1);

            if ( ((LA55_0>=116 && LA55_0<=118)) ) {
                alt55=1;
            }
            switch (alt55) {
                case 1 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4737:1: (lv_w_8_0= ruleWithClause )
                    {
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4737:1: (lv_w_8_0= ruleWithClause )
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4738:3: lv_w_8_0= ruleWithClause
                    {
                    if ( backtracking==0 ) {
                       
                      	        currentNode=createCompositeNode(grammarAccess.getFromJoinAccess().getWWithClauseParserRuleCall_4_0(), currentNode); 
                      	    
                    }
                    pushFollow(FOLLOW_ruleWithClause_in_ruleFromJoin9080);
                    lv_w_8_0=ruleWithClause();
                    _fsp--;
                    if (failed) return current;
                    if ( backtracking==0 ) {

                      	        if (current==null) {
                      	            current = factory.create(grammarAccess.getFromJoinRule().getType().getClassifier());
                      	            associateNodeWithAstElement(currentNode.getParent(), current);
                      	        }
                      	        try {
                      	       		set(
                      	       			current, 
                      	       			"w",
                      	        		lv_w_8_0, 
                      	        		"WithClause", 
                      	        		currentNode);
                      	        } catch (ValueConverterException vce) {
                      				handleValueConverterException(vce);
                      	        }
                      	        currentNode = currentNode.getParent();
                      	    
                    }

                    }


                    }
                    break;

            }


            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
                  	lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruleFromJoin


    // $ANTLR start entryRuleWithClause
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4768:1: entryRuleWithClause returns [EObject current=null] : iv_ruleWithClause= ruleWithClause EOF ;
    public final EObject entryRuleWithClause() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleWithClause = null;


        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4769:2: (iv_ruleWithClause= ruleWithClause EOF )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4770:2: iv_ruleWithClause= ruleWithClause EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getWithClauseRule(), currentNode); 
            }
            pushFollow(FOLLOW_ruleWithClause_in_entryRuleWithClause9117);
            iv_ruleWithClause=ruleWithClause();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruleWithClause; 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleWithClause9127); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuleWithClause


    // $ANTLR start ruleWithClause
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4777:1: ruleWithClause returns [EObject current=null] : ( ruleWITH ( (lv_e_1_0= ruleExpression ) ) ) ;
    public final EObject ruleWithClause() throws RecognitionException {
        EObject current = null;

        EObject lv_e_1_0 = null;


         EObject temp=null; setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4782:6: ( ( ruleWITH ( (lv_e_1_0= ruleExpression ) ) ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4783:1: ( ruleWITH ( (lv_e_1_0= ruleExpression ) ) )
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4783:1: ( ruleWITH ( (lv_e_1_0= ruleExpression ) ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4783:2: ruleWITH ( (lv_e_1_0= ruleExpression ) )
            {
            pushFollow(FOLLOW_ruleWITH_in_ruleWithClause9161);
            ruleWITH();
            _fsp--;
            if (failed) return current;
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4783:10: ( (lv_e_1_0= ruleExpression ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4784:1: (lv_e_1_0= ruleExpression )
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4784:1: (lv_e_1_0= ruleExpression )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4785:3: lv_e_1_0= ruleExpression
            {
            if ( backtracking==0 ) {
               
              	        currentNode=createCompositeNode(grammarAccess.getWithClauseAccess().getEExpressionParserRuleCall_1_0(), currentNode); 
              	    
            }
            pushFollow(FOLLOW_ruleExpression_in_ruleWithClause9174);
            lv_e_1_0=ruleExpression();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {

              	        if (current==null) {
              	            current = factory.create(grammarAccess.getWithClauseRule().getType().getClassifier());
              	            associateNodeWithAstElement(currentNode.getParent(), current);
              	        }
              	        try {
              	       		set(
              	       			current, 
              	       			"e",
              	        		lv_e_1_0, 
              	        		"Expression", 
              	        		currentNode);
              	        } catch (ValueConverterException vce) {
              				handleValueConverterException(vce);
              	        }
              	        currentNode = currentNode.getParent();
              	    
            }

            }


            }


            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
                  	lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruleWithClause


    // $ANTLR start entryRuleFromRange
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4815:1: entryRuleFromRange returns [EObject current=null] : iv_ruleFromRange= ruleFromRange EOF ;
    public final EObject entryRuleFromRange() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleFromRange = null;


        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4816:2: (iv_ruleFromRange= ruleFromRange EOF )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4817:2: iv_ruleFromRange= ruleFromRange EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getFromRangeRule(), currentNode); 
            }
            pushFollow(FOLLOW_ruleFromRange_in_entryRuleFromRange9210);
            iv_ruleFromRange=ruleFromRange();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruleFromRange; 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleFromRange9220); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuleFromRange


    // $ANTLR start ruleFromRange
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4824:1: ruleFromRange returns [EObject current=null] : (this_FromClassOrOuterQueryPath_0= ruleFromClassOrOuterQueryPath | ( ( (lv_alias_1_0= ruleIdentifier ) ) ruleIN_CLASS ( (lv_p_3_0= rulePath ) ) ) | ( ruleIN '(' ( (lv_p_6_0= rulePath ) ) ')' ( (lv_alias_8_0= ruleIdentifier ) ) ) | this_InCollectionElementsDeclaration_9= ruleInCollectionElementsDeclaration ) ;
    public final EObject ruleFromRange() throws RecognitionException {
        EObject current = null;

        EObject this_FromClassOrOuterQueryPath_0 = null;

        AntlrDatatypeRuleToken lv_alias_1_0 = null;

        AntlrDatatypeRuleToken lv_p_3_0 = null;

        AntlrDatatypeRuleToken lv_p_6_0 = null;

        AntlrDatatypeRuleToken lv_alias_8_0 = null;

        EObject this_InCollectionElementsDeclaration_9 = null;


         EObject temp=null; setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4829:6: ( (this_FromClassOrOuterQueryPath_0= ruleFromClassOrOuterQueryPath | ( ( (lv_alias_1_0= ruleIdentifier ) ) ruleIN_CLASS ( (lv_p_3_0= rulePath ) ) ) | ( ruleIN '(' ( (lv_p_6_0= rulePath ) ) ')' ( (lv_alias_8_0= ruleIdentifier ) ) ) | this_InCollectionElementsDeclaration_9= ruleInCollectionElementsDeclaration ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4830:1: (this_FromClassOrOuterQueryPath_0= ruleFromClassOrOuterQueryPath | ( ( (lv_alias_1_0= ruleIdentifier ) ) ruleIN_CLASS ( (lv_p_3_0= rulePath ) ) ) | ( ruleIN '(' ( (lv_p_6_0= rulePath ) ) ')' ( (lv_alias_8_0= ruleIdentifier ) ) ) | this_InCollectionElementsDeclaration_9= ruleInCollectionElementsDeclaration )
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4830:1: (this_FromClassOrOuterQueryPath_0= ruleFromClassOrOuterQueryPath | ( ( (lv_alias_1_0= ruleIdentifier ) ) ruleIN_CLASS ( (lv_p_3_0= rulePath ) ) ) | ( ruleIN '(' ( (lv_p_6_0= rulePath ) ) ')' ( (lv_alias_8_0= ruleIdentifier ) ) ) | this_InCollectionElementsDeclaration_9= ruleInCollectionElementsDeclaration )
            int alt56=4;
            switch ( input.LA(1) ) {
            case 75:
                {
                int LA56_1 = input.LA(2);

                if ( (LA56_1==RULE_ID) ) {
                    switch ( input.LA(3) ) {
                    case EOF:
                    case RULE_ID:
                    case 26:
                    case 28:
                    case 29:
                    case 36:
                    case 38:
                    case 39:
                    case 40:
                    case 42:
                    case 44:
                    case 45:
                    case 54:
                    case 55:
                    case 59:
                    case 71:
                    case 75:
                    case 76:
                    case 77:
                    case 78:
                    case 92:
                    case 93:
                    case 94:
                    case 95:
                    case 96:
                    case 97:
                    case 98:
                    case 99:
                    case 100:
                    case 104:
                    case 105:
                    case 106:
                    case 107:
                    case 108:
                    case 109:
                    case 110:
                    case 111:
                    case 112:
                    case 113:
                    case 114:
                    case 115:
                    case 128:
                    case 129:
                    case 130:
                    case 134:
                    case 135:
                    case 136:
                    case 137:
                    case 138:
                    case 139:
                    case 158:
                    case 159:
                    case 160:
                    case 177:
                    case 178:
                    case 179:
                    case 189:
                    case 190:
                    case 191:
                    case 192:
                    case 193:
                    case 194:
                        {
                        alt56=1;
                        }
                        break;
                    case 119:
                        {
                        int LA56_29 = input.LA(4);

                        if ( ((LA56_29>=125 && LA56_29<=127)) ) {
                            alt56=4;
                        }
                        else if ( ((LA56_29>=122 && LA56_29<=124)) ) {
                            alt56=2;
                        }
                        else {
                            if (backtracking>0) {failed=true; return current;}
                            NoViableAltException nvae =
                                new NoViableAltException("4830:1: (this_FromClassOrOuterQueryPath_0= ruleFromClassOrOuterQueryPath | ( ( (lv_alias_1_0= ruleIdentifier ) ) ruleIN_CLASS ( (lv_p_3_0= rulePath ) ) ) | ( ruleIN '(' ( (lv_p_6_0= rulePath ) ) ')' ( (lv_alias_8_0= ruleIdentifier ) ) ) | this_InCollectionElementsDeclaration_9= ruleInCollectionElementsDeclaration )", 56, 29, input);

                            throw nvae;
                        }
                        }
                        break;
                    case 120:
                        {
                        int LA56_30 = input.LA(4);

                        if ( ((LA56_30>=122 && LA56_30<=124)) ) {
                            alt56=2;
                        }
                        else if ( ((LA56_30>=125 && LA56_30<=127)) ) {
                            alt56=4;
                        }
                        else {
                            if (backtracking>0) {failed=true; return current;}
                            NoViableAltException nvae =
                                new NoViableAltException("4830:1: (this_FromClassOrOuterQueryPath_0= ruleFromClassOrOuterQueryPath | ( ( (lv_alias_1_0= ruleIdentifier ) ) ruleIN_CLASS ( (lv_p_3_0= rulePath ) ) ) | ( ruleIN '(' ( (lv_p_6_0= rulePath ) ) ')' ( (lv_alias_8_0= ruleIdentifier ) ) ) | this_InCollectionElementsDeclaration_9= ruleInCollectionElementsDeclaration )", 56, 30, input);

                            throw nvae;
                        }
                        }
                        break;
                    case 121:
                        {
                        int LA56_31 = input.LA(4);

                        if ( ((LA56_31>=122 && LA56_31<=124)) ) {
                            alt56=2;
                        }
                        else if ( ((LA56_31>=125 && LA56_31<=127)) ) {
                            alt56=4;
                        }
                        else {
                            if (backtracking>0) {failed=true; return current;}
                            NoViableAltException nvae =
                                new NoViableAltException("4830:1: (this_FromClassOrOuterQueryPath_0= ruleFromClassOrOuterQueryPath | ( ( (lv_alias_1_0= ruleIdentifier ) ) ruleIN_CLASS ( (lv_p_3_0= rulePath ) ) ) | ( ruleIN '(' ( (lv_p_6_0= rulePath ) ) ')' ( (lv_alias_8_0= ruleIdentifier ) ) ) | this_InCollectionElementsDeclaration_9= ruleInCollectionElementsDeclaration )", 56, 31, input);

                            throw nvae;
                        }
                        }
                        break;
                    default:
                        if (backtracking>0) {failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("4830:1: (this_FromClassOrOuterQueryPath_0= ruleFromClassOrOuterQueryPath | ( ( (lv_alias_1_0= ruleIdentifier ) ) ruleIN_CLASS ( (lv_p_3_0= rulePath ) ) ) | ( ruleIN '(' ( (lv_p_6_0= rulePath ) ) ')' ( (lv_alias_8_0= ruleIdentifier ) ) ) | this_InCollectionElementsDeclaration_9= ruleInCollectionElementsDeclaration )", 56, 2, input);

                        throw nvae;
                    }

                }
                else {
                    if (backtracking>0) {failed=true; return current;}
                    NoViableAltException nvae =
                        new NoViableAltException("4830:1: (this_FromClassOrOuterQueryPath_0= ruleFromClassOrOuterQueryPath | ( ( (lv_alias_1_0= ruleIdentifier ) ) ruleIN_CLASS ( (lv_p_3_0= rulePath ) ) ) | ( ruleIN '(' ( (lv_p_6_0= rulePath ) ) ')' ( (lv_alias_8_0= ruleIdentifier ) ) ) | this_InCollectionElementsDeclaration_9= ruleInCollectionElementsDeclaration )", 56, 1, input);

                    throw nvae;
                }
                }
                break;
            case RULE_ID:
                {
                switch ( input.LA(2) ) {
                case EOF:
                case RULE_ID:
                case 26:
                case 28:
                case 29:
                case 36:
                case 38:
                case 39:
                case 40:
                case 42:
                case 44:
                case 45:
                case 54:
                case 55:
                case 59:
                case 71:
                case 75:
                case 76:
                case 77:
                case 78:
                case 92:
                case 93:
                case 94:
                case 95:
                case 96:
                case 97:
                case 98:
                case 99:
                case 100:
                case 104:
                case 105:
                case 106:
                case 107:
                case 108:
                case 109:
                case 110:
                case 111:
                case 112:
                case 113:
                case 114:
                case 115:
                case 128:
                case 129:
                case 130:
                case 134:
                case 135:
                case 136:
                case 137:
                case 138:
                case 139:
                case 158:
                case 159:
                case 160:
                case 177:
                case 178:
                case 179:
                case 189:
                case 190:
                case 191:
                case 192:
                case 193:
                case 194:
                    {
                    alt56=1;
                    }
                    break;
                case 119:
                    {
                    int LA56_29 = input.LA(3);

                    if ( ((LA56_29>=125 && LA56_29<=127)) ) {
                        alt56=4;
                    }
                    else if ( ((LA56_29>=122 && LA56_29<=124)) ) {
                        alt56=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("4830:1: (this_FromClassOrOuterQueryPath_0= ruleFromClassOrOuterQueryPath | ( ( (lv_alias_1_0= ruleIdentifier ) ) ruleIN_CLASS ( (lv_p_3_0= rulePath ) ) ) | ( ruleIN '(' ( (lv_p_6_0= rulePath ) ) ')' ( (lv_alias_8_0= ruleIdentifier ) ) ) | this_InCollectionElementsDeclaration_9= ruleInCollectionElementsDeclaration )", 56, 29, input);

                        throw nvae;
                    }
                    }
                    break;
                case 120:
                    {
                    int LA56_30 = input.LA(3);

                    if ( ((LA56_30>=122 && LA56_30<=124)) ) {
                        alt56=2;
                    }
                    else if ( ((LA56_30>=125 && LA56_30<=127)) ) {
                        alt56=4;
                    }
                    else {
                        if (backtracking>0) {failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("4830:1: (this_FromClassOrOuterQueryPath_0= ruleFromClassOrOuterQueryPath | ( ( (lv_alias_1_0= ruleIdentifier ) ) ruleIN_CLASS ( (lv_p_3_0= rulePath ) ) ) | ( ruleIN '(' ( (lv_p_6_0= rulePath ) ) ')' ( (lv_alias_8_0= ruleIdentifier ) ) ) | this_InCollectionElementsDeclaration_9= ruleInCollectionElementsDeclaration )", 56, 30, input);

                        throw nvae;
                    }
                    }
                    break;
                case 121:
                    {
                    int LA56_31 = input.LA(3);

                    if ( ((LA56_31>=122 && LA56_31<=124)) ) {
                        alt56=2;
                    }
                    else if ( ((LA56_31>=125 && LA56_31<=127)) ) {
                        alt56=4;
                    }
                    else {
                        if (backtracking>0) {failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("4830:1: (this_FromClassOrOuterQueryPath_0= ruleFromClassOrOuterQueryPath | ( ( (lv_alias_1_0= ruleIdentifier ) ) ruleIN_CLASS ( (lv_p_3_0= rulePath ) ) ) | ( ruleIN '(' ( (lv_p_6_0= rulePath ) ) ')' ( (lv_alias_8_0= ruleIdentifier ) ) ) | this_InCollectionElementsDeclaration_9= ruleInCollectionElementsDeclaration )", 56, 31, input);

                        throw nvae;
                    }
                    }
                    break;
                default:
                    if (backtracking>0) {failed=true; return current;}
                    NoViableAltException nvae =
                        new NoViableAltException("4830:1: (this_FromClassOrOuterQueryPath_0= ruleFromClassOrOuterQueryPath | ( ( (lv_alias_1_0= ruleIdentifier ) ) ruleIN_CLASS ( (lv_p_3_0= rulePath ) ) ) | ( ruleIN '(' ( (lv_p_6_0= rulePath ) ) ')' ( (lv_alias_8_0= ruleIdentifier ) ) ) | this_InCollectionElementsDeclaration_9= ruleInCollectionElementsDeclaration )", 56, 2, input);

                    throw nvae;
                }

                }
                break;
            case 76:
                {
                switch ( input.LA(2) ) {
                case EOF:
                case RULE_ID:
                case 26:
                case 28:
                case 29:
                case 36:
                case 38:
                case 39:
                case 40:
                case 42:
                case 44:
                case 45:
                case 54:
                case 55:
                case 59:
                case 71:
                case 75:
                case 76:
                case 77:
                case 78:
                case 92:
                case 93:
                case 94:
                case 95:
                case 96:
                case 97:
                case 98:
                case 99:
                case 100:
                case 104:
                case 105:
                case 106:
                case 107:
                case 108:
                case 109:
                case 110:
                case 111:
                case 112:
                case 113:
                case 114:
                case 115:
                case 128:
                case 129:
                case 130:
                case 134:
                case 135:
                case 136:
                case 137:
                case 138:
                case 139:
                case 158:
                case 159:
                case 160:
                case 177:
                case 178:
                case 179:
                case 189:
                case 190:
                case 191:
                case 192:
                case 193:
                case 194:
                    {
                    alt56=1;
                    }
                    break;
                case 119:
                    {
                    int LA56_29 = input.LA(3);

                    if ( ((LA56_29>=125 && LA56_29<=127)) ) {
                        alt56=4;
                    }
                    else if ( ((LA56_29>=122 && LA56_29<=124)) ) {
                        alt56=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("4830:1: (this_FromClassOrOuterQueryPath_0= ruleFromClassOrOuterQueryPath | ( ( (lv_alias_1_0= ruleIdentifier ) ) ruleIN_CLASS ( (lv_p_3_0= rulePath ) ) ) | ( ruleIN '(' ( (lv_p_6_0= rulePath ) ) ')' ( (lv_alias_8_0= ruleIdentifier ) ) ) | this_InCollectionElementsDeclaration_9= ruleInCollectionElementsDeclaration )", 56, 29, input);

                        throw nvae;
                    }
                    }
                    break;
                case 120:
                    {
                    int LA56_30 = input.LA(3);

                    if ( ((LA56_30>=122 && LA56_30<=124)) ) {
                        alt56=2;
                    }
                    else if ( ((LA56_30>=125 && LA56_30<=127)) ) {
                        alt56=4;
                    }
                    else {
                        if (backtracking>0) {failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("4830:1: (this_FromClassOrOuterQueryPath_0= ruleFromClassOrOuterQueryPath | ( ( (lv_alias_1_0= ruleIdentifier ) ) ruleIN_CLASS ( (lv_p_3_0= rulePath ) ) ) | ( ruleIN '(' ( (lv_p_6_0= rulePath ) ) ')' ( (lv_alias_8_0= ruleIdentifier ) ) ) | this_InCollectionElementsDeclaration_9= ruleInCollectionElementsDeclaration )", 56, 30, input);

                        throw nvae;
                    }
                    }
                    break;
                case 121:
                    {
                    int LA56_31 = input.LA(3);

                    if ( ((LA56_31>=122 && LA56_31<=124)) ) {
                        alt56=2;
                    }
                    else if ( ((LA56_31>=125 && LA56_31<=127)) ) {
                        alt56=4;
                    }
                    else {
                        if (backtracking>0) {failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("4830:1: (this_FromClassOrOuterQueryPath_0= ruleFromClassOrOuterQueryPath | ( ( (lv_alias_1_0= ruleIdentifier ) ) ruleIN_CLASS ( (lv_p_3_0= rulePath ) ) ) | ( ruleIN '(' ( (lv_p_6_0= rulePath ) ) ')' ( (lv_alias_8_0= ruleIdentifier ) ) ) | this_InCollectionElementsDeclaration_9= ruleInCollectionElementsDeclaration )", 56, 31, input);

                        throw nvae;
                    }
                    }
                    break;
                default:
                    if (backtracking>0) {failed=true; return current;}
                    NoViableAltException nvae =
                        new NoViableAltException("4830:1: (this_FromClassOrOuterQueryPath_0= ruleFromClassOrOuterQueryPath | ( ( (lv_alias_1_0= ruleIdentifier ) ) ruleIN_CLASS ( (lv_p_3_0= rulePath ) ) ) | ( ruleIN '(' ( (lv_p_6_0= rulePath ) ) ')' ( (lv_alias_8_0= ruleIdentifier ) ) ) | this_InCollectionElementsDeclaration_9= ruleInCollectionElementsDeclaration )", 56, 3, input);

                    throw nvae;
                }

                }
                break;
            case 77:
                {
                switch ( input.LA(2) ) {
                case 119:
                    {
                    int LA56_29 = input.LA(3);

                    if ( ((LA56_29>=125 && LA56_29<=127)) ) {
                        alt56=4;
                    }
                    else if ( ((LA56_29>=122 && LA56_29<=124)) ) {
                        alt56=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("4830:1: (this_FromClassOrOuterQueryPath_0= ruleFromClassOrOuterQueryPath | ( ( (lv_alias_1_0= ruleIdentifier ) ) ruleIN_CLASS ( (lv_p_3_0= rulePath ) ) ) | ( ruleIN '(' ( (lv_p_6_0= rulePath ) ) ')' ( (lv_alias_8_0= ruleIdentifier ) ) ) | this_InCollectionElementsDeclaration_9= ruleInCollectionElementsDeclaration )", 56, 29, input);

                        throw nvae;
                    }
                    }
                    break;
                case 120:
                    {
                    int LA56_30 = input.LA(3);

                    if ( ((LA56_30>=122 && LA56_30<=124)) ) {
                        alt56=2;
                    }
                    else if ( ((LA56_30>=125 && LA56_30<=127)) ) {
                        alt56=4;
                    }
                    else {
                        if (backtracking>0) {failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("4830:1: (this_FromClassOrOuterQueryPath_0= ruleFromClassOrOuterQueryPath | ( ( (lv_alias_1_0= ruleIdentifier ) ) ruleIN_CLASS ( (lv_p_3_0= rulePath ) ) ) | ( ruleIN '(' ( (lv_p_6_0= rulePath ) ) ')' ( (lv_alias_8_0= ruleIdentifier ) ) ) | this_InCollectionElementsDeclaration_9= ruleInCollectionElementsDeclaration )", 56, 30, input);

                        throw nvae;
                    }
                    }
                    break;
                case 121:
                    {
                    int LA56_31 = input.LA(3);

                    if ( ((LA56_31>=122 && LA56_31<=124)) ) {
                        alt56=2;
                    }
                    else if ( ((LA56_31>=125 && LA56_31<=127)) ) {
                        alt56=4;
                    }
                    else {
                        if (backtracking>0) {failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("4830:1: (this_FromClassOrOuterQueryPath_0= ruleFromClassOrOuterQueryPath | ( ( (lv_alias_1_0= ruleIdentifier ) ) ruleIN_CLASS ( (lv_p_3_0= rulePath ) ) ) | ( ruleIN '(' ( (lv_p_6_0= rulePath ) ) ')' ( (lv_alias_8_0= ruleIdentifier ) ) ) | this_InCollectionElementsDeclaration_9= ruleInCollectionElementsDeclaration )", 56, 31, input);

                        throw nvae;
                    }
                    }
                    break;
                case EOF:
                case RULE_ID:
                case 26:
                case 28:
                case 29:
                case 36:
                case 38:
                case 39:
                case 40:
                case 42:
                case 44:
                case 45:
                case 54:
                case 55:
                case 59:
                case 71:
                case 75:
                case 76:
                case 77:
                case 78:
                case 92:
                case 93:
                case 94:
                case 95:
                case 96:
                case 97:
                case 98:
                case 99:
                case 100:
                case 104:
                case 105:
                case 106:
                case 107:
                case 108:
                case 109:
                case 110:
                case 111:
                case 112:
                case 113:
                case 114:
                case 115:
                case 128:
                case 129:
                case 130:
                case 134:
                case 135:
                case 136:
                case 137:
                case 138:
                case 139:
                case 158:
                case 159:
                case 160:
                case 177:
                case 178:
                case 179:
                case 189:
                case 190:
                case 191:
                case 192:
                case 193:
                case 194:
                    {
                    alt56=1;
                    }
                    break;
                default:
                    if (backtracking>0) {failed=true; return current;}
                    NoViableAltException nvae =
                        new NoViableAltException("4830:1: (this_FromClassOrOuterQueryPath_0= ruleFromClassOrOuterQueryPath | ( ( (lv_alias_1_0= ruleIdentifier ) ) ruleIN_CLASS ( (lv_p_3_0= rulePath ) ) ) | ( ruleIN '(' ( (lv_p_6_0= rulePath ) ) ')' ( (lv_alias_8_0= ruleIdentifier ) ) ) | this_InCollectionElementsDeclaration_9= ruleInCollectionElementsDeclaration )", 56, 4, input);

                    throw nvae;
                }

                }
                break;
            case 78:
                {
                switch ( input.LA(2) ) {
                case 119:
                    {
                    int LA56_29 = input.LA(3);

                    if ( ((LA56_29>=125 && LA56_29<=127)) ) {
                        alt56=4;
                    }
                    else if ( ((LA56_29>=122 && LA56_29<=124)) ) {
                        alt56=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("4830:1: (this_FromClassOrOuterQueryPath_0= ruleFromClassOrOuterQueryPath | ( ( (lv_alias_1_0= ruleIdentifier ) ) ruleIN_CLASS ( (lv_p_3_0= rulePath ) ) ) | ( ruleIN '(' ( (lv_p_6_0= rulePath ) ) ')' ( (lv_alias_8_0= ruleIdentifier ) ) ) | this_InCollectionElementsDeclaration_9= ruleInCollectionElementsDeclaration )", 56, 29, input);

                        throw nvae;
                    }
                    }
                    break;
                case 120:
                    {
                    int LA56_30 = input.LA(3);

                    if ( ((LA56_30>=122 && LA56_30<=124)) ) {
                        alt56=2;
                    }
                    else if ( ((LA56_30>=125 && LA56_30<=127)) ) {
                        alt56=4;
                    }
                    else {
                        if (backtracking>0) {failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("4830:1: (this_FromClassOrOuterQueryPath_0= ruleFromClassOrOuterQueryPath | ( ( (lv_alias_1_0= ruleIdentifier ) ) ruleIN_CLASS ( (lv_p_3_0= rulePath ) ) ) | ( ruleIN '(' ( (lv_p_6_0= rulePath ) ) ')' ( (lv_alias_8_0= ruleIdentifier ) ) ) | this_InCollectionElementsDeclaration_9= ruleInCollectionElementsDeclaration )", 56, 30, input);

                        throw nvae;
                    }
                    }
                    break;
                case 121:
                    {
                    int LA56_31 = input.LA(3);

                    if ( ((LA56_31>=122 && LA56_31<=124)) ) {
                        alt56=2;
                    }
                    else if ( ((LA56_31>=125 && LA56_31<=127)) ) {
                        alt56=4;
                    }
                    else {
                        if (backtracking>0) {failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("4830:1: (this_FromClassOrOuterQueryPath_0= ruleFromClassOrOuterQueryPath | ( ( (lv_alias_1_0= ruleIdentifier ) ) ruleIN_CLASS ( (lv_p_3_0= rulePath ) ) ) | ( ruleIN '(' ( (lv_p_6_0= rulePath ) ) ')' ( (lv_alias_8_0= ruleIdentifier ) ) ) | this_InCollectionElementsDeclaration_9= ruleInCollectionElementsDeclaration )", 56, 31, input);

                        throw nvae;
                    }
                    }
                    break;
                case EOF:
                case RULE_ID:
                case 26:
                case 28:
                case 29:
                case 36:
                case 38:
                case 39:
                case 40:
                case 42:
                case 44:
                case 45:
                case 54:
                case 55:
                case 59:
                case 71:
                case 75:
                case 76:
                case 77:
                case 78:
                case 92:
                case 93:
                case 94:
                case 95:
                case 96:
                case 97:
                case 98:
                case 99:
                case 100:
                case 104:
                case 105:
                case 106:
                case 107:
                case 108:
                case 109:
                case 110:
                case 111:
                case 112:
                case 113:
                case 114:
                case 115:
                case 128:
                case 129:
                case 130:
                case 134:
                case 135:
                case 136:
                case 137:
                case 138:
                case 139:
                case 158:
                case 159:
                case 160:
                case 177:
                case 178:
                case 179:
                case 189:
                case 190:
                case 191:
                case 192:
                case 193:
                case 194:
                    {
                    alt56=1;
                    }
                    break;
                default:
                    if (backtracking>0) {failed=true; return current;}
                    NoViableAltException nvae =
                        new NoViableAltException("4830:1: (this_FromClassOrOuterQueryPath_0= ruleFromClassOrOuterQueryPath | ( ( (lv_alias_1_0= ruleIdentifier ) ) ruleIN_CLASS ( (lv_p_3_0= rulePath ) ) ) | ( ruleIN '(' ( (lv_p_6_0= rulePath ) ) ')' ( (lv_alias_8_0= ruleIdentifier ) ) ) | this_InCollectionElementsDeclaration_9= ruleInCollectionElementsDeclaration )", 56, 5, input);

                    throw nvae;
                }

                }
                break;
            case 42:
                {
                switch ( input.LA(2) ) {
                case 119:
                    {
                    int LA56_29 = input.LA(3);

                    if ( ((LA56_29>=125 && LA56_29<=127)) ) {
                        alt56=4;
                    }
                    else if ( ((LA56_29>=122 && LA56_29<=124)) ) {
                        alt56=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("4830:1: (this_FromClassOrOuterQueryPath_0= ruleFromClassOrOuterQueryPath | ( ( (lv_alias_1_0= ruleIdentifier ) ) ruleIN_CLASS ( (lv_p_3_0= rulePath ) ) ) | ( ruleIN '(' ( (lv_p_6_0= rulePath ) ) ')' ( (lv_alias_8_0= ruleIdentifier ) ) ) | this_InCollectionElementsDeclaration_9= ruleInCollectionElementsDeclaration )", 56, 29, input);

                        throw nvae;
                    }
                    }
                    break;
                case 120:
                    {
                    int LA56_30 = input.LA(3);

                    if ( ((LA56_30>=122 && LA56_30<=124)) ) {
                        alt56=2;
                    }
                    else if ( ((LA56_30>=125 && LA56_30<=127)) ) {
                        alt56=4;
                    }
                    else {
                        if (backtracking>0) {failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("4830:1: (this_FromClassOrOuterQueryPath_0= ruleFromClassOrOuterQueryPath | ( ( (lv_alias_1_0= ruleIdentifier ) ) ruleIN_CLASS ( (lv_p_3_0= rulePath ) ) ) | ( ruleIN '(' ( (lv_p_6_0= rulePath ) ) ')' ( (lv_alias_8_0= ruleIdentifier ) ) ) | this_InCollectionElementsDeclaration_9= ruleInCollectionElementsDeclaration )", 56, 30, input);

                        throw nvae;
                    }
                    }
                    break;
                case 121:
                    {
                    int LA56_31 = input.LA(3);

                    if ( ((LA56_31>=122 && LA56_31<=124)) ) {
                        alt56=2;
                    }
                    else if ( ((LA56_31>=125 && LA56_31<=127)) ) {
                        alt56=4;
                    }
                    else {
                        if (backtracking>0) {failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("4830:1: (this_FromClassOrOuterQueryPath_0= ruleFromClassOrOuterQueryPath | ( ( (lv_alias_1_0= ruleIdentifier ) ) ruleIN_CLASS ( (lv_p_3_0= rulePath ) ) ) | ( ruleIN '(' ( (lv_p_6_0= rulePath ) ) ')' ( (lv_alias_8_0= ruleIdentifier ) ) ) | this_InCollectionElementsDeclaration_9= ruleInCollectionElementsDeclaration )", 56, 31, input);

                        throw nvae;
                    }
                    }
                    break;
                case EOF:
                case RULE_ID:
                case 26:
                case 28:
                case 29:
                case 36:
                case 38:
                case 39:
                case 40:
                case 42:
                case 44:
                case 45:
                case 54:
                case 55:
                case 59:
                case 71:
                case 75:
                case 76:
                case 77:
                case 78:
                case 92:
                case 93:
                case 94:
                case 95:
                case 96:
                case 97:
                case 98:
                case 99:
                case 100:
                case 104:
                case 105:
                case 106:
                case 107:
                case 108:
                case 109:
                case 110:
                case 111:
                case 112:
                case 113:
                case 114:
                case 115:
                case 128:
                case 129:
                case 130:
                case 134:
                case 135:
                case 136:
                case 137:
                case 138:
                case 139:
                case 158:
                case 159:
                case 160:
                case 177:
                case 178:
                case 179:
                case 189:
                case 190:
                case 191:
                case 192:
                case 193:
                case 194:
                    {
                    alt56=1;
                    }
                    break;
                default:
                    if (backtracking>0) {failed=true; return current;}
                    NoViableAltException nvae =
                        new NoViableAltException("4830:1: (this_FromClassOrOuterQueryPath_0= ruleFromClassOrOuterQueryPath | ( ( (lv_alias_1_0= ruleIdentifier ) ) ruleIN_CLASS ( (lv_p_3_0= rulePath ) ) ) | ( ruleIN '(' ( (lv_p_6_0= rulePath ) ) ')' ( (lv_alias_8_0= ruleIdentifier ) ) ) | this_InCollectionElementsDeclaration_9= ruleInCollectionElementsDeclaration )", 56, 6, input);

                    throw nvae;
                }

                }
                break;
            case 45:
                {
                switch ( input.LA(2) ) {
                case EOF:
                case RULE_ID:
                case 26:
                case 28:
                case 29:
                case 36:
                case 38:
                case 39:
                case 40:
                case 42:
                case 44:
                case 45:
                case 54:
                case 55:
                case 59:
                case 71:
                case 75:
                case 76:
                case 77:
                case 78:
                case 92:
                case 93:
                case 94:
                case 95:
                case 96:
                case 97:
                case 98:
                case 99:
                case 100:
                case 104:
                case 105:
                case 106:
                case 107:
                case 108:
                case 109:
                case 110:
                case 111:
                case 112:
                case 113:
                case 114:
                case 115:
                case 128:
                case 129:
                case 130:
                case 134:
                case 135:
                case 136:
                case 137:
                case 138:
                case 139:
                case 158:
                case 159:
                case 160:
                case 177:
                case 178:
                case 179:
                case 189:
                case 190:
                case 191:
                case 192:
                case 193:
                case 194:
                    {
                    alt56=1;
                    }
                    break;
                case 119:
                    {
                    int LA56_29 = input.LA(3);

                    if ( ((LA56_29>=125 && LA56_29<=127)) ) {
                        alt56=4;
                    }
                    else if ( ((LA56_29>=122 && LA56_29<=124)) ) {
                        alt56=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("4830:1: (this_FromClassOrOuterQueryPath_0= ruleFromClassOrOuterQueryPath | ( ( (lv_alias_1_0= ruleIdentifier ) ) ruleIN_CLASS ( (lv_p_3_0= rulePath ) ) ) | ( ruleIN '(' ( (lv_p_6_0= rulePath ) ) ')' ( (lv_alias_8_0= ruleIdentifier ) ) ) | this_InCollectionElementsDeclaration_9= ruleInCollectionElementsDeclaration )", 56, 29, input);

                        throw nvae;
                    }
                    }
                    break;
                case 120:
                    {
                    int LA56_30 = input.LA(3);

                    if ( ((LA56_30>=122 && LA56_30<=124)) ) {
                        alt56=2;
                    }
                    else if ( ((LA56_30>=125 && LA56_30<=127)) ) {
                        alt56=4;
                    }
                    else {
                        if (backtracking>0) {failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("4830:1: (this_FromClassOrOuterQueryPath_0= ruleFromClassOrOuterQueryPath | ( ( (lv_alias_1_0= ruleIdentifier ) ) ruleIN_CLASS ( (lv_p_3_0= rulePath ) ) ) | ( ruleIN '(' ( (lv_p_6_0= rulePath ) ) ')' ( (lv_alias_8_0= ruleIdentifier ) ) ) | this_InCollectionElementsDeclaration_9= ruleInCollectionElementsDeclaration )", 56, 30, input);

                        throw nvae;
                    }
                    }
                    break;
                case 121:
                    {
                    int LA56_31 = input.LA(3);

                    if ( ((LA56_31>=122 && LA56_31<=124)) ) {
                        alt56=2;
                    }
                    else if ( ((LA56_31>=125 && LA56_31<=127)) ) {
                        alt56=4;
                    }
                    else {
                        if (backtracking>0) {failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("4830:1: (this_FromClassOrOuterQueryPath_0= ruleFromClassOrOuterQueryPath | ( ( (lv_alias_1_0= ruleIdentifier ) ) ruleIN_CLASS ( (lv_p_3_0= rulePath ) ) ) | ( ruleIN '(' ( (lv_p_6_0= rulePath ) ) ')' ( (lv_alias_8_0= ruleIdentifier ) ) ) | this_InCollectionElementsDeclaration_9= ruleInCollectionElementsDeclaration )", 56, 31, input);

                        throw nvae;
                    }
                    }
                    break;
                default:
                    if (backtracking>0) {failed=true; return current;}
                    NoViableAltException nvae =
                        new NoViableAltException("4830:1: (this_FromClassOrOuterQueryPath_0= ruleFromClassOrOuterQueryPath | ( ( (lv_alias_1_0= ruleIdentifier ) ) ruleIN_CLASS ( (lv_p_3_0= rulePath ) ) ) | ( ruleIN '(' ( (lv_p_6_0= rulePath ) ) ')' ( (lv_alias_8_0= ruleIdentifier ) ) ) | this_InCollectionElementsDeclaration_9= ruleInCollectionElementsDeclaration )", 56, 7, input);

                    throw nvae;
                }

                }
                break;
            case 54:
                {
                switch ( input.LA(2) ) {
                case 119:
                    {
                    int LA56_29 = input.LA(3);

                    if ( ((LA56_29>=125 && LA56_29<=127)) ) {
                        alt56=4;
                    }
                    else if ( ((LA56_29>=122 && LA56_29<=124)) ) {
                        alt56=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("4830:1: (this_FromClassOrOuterQueryPath_0= ruleFromClassOrOuterQueryPath | ( ( (lv_alias_1_0= ruleIdentifier ) ) ruleIN_CLASS ( (lv_p_3_0= rulePath ) ) ) | ( ruleIN '(' ( (lv_p_6_0= rulePath ) ) ')' ( (lv_alias_8_0= ruleIdentifier ) ) ) | this_InCollectionElementsDeclaration_9= ruleInCollectionElementsDeclaration )", 56, 29, input);

                        throw nvae;
                    }
                    }
                    break;
                case 120:
                    {
                    int LA56_30 = input.LA(3);

                    if ( ((LA56_30>=122 && LA56_30<=124)) ) {
                        alt56=2;
                    }
                    else if ( ((LA56_30>=125 && LA56_30<=127)) ) {
                        alt56=4;
                    }
                    else {
                        if (backtracking>0) {failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("4830:1: (this_FromClassOrOuterQueryPath_0= ruleFromClassOrOuterQueryPath | ( ( (lv_alias_1_0= ruleIdentifier ) ) ruleIN_CLASS ( (lv_p_3_0= rulePath ) ) ) | ( ruleIN '(' ( (lv_p_6_0= rulePath ) ) ')' ( (lv_alias_8_0= ruleIdentifier ) ) ) | this_InCollectionElementsDeclaration_9= ruleInCollectionElementsDeclaration )", 56, 30, input);

                        throw nvae;
                    }
                    }
                    break;
                case 121:
                    {
                    int LA56_31 = input.LA(3);

                    if ( ((LA56_31>=122 && LA56_31<=124)) ) {
                        alt56=2;
                    }
                    else if ( ((LA56_31>=125 && LA56_31<=127)) ) {
                        alt56=4;
                    }
                    else {
                        if (backtracking>0) {failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("4830:1: (this_FromClassOrOuterQueryPath_0= ruleFromClassOrOuterQueryPath | ( ( (lv_alias_1_0= ruleIdentifier ) ) ruleIN_CLASS ( (lv_p_3_0= rulePath ) ) ) | ( ruleIN '(' ( (lv_p_6_0= rulePath ) ) ')' ( (lv_alias_8_0= ruleIdentifier ) ) ) | this_InCollectionElementsDeclaration_9= ruleInCollectionElementsDeclaration )", 56, 31, input);

                        throw nvae;
                    }
                    }
                    break;
                case EOF:
                case RULE_ID:
                case 26:
                case 28:
                case 29:
                case 36:
                case 38:
                case 39:
                case 40:
                case 42:
                case 44:
                case 45:
                case 54:
                case 55:
                case 59:
                case 71:
                case 75:
                case 76:
                case 77:
                case 78:
                case 92:
                case 93:
                case 94:
                case 95:
                case 96:
                case 97:
                case 98:
                case 99:
                case 100:
                case 104:
                case 105:
                case 106:
                case 107:
                case 108:
                case 109:
                case 110:
                case 111:
                case 112:
                case 113:
                case 114:
                case 115:
                case 128:
                case 129:
                case 130:
                case 134:
                case 135:
                case 136:
                case 137:
                case 138:
                case 139:
                case 158:
                case 159:
                case 160:
                case 177:
                case 178:
                case 179:
                case 189:
                case 190:
                case 191:
                case 192:
                case 193:
                case 194:
                    {
                    alt56=1;
                    }
                    break;
                default:
                    if (backtracking>0) {failed=true; return current;}
                    NoViableAltException nvae =
                        new NoViableAltException("4830:1: (this_FromClassOrOuterQueryPath_0= ruleFromClassOrOuterQueryPath | ( ( (lv_alias_1_0= ruleIdentifier ) ) ruleIN_CLASS ( (lv_p_3_0= rulePath ) ) ) | ( ruleIN '(' ( (lv_p_6_0= rulePath ) ) ')' ( (lv_alias_8_0= ruleIdentifier ) ) ) | this_InCollectionElementsDeclaration_9= ruleInCollectionElementsDeclaration )", 56, 8, input);

                    throw nvae;
                }

                }
                break;
            case 55:
                {
                switch ( input.LA(2) ) {
                case 119:
                    {
                    int LA56_29 = input.LA(3);

                    if ( ((LA56_29>=125 && LA56_29<=127)) ) {
                        alt56=4;
                    }
                    else if ( ((LA56_29>=122 && LA56_29<=124)) ) {
                        alt56=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("4830:1: (this_FromClassOrOuterQueryPath_0= ruleFromClassOrOuterQueryPath | ( ( (lv_alias_1_0= ruleIdentifier ) ) ruleIN_CLASS ( (lv_p_3_0= rulePath ) ) ) | ( ruleIN '(' ( (lv_p_6_0= rulePath ) ) ')' ( (lv_alias_8_0= ruleIdentifier ) ) ) | this_InCollectionElementsDeclaration_9= ruleInCollectionElementsDeclaration )", 56, 29, input);

                        throw nvae;
                    }
                    }
                    break;
                case 120:
                    {
                    int LA56_30 = input.LA(3);

                    if ( ((LA56_30>=122 && LA56_30<=124)) ) {
                        alt56=2;
                    }
                    else if ( ((LA56_30>=125 && LA56_30<=127)) ) {
                        alt56=4;
                    }
                    else {
                        if (backtracking>0) {failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("4830:1: (this_FromClassOrOuterQueryPath_0= ruleFromClassOrOuterQueryPath | ( ( (lv_alias_1_0= ruleIdentifier ) ) ruleIN_CLASS ( (lv_p_3_0= rulePath ) ) ) | ( ruleIN '(' ( (lv_p_6_0= rulePath ) ) ')' ( (lv_alias_8_0= ruleIdentifier ) ) ) | this_InCollectionElementsDeclaration_9= ruleInCollectionElementsDeclaration )", 56, 30, input);

                        throw nvae;
                    }
                    }
                    break;
                case 121:
                    {
                    int LA56_31 = input.LA(3);

                    if ( ((LA56_31>=122 && LA56_31<=124)) ) {
                        alt56=2;
                    }
                    else if ( ((LA56_31>=125 && LA56_31<=127)) ) {
                        alt56=4;
                    }
                    else {
                        if (backtracking>0) {failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("4830:1: (this_FromClassOrOuterQueryPath_0= ruleFromClassOrOuterQueryPath | ( ( (lv_alias_1_0= ruleIdentifier ) ) ruleIN_CLASS ( (lv_p_3_0= rulePath ) ) ) | ( ruleIN '(' ( (lv_p_6_0= rulePath ) ) ')' ( (lv_alias_8_0= ruleIdentifier ) ) ) | this_InCollectionElementsDeclaration_9= ruleInCollectionElementsDeclaration )", 56, 31, input);

                        throw nvae;
                    }
                    }
                    break;
                case EOF:
                case RULE_ID:
                case 26:
                case 28:
                case 29:
                case 36:
                case 38:
                case 39:
                case 40:
                case 42:
                case 44:
                case 45:
                case 54:
                case 55:
                case 59:
                case 71:
                case 75:
                case 76:
                case 77:
                case 78:
                case 92:
                case 93:
                case 94:
                case 95:
                case 96:
                case 97:
                case 98:
                case 99:
                case 100:
                case 104:
                case 105:
                case 106:
                case 107:
                case 108:
                case 109:
                case 110:
                case 111:
                case 112:
                case 113:
                case 114:
                case 115:
                case 128:
                case 129:
                case 130:
                case 134:
                case 135:
                case 136:
                case 137:
                case 138:
                case 139:
                case 158:
                case 159:
                case 160:
                case 177:
                case 178:
                case 179:
                case 189:
                case 190:
                case 191:
                case 192:
                case 193:
                case 194:
                    {
                    alt56=1;
                    }
                    break;
                default:
                    if (backtracking>0) {failed=true; return current;}
                    NoViableAltException nvae =
                        new NoViableAltException("4830:1: (this_FromClassOrOuterQueryPath_0= ruleFromClassOrOuterQueryPath | ( ( (lv_alias_1_0= ruleIdentifier ) ) ruleIN_CLASS ( (lv_p_3_0= rulePath ) ) ) | ( ruleIN '(' ( (lv_p_6_0= rulePath ) ) ')' ( (lv_alias_8_0= ruleIdentifier ) ) ) | this_InCollectionElementsDeclaration_9= ruleInCollectionElementsDeclaration )", 56, 9, input);

                    throw nvae;
                }

                }
                break;
            case 26:
                {
                switch ( input.LA(2) ) {
                case EOF:
                case RULE_ID:
                case 26:
                case 28:
                case 29:
                case 36:
                case 38:
                case 39:
                case 40:
                case 42:
                case 44:
                case 45:
                case 54:
                case 55:
                case 59:
                case 71:
                case 75:
                case 76:
                case 77:
                case 78:
                case 92:
                case 93:
                case 94:
                case 95:
                case 96:
                case 97:
                case 98:
                case 99:
                case 100:
                case 104:
                case 105:
                case 106:
                case 107:
                case 108:
                case 109:
                case 110:
                case 111:
                case 112:
                case 113:
                case 114:
                case 115:
                case 128:
                case 129:
                case 130:
                case 134:
                case 135:
                case 136:
                case 137:
                case 138:
                case 139:
                case 158:
                case 159:
                case 160:
                case 177:
                case 178:
                case 179:
                case 189:
                case 190:
                case 191:
                case 192:
                case 193:
                case 194:
                    {
                    alt56=1;
                    }
                    break;
                case 119:
                    {
                    int LA56_29 = input.LA(3);

                    if ( ((LA56_29>=125 && LA56_29<=127)) ) {
                        alt56=4;
                    }
                    else if ( ((LA56_29>=122 && LA56_29<=124)) ) {
                        alt56=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("4830:1: (this_FromClassOrOuterQueryPath_0= ruleFromClassOrOuterQueryPath | ( ( (lv_alias_1_0= ruleIdentifier ) ) ruleIN_CLASS ( (lv_p_3_0= rulePath ) ) ) | ( ruleIN '(' ( (lv_p_6_0= rulePath ) ) ')' ( (lv_alias_8_0= ruleIdentifier ) ) ) | this_InCollectionElementsDeclaration_9= ruleInCollectionElementsDeclaration )", 56, 29, input);

                        throw nvae;
                    }
                    }
                    break;
                case 120:
                    {
                    int LA56_30 = input.LA(3);

                    if ( ((LA56_30>=122 && LA56_30<=124)) ) {
                        alt56=2;
                    }
                    else if ( ((LA56_30>=125 && LA56_30<=127)) ) {
                        alt56=4;
                    }
                    else {
                        if (backtracking>0) {failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("4830:1: (this_FromClassOrOuterQueryPath_0= ruleFromClassOrOuterQueryPath | ( ( (lv_alias_1_0= ruleIdentifier ) ) ruleIN_CLASS ( (lv_p_3_0= rulePath ) ) ) | ( ruleIN '(' ( (lv_p_6_0= rulePath ) ) ')' ( (lv_alias_8_0= ruleIdentifier ) ) ) | this_InCollectionElementsDeclaration_9= ruleInCollectionElementsDeclaration )", 56, 30, input);

                        throw nvae;
                    }
                    }
                    break;
                case 121:
                    {
                    int LA56_31 = input.LA(3);

                    if ( ((LA56_31>=122 && LA56_31<=124)) ) {
                        alt56=2;
                    }
                    else if ( ((LA56_31>=125 && LA56_31<=127)) ) {
                        alt56=4;
                    }
                    else {
                        if (backtracking>0) {failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("4830:1: (this_FromClassOrOuterQueryPath_0= ruleFromClassOrOuterQueryPath | ( ( (lv_alias_1_0= ruleIdentifier ) ) ruleIN_CLASS ( (lv_p_3_0= rulePath ) ) ) | ( ruleIN '(' ( (lv_p_6_0= rulePath ) ) ')' ( (lv_alias_8_0= ruleIdentifier ) ) ) | this_InCollectionElementsDeclaration_9= ruleInCollectionElementsDeclaration )", 56, 31, input);

                        throw nvae;
                    }
                    }
                    break;
                default:
                    if (backtracking>0) {failed=true; return current;}
                    NoViableAltException nvae =
                        new NoViableAltException("4830:1: (this_FromClassOrOuterQueryPath_0= ruleFromClassOrOuterQueryPath | ( ( (lv_alias_1_0= ruleIdentifier ) ) ruleIN_CLASS ( (lv_p_3_0= rulePath ) ) ) | ( ruleIN '(' ( (lv_p_6_0= rulePath ) ) ')' ( (lv_alias_8_0= ruleIdentifier ) ) ) | this_InCollectionElementsDeclaration_9= ruleInCollectionElementsDeclaration )", 56, 10, input);

                    throw nvae;
                }

                }
                break;
            case 38:
                {
                switch ( input.LA(2) ) {
                case EOF:
                case RULE_ID:
                case 26:
                case 28:
                case 29:
                case 36:
                case 38:
                case 39:
                case 40:
                case 42:
                case 44:
                case 45:
                case 54:
                case 55:
                case 59:
                case 71:
                case 75:
                case 76:
                case 77:
                case 78:
                case 92:
                case 93:
                case 94:
                case 95:
                case 96:
                case 97:
                case 98:
                case 99:
                case 100:
                case 104:
                case 105:
                case 106:
                case 107:
                case 108:
                case 109:
                case 110:
                case 111:
                case 112:
                case 113:
                case 114:
                case 115:
                case 128:
                case 129:
                case 130:
                case 134:
                case 135:
                case 136:
                case 137:
                case 138:
                case 139:
                case 158:
                case 159:
                case 160:
                case 177:
                case 178:
                case 179:
                case 189:
                case 190:
                case 191:
                case 192:
                case 193:
                case 194:
                    {
                    alt56=1;
                    }
                    break;
                case 119:
                    {
                    int LA56_29 = input.LA(3);

                    if ( ((LA56_29>=125 && LA56_29<=127)) ) {
                        alt56=4;
                    }
                    else if ( ((LA56_29>=122 && LA56_29<=124)) ) {
                        alt56=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("4830:1: (this_FromClassOrOuterQueryPath_0= ruleFromClassOrOuterQueryPath | ( ( (lv_alias_1_0= ruleIdentifier ) ) ruleIN_CLASS ( (lv_p_3_0= rulePath ) ) ) | ( ruleIN '(' ( (lv_p_6_0= rulePath ) ) ')' ( (lv_alias_8_0= ruleIdentifier ) ) ) | this_InCollectionElementsDeclaration_9= ruleInCollectionElementsDeclaration )", 56, 29, input);

                        throw nvae;
                    }
                    }
                    break;
                case 120:
                    {
                    int LA56_30 = input.LA(3);

                    if ( ((LA56_30>=122 && LA56_30<=124)) ) {
                        alt56=2;
                    }
                    else if ( ((LA56_30>=125 && LA56_30<=127)) ) {
                        alt56=4;
                    }
                    else {
                        if (backtracking>0) {failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("4830:1: (this_FromClassOrOuterQueryPath_0= ruleFromClassOrOuterQueryPath | ( ( (lv_alias_1_0= ruleIdentifier ) ) ruleIN_CLASS ( (lv_p_3_0= rulePath ) ) ) | ( ruleIN '(' ( (lv_p_6_0= rulePath ) ) ')' ( (lv_alias_8_0= ruleIdentifier ) ) ) | this_InCollectionElementsDeclaration_9= ruleInCollectionElementsDeclaration )", 56, 30, input);

                        throw nvae;
                    }
                    }
                    break;
                case 121:
                    {
                    int LA56_31 = input.LA(3);

                    if ( ((LA56_31>=122 && LA56_31<=124)) ) {
                        alt56=2;
                    }
                    else if ( ((LA56_31>=125 && LA56_31<=127)) ) {
                        alt56=4;
                    }
                    else {
                        if (backtracking>0) {failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("4830:1: (this_FromClassOrOuterQueryPath_0= ruleFromClassOrOuterQueryPath | ( ( (lv_alias_1_0= ruleIdentifier ) ) ruleIN_CLASS ( (lv_p_3_0= rulePath ) ) ) | ( ruleIN '(' ( (lv_p_6_0= rulePath ) ) ')' ( (lv_alias_8_0= ruleIdentifier ) ) ) | this_InCollectionElementsDeclaration_9= ruleInCollectionElementsDeclaration )", 56, 31, input);

                        throw nvae;
                    }
                    }
                    break;
                default:
                    if (backtracking>0) {failed=true; return current;}
                    NoViableAltException nvae =
                        new NoViableAltException("4830:1: (this_FromClassOrOuterQueryPath_0= ruleFromClassOrOuterQueryPath | ( ( (lv_alias_1_0= ruleIdentifier ) ) ruleIN_CLASS ( (lv_p_3_0= rulePath ) ) ) | ( ruleIN '(' ( (lv_p_6_0= rulePath ) ) ')' ( (lv_alias_8_0= ruleIdentifier ) ) ) | this_InCollectionElementsDeclaration_9= ruleInCollectionElementsDeclaration )", 56, 11, input);

                    throw nvae;
                }

                }
                break;
            case 40:
                {
                switch ( input.LA(2) ) {
                case 119:
                    {
                    int LA56_29 = input.LA(3);

                    if ( ((LA56_29>=125 && LA56_29<=127)) ) {
                        alt56=4;
                    }
                    else if ( ((LA56_29>=122 && LA56_29<=124)) ) {
                        alt56=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("4830:1: (this_FromClassOrOuterQueryPath_0= ruleFromClassOrOuterQueryPath | ( ( (lv_alias_1_0= ruleIdentifier ) ) ruleIN_CLASS ( (lv_p_3_0= rulePath ) ) ) | ( ruleIN '(' ( (lv_p_6_0= rulePath ) ) ')' ( (lv_alias_8_0= ruleIdentifier ) ) ) | this_InCollectionElementsDeclaration_9= ruleInCollectionElementsDeclaration )", 56, 29, input);

                        throw nvae;
                    }
                    }
                    break;
                case 120:
                    {
                    int LA56_30 = input.LA(3);

                    if ( ((LA56_30>=122 && LA56_30<=124)) ) {
                        alt56=2;
                    }
                    else if ( ((LA56_30>=125 && LA56_30<=127)) ) {
                        alt56=4;
                    }
                    else {
                        if (backtracking>0) {failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("4830:1: (this_FromClassOrOuterQueryPath_0= ruleFromClassOrOuterQueryPath | ( ( (lv_alias_1_0= ruleIdentifier ) ) ruleIN_CLASS ( (lv_p_3_0= rulePath ) ) ) | ( ruleIN '(' ( (lv_p_6_0= rulePath ) ) ')' ( (lv_alias_8_0= ruleIdentifier ) ) ) | this_InCollectionElementsDeclaration_9= ruleInCollectionElementsDeclaration )", 56, 30, input);

                        throw nvae;
                    }
                    }
                    break;
                case 121:
                    {
                    int LA56_31 = input.LA(3);

                    if ( ((LA56_31>=122 && LA56_31<=124)) ) {
                        alt56=2;
                    }
                    else if ( ((LA56_31>=125 && LA56_31<=127)) ) {
                        alt56=4;
                    }
                    else {
                        if (backtracking>0) {failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("4830:1: (this_FromClassOrOuterQueryPath_0= ruleFromClassOrOuterQueryPath | ( ( (lv_alias_1_0= ruleIdentifier ) ) ruleIN_CLASS ( (lv_p_3_0= rulePath ) ) ) | ( ruleIN '(' ( (lv_p_6_0= rulePath ) ) ')' ( (lv_alias_8_0= ruleIdentifier ) ) ) | this_InCollectionElementsDeclaration_9= ruleInCollectionElementsDeclaration )", 56, 31, input);

                        throw nvae;
                    }
                    }
                    break;
                case EOF:
                case RULE_ID:
                case 26:
                case 28:
                case 29:
                case 36:
                case 38:
                case 39:
                case 40:
                case 42:
                case 44:
                case 45:
                case 54:
                case 55:
                case 59:
                case 71:
                case 75:
                case 76:
                case 77:
                case 78:
                case 92:
                case 93:
                case 94:
                case 95:
                case 96:
                case 97:
                case 98:
                case 99:
                case 100:
                case 104:
                case 105:
                case 106:
                case 107:
                case 108:
                case 109:
                case 110:
                case 111:
                case 112:
                case 113:
                case 114:
                case 115:
                case 128:
                case 129:
                case 130:
                case 134:
                case 135:
                case 136:
                case 137:
                case 138:
                case 139:
                case 158:
                case 159:
                case 160:
                case 177:
                case 178:
                case 179:
                case 189:
                case 190:
                case 191:
                case 192:
                case 193:
                case 194:
                    {
                    alt56=1;
                    }
                    break;
                default:
                    if (backtracking>0) {failed=true; return current;}
                    NoViableAltException nvae =
                        new NoViableAltException("4830:1: (this_FromClassOrOuterQueryPath_0= ruleFromClassOrOuterQueryPath | ( ( (lv_alias_1_0= ruleIdentifier ) ) ruleIN_CLASS ( (lv_p_3_0= rulePath ) ) ) | ( ruleIN '(' ( (lv_p_6_0= rulePath ) ) ')' ( (lv_alias_8_0= ruleIdentifier ) ) ) | this_InCollectionElementsDeclaration_9= ruleInCollectionElementsDeclaration )", 56, 12, input);

                    throw nvae;
                }

                }
                break;
            case 39:
                {
                switch ( input.LA(2) ) {
                case 119:
                    {
                    int LA56_29 = input.LA(3);

                    if ( ((LA56_29>=125 && LA56_29<=127)) ) {
                        alt56=4;
                    }
                    else if ( ((LA56_29>=122 && LA56_29<=124)) ) {
                        alt56=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("4830:1: (this_FromClassOrOuterQueryPath_0= ruleFromClassOrOuterQueryPath | ( ( (lv_alias_1_0= ruleIdentifier ) ) ruleIN_CLASS ( (lv_p_3_0= rulePath ) ) ) | ( ruleIN '(' ( (lv_p_6_0= rulePath ) ) ')' ( (lv_alias_8_0= ruleIdentifier ) ) ) | this_InCollectionElementsDeclaration_9= ruleInCollectionElementsDeclaration )", 56, 29, input);

                        throw nvae;
                    }
                    }
                    break;
                case 120:
                    {
                    int LA56_30 = input.LA(3);

                    if ( ((LA56_30>=122 && LA56_30<=124)) ) {
                        alt56=2;
                    }
                    else if ( ((LA56_30>=125 && LA56_30<=127)) ) {
                        alt56=4;
                    }
                    else {
                        if (backtracking>0) {failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("4830:1: (this_FromClassOrOuterQueryPath_0= ruleFromClassOrOuterQueryPath | ( ( (lv_alias_1_0= ruleIdentifier ) ) ruleIN_CLASS ( (lv_p_3_0= rulePath ) ) ) | ( ruleIN '(' ( (lv_p_6_0= rulePath ) ) ')' ( (lv_alias_8_0= ruleIdentifier ) ) ) | this_InCollectionElementsDeclaration_9= ruleInCollectionElementsDeclaration )", 56, 30, input);

                        throw nvae;
                    }
                    }
                    break;
                case 121:
                    {
                    int LA56_31 = input.LA(3);

                    if ( ((LA56_31>=122 && LA56_31<=124)) ) {
                        alt56=2;
                    }
                    else if ( ((LA56_31>=125 && LA56_31<=127)) ) {
                        alt56=4;
                    }
                    else {
                        if (backtracking>0) {failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("4830:1: (this_FromClassOrOuterQueryPath_0= ruleFromClassOrOuterQueryPath | ( ( (lv_alias_1_0= ruleIdentifier ) ) ruleIN_CLASS ( (lv_p_3_0= rulePath ) ) ) | ( ruleIN '(' ( (lv_p_6_0= rulePath ) ) ')' ( (lv_alias_8_0= ruleIdentifier ) ) ) | this_InCollectionElementsDeclaration_9= ruleInCollectionElementsDeclaration )", 56, 31, input);

                        throw nvae;
                    }
                    }
                    break;
                case EOF:
                case RULE_ID:
                case 26:
                case 28:
                case 29:
                case 36:
                case 38:
                case 39:
                case 40:
                case 42:
                case 44:
                case 45:
                case 54:
                case 55:
                case 59:
                case 71:
                case 75:
                case 76:
                case 77:
                case 78:
                case 92:
                case 93:
                case 94:
                case 95:
                case 96:
                case 97:
                case 98:
                case 99:
                case 100:
                case 104:
                case 105:
                case 106:
                case 107:
                case 108:
                case 109:
                case 110:
                case 111:
                case 112:
                case 113:
                case 114:
                case 115:
                case 128:
                case 129:
                case 130:
                case 134:
                case 135:
                case 136:
                case 137:
                case 138:
                case 139:
                case 158:
                case 159:
                case 160:
                case 177:
                case 178:
                case 179:
                case 189:
                case 190:
                case 191:
                case 192:
                case 193:
                case 194:
                    {
                    alt56=1;
                    }
                    break;
                default:
                    if (backtracking>0) {failed=true; return current;}
                    NoViableAltException nvae =
                        new NoViableAltException("4830:1: (this_FromClassOrOuterQueryPath_0= ruleFromClassOrOuterQueryPath | ( ( (lv_alias_1_0= ruleIdentifier ) ) ruleIN_CLASS ( (lv_p_3_0= rulePath ) ) ) | ( ruleIN '(' ( (lv_p_6_0= rulePath ) ) ')' ( (lv_alias_8_0= ruleIdentifier ) ) ) | this_InCollectionElementsDeclaration_9= ruleInCollectionElementsDeclaration )", 56, 13, input);

                    throw nvae;
                }

                }
                break;
            case 59:
                {
                switch ( input.LA(2) ) {
                case 119:
                    {
                    int LA56_29 = input.LA(3);

                    if ( ((LA56_29>=125 && LA56_29<=127)) ) {
                        alt56=4;
                    }
                    else if ( ((LA56_29>=122 && LA56_29<=124)) ) {
                        alt56=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("4830:1: (this_FromClassOrOuterQueryPath_0= ruleFromClassOrOuterQueryPath | ( ( (lv_alias_1_0= ruleIdentifier ) ) ruleIN_CLASS ( (lv_p_3_0= rulePath ) ) ) | ( ruleIN '(' ( (lv_p_6_0= rulePath ) ) ')' ( (lv_alias_8_0= ruleIdentifier ) ) ) | this_InCollectionElementsDeclaration_9= ruleInCollectionElementsDeclaration )", 56, 29, input);

                        throw nvae;
                    }
                    }
                    break;
                case 120:
                    {
                    int LA56_30 = input.LA(3);

                    if ( ((LA56_30>=122 && LA56_30<=124)) ) {
                        alt56=2;
                    }
                    else if ( ((LA56_30>=125 && LA56_30<=127)) ) {
                        alt56=4;
                    }
                    else {
                        if (backtracking>0) {failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("4830:1: (this_FromClassOrOuterQueryPath_0= ruleFromClassOrOuterQueryPath | ( ( (lv_alias_1_0= ruleIdentifier ) ) ruleIN_CLASS ( (lv_p_3_0= rulePath ) ) ) | ( ruleIN '(' ( (lv_p_6_0= rulePath ) ) ')' ( (lv_alias_8_0= ruleIdentifier ) ) ) | this_InCollectionElementsDeclaration_9= ruleInCollectionElementsDeclaration )", 56, 30, input);

                        throw nvae;
                    }
                    }
                    break;
                case 121:
                    {
                    int LA56_31 = input.LA(3);

                    if ( ((LA56_31>=122 && LA56_31<=124)) ) {
                        alt56=2;
                    }
                    else if ( ((LA56_31>=125 && LA56_31<=127)) ) {
                        alt56=4;
                    }
                    else {
                        if (backtracking>0) {failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("4830:1: (this_FromClassOrOuterQueryPath_0= ruleFromClassOrOuterQueryPath | ( ( (lv_alias_1_0= ruleIdentifier ) ) ruleIN_CLASS ( (lv_p_3_0= rulePath ) ) ) | ( ruleIN '(' ( (lv_p_6_0= rulePath ) ) ')' ( (lv_alias_8_0= ruleIdentifier ) ) ) | this_InCollectionElementsDeclaration_9= ruleInCollectionElementsDeclaration )", 56, 31, input);

                        throw nvae;
                    }
                    }
                    break;
                case EOF:
                case RULE_ID:
                case 26:
                case 28:
                case 29:
                case 36:
                case 38:
                case 39:
                case 40:
                case 42:
                case 44:
                case 45:
                case 54:
                case 55:
                case 59:
                case 71:
                case 75:
                case 76:
                case 77:
                case 78:
                case 92:
                case 93:
                case 94:
                case 95:
                case 96:
                case 97:
                case 98:
                case 99:
                case 100:
                case 104:
                case 105:
                case 106:
                case 107:
                case 108:
                case 109:
                case 110:
                case 111:
                case 112:
                case 113:
                case 114:
                case 115:
                case 128:
                case 129:
                case 130:
                case 134:
                case 135:
                case 136:
                case 137:
                case 138:
                case 139:
                case 158:
                case 159:
                case 160:
                case 177:
                case 178:
                case 179:
                case 189:
                case 190:
                case 191:
                case 192:
                case 193:
                case 194:
                    {
                    alt56=1;
                    }
                    break;
                default:
                    if (backtracking>0) {failed=true; return current;}
                    NoViableAltException nvae =
                        new NoViableAltException("4830:1: (this_FromClassOrOuterQueryPath_0= ruleFromClassOrOuterQueryPath | ( ( (lv_alias_1_0= ruleIdentifier ) ) ruleIN_CLASS ( (lv_p_3_0= rulePath ) ) ) | ( ruleIN '(' ( (lv_p_6_0= rulePath ) ) ')' ( (lv_alias_8_0= ruleIdentifier ) ) ) | this_InCollectionElementsDeclaration_9= ruleInCollectionElementsDeclaration )", 56, 14, input);

                    throw nvae;
                }

                }
                break;
            case 189:
                {
                switch ( input.LA(2) ) {
                case 119:
                    {
                    int LA56_29 = input.LA(3);

                    if ( ((LA56_29>=125 && LA56_29<=127)) ) {
                        alt56=4;
                    }
                    else if ( ((LA56_29>=122 && LA56_29<=124)) ) {
                        alt56=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("4830:1: (this_FromClassOrOuterQueryPath_0= ruleFromClassOrOuterQueryPath | ( ( (lv_alias_1_0= ruleIdentifier ) ) ruleIN_CLASS ( (lv_p_3_0= rulePath ) ) ) | ( ruleIN '(' ( (lv_p_6_0= rulePath ) ) ')' ( (lv_alias_8_0= ruleIdentifier ) ) ) | this_InCollectionElementsDeclaration_9= ruleInCollectionElementsDeclaration )", 56, 29, input);

                        throw nvae;
                    }
                    }
                    break;
                case 120:
                    {
                    int LA56_30 = input.LA(3);

                    if ( ((LA56_30>=122 && LA56_30<=124)) ) {
                        alt56=2;
                    }
                    else if ( ((LA56_30>=125 && LA56_30<=127)) ) {
                        alt56=4;
                    }
                    else {
                        if (backtracking>0) {failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("4830:1: (this_FromClassOrOuterQueryPath_0= ruleFromClassOrOuterQueryPath | ( ( (lv_alias_1_0= ruleIdentifier ) ) ruleIN_CLASS ( (lv_p_3_0= rulePath ) ) ) | ( ruleIN '(' ( (lv_p_6_0= rulePath ) ) ')' ( (lv_alias_8_0= ruleIdentifier ) ) ) | this_InCollectionElementsDeclaration_9= ruleInCollectionElementsDeclaration )", 56, 30, input);

                        throw nvae;
                    }
                    }
                    break;
                case 121:
                    {
                    int LA56_31 = input.LA(3);

                    if ( ((LA56_31>=122 && LA56_31<=124)) ) {
                        alt56=2;
                    }
                    else if ( ((LA56_31>=125 && LA56_31<=127)) ) {
                        alt56=4;
                    }
                    else {
                        if (backtracking>0) {failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("4830:1: (this_FromClassOrOuterQueryPath_0= ruleFromClassOrOuterQueryPath | ( ( (lv_alias_1_0= ruleIdentifier ) ) ruleIN_CLASS ( (lv_p_3_0= rulePath ) ) ) | ( ruleIN '(' ( (lv_p_6_0= rulePath ) ) ')' ( (lv_alias_8_0= ruleIdentifier ) ) ) | this_InCollectionElementsDeclaration_9= ruleInCollectionElementsDeclaration )", 56, 31, input);

                        throw nvae;
                    }
                    }
                    break;
                case EOF:
                case RULE_ID:
                case 26:
                case 28:
                case 29:
                case 36:
                case 38:
                case 39:
                case 40:
                case 42:
                case 44:
                case 45:
                case 54:
                case 55:
                case 59:
                case 71:
                case 75:
                case 76:
                case 77:
                case 78:
                case 92:
                case 93:
                case 94:
                case 95:
                case 96:
                case 97:
                case 98:
                case 99:
                case 100:
                case 104:
                case 105:
                case 106:
                case 107:
                case 108:
                case 109:
                case 110:
                case 111:
                case 112:
                case 113:
                case 114:
                case 115:
                case 128:
                case 129:
                case 130:
                case 134:
                case 135:
                case 136:
                case 137:
                case 138:
                case 139:
                case 158:
                case 159:
                case 160:
                case 177:
                case 178:
                case 179:
                case 189:
                case 190:
                case 191:
                case 192:
                case 193:
                case 194:
                    {
                    alt56=1;
                    }
                    break;
                default:
                    if (backtracking>0) {failed=true; return current;}
                    NoViableAltException nvae =
                        new NoViableAltException("4830:1: (this_FromClassOrOuterQueryPath_0= ruleFromClassOrOuterQueryPath | ( ( (lv_alias_1_0= ruleIdentifier ) ) ruleIN_CLASS ( (lv_p_3_0= rulePath ) ) ) | ( ruleIN '(' ( (lv_p_6_0= rulePath ) ) ')' ( (lv_alias_8_0= ruleIdentifier ) ) ) | this_InCollectionElementsDeclaration_9= ruleInCollectionElementsDeclaration )", 56, 15, input);

                    throw nvae;
                }

                }
                break;
            case 190:
                {
                switch ( input.LA(2) ) {
                case 119:
                    {
                    int LA56_29 = input.LA(3);

                    if ( ((LA56_29>=125 && LA56_29<=127)) ) {
                        alt56=4;
                    }
                    else if ( ((LA56_29>=122 && LA56_29<=124)) ) {
                        alt56=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("4830:1: (this_FromClassOrOuterQueryPath_0= ruleFromClassOrOuterQueryPath | ( ( (lv_alias_1_0= ruleIdentifier ) ) ruleIN_CLASS ( (lv_p_3_0= rulePath ) ) ) | ( ruleIN '(' ( (lv_p_6_0= rulePath ) ) ')' ( (lv_alias_8_0= ruleIdentifier ) ) ) | this_InCollectionElementsDeclaration_9= ruleInCollectionElementsDeclaration )", 56, 29, input);

                        throw nvae;
                    }
                    }
                    break;
                case 120:
                    {
                    int LA56_30 = input.LA(3);

                    if ( ((LA56_30>=122 && LA56_30<=124)) ) {
                        alt56=2;
                    }
                    else if ( ((LA56_30>=125 && LA56_30<=127)) ) {
                        alt56=4;
                    }
                    else {
                        if (backtracking>0) {failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("4830:1: (this_FromClassOrOuterQueryPath_0= ruleFromClassOrOuterQueryPath | ( ( (lv_alias_1_0= ruleIdentifier ) ) ruleIN_CLASS ( (lv_p_3_0= rulePath ) ) ) | ( ruleIN '(' ( (lv_p_6_0= rulePath ) ) ')' ( (lv_alias_8_0= ruleIdentifier ) ) ) | this_InCollectionElementsDeclaration_9= ruleInCollectionElementsDeclaration )", 56, 30, input);

                        throw nvae;
                    }
                    }
                    break;
                case 121:
                    {
                    int LA56_31 = input.LA(3);

                    if ( ((LA56_31>=122 && LA56_31<=124)) ) {
                        alt56=2;
                    }
                    else if ( ((LA56_31>=125 && LA56_31<=127)) ) {
                        alt56=4;
                    }
                    else {
                        if (backtracking>0) {failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("4830:1: (this_FromClassOrOuterQueryPath_0= ruleFromClassOrOuterQueryPath | ( ( (lv_alias_1_0= ruleIdentifier ) ) ruleIN_CLASS ( (lv_p_3_0= rulePath ) ) ) | ( ruleIN '(' ( (lv_p_6_0= rulePath ) ) ')' ( (lv_alias_8_0= ruleIdentifier ) ) ) | this_InCollectionElementsDeclaration_9= ruleInCollectionElementsDeclaration )", 56, 31, input);

                        throw nvae;
                    }
                    }
                    break;
                case EOF:
                case RULE_ID:
                case 26:
                case 28:
                case 29:
                case 36:
                case 38:
                case 39:
                case 40:
                case 42:
                case 44:
                case 45:
                case 54:
                case 55:
                case 59:
                case 71:
                case 75:
                case 76:
                case 77:
                case 78:
                case 92:
                case 93:
                case 94:
                case 95:
                case 96:
                case 97:
                case 98:
                case 99:
                case 100:
                case 104:
                case 105:
                case 106:
                case 107:
                case 108:
                case 109:
                case 110:
                case 111:
                case 112:
                case 113:
                case 114:
                case 115:
                case 128:
                case 129:
                case 130:
                case 134:
                case 135:
                case 136:
                case 137:
                case 138:
                case 139:
                case 158:
                case 159:
                case 160:
                case 177:
                case 178:
                case 179:
                case 189:
                case 190:
                case 191:
                case 192:
                case 193:
                case 194:
                    {
                    alt56=1;
                    }
                    break;
                default:
                    if (backtracking>0) {failed=true; return current;}
                    NoViableAltException nvae =
                        new NoViableAltException("4830:1: (this_FromClassOrOuterQueryPath_0= ruleFromClassOrOuterQueryPath | ( ( (lv_alias_1_0= ruleIdentifier ) ) ruleIN_CLASS ( (lv_p_3_0= rulePath ) ) ) | ( ruleIN '(' ( (lv_p_6_0= rulePath ) ) ')' ( (lv_alias_8_0= ruleIdentifier ) ) ) | this_InCollectionElementsDeclaration_9= ruleInCollectionElementsDeclaration )", 56, 16, input);

                    throw nvae;
                }

                }
                break;
            case 191:
                {
                switch ( input.LA(2) ) {
                case 119:
                    {
                    int LA56_29 = input.LA(3);

                    if ( ((LA56_29>=125 && LA56_29<=127)) ) {
                        alt56=4;
                    }
                    else if ( ((LA56_29>=122 && LA56_29<=124)) ) {
                        alt56=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("4830:1: (this_FromClassOrOuterQueryPath_0= ruleFromClassOrOuterQueryPath | ( ( (lv_alias_1_0= ruleIdentifier ) ) ruleIN_CLASS ( (lv_p_3_0= rulePath ) ) ) | ( ruleIN '(' ( (lv_p_6_0= rulePath ) ) ')' ( (lv_alias_8_0= ruleIdentifier ) ) ) | this_InCollectionElementsDeclaration_9= ruleInCollectionElementsDeclaration )", 56, 29, input);

                        throw nvae;
                    }
                    }
                    break;
                case 120:
                    {
                    int LA56_30 = input.LA(3);

                    if ( ((LA56_30>=122 && LA56_30<=124)) ) {
                        alt56=2;
                    }
                    else if ( ((LA56_30>=125 && LA56_30<=127)) ) {
                        alt56=4;
                    }
                    else {
                        if (backtracking>0) {failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("4830:1: (this_FromClassOrOuterQueryPath_0= ruleFromClassOrOuterQueryPath | ( ( (lv_alias_1_0= ruleIdentifier ) ) ruleIN_CLASS ( (lv_p_3_0= rulePath ) ) ) | ( ruleIN '(' ( (lv_p_6_0= rulePath ) ) ')' ( (lv_alias_8_0= ruleIdentifier ) ) ) | this_InCollectionElementsDeclaration_9= ruleInCollectionElementsDeclaration )", 56, 30, input);

                        throw nvae;
                    }
                    }
                    break;
                case 121:
                    {
                    int LA56_31 = input.LA(3);

                    if ( ((LA56_31>=122 && LA56_31<=124)) ) {
                        alt56=2;
                    }
                    else if ( ((LA56_31>=125 && LA56_31<=127)) ) {
                        alt56=4;
                    }
                    else {
                        if (backtracking>0) {failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("4830:1: (this_FromClassOrOuterQueryPath_0= ruleFromClassOrOuterQueryPath | ( ( (lv_alias_1_0= ruleIdentifier ) ) ruleIN_CLASS ( (lv_p_3_0= rulePath ) ) ) | ( ruleIN '(' ( (lv_p_6_0= rulePath ) ) ')' ( (lv_alias_8_0= ruleIdentifier ) ) ) | this_InCollectionElementsDeclaration_9= ruleInCollectionElementsDeclaration )", 56, 31, input);

                        throw nvae;
                    }
                    }
                    break;
                case EOF:
                case RULE_ID:
                case 26:
                case 28:
                case 29:
                case 36:
                case 38:
                case 39:
                case 40:
                case 42:
                case 44:
                case 45:
                case 54:
                case 55:
                case 59:
                case 71:
                case 75:
                case 76:
                case 77:
                case 78:
                case 92:
                case 93:
                case 94:
                case 95:
                case 96:
                case 97:
                case 98:
                case 99:
                case 100:
                case 104:
                case 105:
                case 106:
                case 107:
                case 108:
                case 109:
                case 110:
                case 111:
                case 112:
                case 113:
                case 114:
                case 115:
                case 128:
                case 129:
                case 130:
                case 134:
                case 135:
                case 136:
                case 137:
                case 138:
                case 139:
                case 158:
                case 159:
                case 160:
                case 177:
                case 178:
                case 179:
                case 189:
                case 190:
                case 191:
                case 192:
                case 193:
                case 194:
                    {
                    alt56=1;
                    }
                    break;
                default:
                    if (backtracking>0) {failed=true; return current;}
                    NoViableAltException nvae =
                        new NoViableAltException("4830:1: (this_FromClassOrOuterQueryPath_0= ruleFromClassOrOuterQueryPath | ( ( (lv_alias_1_0= ruleIdentifier ) ) ruleIN_CLASS ( (lv_p_3_0= rulePath ) ) ) | ( ruleIN '(' ( (lv_p_6_0= rulePath ) ) ')' ( (lv_alias_8_0= ruleIdentifier ) ) ) | this_InCollectionElementsDeclaration_9= ruleInCollectionElementsDeclaration )", 56, 17, input);

                    throw nvae;
                }

                }
                break;
            case 192:
                {
                switch ( input.LA(2) ) {
                case EOF:
                case RULE_ID:
                case 26:
                case 28:
                case 29:
                case 36:
                case 38:
                case 39:
                case 40:
                case 42:
                case 44:
                case 45:
                case 54:
                case 55:
                case 59:
                case 71:
                case 75:
                case 76:
                case 77:
                case 78:
                case 92:
                case 93:
                case 94:
                case 95:
                case 96:
                case 97:
                case 98:
                case 99:
                case 100:
                case 104:
                case 105:
                case 106:
                case 107:
                case 108:
                case 109:
                case 110:
                case 111:
                case 112:
                case 113:
                case 114:
                case 115:
                case 128:
                case 129:
                case 130:
                case 134:
                case 135:
                case 136:
                case 137:
                case 138:
                case 139:
                case 158:
                case 159:
                case 160:
                case 177:
                case 178:
                case 179:
                case 189:
                case 190:
                case 191:
                case 192:
                case 193:
                case 194:
                    {
                    alt56=1;
                    }
                    break;
                case 119:
                    {
                    int LA56_29 = input.LA(3);

                    if ( ((LA56_29>=125 && LA56_29<=127)) ) {
                        alt56=4;
                    }
                    else if ( ((LA56_29>=122 && LA56_29<=124)) ) {
                        alt56=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("4830:1: (this_FromClassOrOuterQueryPath_0= ruleFromClassOrOuterQueryPath | ( ( (lv_alias_1_0= ruleIdentifier ) ) ruleIN_CLASS ( (lv_p_3_0= rulePath ) ) ) | ( ruleIN '(' ( (lv_p_6_0= rulePath ) ) ')' ( (lv_alias_8_0= ruleIdentifier ) ) ) | this_InCollectionElementsDeclaration_9= ruleInCollectionElementsDeclaration )", 56, 29, input);

                        throw nvae;
                    }
                    }
                    break;
                case 120:
                    {
                    int LA56_30 = input.LA(3);

                    if ( ((LA56_30>=122 && LA56_30<=124)) ) {
                        alt56=2;
                    }
                    else if ( ((LA56_30>=125 && LA56_30<=127)) ) {
                        alt56=4;
                    }
                    else {
                        if (backtracking>0) {failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("4830:1: (this_FromClassOrOuterQueryPath_0= ruleFromClassOrOuterQueryPath | ( ( (lv_alias_1_0= ruleIdentifier ) ) ruleIN_CLASS ( (lv_p_3_0= rulePath ) ) ) | ( ruleIN '(' ( (lv_p_6_0= rulePath ) ) ')' ( (lv_alias_8_0= ruleIdentifier ) ) ) | this_InCollectionElementsDeclaration_9= ruleInCollectionElementsDeclaration )", 56, 30, input);

                        throw nvae;
                    }
                    }
                    break;
                case 121:
                    {
                    int LA56_31 = input.LA(3);

                    if ( ((LA56_31>=122 && LA56_31<=124)) ) {
                        alt56=2;
                    }
                    else if ( ((LA56_31>=125 && LA56_31<=127)) ) {
                        alt56=4;
                    }
                    else {
                        if (backtracking>0) {failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("4830:1: (this_FromClassOrOuterQueryPath_0= ruleFromClassOrOuterQueryPath | ( ( (lv_alias_1_0= ruleIdentifier ) ) ruleIN_CLASS ( (lv_p_3_0= rulePath ) ) ) | ( ruleIN '(' ( (lv_p_6_0= rulePath ) ) ')' ( (lv_alias_8_0= ruleIdentifier ) ) ) | this_InCollectionElementsDeclaration_9= ruleInCollectionElementsDeclaration )", 56, 31, input);

                        throw nvae;
                    }
                    }
                    break;
                default:
                    if (backtracking>0) {failed=true; return current;}
                    NoViableAltException nvae =
                        new NoViableAltException("4830:1: (this_FromClassOrOuterQueryPath_0= ruleFromClassOrOuterQueryPath | ( ( (lv_alias_1_0= ruleIdentifier ) ) ruleIN_CLASS ( (lv_p_3_0= rulePath ) ) ) | ( ruleIN '(' ( (lv_p_6_0= rulePath ) ) ')' ( (lv_alias_8_0= ruleIdentifier ) ) ) | this_InCollectionElementsDeclaration_9= ruleInCollectionElementsDeclaration )", 56, 18, input);

                    throw nvae;
                }

                }
                break;
            case 193:
                {
                switch ( input.LA(2) ) {
                case EOF:
                case RULE_ID:
                case 26:
                case 28:
                case 29:
                case 36:
                case 38:
                case 39:
                case 40:
                case 42:
                case 44:
                case 45:
                case 54:
                case 55:
                case 59:
                case 71:
                case 75:
                case 76:
                case 77:
                case 78:
                case 92:
                case 93:
                case 94:
                case 95:
                case 96:
                case 97:
                case 98:
                case 99:
                case 100:
                case 104:
                case 105:
                case 106:
                case 107:
                case 108:
                case 109:
                case 110:
                case 111:
                case 112:
                case 113:
                case 114:
                case 115:
                case 128:
                case 129:
                case 130:
                case 134:
                case 135:
                case 136:
                case 137:
                case 138:
                case 139:
                case 158:
                case 159:
                case 160:
                case 177:
                case 178:
                case 179:
                case 189:
                case 190:
                case 191:
                case 192:
                case 193:
                case 194:
                    {
                    alt56=1;
                    }
                    break;
                case 119:
                    {
                    int LA56_29 = input.LA(3);

                    if ( ((LA56_29>=125 && LA56_29<=127)) ) {
                        alt56=4;
                    }
                    else if ( ((LA56_29>=122 && LA56_29<=124)) ) {
                        alt56=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("4830:1: (this_FromClassOrOuterQueryPath_0= ruleFromClassOrOuterQueryPath | ( ( (lv_alias_1_0= ruleIdentifier ) ) ruleIN_CLASS ( (lv_p_3_0= rulePath ) ) ) | ( ruleIN '(' ( (lv_p_6_0= rulePath ) ) ')' ( (lv_alias_8_0= ruleIdentifier ) ) ) | this_InCollectionElementsDeclaration_9= ruleInCollectionElementsDeclaration )", 56, 29, input);

                        throw nvae;
                    }
                    }
                    break;
                case 120:
                    {
                    int LA56_30 = input.LA(3);

                    if ( ((LA56_30>=122 && LA56_30<=124)) ) {
                        alt56=2;
                    }
                    else if ( ((LA56_30>=125 && LA56_30<=127)) ) {
                        alt56=4;
                    }
                    else {
                        if (backtracking>0) {failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("4830:1: (this_FromClassOrOuterQueryPath_0= ruleFromClassOrOuterQueryPath | ( ( (lv_alias_1_0= ruleIdentifier ) ) ruleIN_CLASS ( (lv_p_3_0= rulePath ) ) ) | ( ruleIN '(' ( (lv_p_6_0= rulePath ) ) ')' ( (lv_alias_8_0= ruleIdentifier ) ) ) | this_InCollectionElementsDeclaration_9= ruleInCollectionElementsDeclaration )", 56, 30, input);

                        throw nvae;
                    }
                    }
                    break;
                case 121:
                    {
                    int LA56_31 = input.LA(3);

                    if ( ((LA56_31>=122 && LA56_31<=124)) ) {
                        alt56=2;
                    }
                    else if ( ((LA56_31>=125 && LA56_31<=127)) ) {
                        alt56=4;
                    }
                    else {
                        if (backtracking>0) {failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("4830:1: (this_FromClassOrOuterQueryPath_0= ruleFromClassOrOuterQueryPath | ( ( (lv_alias_1_0= ruleIdentifier ) ) ruleIN_CLASS ( (lv_p_3_0= rulePath ) ) ) | ( ruleIN '(' ( (lv_p_6_0= rulePath ) ) ')' ( (lv_alias_8_0= ruleIdentifier ) ) ) | this_InCollectionElementsDeclaration_9= ruleInCollectionElementsDeclaration )", 56, 31, input);

                        throw nvae;
                    }
                    }
                    break;
                default:
                    if (backtracking>0) {failed=true; return current;}
                    NoViableAltException nvae =
                        new NoViableAltException("4830:1: (this_FromClassOrOuterQueryPath_0= ruleFromClassOrOuterQueryPath | ( ( (lv_alias_1_0= ruleIdentifier ) ) ruleIN_CLASS ( (lv_p_3_0= rulePath ) ) ) | ( ruleIN '(' ( (lv_p_6_0= rulePath ) ) ')' ( (lv_alias_8_0= ruleIdentifier ) ) ) | this_InCollectionElementsDeclaration_9= ruleInCollectionElementsDeclaration )", 56, 19, input);

                    throw nvae;
                }

                }
                break;
            case 194:
                {
                switch ( input.LA(2) ) {
                case 119:
                    {
                    int LA56_29 = input.LA(3);

                    if ( ((LA56_29>=125 && LA56_29<=127)) ) {
                        alt56=4;
                    }
                    else if ( ((LA56_29>=122 && LA56_29<=124)) ) {
                        alt56=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("4830:1: (this_FromClassOrOuterQueryPath_0= ruleFromClassOrOuterQueryPath | ( ( (lv_alias_1_0= ruleIdentifier ) ) ruleIN_CLASS ( (lv_p_3_0= rulePath ) ) ) | ( ruleIN '(' ( (lv_p_6_0= rulePath ) ) ')' ( (lv_alias_8_0= ruleIdentifier ) ) ) | this_InCollectionElementsDeclaration_9= ruleInCollectionElementsDeclaration )", 56, 29, input);

                        throw nvae;
                    }
                    }
                    break;
                case 120:
                    {
                    int LA56_30 = input.LA(3);

                    if ( ((LA56_30>=122 && LA56_30<=124)) ) {
                        alt56=2;
                    }
                    else if ( ((LA56_30>=125 && LA56_30<=127)) ) {
                        alt56=4;
                    }
                    else {
                        if (backtracking>0) {failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("4830:1: (this_FromClassOrOuterQueryPath_0= ruleFromClassOrOuterQueryPath | ( ( (lv_alias_1_0= ruleIdentifier ) ) ruleIN_CLASS ( (lv_p_3_0= rulePath ) ) ) | ( ruleIN '(' ( (lv_p_6_0= rulePath ) ) ')' ( (lv_alias_8_0= ruleIdentifier ) ) ) | this_InCollectionElementsDeclaration_9= ruleInCollectionElementsDeclaration )", 56, 30, input);

                        throw nvae;
                    }
                    }
                    break;
                case 121:
                    {
                    int LA56_31 = input.LA(3);

                    if ( ((LA56_31>=122 && LA56_31<=124)) ) {
                        alt56=2;
                    }
                    else if ( ((LA56_31>=125 && LA56_31<=127)) ) {
                        alt56=4;
                    }
                    else {
                        if (backtracking>0) {failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("4830:1: (this_FromClassOrOuterQueryPath_0= ruleFromClassOrOuterQueryPath | ( ( (lv_alias_1_0= ruleIdentifier ) ) ruleIN_CLASS ( (lv_p_3_0= rulePath ) ) ) | ( ruleIN '(' ( (lv_p_6_0= rulePath ) ) ')' ( (lv_alias_8_0= ruleIdentifier ) ) ) | this_InCollectionElementsDeclaration_9= ruleInCollectionElementsDeclaration )", 56, 31, input);

                        throw nvae;
                    }
                    }
                    break;
                case EOF:
                case RULE_ID:
                case 26:
                case 28:
                case 29:
                case 36:
                case 38:
                case 39:
                case 40:
                case 42:
                case 44:
                case 45:
                case 54:
                case 55:
                case 59:
                case 71:
                case 75:
                case 76:
                case 77:
                case 78:
                case 92:
                case 93:
                case 94:
                case 95:
                case 96:
                case 97:
                case 98:
                case 99:
                case 100:
                case 104:
                case 105:
                case 106:
                case 107:
                case 108:
                case 109:
                case 110:
                case 111:
                case 112:
                case 113:
                case 114:
                case 115:
                case 128:
                case 129:
                case 130:
                case 134:
                case 135:
                case 136:
                case 137:
                case 138:
                case 139:
                case 158:
                case 159:
                case 160:
                case 177:
                case 178:
                case 179:
                case 189:
                case 190:
                case 191:
                case 192:
                case 193:
                case 194:
                    {
                    alt56=1;
                    }
                    break;
                default:
                    if (backtracking>0) {failed=true; return current;}
                    NoViableAltException nvae =
                        new NoViableAltException("4830:1: (this_FromClassOrOuterQueryPath_0= ruleFromClassOrOuterQueryPath | ( ( (lv_alias_1_0= ruleIdentifier ) ) ruleIN_CLASS ( (lv_p_3_0= rulePath ) ) ) | ( ruleIN '(' ( (lv_p_6_0= rulePath ) ) ')' ( (lv_alias_8_0= ruleIdentifier ) ) ) | this_InCollectionElementsDeclaration_9= ruleInCollectionElementsDeclaration )", 56, 20, input);

                    throw nvae;
                }

                }
                break;
            case 92:
                {
                switch ( input.LA(2) ) {
                case 119:
                    {
                    int LA56_29 = input.LA(3);

                    if ( ((LA56_29>=125 && LA56_29<=127)) ) {
                        alt56=4;
                    }
                    else if ( ((LA56_29>=122 && LA56_29<=124)) ) {
                        alt56=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("4830:1: (this_FromClassOrOuterQueryPath_0= ruleFromClassOrOuterQueryPath | ( ( (lv_alias_1_0= ruleIdentifier ) ) ruleIN_CLASS ( (lv_p_3_0= rulePath ) ) ) | ( ruleIN '(' ( (lv_p_6_0= rulePath ) ) ')' ( (lv_alias_8_0= ruleIdentifier ) ) ) | this_InCollectionElementsDeclaration_9= ruleInCollectionElementsDeclaration )", 56, 29, input);

                        throw nvae;
                    }
                    }
                    break;
                case 120:
                    {
                    int LA56_30 = input.LA(3);

                    if ( ((LA56_30>=122 && LA56_30<=124)) ) {
                        alt56=2;
                    }
                    else if ( ((LA56_30>=125 && LA56_30<=127)) ) {
                        alt56=4;
                    }
                    else {
                        if (backtracking>0) {failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("4830:1: (this_FromClassOrOuterQueryPath_0= ruleFromClassOrOuterQueryPath | ( ( (lv_alias_1_0= ruleIdentifier ) ) ruleIN_CLASS ( (lv_p_3_0= rulePath ) ) ) | ( ruleIN '(' ( (lv_p_6_0= rulePath ) ) ')' ( (lv_alias_8_0= ruleIdentifier ) ) ) | this_InCollectionElementsDeclaration_9= ruleInCollectionElementsDeclaration )", 56, 30, input);

                        throw nvae;
                    }
                    }
                    break;
                case 121:
                    {
                    int LA56_31 = input.LA(3);

                    if ( ((LA56_31>=122 && LA56_31<=124)) ) {
                        alt56=2;
                    }
                    else if ( ((LA56_31>=125 && LA56_31<=127)) ) {
                        alt56=4;
                    }
                    else {
                        if (backtracking>0) {failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("4830:1: (this_FromClassOrOuterQueryPath_0= ruleFromClassOrOuterQueryPath | ( ( (lv_alias_1_0= ruleIdentifier ) ) ruleIN_CLASS ( (lv_p_3_0= rulePath ) ) ) | ( ruleIN '(' ( (lv_p_6_0= rulePath ) ) ')' ( (lv_alias_8_0= ruleIdentifier ) ) ) | this_InCollectionElementsDeclaration_9= ruleInCollectionElementsDeclaration )", 56, 31, input);

                        throw nvae;
                    }
                    }
                    break;
                case EOF:
                case RULE_ID:
                case 26:
                case 28:
                case 29:
                case 36:
                case 38:
                case 39:
                case 40:
                case 42:
                case 44:
                case 45:
                case 54:
                case 55:
                case 59:
                case 71:
                case 75:
                case 76:
                case 77:
                case 78:
                case 92:
                case 93:
                case 94:
                case 95:
                case 96:
                case 97:
                case 98:
                case 99:
                case 100:
                case 104:
                case 105:
                case 106:
                case 107:
                case 108:
                case 109:
                case 110:
                case 111:
                case 112:
                case 113:
                case 114:
                case 115:
                case 128:
                case 129:
                case 130:
                case 134:
                case 135:
                case 136:
                case 137:
                case 138:
                case 139:
                case 158:
                case 159:
                case 160:
                case 177:
                case 178:
                case 179:
                case 189:
                case 190:
                case 191:
                case 192:
                case 193:
                case 194:
                    {
                    alt56=1;
                    }
                    break;
                default:
                    if (backtracking>0) {failed=true; return current;}
                    NoViableAltException nvae =
                        new NoViableAltException("4830:1: (this_FromClassOrOuterQueryPath_0= ruleFromClassOrOuterQueryPath | ( ( (lv_alias_1_0= ruleIdentifier ) ) ruleIN_CLASS ( (lv_p_3_0= rulePath ) ) ) | ( ruleIN '(' ( (lv_p_6_0= rulePath ) ) ')' ( (lv_alias_8_0= ruleIdentifier ) ) ) | this_InCollectionElementsDeclaration_9= ruleInCollectionElementsDeclaration )", 56, 21, input);

                    throw nvae;
                }

                }
                break;
            case 93:
                {
                switch ( input.LA(2) ) {
                case EOF:
                case RULE_ID:
                case 26:
                case 28:
                case 29:
                case 36:
                case 38:
                case 39:
                case 40:
                case 42:
                case 44:
                case 45:
                case 54:
                case 55:
                case 59:
                case 71:
                case 75:
                case 76:
                case 77:
                case 78:
                case 92:
                case 93:
                case 94:
                case 95:
                case 96:
                case 97:
                case 98:
                case 99:
                case 100:
                case 104:
                case 105:
                case 106:
                case 107:
                case 108:
                case 109:
                case 110:
                case 111:
                case 112:
                case 113:
                case 114:
                case 115:
                case 128:
                case 129:
                case 130:
                case 134:
                case 135:
                case 136:
                case 137:
                case 138:
                case 139:
                case 158:
                case 159:
                case 160:
                case 177:
                case 178:
                case 179:
                case 189:
                case 190:
                case 191:
                case 192:
                case 193:
                case 194:
                    {
                    alt56=1;
                    }
                    break;
                case 119:
                    {
                    int LA56_29 = input.LA(3);

                    if ( ((LA56_29>=125 && LA56_29<=127)) ) {
                        alt56=4;
                    }
                    else if ( ((LA56_29>=122 && LA56_29<=124)) ) {
                        alt56=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("4830:1: (this_FromClassOrOuterQueryPath_0= ruleFromClassOrOuterQueryPath | ( ( (lv_alias_1_0= ruleIdentifier ) ) ruleIN_CLASS ( (lv_p_3_0= rulePath ) ) ) | ( ruleIN '(' ( (lv_p_6_0= rulePath ) ) ')' ( (lv_alias_8_0= ruleIdentifier ) ) ) | this_InCollectionElementsDeclaration_9= ruleInCollectionElementsDeclaration )", 56, 29, input);

                        throw nvae;
                    }
                    }
                    break;
                case 120:
                    {
                    int LA56_30 = input.LA(3);

                    if ( ((LA56_30>=122 && LA56_30<=124)) ) {
                        alt56=2;
                    }
                    else if ( ((LA56_30>=125 && LA56_30<=127)) ) {
                        alt56=4;
                    }
                    else {
                        if (backtracking>0) {failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("4830:1: (this_FromClassOrOuterQueryPath_0= ruleFromClassOrOuterQueryPath | ( ( (lv_alias_1_0= ruleIdentifier ) ) ruleIN_CLASS ( (lv_p_3_0= rulePath ) ) ) | ( ruleIN '(' ( (lv_p_6_0= rulePath ) ) ')' ( (lv_alias_8_0= ruleIdentifier ) ) ) | this_InCollectionElementsDeclaration_9= ruleInCollectionElementsDeclaration )", 56, 30, input);

                        throw nvae;
                    }
                    }
                    break;
                case 121:
                    {
                    int LA56_31 = input.LA(3);

                    if ( ((LA56_31>=122 && LA56_31<=124)) ) {
                        alt56=2;
                    }
                    else if ( ((LA56_31>=125 && LA56_31<=127)) ) {
                        alt56=4;
                    }
                    else {
                        if (backtracking>0) {failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("4830:1: (this_FromClassOrOuterQueryPath_0= ruleFromClassOrOuterQueryPath | ( ( (lv_alias_1_0= ruleIdentifier ) ) ruleIN_CLASS ( (lv_p_3_0= rulePath ) ) ) | ( ruleIN '(' ( (lv_p_6_0= rulePath ) ) ')' ( (lv_alias_8_0= ruleIdentifier ) ) ) | this_InCollectionElementsDeclaration_9= ruleInCollectionElementsDeclaration )", 56, 31, input);

                        throw nvae;
                    }
                    }
                    break;
                default:
                    if (backtracking>0) {failed=true; return current;}
                    NoViableAltException nvae =
                        new NoViableAltException("4830:1: (this_FromClassOrOuterQueryPath_0= ruleFromClassOrOuterQueryPath | ( ( (lv_alias_1_0= ruleIdentifier ) ) ruleIN_CLASS ( (lv_p_3_0= rulePath ) ) ) | ( ruleIN '(' ( (lv_p_6_0= rulePath ) ) ')' ( (lv_alias_8_0= ruleIdentifier ) ) ) | this_InCollectionElementsDeclaration_9= ruleInCollectionElementsDeclaration )", 56, 22, input);

                    throw nvae;
                }

                }
                break;
            case 94:
                {
                switch ( input.LA(2) ) {
                case EOF:
                case RULE_ID:
                case 26:
                case 28:
                case 29:
                case 36:
                case 38:
                case 39:
                case 40:
                case 42:
                case 44:
                case 45:
                case 54:
                case 55:
                case 59:
                case 71:
                case 75:
                case 76:
                case 77:
                case 78:
                case 92:
                case 93:
                case 94:
                case 95:
                case 96:
                case 97:
                case 98:
                case 99:
                case 100:
                case 104:
                case 105:
                case 106:
                case 107:
                case 108:
                case 109:
                case 110:
                case 111:
                case 112:
                case 113:
                case 114:
                case 115:
                case 128:
                case 129:
                case 130:
                case 134:
                case 135:
                case 136:
                case 137:
                case 138:
                case 139:
                case 158:
                case 159:
                case 160:
                case 177:
                case 178:
                case 179:
                case 189:
                case 190:
                case 191:
                case 192:
                case 193:
                case 194:
                    {
                    alt56=1;
                    }
                    break;
                case 119:
                    {
                    int LA56_29 = input.LA(3);

                    if ( ((LA56_29>=125 && LA56_29<=127)) ) {
                        alt56=4;
                    }
                    else if ( ((LA56_29>=122 && LA56_29<=124)) ) {
                        alt56=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("4830:1: (this_FromClassOrOuterQueryPath_0= ruleFromClassOrOuterQueryPath | ( ( (lv_alias_1_0= ruleIdentifier ) ) ruleIN_CLASS ( (lv_p_3_0= rulePath ) ) ) | ( ruleIN '(' ( (lv_p_6_0= rulePath ) ) ')' ( (lv_alias_8_0= ruleIdentifier ) ) ) | this_InCollectionElementsDeclaration_9= ruleInCollectionElementsDeclaration )", 56, 29, input);

                        throw nvae;
                    }
                    }
                    break;
                case 120:
                    {
                    int LA56_30 = input.LA(3);

                    if ( ((LA56_30>=122 && LA56_30<=124)) ) {
                        alt56=2;
                    }
                    else if ( ((LA56_30>=125 && LA56_30<=127)) ) {
                        alt56=4;
                    }
                    else {
                        if (backtracking>0) {failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("4830:1: (this_FromClassOrOuterQueryPath_0= ruleFromClassOrOuterQueryPath | ( ( (lv_alias_1_0= ruleIdentifier ) ) ruleIN_CLASS ( (lv_p_3_0= rulePath ) ) ) | ( ruleIN '(' ( (lv_p_6_0= rulePath ) ) ')' ( (lv_alias_8_0= ruleIdentifier ) ) ) | this_InCollectionElementsDeclaration_9= ruleInCollectionElementsDeclaration )", 56, 30, input);

                        throw nvae;
                    }
                    }
                    break;
                case 121:
                    {
                    int LA56_31 = input.LA(3);

                    if ( ((LA56_31>=122 && LA56_31<=124)) ) {
                        alt56=2;
                    }
                    else if ( ((LA56_31>=125 && LA56_31<=127)) ) {
                        alt56=4;
                    }
                    else {
                        if (backtracking>0) {failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("4830:1: (this_FromClassOrOuterQueryPath_0= ruleFromClassOrOuterQueryPath | ( ( (lv_alias_1_0= ruleIdentifier ) ) ruleIN_CLASS ( (lv_p_3_0= rulePath ) ) ) | ( ruleIN '(' ( (lv_p_6_0= rulePath ) ) ')' ( (lv_alias_8_0= ruleIdentifier ) ) ) | this_InCollectionElementsDeclaration_9= ruleInCollectionElementsDeclaration )", 56, 31, input);

                        throw nvae;
                    }
                    }
                    break;
                default:
                    if (backtracking>0) {failed=true; return current;}
                    NoViableAltException nvae =
                        new NoViableAltException("4830:1: (this_FromClassOrOuterQueryPath_0= ruleFromClassOrOuterQueryPath | ( ( (lv_alias_1_0= ruleIdentifier ) ) ruleIN_CLASS ( (lv_p_3_0= rulePath ) ) ) | ( ruleIN '(' ( (lv_p_6_0= rulePath ) ) ')' ( (lv_alias_8_0= ruleIdentifier ) ) ) | this_InCollectionElementsDeclaration_9= ruleInCollectionElementsDeclaration )", 56, 23, input);

                    throw nvae;
                }

                }
                break;
            case 177:
                {
                switch ( input.LA(2) ) {
                case 119:
                    {
                    int LA56_29 = input.LA(3);

                    if ( ((LA56_29>=125 && LA56_29<=127)) ) {
                        alt56=4;
                    }
                    else if ( ((LA56_29>=122 && LA56_29<=124)) ) {
                        alt56=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("4830:1: (this_FromClassOrOuterQueryPath_0= ruleFromClassOrOuterQueryPath | ( ( (lv_alias_1_0= ruleIdentifier ) ) ruleIN_CLASS ( (lv_p_3_0= rulePath ) ) ) | ( ruleIN '(' ( (lv_p_6_0= rulePath ) ) ')' ( (lv_alias_8_0= ruleIdentifier ) ) ) | this_InCollectionElementsDeclaration_9= ruleInCollectionElementsDeclaration )", 56, 29, input);

                        throw nvae;
                    }
                    }
                    break;
                case 120:
                    {
                    int LA56_30 = input.LA(3);

                    if ( ((LA56_30>=122 && LA56_30<=124)) ) {
                        alt56=2;
                    }
                    else if ( ((LA56_30>=125 && LA56_30<=127)) ) {
                        alt56=4;
                    }
                    else {
                        if (backtracking>0) {failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("4830:1: (this_FromClassOrOuterQueryPath_0= ruleFromClassOrOuterQueryPath | ( ( (lv_alias_1_0= ruleIdentifier ) ) ruleIN_CLASS ( (lv_p_3_0= rulePath ) ) ) | ( ruleIN '(' ( (lv_p_6_0= rulePath ) ) ')' ( (lv_alias_8_0= ruleIdentifier ) ) ) | this_InCollectionElementsDeclaration_9= ruleInCollectionElementsDeclaration )", 56, 30, input);

                        throw nvae;
                    }
                    }
                    break;
                case 121:
                    {
                    int LA56_31 = input.LA(3);

                    if ( ((LA56_31>=122 && LA56_31<=124)) ) {
                        alt56=2;
                    }
                    else if ( ((LA56_31>=125 && LA56_31<=127)) ) {
                        alt56=4;
                    }
                    else {
                        if (backtracking>0) {failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("4830:1: (this_FromClassOrOuterQueryPath_0= ruleFromClassOrOuterQueryPath | ( ( (lv_alias_1_0= ruleIdentifier ) ) ruleIN_CLASS ( (lv_p_3_0= rulePath ) ) ) | ( ruleIN '(' ( (lv_p_6_0= rulePath ) ) ')' ( (lv_alias_8_0= ruleIdentifier ) ) ) | this_InCollectionElementsDeclaration_9= ruleInCollectionElementsDeclaration )", 56, 31, input);

                        throw nvae;
                    }
                    }
                    break;
                case EOF:
                case RULE_ID:
                case 26:
                case 28:
                case 29:
                case 36:
                case 38:
                case 39:
                case 40:
                case 42:
                case 44:
                case 45:
                case 54:
                case 55:
                case 59:
                case 71:
                case 75:
                case 76:
                case 77:
                case 78:
                case 92:
                case 93:
                case 94:
                case 95:
                case 96:
                case 97:
                case 98:
                case 99:
                case 100:
                case 104:
                case 105:
                case 106:
                case 107:
                case 108:
                case 109:
                case 110:
                case 111:
                case 112:
                case 113:
                case 114:
                case 115:
                case 128:
                case 129:
                case 130:
                case 134:
                case 135:
                case 136:
                case 137:
                case 138:
                case 139:
                case 158:
                case 159:
                case 160:
                case 177:
                case 178:
                case 179:
                case 189:
                case 190:
                case 191:
                case 192:
                case 193:
                case 194:
                    {
                    alt56=1;
                    }
                    break;
                default:
                    if (backtracking>0) {failed=true; return current;}
                    NoViableAltException nvae =
                        new NoViableAltException("4830:1: (this_FromClassOrOuterQueryPath_0= ruleFromClassOrOuterQueryPath | ( ( (lv_alias_1_0= ruleIdentifier ) ) ruleIN_CLASS ( (lv_p_3_0= rulePath ) ) ) | ( ruleIN '(' ( (lv_p_6_0= rulePath ) ) ')' ( (lv_alias_8_0= ruleIdentifier ) ) ) | this_InCollectionElementsDeclaration_9= ruleInCollectionElementsDeclaration )", 56, 24, input);

                    throw nvae;
                }

                }
                break;
            case 178:
                {
                switch ( input.LA(2) ) {
                case EOF:
                case RULE_ID:
                case 26:
                case 28:
                case 29:
                case 36:
                case 38:
                case 39:
                case 40:
                case 42:
                case 44:
                case 45:
                case 54:
                case 55:
                case 59:
                case 71:
                case 75:
                case 76:
                case 77:
                case 78:
                case 92:
                case 93:
                case 94:
                case 95:
                case 96:
                case 97:
                case 98:
                case 99:
                case 100:
                case 104:
                case 105:
                case 106:
                case 107:
                case 108:
                case 109:
                case 110:
                case 111:
                case 112:
                case 113:
                case 114:
                case 115:
                case 128:
                case 129:
                case 130:
                case 134:
                case 135:
                case 136:
                case 137:
                case 138:
                case 139:
                case 158:
                case 159:
                case 160:
                case 177:
                case 178:
                case 179:
                case 189:
                case 190:
                case 191:
                case 192:
                case 193:
                case 194:
                    {
                    alt56=1;
                    }
                    break;
                case 119:
                    {
                    int LA56_29 = input.LA(3);

                    if ( ((LA56_29>=125 && LA56_29<=127)) ) {
                        alt56=4;
                    }
                    else if ( ((LA56_29>=122 && LA56_29<=124)) ) {
                        alt56=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("4830:1: (this_FromClassOrOuterQueryPath_0= ruleFromClassOrOuterQueryPath | ( ( (lv_alias_1_0= ruleIdentifier ) ) ruleIN_CLASS ( (lv_p_3_0= rulePath ) ) ) | ( ruleIN '(' ( (lv_p_6_0= rulePath ) ) ')' ( (lv_alias_8_0= ruleIdentifier ) ) ) | this_InCollectionElementsDeclaration_9= ruleInCollectionElementsDeclaration )", 56, 29, input);

                        throw nvae;
                    }
                    }
                    break;
                case 120:
                    {
                    int LA56_30 = input.LA(3);

                    if ( ((LA56_30>=122 && LA56_30<=124)) ) {
                        alt56=2;
                    }
                    else if ( ((LA56_30>=125 && LA56_30<=127)) ) {
                        alt56=4;
                    }
                    else {
                        if (backtracking>0) {failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("4830:1: (this_FromClassOrOuterQueryPath_0= ruleFromClassOrOuterQueryPath | ( ( (lv_alias_1_0= ruleIdentifier ) ) ruleIN_CLASS ( (lv_p_3_0= rulePath ) ) ) | ( ruleIN '(' ( (lv_p_6_0= rulePath ) ) ')' ( (lv_alias_8_0= ruleIdentifier ) ) ) | this_InCollectionElementsDeclaration_9= ruleInCollectionElementsDeclaration )", 56, 30, input);

                        throw nvae;
                    }
                    }
                    break;
                case 121:
                    {
                    int LA56_31 = input.LA(3);

                    if ( ((LA56_31>=122 && LA56_31<=124)) ) {
                        alt56=2;
                    }
                    else if ( ((LA56_31>=125 && LA56_31<=127)) ) {
                        alt56=4;
                    }
                    else {
                        if (backtracking>0) {failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("4830:1: (this_FromClassOrOuterQueryPath_0= ruleFromClassOrOuterQueryPath | ( ( (lv_alias_1_0= ruleIdentifier ) ) ruleIN_CLASS ( (lv_p_3_0= rulePath ) ) ) | ( ruleIN '(' ( (lv_p_6_0= rulePath ) ) ')' ( (lv_alias_8_0= ruleIdentifier ) ) ) | this_InCollectionElementsDeclaration_9= ruleInCollectionElementsDeclaration )", 56, 31, input);

                        throw nvae;
                    }
                    }
                    break;
                default:
                    if (backtracking>0) {failed=true; return current;}
                    NoViableAltException nvae =
                        new NoViableAltException("4830:1: (this_FromClassOrOuterQueryPath_0= ruleFromClassOrOuterQueryPath | ( ( (lv_alias_1_0= ruleIdentifier ) ) ruleIN_CLASS ( (lv_p_3_0= rulePath ) ) ) | ( ruleIN '(' ( (lv_p_6_0= rulePath ) ) ')' ( (lv_alias_8_0= ruleIdentifier ) ) ) | this_InCollectionElementsDeclaration_9= ruleInCollectionElementsDeclaration )", 56, 25, input);

                    throw nvae;
                }

                }
                break;
            case 179:
                {
                switch ( input.LA(2) ) {
                case EOF:
                case RULE_ID:
                case 26:
                case 28:
                case 29:
                case 36:
                case 38:
                case 39:
                case 40:
                case 42:
                case 44:
                case 45:
                case 54:
                case 55:
                case 59:
                case 71:
                case 75:
                case 76:
                case 77:
                case 78:
                case 92:
                case 93:
                case 94:
                case 95:
                case 96:
                case 97:
                case 98:
                case 99:
                case 100:
                case 104:
                case 105:
                case 106:
                case 107:
                case 108:
                case 109:
                case 110:
                case 111:
                case 112:
                case 113:
                case 114:
                case 115:
                case 128:
                case 129:
                case 130:
                case 134:
                case 135:
                case 136:
                case 137:
                case 138:
                case 139:
                case 158:
                case 159:
                case 160:
                case 177:
                case 178:
                case 179:
                case 189:
                case 190:
                case 191:
                case 192:
                case 193:
                case 194:
                    {
                    alt56=1;
                    }
                    break;
                case 119:
                    {
                    int LA56_29 = input.LA(3);

                    if ( ((LA56_29>=125 && LA56_29<=127)) ) {
                        alt56=4;
                    }
                    else if ( ((LA56_29>=122 && LA56_29<=124)) ) {
                        alt56=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("4830:1: (this_FromClassOrOuterQueryPath_0= ruleFromClassOrOuterQueryPath | ( ( (lv_alias_1_0= ruleIdentifier ) ) ruleIN_CLASS ( (lv_p_3_0= rulePath ) ) ) | ( ruleIN '(' ( (lv_p_6_0= rulePath ) ) ')' ( (lv_alias_8_0= ruleIdentifier ) ) ) | this_InCollectionElementsDeclaration_9= ruleInCollectionElementsDeclaration )", 56, 29, input);

                        throw nvae;
                    }
                    }
                    break;
                case 120:
                    {
                    int LA56_30 = input.LA(3);

                    if ( ((LA56_30>=122 && LA56_30<=124)) ) {
                        alt56=2;
                    }
                    else if ( ((LA56_30>=125 && LA56_30<=127)) ) {
                        alt56=4;
                    }
                    else {
                        if (backtracking>0) {failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("4830:1: (this_FromClassOrOuterQueryPath_0= ruleFromClassOrOuterQueryPath | ( ( (lv_alias_1_0= ruleIdentifier ) ) ruleIN_CLASS ( (lv_p_3_0= rulePath ) ) ) | ( ruleIN '(' ( (lv_p_6_0= rulePath ) ) ')' ( (lv_alias_8_0= ruleIdentifier ) ) ) | this_InCollectionElementsDeclaration_9= ruleInCollectionElementsDeclaration )", 56, 30, input);

                        throw nvae;
                    }
                    }
                    break;
                case 121:
                    {
                    int LA56_31 = input.LA(3);

                    if ( ((LA56_31>=122 && LA56_31<=124)) ) {
                        alt56=2;
                    }
                    else if ( ((LA56_31>=125 && LA56_31<=127)) ) {
                        alt56=4;
                    }
                    else {
                        if (backtracking>0) {failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("4830:1: (this_FromClassOrOuterQueryPath_0= ruleFromClassOrOuterQueryPath | ( ( (lv_alias_1_0= ruleIdentifier ) ) ruleIN_CLASS ( (lv_p_3_0= rulePath ) ) ) | ( ruleIN '(' ( (lv_p_6_0= rulePath ) ) ')' ( (lv_alias_8_0= ruleIdentifier ) ) ) | this_InCollectionElementsDeclaration_9= ruleInCollectionElementsDeclaration )", 56, 31, input);

                        throw nvae;
                    }
                    }
                    break;
                default:
                    if (backtracking>0) {failed=true; return current;}
                    NoViableAltException nvae =
                        new NoViableAltException("4830:1: (this_FromClassOrOuterQueryPath_0= ruleFromClassOrOuterQueryPath | ( ( (lv_alias_1_0= ruleIdentifier ) ) ruleIN_CLASS ( (lv_p_3_0= rulePath ) ) ) | ( ruleIN '(' ( (lv_p_6_0= rulePath ) ) ')' ( (lv_alias_8_0= ruleIdentifier ) ) ) | this_InCollectionElementsDeclaration_9= ruleInCollectionElementsDeclaration )", 56, 26, input);

                    throw nvae;
                }

                }
                break;
            case 119:
            case 120:
            case 121:
                {
                alt56=3;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("4830:1: (this_FromClassOrOuterQueryPath_0= ruleFromClassOrOuterQueryPath | ( ( (lv_alias_1_0= ruleIdentifier ) ) ruleIN_CLASS ( (lv_p_3_0= rulePath ) ) ) | ( ruleIN '(' ( (lv_p_6_0= rulePath ) ) ')' ( (lv_alias_8_0= ruleIdentifier ) ) ) | this_InCollectionElementsDeclaration_9= ruleInCollectionElementsDeclaration )", 56, 0, input);

                throw nvae;
            }

            switch (alt56) {
                case 1 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4831:2: this_FromClassOrOuterQueryPath_0= ruleFromClassOrOuterQueryPath
                    {
                    if ( backtracking==0 ) {
                       
                      	  /* */ 
                      	
                    }
                    if ( backtracking==0 ) {
                       
                              currentNode=createCompositeNode(grammarAccess.getFromRangeAccess().getFromClassOrOuterQueryPathParserRuleCall_0(), currentNode); 
                          
                    }
                    pushFollow(FOLLOW_ruleFromClassOrOuterQueryPath_in_ruleFromRange9270);
                    this_FromClassOrOuterQueryPath_0=ruleFromClassOrOuterQueryPath();
                    _fsp--;
                    if (failed) return current;
                    if ( backtracking==0 ) {
                       
                              current = this_FromClassOrOuterQueryPath_0; 
                              currentNode = currentNode.getParent();
                          
                    }

                    }
                    break;
                case 2 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4843:6: ( ( (lv_alias_1_0= ruleIdentifier ) ) ruleIN_CLASS ( (lv_p_3_0= rulePath ) ) )
                    {
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4843:6: ( ( (lv_alias_1_0= ruleIdentifier ) ) ruleIN_CLASS ( (lv_p_3_0= rulePath ) ) )
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4843:7: ( (lv_alias_1_0= ruleIdentifier ) ) ruleIN_CLASS ( (lv_p_3_0= rulePath ) )
                    {
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4843:7: ( (lv_alias_1_0= ruleIdentifier ) )
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4844:1: (lv_alias_1_0= ruleIdentifier )
                    {
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4844:1: (lv_alias_1_0= ruleIdentifier )
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4845:3: lv_alias_1_0= ruleIdentifier
                    {
                    if ( backtracking==0 ) {
                       
                      	        currentNode=createCompositeNode(grammarAccess.getFromRangeAccess().getAliasIdentifierParserRuleCall_1_0_0(), currentNode); 
                      	    
                    }
                    pushFollow(FOLLOW_ruleIdentifier_in_ruleFromRange9297);
                    lv_alias_1_0=ruleIdentifier();
                    _fsp--;
                    if (failed) return current;
                    if ( backtracking==0 ) {

                      	        if (current==null) {
                      	            current = factory.create(grammarAccess.getFromRangeRule().getType().getClassifier());
                      	            associateNodeWithAstElement(currentNode.getParent(), current);
                      	        }
                      	        try {
                      	       		set(
                      	       			current, 
                      	       			"alias",
                      	        		lv_alias_1_0, 
                      	        		"Identifier", 
                      	        		currentNode);
                      	        } catch (ValueConverterException vce) {
                      				handleValueConverterException(vce);
                      	        }
                      	        currentNode = currentNode.getParent();
                      	    
                    }

                    }


                    }

                    pushFollow(FOLLOW_ruleIN_CLASS_in_ruleFromRange9306);
                    ruleIN_CLASS();
                    _fsp--;
                    if (failed) return current;
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4867:14: ( (lv_p_3_0= rulePath ) )
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4868:1: (lv_p_3_0= rulePath )
                    {
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4868:1: (lv_p_3_0= rulePath )
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4869:3: lv_p_3_0= rulePath
                    {
                    if ( backtracking==0 ) {
                       
                      	        currentNode=createCompositeNode(grammarAccess.getFromRangeAccess().getPPathParserRuleCall_1_2_0(), currentNode); 
                      	    
                    }
                    pushFollow(FOLLOW_rulePath_in_ruleFromRange9319);
                    lv_p_3_0=rulePath();
                    _fsp--;
                    if (failed) return current;
                    if ( backtracking==0 ) {

                      	        if (current==null) {
                      	            current = factory.create(grammarAccess.getFromRangeRule().getType().getClassifier());
                      	            associateNodeWithAstElement(currentNode.getParent(), current);
                      	        }
                      	        try {
                      	       		set(
                      	       			current, 
                      	       			"p",
                      	        		lv_p_3_0, 
                      	        		"Path", 
                      	        		currentNode);
                      	        } catch (ValueConverterException vce) {
                      				handleValueConverterException(vce);
                      	        }
                      	        currentNode = currentNode.getParent();
                      	    
                    }

                    }


                    }


                    }


                    }
                    break;
                case 3 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4892:6: ( ruleIN '(' ( (lv_p_6_0= rulePath ) ) ')' ( (lv_alias_8_0= ruleIdentifier ) ) )
                    {
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4892:6: ( ruleIN '(' ( (lv_p_6_0= rulePath ) ) ')' ( (lv_alias_8_0= ruleIdentifier ) ) )
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4892:7: ruleIN '(' ( (lv_p_6_0= rulePath ) ) ')' ( (lv_alias_8_0= ruleIdentifier ) )
                    {
                    pushFollow(FOLLOW_ruleIN_in_ruleFromRange9336);
                    ruleIN();
                    _fsp--;
                    if (failed) return current;
                    match(input,43,FOLLOW_43_in_ruleFromRange9338); if (failed) return current;
                    if ( backtracking==0 ) {

                              createLeafNode(grammarAccess.getFromRangeAccess().getLeftParenthesisKeyword_2_1(), null); 
                          
                    }
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4896:1: ( (lv_p_6_0= rulePath ) )
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4897:1: (lv_p_6_0= rulePath )
                    {
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4897:1: (lv_p_6_0= rulePath )
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4898:3: lv_p_6_0= rulePath
                    {
                    if ( backtracking==0 ) {
                       
                      	        currentNode=createCompositeNode(grammarAccess.getFromRangeAccess().getPPathParserRuleCall_2_2_0(), currentNode); 
                      	    
                    }
                    pushFollow(FOLLOW_rulePath_in_ruleFromRange9359);
                    lv_p_6_0=rulePath();
                    _fsp--;
                    if (failed) return current;
                    if ( backtracking==0 ) {

                      	        if (current==null) {
                      	            current = factory.create(grammarAccess.getFromRangeRule().getType().getClassifier());
                      	            associateNodeWithAstElement(currentNode.getParent(), current);
                      	        }
                      	        try {
                      	       		set(
                      	       			current, 
                      	       			"p",
                      	        		lv_p_6_0, 
                      	        		"Path", 
                      	        		currentNode);
                      	        } catch (ValueConverterException vce) {
                      				handleValueConverterException(vce);
                      	        }
                      	        currentNode = currentNode.getParent();
                      	    
                    }

                    }


                    }

                    match(input,44,FOLLOW_44_in_ruleFromRange9369); if (failed) return current;
                    if ( backtracking==0 ) {

                              createLeafNode(grammarAccess.getFromRangeAccess().getRightParenthesisKeyword_2_3(), null); 
                          
                    }
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4924:1: ( (lv_alias_8_0= ruleIdentifier ) )
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4925:1: (lv_alias_8_0= ruleIdentifier )
                    {
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4925:1: (lv_alias_8_0= ruleIdentifier )
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4926:3: lv_alias_8_0= ruleIdentifier
                    {
                    if ( backtracking==0 ) {
                       
                      	        currentNode=createCompositeNode(grammarAccess.getFromRangeAccess().getAliasIdentifierParserRuleCall_2_4_0(), currentNode); 
                      	    
                    }
                    pushFollow(FOLLOW_ruleIdentifier_in_ruleFromRange9390);
                    lv_alias_8_0=ruleIdentifier();
                    _fsp--;
                    if (failed) return current;
                    if ( backtracking==0 ) {

                      	        if (current==null) {
                      	            current = factory.create(grammarAccess.getFromRangeRule().getType().getClassifier());
                      	            associateNodeWithAstElement(currentNode.getParent(), current);
                      	        }
                      	        try {
                      	       		set(
                      	       			current, 
                      	       			"alias",
                      	        		lv_alias_8_0, 
                      	        		"Identifier", 
                      	        		currentNode);
                      	        } catch (ValueConverterException vce) {
                      				handleValueConverterException(vce);
                      	        }
                      	        currentNode = currentNode.getParent();
                      	    
                    }

                    }


                    }


                    }


                    }
                    break;
                case 4 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4950:2: this_InCollectionElementsDeclaration_9= ruleInCollectionElementsDeclaration
                    {
                    if ( backtracking==0 ) {
                       
                      	  /* */ 
                      	
                    }
                    if ( backtracking==0 ) {
                       
                              currentNode=createCompositeNode(grammarAccess.getFromRangeAccess().getInCollectionElementsDeclarationParserRuleCall_3(), currentNode); 
                          
                    }
                    pushFollow(FOLLOW_ruleInCollectionElementsDeclaration_in_ruleFromRange9422);
                    this_InCollectionElementsDeclaration_9=ruleInCollectionElementsDeclaration();
                    _fsp--;
                    if (failed) return current;
                    if ( backtracking==0 ) {
                       
                              current = this_InCollectionElementsDeclaration_9; 
                              currentNode = currentNode.getParent();
                          
                    }

                    }
                    break;

            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
                  	lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruleFromRange


    // $ANTLR start entryRuleFromClassOrOuterQueryPath
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4969:1: entryRuleFromClassOrOuterQueryPath returns [EObject current=null] : iv_ruleFromClassOrOuterQueryPath= ruleFromClassOrOuterQueryPath EOF ;
    public final EObject entryRuleFromClassOrOuterQueryPath() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleFromClassOrOuterQueryPath = null;


        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4970:2: (iv_ruleFromClassOrOuterQueryPath= ruleFromClassOrOuterQueryPath EOF )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4971:2: iv_ruleFromClassOrOuterQueryPath= ruleFromClassOrOuterQueryPath EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getFromClassOrOuterQueryPathRule(), currentNode); 
            }
            pushFollow(FOLLOW_ruleFromClassOrOuterQueryPath_in_entryRuleFromClassOrOuterQueryPath9457);
            iv_ruleFromClassOrOuterQueryPath=ruleFromClassOrOuterQueryPath();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruleFromClassOrOuterQueryPath; 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleFromClassOrOuterQueryPath9467); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuleFromClassOrOuterQueryPath


    // $ANTLR start ruleFromClassOrOuterQueryPath
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4978:1: ruleFromClassOrOuterQueryPath returns [EObject current=null] : ( () ( (lv_path_1_0= rulePath ) ) ( ( ruleAS )? ( (lv_name_3_0= ruleIdentifier ) ) )? ( (lv_propertyFetch_4_0= rulePropertyFetch ) )? ) ;
    public final EObject ruleFromClassOrOuterQueryPath() throws RecognitionException {
        EObject current = null;

        AntlrDatatypeRuleToken lv_path_1_0 = null;

        AntlrDatatypeRuleToken lv_name_3_0 = null;

        AntlrDatatypeRuleToken lv_propertyFetch_4_0 = null;


         EObject temp=null; setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4983:6: ( ( () ( (lv_path_1_0= rulePath ) ) ( ( ruleAS )? ( (lv_name_3_0= ruleIdentifier ) ) )? ( (lv_propertyFetch_4_0= rulePropertyFetch ) )? ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4984:1: ( () ( (lv_path_1_0= rulePath ) ) ( ( ruleAS )? ( (lv_name_3_0= ruleIdentifier ) ) )? ( (lv_propertyFetch_4_0= rulePropertyFetch ) )? )
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4984:1: ( () ( (lv_path_1_0= rulePath ) ) ( ( ruleAS )? ( (lv_name_3_0= ruleIdentifier ) ) )? ( (lv_propertyFetch_4_0= rulePropertyFetch ) )? )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4984:2: () ( (lv_path_1_0= rulePath ) ) ( ( ruleAS )? ( (lv_name_3_0= ruleIdentifier ) ) )? ( (lv_propertyFetch_4_0= rulePropertyFetch ) )?
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4984:2: ()
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4985:2: 
            {
            if ( backtracking==0 ) {
               
              	  /* */ 
              	
            }
            if ( backtracking==0 ) {
               
                      temp=factory.create(grammarAccess.getFromClassOrOuterQueryPathAccess().getFromClassOrOuterQueryPathAction_0().getType().getClassifier());
                      current = temp; 
                      temp = null;
                      CompositeNode newNode = createCompositeNode(grammarAccess.getFromClassOrOuterQueryPathAccess().getFromClassOrOuterQueryPathAction_0(), currentNode.getParent());
                  newNode.getChildren().add(currentNode);
                  moveLookaheadInfo(currentNode, newNode);
                  currentNode = newNode; 
                      associateNodeWithAstElement(currentNode, current); 
                  
            }

            }

            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4998:2: ( (lv_path_1_0= rulePath ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4999:1: (lv_path_1_0= rulePath )
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4999:1: (lv_path_1_0= rulePath )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5000:3: lv_path_1_0= rulePath
            {
            if ( backtracking==0 ) {
               
              	        currentNode=createCompositeNode(grammarAccess.getFromClassOrOuterQueryPathAccess().getPathPathParserRuleCall_1_0(), currentNode); 
              	    
            }
            pushFollow(FOLLOW_rulePath_in_ruleFromClassOrOuterQueryPath9525);
            lv_path_1_0=rulePath();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {

              	        if (current==null) {
              	            current = factory.create(grammarAccess.getFromClassOrOuterQueryPathRule().getType().getClassifier());
              	            associateNodeWithAstElement(currentNode.getParent(), current);
              	        }
              	        try {
              	       		set(
              	       			current, 
              	       			"path",
              	        		lv_path_1_0, 
              	        		"Path", 
              	        		currentNode);
              	        } catch (ValueConverterException vce) {
              				handleValueConverterException(vce);
              	        }
              	        currentNode = currentNode.getParent();
              	    
            }

            }


            }

            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5022:2: ( ( ruleAS )? ( (lv_name_3_0= ruleIdentifier ) ) )?
            int alt58=2;
            int LA58_0 = input.LA(1);

            if ( (LA58_0==RULE_ID||LA58_0==26||(LA58_0>=38 && LA58_0<=40)||LA58_0==42||LA58_0==45||(LA58_0>=54 && LA58_0<=55)||LA58_0==59||(LA58_0>=75 && LA58_0<=78)||(LA58_0>=92 && LA58_0<=94)||(LA58_0>=128 && LA58_0<=130)||(LA58_0>=177 && LA58_0<=179)||(LA58_0>=189 && LA58_0<=194)) ) {
                alt58=1;
            }
            switch (alt58) {
                case 1 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5022:3: ( ruleAS )? ( (lv_name_3_0= ruleIdentifier ) )
                    {
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5022:3: ( ruleAS )?
                    int alt57=2;
                    int LA57_0 = input.LA(1);

                    if ( ((LA57_0>=128 && LA57_0<=130)) ) {
                        alt57=1;
                    }
                    switch (alt57) {
                        case 1 :
                            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5022:4: ruleAS
                            {
                            pushFollow(FOLLOW_ruleAS_in_ruleFromClassOrOuterQueryPath9536);
                            ruleAS();
                            _fsp--;
                            if (failed) return current;

                            }
                            break;

                    }

                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5022:12: ( (lv_name_3_0= ruleIdentifier ) )
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5023:1: (lv_name_3_0= ruleIdentifier )
                    {
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5023:1: (lv_name_3_0= ruleIdentifier )
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5024:3: lv_name_3_0= ruleIdentifier
                    {
                    if ( backtracking==0 ) {
                       
                      	        currentNode=createCompositeNode(grammarAccess.getFromClassOrOuterQueryPathAccess().getNameIdentifierParserRuleCall_2_1_0(), currentNode); 
                      	    
                    }
                    pushFollow(FOLLOW_ruleIdentifier_in_ruleFromClassOrOuterQueryPath9551);
                    lv_name_3_0=ruleIdentifier();
                    _fsp--;
                    if (failed) return current;
                    if ( backtracking==0 ) {

                      	        if (current==null) {
                      	            current = factory.create(grammarAccess.getFromClassOrOuterQueryPathRule().getType().getClassifier());
                      	            associateNodeWithAstElement(currentNode.getParent(), current);
                      	        }
                      	        try {
                      	       		set(
                      	       			current, 
                      	       			"name",
                      	        		lv_name_3_0, 
                      	        		"Identifier", 
                      	        		currentNode);
                      	        } catch (ValueConverterException vce) {
                      				handleValueConverterException(vce);
                      	        }
                      	        currentNode = currentNode.getParent();
                      	    
                    }

                    }


                    }


                    }
                    break;

            }

            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5046:4: ( (lv_propertyFetch_4_0= rulePropertyFetch ) )?
            int alt59=2;
            int LA59_0 = input.LA(1);

            if ( ((LA59_0>=113 && LA59_0<=115)) ) {
                alt59=1;
            }
            switch (alt59) {
                case 1 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5047:1: (lv_propertyFetch_4_0= rulePropertyFetch )
                    {
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5047:1: (lv_propertyFetch_4_0= rulePropertyFetch )
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5048:3: lv_propertyFetch_4_0= rulePropertyFetch
                    {
                    if ( backtracking==0 ) {
                       
                      	        currentNode=createCompositeNode(grammarAccess.getFromClassOrOuterQueryPathAccess().getPropertyFetchPropertyFetchParserRuleCall_3_0(), currentNode); 
                      	    
                    }
                    pushFollow(FOLLOW_rulePropertyFetch_in_ruleFromClassOrOuterQueryPath9574);
                    lv_propertyFetch_4_0=rulePropertyFetch();
                    _fsp--;
                    if (failed) return current;
                    if ( backtracking==0 ) {

                      	        if (current==null) {
                      	            current = factory.create(grammarAccess.getFromClassOrOuterQueryPathRule().getType().getClassifier());
                      	            associateNodeWithAstElement(currentNode.getParent(), current);
                      	        }
                      	        try {
                      	       		set(
                      	       			current, 
                      	       			"propertyFetch",
                      	        		lv_propertyFetch_4_0, 
                      	        		"PropertyFetch", 
                      	        		currentNode);
                      	        } catch (ValueConverterException vce) {
                      				handleValueConverterException(vce);
                      	        }
                      	        currentNode = currentNode.getParent();
                      	    
                    }

                    }


                    }
                    break;

            }


            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
                  	lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruleFromClassOrOuterQueryPath


    // $ANTLR start entryRuleInCollectionElementsDeclaration
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5078:1: entryRuleInCollectionElementsDeclaration returns [EObject current=null] : iv_ruleInCollectionElementsDeclaration= ruleInCollectionElementsDeclaration EOF ;
    public final EObject entryRuleInCollectionElementsDeclaration() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleInCollectionElementsDeclaration = null;


        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5079:2: (iv_ruleInCollectionElementsDeclaration= ruleInCollectionElementsDeclaration EOF )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5080:2: iv_ruleInCollectionElementsDeclaration= ruleInCollectionElementsDeclaration EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getInCollectionElementsDeclarationRule(), currentNode); 
            }
            pushFollow(FOLLOW_ruleInCollectionElementsDeclaration_in_entryRuleInCollectionElementsDeclaration9611);
            iv_ruleInCollectionElementsDeclaration=ruleInCollectionElementsDeclaration();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruleInCollectionElementsDeclaration; 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleInCollectionElementsDeclaration9621); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuleInCollectionElementsDeclaration


    // $ANTLR start ruleInCollectionElementsDeclaration
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5087:1: ruleInCollectionElementsDeclaration returns [EObject current=null] : ( ( (lv_alias_0_0= ruleIdentifier ) ) ruleIN_ELEMENTS '(' ( (lv_p_3_0= rulePath ) ) ')' ) ;
    public final EObject ruleInCollectionElementsDeclaration() throws RecognitionException {
        EObject current = null;

        AntlrDatatypeRuleToken lv_alias_0_0 = null;

        AntlrDatatypeRuleToken lv_p_3_0 = null;


         EObject temp=null; setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5092:6: ( ( ( (lv_alias_0_0= ruleIdentifier ) ) ruleIN_ELEMENTS '(' ( (lv_p_3_0= rulePath ) ) ')' ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5093:1: ( ( (lv_alias_0_0= ruleIdentifier ) ) ruleIN_ELEMENTS '(' ( (lv_p_3_0= rulePath ) ) ')' )
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5093:1: ( ( (lv_alias_0_0= ruleIdentifier ) ) ruleIN_ELEMENTS '(' ( (lv_p_3_0= rulePath ) ) ')' )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5093:2: ( (lv_alias_0_0= ruleIdentifier ) ) ruleIN_ELEMENTS '(' ( (lv_p_3_0= rulePath ) ) ')'
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5093:2: ( (lv_alias_0_0= ruleIdentifier ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5094:1: (lv_alias_0_0= ruleIdentifier )
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5094:1: (lv_alias_0_0= ruleIdentifier )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5095:3: lv_alias_0_0= ruleIdentifier
            {
            if ( backtracking==0 ) {
               
              	        currentNode=createCompositeNode(grammarAccess.getInCollectionElementsDeclarationAccess().getAliasIdentifierParserRuleCall_0_0(), currentNode); 
              	    
            }
            pushFollow(FOLLOW_ruleIdentifier_in_ruleInCollectionElementsDeclaration9667);
            lv_alias_0_0=ruleIdentifier();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {

              	        if (current==null) {
              	            current = factory.create(grammarAccess.getInCollectionElementsDeclarationRule().getType().getClassifier());
              	            associateNodeWithAstElement(currentNode.getParent(), current);
              	        }
              	        try {
              	       		set(
              	       			current, 
              	       			"alias",
              	        		lv_alias_0_0, 
              	        		"Identifier", 
              	        		currentNode);
              	        } catch (ValueConverterException vce) {
              				handleValueConverterException(vce);
              	        }
              	        currentNode = currentNode.getParent();
              	    
            }

            }


            }

            pushFollow(FOLLOW_ruleIN_ELEMENTS_in_ruleInCollectionElementsDeclaration9676);
            ruleIN_ELEMENTS();
            _fsp--;
            if (failed) return current;
            match(input,43,FOLLOW_43_in_ruleInCollectionElementsDeclaration9678); if (failed) return current;
            if ( backtracking==0 ) {

                      createLeafNode(grammarAccess.getInCollectionElementsDeclarationAccess().getLeftParenthesisKeyword_2(), null); 
                  
            }
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5121:1: ( (lv_p_3_0= rulePath ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5122:1: (lv_p_3_0= rulePath )
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5122:1: (lv_p_3_0= rulePath )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5123:3: lv_p_3_0= rulePath
            {
            if ( backtracking==0 ) {
               
              	        currentNode=createCompositeNode(grammarAccess.getInCollectionElementsDeclarationAccess().getPPathParserRuleCall_3_0(), currentNode); 
              	    
            }
            pushFollow(FOLLOW_rulePath_in_ruleInCollectionElementsDeclaration9699);
            lv_p_3_0=rulePath();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {

              	        if (current==null) {
              	            current = factory.create(grammarAccess.getInCollectionElementsDeclarationRule().getType().getClassifier());
              	            associateNodeWithAstElement(currentNode.getParent(), current);
              	        }
              	        try {
              	       		set(
              	       			current, 
              	       			"p",
              	        		lv_p_3_0, 
              	        		"Path", 
              	        		currentNode);
              	        } catch (ValueConverterException vce) {
              				handleValueConverterException(vce);
              	        }
              	        currentNode = currentNode.getParent();
              	    
            }

            }


            }

            match(input,44,FOLLOW_44_in_ruleInCollectionElementsDeclaration9709); if (failed) return current;
            if ( backtracking==0 ) {

                      createLeafNode(grammarAccess.getInCollectionElementsDeclarationAccess().getRightParenthesisKeyword_4(), null); 
                  
            }

            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
                  	lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruleInCollectionElementsDeclaration


    // $ANTLR start entryRulePropertyFetch
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5157:1: entryRulePropertyFetch returns [String current=null] : iv_rulePropertyFetch= rulePropertyFetch EOF ;
    public final String entryRulePropertyFetch() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_rulePropertyFetch = null;


        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5158:2: (iv_rulePropertyFetch= rulePropertyFetch EOF )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5159:2: iv_rulePropertyFetch= rulePropertyFetch EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getPropertyFetchRule(), currentNode); 
            }
            pushFollow(FOLLOW_rulePropertyFetch_in_entryRulePropertyFetch9746);
            iv_rulePropertyFetch=rulePropertyFetch();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_rulePropertyFetch.getText(); 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRulePropertyFetch9757); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRulePropertyFetch


    // $ANTLR start rulePropertyFetch
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5166:1: rulePropertyFetch returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (this_FETCH_0= ruleFETCH this_ALL_1= ruleALL this_PROPERTIES_2= rulePROPERTIES ) ;
    public final AntlrDatatypeRuleToken rulePropertyFetch() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        AntlrDatatypeRuleToken this_FETCH_0 = null;

        AntlrDatatypeRuleToken this_ALL_1 = null;

        AntlrDatatypeRuleToken this_PROPERTIES_2 = null;


         setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5171:6: ( (this_FETCH_0= ruleFETCH this_ALL_1= ruleALL this_PROPERTIES_2= rulePROPERTIES ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5172:1: (this_FETCH_0= ruleFETCH this_ALL_1= ruleALL this_PROPERTIES_2= rulePROPERTIES )
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5172:1: (this_FETCH_0= ruleFETCH this_ALL_1= ruleALL this_PROPERTIES_2= rulePROPERTIES )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5173:5: this_FETCH_0= ruleFETCH this_ALL_1= ruleALL this_PROPERTIES_2= rulePROPERTIES
            {
            if ( backtracking==0 ) {
               
                      currentNode=createCompositeNode(grammarAccess.getPropertyFetchAccess().getFETCHParserRuleCall_0(), currentNode); 
                  
            }
            pushFollow(FOLLOW_ruleFETCH_in_rulePropertyFetch9804);
            this_FETCH_0=ruleFETCH();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {

              		current.merge(this_FETCH_0);
                  
            }
            if ( backtracking==0 ) {
               
                      currentNode = currentNode.getParent();
                  
            }
            if ( backtracking==0 ) {
               
                      currentNode=createCompositeNode(grammarAccess.getPropertyFetchAccess().getALLParserRuleCall_1(), currentNode); 
                  
            }
            pushFollow(FOLLOW_ruleALL_in_rulePropertyFetch9831);
            this_ALL_1=ruleALL();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {

              		current.merge(this_ALL_1);
                  
            }
            if ( backtracking==0 ) {
               
                      currentNode = currentNode.getParent();
                  
            }
            if ( backtracking==0 ) {
               
                      currentNode=createCompositeNode(grammarAccess.getPropertyFetchAccess().getPROPERTIESParserRuleCall_2(), currentNode); 
                  
            }
            pushFollow(FOLLOW_rulePROPERTIES_in_rulePropertyFetch9858);
            this_PROPERTIES_2=rulePROPERTIES();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {

              		current.merge(this_PROPERTIES_2);
                  
            }
            if ( backtracking==0 ) {
               
                      currentNode = currentNode.getParent();
                  
            }

            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
              	    lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end rulePropertyFetch


    // $ANTLR start entryRuleGroupByClause
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5213:1: entryRuleGroupByClause returns [EObject current=null] : iv_ruleGroupByClause= ruleGroupByClause EOF ;
    public final EObject entryRuleGroupByClause() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleGroupByClause = null;


        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5214:2: (iv_ruleGroupByClause= ruleGroupByClause EOF )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5215:2: iv_ruleGroupByClause= ruleGroupByClause EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getGroupByClauseRule(), currentNode); 
            }
            pushFollow(FOLLOW_ruleGroupByClause_in_entryRuleGroupByClause9903);
            iv_ruleGroupByClause=ruleGroupByClause();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruleGroupByClause; 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleGroupByClause9913); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuleGroupByClause


    // $ANTLR start ruleGroupByClause
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5222:1: ruleGroupByClause returns [EObject current=null] : ( ruleGROUP_BY ( (lv_e_1_0= ruleExpression ) ) ( ',' ( (lv_e_3_0= ruleExpression ) ) )* ( (lv_h_4_0= ruleHavingClause ) )? ) ;
    public final EObject ruleGroupByClause() throws RecognitionException {
        EObject current = null;

        EObject lv_e_1_0 = null;

        EObject lv_e_3_0 = null;

        EObject lv_h_4_0 = null;


         EObject temp=null; setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5227:6: ( ( ruleGROUP_BY ( (lv_e_1_0= ruleExpression ) ) ( ',' ( (lv_e_3_0= ruleExpression ) ) )* ( (lv_h_4_0= ruleHavingClause ) )? ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5228:1: ( ruleGROUP_BY ( (lv_e_1_0= ruleExpression ) ) ( ',' ( (lv_e_3_0= ruleExpression ) ) )* ( (lv_h_4_0= ruleHavingClause ) )? )
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5228:1: ( ruleGROUP_BY ( (lv_e_1_0= ruleExpression ) ) ( ',' ( (lv_e_3_0= ruleExpression ) ) )* ( (lv_h_4_0= ruleHavingClause ) )? )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5228:2: ruleGROUP_BY ( (lv_e_1_0= ruleExpression ) ) ( ',' ( (lv_e_3_0= ruleExpression ) ) )* ( (lv_h_4_0= ruleHavingClause ) )?
            {
            pushFollow(FOLLOW_ruleGROUP_BY_in_ruleGroupByClause9947);
            ruleGROUP_BY();
            _fsp--;
            if (failed) return current;
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5228:14: ( (lv_e_1_0= ruleExpression ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5229:1: (lv_e_1_0= ruleExpression )
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5229:1: (lv_e_1_0= ruleExpression )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5230:3: lv_e_1_0= ruleExpression
            {
            if ( backtracking==0 ) {
               
              	        currentNode=createCompositeNode(grammarAccess.getGroupByClauseAccess().getEExpressionParserRuleCall_1_0(), currentNode); 
              	    
            }
            pushFollow(FOLLOW_ruleExpression_in_ruleGroupByClause9960);
            lv_e_1_0=ruleExpression();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {

              	        if (current==null) {
              	            current = factory.create(grammarAccess.getGroupByClauseRule().getType().getClassifier());
              	            associateNodeWithAstElement(currentNode.getParent(), current);
              	        }
              	        try {
              	       		add(
              	       			current, 
              	       			"e",
              	        		lv_e_1_0, 
              	        		"Expression", 
              	        		currentNode);
              	        } catch (ValueConverterException vce) {
              				handleValueConverterException(vce);
              	        }
              	        currentNode = currentNode.getParent();
              	    
            }

            }


            }

            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5252:2: ( ',' ( (lv_e_3_0= ruleExpression ) ) )*
            loop60:
            do {
                int alt60=2;
                int LA60_0 = input.LA(1);

                if ( (LA60_0==28) ) {
                    alt60=1;
                }


                switch (alt60) {
            	case 1 :
            	    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5252:4: ',' ( (lv_e_3_0= ruleExpression ) )
            	    {
            	    match(input,28,FOLLOW_28_in_ruleGroupByClause9971); if (failed) return current;
            	    if ( backtracking==0 ) {

            	              createLeafNode(grammarAccess.getGroupByClauseAccess().getCommaKeyword_2_0(), null); 
            	          
            	    }
            	    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5256:1: ( (lv_e_3_0= ruleExpression ) )
            	    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5257:1: (lv_e_3_0= ruleExpression )
            	    {
            	    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5257:1: (lv_e_3_0= ruleExpression )
            	    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5258:3: lv_e_3_0= ruleExpression
            	    {
            	    if ( backtracking==0 ) {
            	       
            	      	        currentNode=createCompositeNode(grammarAccess.getGroupByClauseAccess().getEExpressionParserRuleCall_2_1_0(), currentNode); 
            	      	    
            	    }
            	    pushFollow(FOLLOW_ruleExpression_in_ruleGroupByClause9992);
            	    lv_e_3_0=ruleExpression();
            	    _fsp--;
            	    if (failed) return current;
            	    if ( backtracking==0 ) {

            	      	        if (current==null) {
            	      	            current = factory.create(grammarAccess.getGroupByClauseRule().getType().getClassifier());
            	      	            associateNodeWithAstElement(currentNode.getParent(), current);
            	      	        }
            	      	        try {
            	      	       		add(
            	      	       			current, 
            	      	       			"e",
            	      	        		lv_e_3_0, 
            	      	        		"Expression", 
            	      	        		currentNode);
            	      	        } catch (ValueConverterException vce) {
            	      				handleValueConverterException(vce);
            	      	        }
            	      	        currentNode = currentNode.getParent();
            	      	    
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop60;
                }
            } while (true);

            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5280:4: ( (lv_h_4_0= ruleHavingClause ) )?
            int alt61=2;
            int LA61_0 = input.LA(1);

            if ( ((LA61_0>=155 && LA61_0<=157)) ) {
                alt61=1;
            }
            switch (alt61) {
                case 1 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5281:1: (lv_h_4_0= ruleHavingClause )
                    {
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5281:1: (lv_h_4_0= ruleHavingClause )
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5282:3: lv_h_4_0= ruleHavingClause
                    {
                    if ( backtracking==0 ) {
                       
                      	        currentNode=createCompositeNode(grammarAccess.getGroupByClauseAccess().getHHavingClauseParserRuleCall_3_0(), currentNode); 
                      	    
                    }
                    pushFollow(FOLLOW_ruleHavingClause_in_ruleGroupByClause10015);
                    lv_h_4_0=ruleHavingClause();
                    _fsp--;
                    if (failed) return current;
                    if ( backtracking==0 ) {

                      	        if (current==null) {
                      	            current = factory.create(grammarAccess.getGroupByClauseRule().getType().getClassifier());
                      	            associateNodeWithAstElement(currentNode.getParent(), current);
                      	        }
                      	        try {
                      	       		set(
                      	       			current, 
                      	       			"h",
                      	        		lv_h_4_0, 
                      	        		"HavingClause", 
                      	        		currentNode);
                      	        } catch (ValueConverterException vce) {
                      				handleValueConverterException(vce);
                      	        }
                      	        currentNode = currentNode.getParent();
                      	    
                    }

                    }


                    }
                    break;

            }


            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
                  	lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruleGroupByClause


    // $ANTLR start entryRuleOrderByClause
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5312:1: entryRuleOrderByClause returns [EObject current=null] : iv_ruleOrderByClause= ruleOrderByClause EOF ;
    public final EObject entryRuleOrderByClause() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleOrderByClause = null;


        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5313:2: (iv_ruleOrderByClause= ruleOrderByClause EOF )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5314:2: iv_ruleOrderByClause= ruleOrderByClause EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getOrderByClauseRule(), currentNode); 
            }
            pushFollow(FOLLOW_ruleOrderByClause_in_entryRuleOrderByClause10052);
            iv_ruleOrderByClause=ruleOrderByClause();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruleOrderByClause; 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleOrderByClause10062); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuleOrderByClause


    // $ANTLR start ruleOrderByClause
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5321:1: ruleOrderByClause returns [EObject current=null] : ( ruleORDER_BY ( (lv_o_1_0= ruleOrderElement ) ) ( ',' ( (lv_o_3_0= ruleOrderElement ) ) )* ) ;
    public final EObject ruleOrderByClause() throws RecognitionException {
        EObject current = null;

        EObject lv_o_1_0 = null;

        EObject lv_o_3_0 = null;


         EObject temp=null; setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5326:6: ( ( ruleORDER_BY ( (lv_o_1_0= ruleOrderElement ) ) ( ',' ( (lv_o_3_0= ruleOrderElement ) ) )* ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5327:1: ( ruleORDER_BY ( (lv_o_1_0= ruleOrderElement ) ) ( ',' ( (lv_o_3_0= ruleOrderElement ) ) )* )
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5327:1: ( ruleORDER_BY ( (lv_o_1_0= ruleOrderElement ) ) ( ',' ( (lv_o_3_0= ruleOrderElement ) ) )* )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5327:2: ruleORDER_BY ( (lv_o_1_0= ruleOrderElement ) ) ( ',' ( (lv_o_3_0= ruleOrderElement ) ) )*
            {
            pushFollow(FOLLOW_ruleORDER_BY_in_ruleOrderByClause10096);
            ruleORDER_BY();
            _fsp--;
            if (failed) return current;
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5327:14: ( (lv_o_1_0= ruleOrderElement ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5328:1: (lv_o_1_0= ruleOrderElement )
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5328:1: (lv_o_1_0= ruleOrderElement )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5329:3: lv_o_1_0= ruleOrderElement
            {
            if ( backtracking==0 ) {
               
              	        currentNode=createCompositeNode(grammarAccess.getOrderByClauseAccess().getOOrderElementParserRuleCall_1_0(), currentNode); 
              	    
            }
            pushFollow(FOLLOW_ruleOrderElement_in_ruleOrderByClause10109);
            lv_o_1_0=ruleOrderElement();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {

              	        if (current==null) {
              	            current = factory.create(grammarAccess.getOrderByClauseRule().getType().getClassifier());
              	            associateNodeWithAstElement(currentNode.getParent(), current);
              	        }
              	        try {
              	       		add(
              	       			current, 
              	       			"o",
              	        		lv_o_1_0, 
              	        		"OrderElement", 
              	        		currentNode);
              	        } catch (ValueConverterException vce) {
              				handleValueConverterException(vce);
              	        }
              	        currentNode = currentNode.getParent();
              	    
            }

            }


            }

            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5351:2: ( ',' ( (lv_o_3_0= ruleOrderElement ) ) )*
            loop62:
            do {
                int alt62=2;
                int LA62_0 = input.LA(1);

                if ( (LA62_0==28) ) {
                    alt62=1;
                }


                switch (alt62) {
            	case 1 :
            	    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5351:4: ',' ( (lv_o_3_0= ruleOrderElement ) )
            	    {
            	    match(input,28,FOLLOW_28_in_ruleOrderByClause10120); if (failed) return current;
            	    if ( backtracking==0 ) {

            	              createLeafNode(grammarAccess.getOrderByClauseAccess().getCommaKeyword_2_0(), null); 
            	          
            	    }
            	    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5355:1: ( (lv_o_3_0= ruleOrderElement ) )
            	    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5356:1: (lv_o_3_0= ruleOrderElement )
            	    {
            	    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5356:1: (lv_o_3_0= ruleOrderElement )
            	    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5357:3: lv_o_3_0= ruleOrderElement
            	    {
            	    if ( backtracking==0 ) {
            	       
            	      	        currentNode=createCompositeNode(grammarAccess.getOrderByClauseAccess().getOOrderElementParserRuleCall_2_1_0(), currentNode); 
            	      	    
            	    }
            	    pushFollow(FOLLOW_ruleOrderElement_in_ruleOrderByClause10141);
            	    lv_o_3_0=ruleOrderElement();
            	    _fsp--;
            	    if (failed) return current;
            	    if ( backtracking==0 ) {

            	      	        if (current==null) {
            	      	            current = factory.create(grammarAccess.getOrderByClauseRule().getType().getClassifier());
            	      	            associateNodeWithAstElement(currentNode.getParent(), current);
            	      	        }
            	      	        try {
            	      	       		add(
            	      	       			current, 
            	      	       			"o",
            	      	        		lv_o_3_0, 
            	      	        		"OrderElement", 
            	      	        		currentNode);
            	      	        } catch (ValueConverterException vce) {
            	      				handleValueConverterException(vce);
            	      	        }
            	      	        currentNode = currentNode.getParent();
            	      	    
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop62;
                }
            } while (true);


            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
                  	lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruleOrderByClause


    // $ANTLR start entryRuleOrderElement
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5387:1: entryRuleOrderElement returns [EObject current=null] : iv_ruleOrderElement= ruleOrderElement EOF ;
    public final EObject entryRuleOrderElement() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleOrderElement = null;


        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5388:2: (iv_ruleOrderElement= ruleOrderElement EOF )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5389:2: iv_ruleOrderElement= ruleOrderElement EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getOrderElementRule(), currentNode); 
            }
            pushFollow(FOLLOW_ruleOrderElement_in_entryRuleOrderElement10179);
            iv_ruleOrderElement=ruleOrderElement();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruleOrderElement; 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleOrderElement10189); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuleOrderElement


    // $ANTLR start ruleOrderElement
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5396:1: ruleOrderElement returns [EObject current=null] : (this_Expression_0= ruleExpression ( ruleAscendingOrDescending )? ) ;
    public final EObject ruleOrderElement() throws RecognitionException {
        EObject current = null;

        EObject this_Expression_0 = null;


         EObject temp=null; setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5401:6: ( (this_Expression_0= ruleExpression ( ruleAscendingOrDescending )? ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5402:1: (this_Expression_0= ruleExpression ( ruleAscendingOrDescending )? )
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5402:1: (this_Expression_0= ruleExpression ( ruleAscendingOrDescending )? )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5403:2: this_Expression_0= ruleExpression ( ruleAscendingOrDescending )?
            {
            if ( backtracking==0 ) {
               
              	  /* */ 
              	
            }
            if ( backtracking==0 ) {
               
                      currentNode=createCompositeNode(grammarAccess.getOrderElementAccess().getExpressionParserRuleCall_0(), currentNode); 
                  
            }
            pushFollow(FOLLOW_ruleExpression_in_ruleOrderElement10239);
            this_Expression_0=ruleExpression();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               
                      current = this_Expression_0; 
                      currentNode = currentNode.getParent();
                  
            }
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5414:1: ( ruleAscendingOrDescending )?
            int alt63=2;
            int LA63_0 = input.LA(1);

            if ( ((LA63_0>=143 && LA63_0<=154)) ) {
                alt63=1;
            }
            switch (alt63) {
                case 1 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5414:2: ruleAscendingOrDescending
                    {
                    pushFollow(FOLLOW_ruleAscendingOrDescending_in_ruleOrderElement10248);
                    ruleAscendingOrDescending();
                    _fsp--;
                    if (failed) return current;

                    }
                    break;

            }


            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
                  	lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruleOrderElement


    // $ANTLR start entryRuleAscendingOrDescending
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5422:1: entryRuleAscendingOrDescending returns [String current=null] : iv_ruleAscendingOrDescending= ruleAscendingOrDescending EOF ;
    public final String entryRuleAscendingOrDescending() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleAscendingOrDescending = null;


        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5423:2: (iv_ruleAscendingOrDescending= ruleAscendingOrDescending EOF )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5424:2: iv_ruleAscendingOrDescending= ruleAscendingOrDescending EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getAscendingOrDescendingRule(), currentNode); 
            }
            pushFollow(FOLLOW_ruleAscendingOrDescending_in_entryRuleAscendingOrDescending10279);
            iv_ruleAscendingOrDescending=ruleAscendingOrDescending();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruleAscendingOrDescending.getText(); 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleAscendingOrDescending10290); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuleAscendingOrDescending


    // $ANTLR start ruleAscendingOrDescending
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5431:1: ruleAscendingOrDescending returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (this_ASC_0= ruleASC | this_DESC_1= ruleDESC ) ;
    public final AntlrDatatypeRuleToken ruleAscendingOrDescending() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        AntlrDatatypeRuleToken this_ASC_0 = null;

        AntlrDatatypeRuleToken this_DESC_1 = null;


         setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5436:6: ( (this_ASC_0= ruleASC | this_DESC_1= ruleDESC ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5437:1: (this_ASC_0= ruleASC | this_DESC_1= ruleDESC )
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5437:1: (this_ASC_0= ruleASC | this_DESC_1= ruleDESC )
            int alt64=2;
            int LA64_0 = input.LA(1);

            if ( ((LA64_0>=143 && LA64_0<=148)) ) {
                alt64=1;
            }
            else if ( ((LA64_0>=149 && LA64_0<=154)) ) {
                alt64=2;
            }
            else {
                if (backtracking>0) {failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("5437:1: (this_ASC_0= ruleASC | this_DESC_1= ruleDESC )", 64, 0, input);

                throw nvae;
            }
            switch (alt64) {
                case 1 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5438:5: this_ASC_0= ruleASC
                    {
                    if ( backtracking==0 ) {
                       
                              currentNode=createCompositeNode(grammarAccess.getAscendingOrDescendingAccess().getASCParserRuleCall_0(), currentNode); 
                          
                    }
                    pushFollow(FOLLOW_ruleASC_in_ruleAscendingOrDescending10337);
                    this_ASC_0=ruleASC();
                    _fsp--;
                    if (failed) return current;
                    if ( backtracking==0 ) {

                      		current.merge(this_ASC_0);
                          
                    }
                    if ( backtracking==0 ) {
                       
                              currentNode = currentNode.getParent();
                          
                    }

                    }
                    break;
                case 2 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5450:5: this_DESC_1= ruleDESC
                    {
                    if ( backtracking==0 ) {
                       
                              currentNode=createCompositeNode(grammarAccess.getAscendingOrDescendingAccess().getDESCParserRuleCall_1(), currentNode); 
                          
                    }
                    pushFollow(FOLLOW_ruleDESC_in_ruleAscendingOrDescending10370);
                    this_DESC_1=ruleDESC();
                    _fsp--;
                    if (failed) return current;
                    if ( backtracking==0 ) {

                      		current.merge(this_DESC_1);
                          
                    }
                    if ( backtracking==0 ) {
                       
                              currentNode = currentNode.getParent();
                          
                    }

                    }
                    break;

            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
              	    lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruleAscendingOrDescending


    // $ANTLR start entryRuleHavingClause
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5468:1: entryRuleHavingClause returns [EObject current=null] : iv_ruleHavingClause= ruleHavingClause EOF ;
    public final EObject entryRuleHavingClause() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleHavingClause = null;


        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5469:2: (iv_ruleHavingClause= ruleHavingClause EOF )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5470:2: iv_ruleHavingClause= ruleHavingClause EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getHavingClauseRule(), currentNode); 
            }
            pushFollow(FOLLOW_ruleHavingClause_in_entryRuleHavingClause10415);
            iv_ruleHavingClause=ruleHavingClause();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruleHavingClause; 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleHavingClause10425); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuleHavingClause


    // $ANTLR start ruleHavingClause
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5477:1: ruleHavingClause returns [EObject current=null] : ( ruleHAVING ( (lv_e_1_0= ruleExpression ) ) ) ;
    public final EObject ruleHavingClause() throws RecognitionException {
        EObject current = null;

        EObject lv_e_1_0 = null;


         EObject temp=null; setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5482:6: ( ( ruleHAVING ( (lv_e_1_0= ruleExpression ) ) ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5483:1: ( ruleHAVING ( (lv_e_1_0= ruleExpression ) ) )
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5483:1: ( ruleHAVING ( (lv_e_1_0= ruleExpression ) ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5483:2: ruleHAVING ( (lv_e_1_0= ruleExpression ) )
            {
            pushFollow(FOLLOW_ruleHAVING_in_ruleHavingClause10459);
            ruleHAVING();
            _fsp--;
            if (failed) return current;
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5483:12: ( (lv_e_1_0= ruleExpression ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5484:1: (lv_e_1_0= ruleExpression )
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5484:1: (lv_e_1_0= ruleExpression )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5485:3: lv_e_1_0= ruleExpression
            {
            if ( backtracking==0 ) {
               
              	        currentNode=createCompositeNode(grammarAccess.getHavingClauseAccess().getEExpressionParserRuleCall_1_0(), currentNode); 
              	    
            }
            pushFollow(FOLLOW_ruleExpression_in_ruleHavingClause10472);
            lv_e_1_0=ruleExpression();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {

              	        if (current==null) {
              	            current = factory.create(grammarAccess.getHavingClauseRule().getType().getClassifier());
              	            associateNodeWithAstElement(currentNode.getParent(), current);
              	        }
              	        try {
              	       		set(
              	       			current, 
              	       			"e",
              	        		lv_e_1_0, 
              	        		"Expression", 
              	        		currentNode);
              	        } catch (ValueConverterException vce) {
              				handleValueConverterException(vce);
              	        }
              	        currentNode = currentNode.getParent();
              	    
            }

            }


            }


            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
                  	lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruleHavingClause


    // $ANTLR start entryRuleWhereClause
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5515:1: entryRuleWhereClause returns [EObject current=null] : iv_ruleWhereClause= ruleWhereClause EOF ;
    public final EObject entryRuleWhereClause() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleWhereClause = null;


        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5516:2: (iv_ruleWhereClause= ruleWhereClause EOF )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5517:2: iv_ruleWhereClause= ruleWhereClause EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getWhereClauseRule(), currentNode); 
            }
            pushFollow(FOLLOW_ruleWhereClause_in_entryRuleWhereClause10508);
            iv_ruleWhereClause=ruleWhereClause();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruleWhereClause; 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleWhereClause10518); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuleWhereClause


    // $ANTLR start ruleWhereClause
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5524:1: ruleWhereClause returns [EObject current=null] : ( ruleWHERE ( (lv_e_1_0= ruleExpression ) ) ) ;
    public final EObject ruleWhereClause() throws RecognitionException {
        EObject current = null;

        EObject lv_e_1_0 = null;


         EObject temp=null; setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5529:6: ( ( ruleWHERE ( (lv_e_1_0= ruleExpression ) ) ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5530:1: ( ruleWHERE ( (lv_e_1_0= ruleExpression ) ) )
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5530:1: ( ruleWHERE ( (lv_e_1_0= ruleExpression ) ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5530:2: ruleWHERE ( (lv_e_1_0= ruleExpression ) )
            {
            pushFollow(FOLLOW_ruleWHERE_in_ruleWhereClause10552);
            ruleWHERE();
            _fsp--;
            if (failed) return current;
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5530:11: ( (lv_e_1_0= ruleExpression ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5531:1: (lv_e_1_0= ruleExpression )
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5531:1: (lv_e_1_0= ruleExpression )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5532:3: lv_e_1_0= ruleExpression
            {
            if ( backtracking==0 ) {
               
              	        currentNode=createCompositeNode(grammarAccess.getWhereClauseAccess().getEExpressionParserRuleCall_1_0(), currentNode); 
              	    
            }
            pushFollow(FOLLOW_ruleExpression_in_ruleWhereClause10565);
            lv_e_1_0=ruleExpression();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {

              	        if (current==null) {
              	            current = factory.create(grammarAccess.getWhereClauseRule().getType().getClassifier());
              	            associateNodeWithAstElement(currentNode.getParent(), current);
              	        }
              	        try {
              	       		set(
              	       			current, 
              	       			"e",
              	        		lv_e_1_0, 
              	        		"Expression", 
              	        		currentNode);
              	        } catch (ValueConverterException vce) {
              				handleValueConverterException(vce);
              	        }
              	        currentNode = currentNode.getParent();
              	    
            }

            }


            }


            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
                  	lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruleWhereClause


    // $ANTLR start entryRuleSelectedPropertiesList
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5562:1: entryRuleSelectedPropertiesList returns [EObject current=null] : iv_ruleSelectedPropertiesList= ruleSelectedPropertiesList EOF ;
    public final EObject entryRuleSelectedPropertiesList() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleSelectedPropertiesList = null;


        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5563:2: (iv_ruleSelectedPropertiesList= ruleSelectedPropertiesList EOF )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5564:2: iv_ruleSelectedPropertiesList= ruleSelectedPropertiesList EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getSelectedPropertiesListRule(), currentNode); 
            }
            pushFollow(FOLLOW_ruleSelectedPropertiesList_in_entryRuleSelectedPropertiesList10601);
            iv_ruleSelectedPropertiesList=ruleSelectedPropertiesList();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruleSelectedPropertiesList; 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleSelectedPropertiesList10611); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuleSelectedPropertiesList


    // $ANTLR start ruleSelectedPropertiesList
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5571:1: ruleSelectedPropertiesList returns [EObject current=null] : ( ( (lv_a_0_0= ruleAliasedExpression ) ) ( ',' ( (lv_a_2_0= ruleAliasedExpression ) ) )* ) ;
    public final EObject ruleSelectedPropertiesList() throws RecognitionException {
        EObject current = null;

        EObject lv_a_0_0 = null;

        EObject lv_a_2_0 = null;


         EObject temp=null; setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5576:6: ( ( ( (lv_a_0_0= ruleAliasedExpression ) ) ( ',' ( (lv_a_2_0= ruleAliasedExpression ) ) )* ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5577:1: ( ( (lv_a_0_0= ruleAliasedExpression ) ) ( ',' ( (lv_a_2_0= ruleAliasedExpression ) ) )* )
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5577:1: ( ( (lv_a_0_0= ruleAliasedExpression ) ) ( ',' ( (lv_a_2_0= ruleAliasedExpression ) ) )* )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5577:2: ( (lv_a_0_0= ruleAliasedExpression ) ) ( ',' ( (lv_a_2_0= ruleAliasedExpression ) ) )*
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5577:2: ( (lv_a_0_0= ruleAliasedExpression ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5578:1: (lv_a_0_0= ruleAliasedExpression )
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5578:1: (lv_a_0_0= ruleAliasedExpression )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5579:3: lv_a_0_0= ruleAliasedExpression
            {
            if ( backtracking==0 ) {
               
              	        currentNode=createCompositeNode(grammarAccess.getSelectedPropertiesListAccess().getAAliasedExpressionParserRuleCall_0_0(), currentNode); 
              	    
            }
            pushFollow(FOLLOW_ruleAliasedExpression_in_ruleSelectedPropertiesList10657);
            lv_a_0_0=ruleAliasedExpression();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {

              	        if (current==null) {
              	            current = factory.create(grammarAccess.getSelectedPropertiesListRule().getType().getClassifier());
              	            associateNodeWithAstElement(currentNode.getParent(), current);
              	        }
              	        try {
              	       		add(
              	       			current, 
              	       			"a",
              	        		lv_a_0_0, 
              	        		"AliasedExpression", 
              	        		currentNode);
              	        } catch (ValueConverterException vce) {
              				handleValueConverterException(vce);
              	        }
              	        currentNode = currentNode.getParent();
              	    
            }

            }


            }

            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5601:2: ( ',' ( (lv_a_2_0= ruleAliasedExpression ) ) )*
            loop65:
            do {
                int alt65=2;
                int LA65_0 = input.LA(1);

                if ( (LA65_0==28) ) {
                    alt65=1;
                }


                switch (alt65) {
            	case 1 :
            	    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5601:4: ',' ( (lv_a_2_0= ruleAliasedExpression ) )
            	    {
            	    match(input,28,FOLLOW_28_in_ruleSelectedPropertiesList10668); if (failed) return current;
            	    if ( backtracking==0 ) {

            	              createLeafNode(grammarAccess.getSelectedPropertiesListAccess().getCommaKeyword_1_0(), null); 
            	          
            	    }
            	    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5605:1: ( (lv_a_2_0= ruleAliasedExpression ) )
            	    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5606:1: (lv_a_2_0= ruleAliasedExpression )
            	    {
            	    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5606:1: (lv_a_2_0= ruleAliasedExpression )
            	    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5607:3: lv_a_2_0= ruleAliasedExpression
            	    {
            	    if ( backtracking==0 ) {
            	       
            	      	        currentNode=createCompositeNode(grammarAccess.getSelectedPropertiesListAccess().getAAliasedExpressionParserRuleCall_1_1_0(), currentNode); 
            	      	    
            	    }
            	    pushFollow(FOLLOW_ruleAliasedExpression_in_ruleSelectedPropertiesList10689);
            	    lv_a_2_0=ruleAliasedExpression();
            	    _fsp--;
            	    if (failed) return current;
            	    if ( backtracking==0 ) {

            	      	        if (current==null) {
            	      	            current = factory.create(grammarAccess.getSelectedPropertiesListRule().getType().getClassifier());
            	      	            associateNodeWithAstElement(currentNode.getParent(), current);
            	      	        }
            	      	        try {
            	      	       		add(
            	      	       			current, 
            	      	       			"a",
            	      	        		lv_a_2_0, 
            	      	        		"AliasedExpression", 
            	      	        		currentNode);
            	      	        } catch (ValueConverterException vce) {
            	      				handleValueConverterException(vce);
            	      	        }
            	      	        currentNode = currentNode.getParent();
            	      	    
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop65;
                }
            } while (true);


            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
                  	lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruleSelectedPropertiesList


    // $ANTLR start entryRuleAliasedExpression
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5637:1: entryRuleAliasedExpression returns [EObject current=null] : iv_ruleAliasedExpression= ruleAliasedExpression EOF ;
    public final EObject entryRuleAliasedExpression() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleAliasedExpression = null;


        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5638:2: (iv_ruleAliasedExpression= ruleAliasedExpression EOF )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5639:2: iv_ruleAliasedExpression= ruleAliasedExpression EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getAliasedExpressionRule(), currentNode); 
            }
            pushFollow(FOLLOW_ruleAliasedExpression_in_entryRuleAliasedExpression10727);
            iv_ruleAliasedExpression=ruleAliasedExpression();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruleAliasedExpression; 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleAliasedExpression10737); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuleAliasedExpression


    // $ANTLR start ruleAliasedExpression
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5646:1: ruleAliasedExpression returns [EObject current=null] : (this_Expression_0= ruleExpression ( ruleAS ( (lv_id_2_0= ruleIdentifier ) ) )? ) ;
    public final EObject ruleAliasedExpression() throws RecognitionException {
        EObject current = null;

        EObject this_Expression_0 = null;

        AntlrDatatypeRuleToken lv_id_2_0 = null;


         EObject temp=null; setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5651:6: ( (this_Expression_0= ruleExpression ( ruleAS ( (lv_id_2_0= ruleIdentifier ) ) )? ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5652:1: (this_Expression_0= ruleExpression ( ruleAS ( (lv_id_2_0= ruleIdentifier ) ) )? )
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5652:1: (this_Expression_0= ruleExpression ( ruleAS ( (lv_id_2_0= ruleIdentifier ) ) )? )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5653:2: this_Expression_0= ruleExpression ( ruleAS ( (lv_id_2_0= ruleIdentifier ) ) )?
            {
            if ( backtracking==0 ) {
               
              	  /* */ 
              	
            }
            if ( backtracking==0 ) {
               
                      currentNode=createCompositeNode(grammarAccess.getAliasedExpressionAccess().getExpressionParserRuleCall_0(), currentNode); 
                  
            }
            pushFollow(FOLLOW_ruleExpression_in_ruleAliasedExpression10787);
            this_Expression_0=ruleExpression();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               
                      current = this_Expression_0; 
                      currentNode = currentNode.getParent();
                  
            }
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5664:1: ( ruleAS ( (lv_id_2_0= ruleIdentifier ) ) )?
            int alt66=2;
            int LA66_0 = input.LA(1);

            if ( ((LA66_0>=128 && LA66_0<=130)) ) {
                alt66=1;
            }
            switch (alt66) {
                case 1 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5664:2: ruleAS ( (lv_id_2_0= ruleIdentifier ) )
                    {
                    pushFollow(FOLLOW_ruleAS_in_ruleAliasedExpression10796);
                    ruleAS();
                    _fsp--;
                    if (failed) return current;
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5664:8: ( (lv_id_2_0= ruleIdentifier ) )
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5665:1: (lv_id_2_0= ruleIdentifier )
                    {
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5665:1: (lv_id_2_0= ruleIdentifier )
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5666:3: lv_id_2_0= ruleIdentifier
                    {
                    if ( backtracking==0 ) {
                       
                      	        currentNode=createCompositeNode(grammarAccess.getAliasedExpressionAccess().getIdIdentifierParserRuleCall_1_1_0(), currentNode); 
                      	    
                    }
                    pushFollow(FOLLOW_ruleIdentifier_in_ruleAliasedExpression10809);
                    lv_id_2_0=ruleIdentifier();
                    _fsp--;
                    if (failed) return current;
                    if ( backtracking==0 ) {

                      	        if (current==null) {
                      	            current = factory.create(grammarAccess.getAliasedExpressionRule().getType().getClassifier());
                      	            associateNodeWithAstElement(currentNode.getParent(), current);
                      	        }
                      	        try {
                      	       		set(
                      	       			current, 
                      	       			"id",
                      	        		lv_id_2_0, 
                      	        		"Identifier", 
                      	        		currentNode);
                      	        } catch (ValueConverterException vce) {
                      				handleValueConverterException(vce);
                      	        }
                      	        currentNode = currentNode.getParent();
                      	    
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
                  	lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruleAliasedExpression


    // $ANTLR start entryRuleExpression
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5696:1: entryRuleExpression returns [EObject current=null] : iv_ruleExpression= ruleExpression EOF ;
    public final EObject entryRuleExpression() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleExpression = null;


        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5697:2: (iv_ruleExpression= ruleExpression EOF )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5698:2: iv_ruleExpression= ruleExpression EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getExpressionRule(), currentNode); 
            }
            pushFollow(FOLLOW_ruleExpression_in_entryRuleExpression10847);
            iv_ruleExpression=ruleExpression();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruleExpression; 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleExpression10857); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuleExpression


    // $ANTLR start ruleExpression
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5705:1: ruleExpression returns [EObject current=null] : this_LogicalOrExpression_0= ruleLogicalOrExpression ;
    public final EObject ruleExpression() throws RecognitionException {
        EObject current = null;

        EObject this_LogicalOrExpression_0 = null;


         EObject temp=null; setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5710:6: (this_LogicalOrExpression_0= ruleLogicalOrExpression )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5712:2: this_LogicalOrExpression_0= ruleLogicalOrExpression
            {
            if ( backtracking==0 ) {
               
              	  /* */ 
              	
            }
            if ( backtracking==0 ) {
               
                      currentNode=createCompositeNode(grammarAccess.getExpressionAccess().getLogicalOrExpressionParserRuleCall(), currentNode); 
                  
            }
            pushFollow(FOLLOW_ruleLogicalOrExpression_in_ruleExpression10906);
            this_LogicalOrExpression_0=ruleLogicalOrExpression();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               
                      current = this_LogicalOrExpression_0; 
                      currentNode = currentNode.getParent();
                  
            }

            }

            if ( backtracking==0 ) {
               resetLookahead(); 
                  	lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruleExpression


    // $ANTLR start entryRuleLogicalOrExpression
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5731:1: entryRuleLogicalOrExpression returns [EObject current=null] : iv_ruleLogicalOrExpression= ruleLogicalOrExpression EOF ;
    public final EObject entryRuleLogicalOrExpression() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleLogicalOrExpression = null;


        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5732:2: (iv_ruleLogicalOrExpression= ruleLogicalOrExpression EOF )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5733:2: iv_ruleLogicalOrExpression= ruleLogicalOrExpression EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getLogicalOrExpressionRule(), currentNode); 
            }
            pushFollow(FOLLOW_ruleLogicalOrExpression_in_entryRuleLogicalOrExpression10940);
            iv_ruleLogicalOrExpression=ruleLogicalOrExpression();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruleLogicalOrExpression; 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleLogicalOrExpression10950); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuleLogicalOrExpression


    // $ANTLR start ruleLogicalOrExpression
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5740:1: ruleLogicalOrExpression returns [EObject current=null] : ( ( (lv_l_0_0= ruleLogicalAndExpression ) ) ( ruleOR ( (lv_l_2_0= ruleLogicalAndExpression ) ) )* ) ;
    public final EObject ruleLogicalOrExpression() throws RecognitionException {
        EObject current = null;

        EObject lv_l_0_0 = null;

        EObject lv_l_2_0 = null;


         EObject temp=null; setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5745:6: ( ( ( (lv_l_0_0= ruleLogicalAndExpression ) ) ( ruleOR ( (lv_l_2_0= ruleLogicalAndExpression ) ) )* ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5746:1: ( ( (lv_l_0_0= ruleLogicalAndExpression ) ) ( ruleOR ( (lv_l_2_0= ruleLogicalAndExpression ) ) )* )
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5746:1: ( ( (lv_l_0_0= ruleLogicalAndExpression ) ) ( ruleOR ( (lv_l_2_0= ruleLogicalAndExpression ) ) )* )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5746:2: ( (lv_l_0_0= ruleLogicalAndExpression ) ) ( ruleOR ( (lv_l_2_0= ruleLogicalAndExpression ) ) )*
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5746:2: ( (lv_l_0_0= ruleLogicalAndExpression ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5747:1: (lv_l_0_0= ruleLogicalAndExpression )
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5747:1: (lv_l_0_0= ruleLogicalAndExpression )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5748:3: lv_l_0_0= ruleLogicalAndExpression
            {
            if ( backtracking==0 ) {
               
              	        currentNode=createCompositeNode(grammarAccess.getLogicalOrExpressionAccess().getLLogicalAndExpressionParserRuleCall_0_0(), currentNode); 
              	    
            }
            pushFollow(FOLLOW_ruleLogicalAndExpression_in_ruleLogicalOrExpression10996);
            lv_l_0_0=ruleLogicalAndExpression();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {

              	        if (current==null) {
              	            current = factory.create(grammarAccess.getLogicalOrExpressionRule().getType().getClassifier());
              	            associateNodeWithAstElement(currentNode.getParent(), current);
              	        }
              	        try {
              	       		add(
              	       			current, 
              	       			"l",
              	        		lv_l_0_0, 
              	        		"LogicalAndExpression", 
              	        		currentNode);
              	        } catch (ValueConverterException vce) {
              				handleValueConverterException(vce);
              	        }
              	        currentNode = currentNode.getParent();
              	    
            }

            }


            }

            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5770:2: ( ruleOR ( (lv_l_2_0= ruleLogicalAndExpression ) ) )*
            loop67:
            do {
                int alt67=2;
                int LA67_0 = input.LA(1);

                if ( ((LA67_0>=161 && LA67_0<=163)) ) {
                    alt67=1;
                }


                switch (alt67) {
            	case 1 :
            	    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5770:3: ruleOR ( (lv_l_2_0= ruleLogicalAndExpression ) )
            	    {
            	    pushFollow(FOLLOW_ruleOR_in_ruleLogicalOrExpression11006);
            	    ruleOR();
            	    _fsp--;
            	    if (failed) return current;
            	    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5770:9: ( (lv_l_2_0= ruleLogicalAndExpression ) )
            	    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5771:1: (lv_l_2_0= ruleLogicalAndExpression )
            	    {
            	    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5771:1: (lv_l_2_0= ruleLogicalAndExpression )
            	    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5772:3: lv_l_2_0= ruleLogicalAndExpression
            	    {
            	    if ( backtracking==0 ) {
            	       
            	      	        currentNode=createCompositeNode(grammarAccess.getLogicalOrExpressionAccess().getLLogicalAndExpressionParserRuleCall_1_1_0(), currentNode); 
            	      	    
            	    }
            	    pushFollow(FOLLOW_ruleLogicalAndExpression_in_ruleLogicalOrExpression11019);
            	    lv_l_2_0=ruleLogicalAndExpression();
            	    _fsp--;
            	    if (failed) return current;
            	    if ( backtracking==0 ) {

            	      	        if (current==null) {
            	      	            current = factory.create(grammarAccess.getLogicalOrExpressionRule().getType().getClassifier());
            	      	            associateNodeWithAstElement(currentNode.getParent(), current);
            	      	        }
            	      	        try {
            	      	       		add(
            	      	       			current, 
            	      	       			"l",
            	      	        		lv_l_2_0, 
            	      	        		"LogicalAndExpression", 
            	      	        		currentNode);
            	      	        } catch (ValueConverterException vce) {
            	      				handleValueConverterException(vce);
            	      	        }
            	      	        currentNode = currentNode.getParent();
            	      	    
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop67;
                }
            } while (true);


            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
                  	lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruleLogicalOrExpression


    // $ANTLR start entryRuleLogicalAndExpression
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5802:1: entryRuleLogicalAndExpression returns [EObject current=null] : iv_ruleLogicalAndExpression= ruleLogicalAndExpression EOF ;
    public final EObject entryRuleLogicalAndExpression() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleLogicalAndExpression = null;


        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5803:2: (iv_ruleLogicalAndExpression= ruleLogicalAndExpression EOF )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5804:2: iv_ruleLogicalAndExpression= ruleLogicalAndExpression EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getLogicalAndExpressionRule(), currentNode); 
            }
            pushFollow(FOLLOW_ruleLogicalAndExpression_in_entryRuleLogicalAndExpression11057);
            iv_ruleLogicalAndExpression=ruleLogicalAndExpression();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruleLogicalAndExpression; 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleLogicalAndExpression11067); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuleLogicalAndExpression


    // $ANTLR start ruleLogicalAndExpression
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5811:1: ruleLogicalAndExpression returns [EObject current=null] : ( ( (lv_n_0_0= ruleNegatedExpression ) ) ( ruleAND ( (lv_n_2_0= ruleNegatedExpression ) ) )* ) ;
    public final EObject ruleLogicalAndExpression() throws RecognitionException {
        EObject current = null;

        EObject lv_n_0_0 = null;

        EObject lv_n_2_0 = null;


         EObject temp=null; setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5816:6: ( ( ( (lv_n_0_0= ruleNegatedExpression ) ) ( ruleAND ( (lv_n_2_0= ruleNegatedExpression ) ) )* ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5817:1: ( ( (lv_n_0_0= ruleNegatedExpression ) ) ( ruleAND ( (lv_n_2_0= ruleNegatedExpression ) ) )* )
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5817:1: ( ( (lv_n_0_0= ruleNegatedExpression ) ) ( ruleAND ( (lv_n_2_0= ruleNegatedExpression ) ) )* )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5817:2: ( (lv_n_0_0= ruleNegatedExpression ) ) ( ruleAND ( (lv_n_2_0= ruleNegatedExpression ) ) )*
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5817:2: ( (lv_n_0_0= ruleNegatedExpression ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5818:1: (lv_n_0_0= ruleNegatedExpression )
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5818:1: (lv_n_0_0= ruleNegatedExpression )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5819:3: lv_n_0_0= ruleNegatedExpression
            {
            if ( backtracking==0 ) {
               
              	        currentNode=createCompositeNode(grammarAccess.getLogicalAndExpressionAccess().getNNegatedExpressionParserRuleCall_0_0(), currentNode); 
              	    
            }
            pushFollow(FOLLOW_ruleNegatedExpression_in_ruleLogicalAndExpression11113);
            lv_n_0_0=ruleNegatedExpression();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {

              	        if (current==null) {
              	            current = factory.create(grammarAccess.getLogicalAndExpressionRule().getType().getClassifier());
              	            associateNodeWithAstElement(currentNode.getParent(), current);
              	        }
              	        try {
              	       		add(
              	       			current, 
              	       			"n",
              	        		lv_n_0_0, 
              	        		"NegatedExpression", 
              	        		currentNode);
              	        } catch (ValueConverterException vce) {
              				handleValueConverterException(vce);
              	        }
              	        currentNode = currentNode.getParent();
              	    
            }

            }


            }

            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5841:2: ( ruleAND ( (lv_n_2_0= ruleNegatedExpression ) ) )*
            loop68:
            do {
                int alt68=2;
                int LA68_0 = input.LA(1);

                if ( ((LA68_0>=164 && LA68_0<=166)) ) {
                    alt68=1;
                }


                switch (alt68) {
            	case 1 :
            	    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5841:3: ruleAND ( (lv_n_2_0= ruleNegatedExpression ) )
            	    {
            	    pushFollow(FOLLOW_ruleAND_in_ruleLogicalAndExpression11123);
            	    ruleAND();
            	    _fsp--;
            	    if (failed) return current;
            	    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5841:10: ( (lv_n_2_0= ruleNegatedExpression ) )
            	    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5842:1: (lv_n_2_0= ruleNegatedExpression )
            	    {
            	    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5842:1: (lv_n_2_0= ruleNegatedExpression )
            	    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5843:3: lv_n_2_0= ruleNegatedExpression
            	    {
            	    if ( backtracking==0 ) {
            	       
            	      	        currentNode=createCompositeNode(grammarAccess.getLogicalAndExpressionAccess().getNNegatedExpressionParserRuleCall_1_1_0(), currentNode); 
            	      	    
            	    }
            	    pushFollow(FOLLOW_ruleNegatedExpression_in_ruleLogicalAndExpression11136);
            	    lv_n_2_0=ruleNegatedExpression();
            	    _fsp--;
            	    if (failed) return current;
            	    if ( backtracking==0 ) {

            	      	        if (current==null) {
            	      	            current = factory.create(grammarAccess.getLogicalAndExpressionRule().getType().getClassifier());
            	      	            associateNodeWithAstElement(currentNode.getParent(), current);
            	      	        }
            	      	        try {
            	      	       		add(
            	      	       			current, 
            	      	       			"n",
            	      	        		lv_n_2_0, 
            	      	        		"NegatedExpression", 
            	      	        		currentNode);
            	      	        } catch (ValueConverterException vce) {
            	      				handleValueConverterException(vce);
            	      	        }
            	      	        currentNode = currentNode.getParent();
            	      	    
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop68;
                }
            } while (true);


            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
                  	lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruleLogicalAndExpression


    // $ANTLR start entryRuleNegatedExpression
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5873:1: entryRuleNegatedExpression returns [EObject current=null] : iv_ruleNegatedExpression= ruleNegatedExpression EOF ;
    public final EObject entryRuleNegatedExpression() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleNegatedExpression = null;


        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5874:2: (iv_ruleNegatedExpression= ruleNegatedExpression EOF )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5875:2: iv_ruleNegatedExpression= ruleNegatedExpression EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getNegatedExpressionRule(), currentNode); 
            }
            pushFollow(FOLLOW_ruleNegatedExpression_in_entryRuleNegatedExpression11174);
            iv_ruleNegatedExpression=ruleNegatedExpression();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruleNegatedExpression; 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleNegatedExpression11184); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuleNegatedExpression


    // $ANTLR start ruleNegatedExpression
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5882:1: ruleNegatedExpression returns [EObject current=null] : ( ( ruleNOT ( (lv_n_1_0= ruleNegatedExpression ) ) ) | this_EqualityExpression_2= ruleEqualityExpression ) ;
    public final EObject ruleNegatedExpression() throws RecognitionException {
        EObject current = null;

        EObject lv_n_1_0 = null;

        EObject this_EqualityExpression_2 = null;


         EObject temp=null; setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5887:6: ( ( ( ruleNOT ( (lv_n_1_0= ruleNegatedExpression ) ) ) | this_EqualityExpression_2= ruleEqualityExpression ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5888:1: ( ( ruleNOT ( (lv_n_1_0= ruleNegatedExpression ) ) ) | this_EqualityExpression_2= ruleEqualityExpression )
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5888:1: ( ( ruleNOT ( (lv_n_1_0= ruleNegatedExpression ) ) ) | this_EqualityExpression_2= ruleEqualityExpression )
            int alt69=2;
            int LA69_0 = input.LA(1);

            if ( (LA69_0==16||(LA69_0>=167 && LA69_0<=168)) ) {
                alt69=1;
            }
            else if ( ((LA69_0>=RULE_ID && LA69_0<=RULE_HEX)||(LA69_0>=17 && LA69_0<=18)||LA69_0==26||LA69_0==36||(LA69_0>=38 && LA69_0<=40)||(LA69_0>=42 && LA69_0<=43)||LA69_0==45||(LA69_0>=54 && LA69_0<=57)||LA69_0==59||(LA69_0>=62 && LA69_0<=63)||(LA69_0>=75 && LA69_0<=78)||(LA69_0>=92 && LA69_0<=94)||(LA69_0>=125 && LA69_0<=127)||(LA69_0>=177 && LA69_0<=179)||(LA69_0>=186 && LA69_0<=194)||(LA69_0>=201 && LA69_0<=230)||(LA69_0>=240 && LA69_0<=249)) ) {
                alt69=2;
            }
            else {
                if (backtracking>0) {failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("5888:1: ( ( ruleNOT ( (lv_n_1_0= ruleNegatedExpression ) ) ) | this_EqualityExpression_2= ruleEqualityExpression )", 69, 0, input);

                throw nvae;
            }
            switch (alt69) {
                case 1 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5888:2: ( ruleNOT ( (lv_n_1_0= ruleNegatedExpression ) ) )
                    {
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5888:2: ( ruleNOT ( (lv_n_1_0= ruleNegatedExpression ) ) )
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5888:3: ruleNOT ( (lv_n_1_0= ruleNegatedExpression ) )
                    {
                    pushFollow(FOLLOW_ruleNOT_in_ruleNegatedExpression11219);
                    ruleNOT();
                    _fsp--;
                    if (failed) return current;
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5888:10: ( (lv_n_1_0= ruleNegatedExpression ) )
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5889:1: (lv_n_1_0= ruleNegatedExpression )
                    {
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5889:1: (lv_n_1_0= ruleNegatedExpression )
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5890:3: lv_n_1_0= ruleNegatedExpression
                    {
                    if ( backtracking==0 ) {
                       
                      	        currentNode=createCompositeNode(grammarAccess.getNegatedExpressionAccess().getNNegatedExpressionParserRuleCall_0_1_0(), currentNode); 
                      	    
                    }
                    pushFollow(FOLLOW_ruleNegatedExpression_in_ruleNegatedExpression11232);
                    lv_n_1_0=ruleNegatedExpression();
                    _fsp--;
                    if (failed) return current;
                    if ( backtracking==0 ) {

                      	        if (current==null) {
                      	            current = factory.create(grammarAccess.getNegatedExpressionRule().getType().getClassifier());
                      	            associateNodeWithAstElement(currentNode.getParent(), current);
                      	        }
                      	        try {
                      	       		set(
                      	       			current, 
                      	       			"n",
                      	        		lv_n_1_0, 
                      	        		"NegatedExpression", 
                      	        		currentNode);
                      	        } catch (ValueConverterException vce) {
                      				handleValueConverterException(vce);
                      	        }
                      	        currentNode = currentNode.getParent();
                      	    
                    }

                    }


                    }


                    }


                    }
                    break;
                case 2 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5914:2: this_EqualityExpression_2= ruleEqualityExpression
                    {
                    if ( backtracking==0 ) {
                       
                      	  /* */ 
                      	
                    }
                    if ( backtracking==0 ) {
                       
                              currentNode=createCompositeNode(grammarAccess.getNegatedExpressionAccess().getEqualityExpressionParserRuleCall_1(), currentNode); 
                          
                    }
                    pushFollow(FOLLOW_ruleEqualityExpression_in_ruleNegatedExpression11264);
                    this_EqualityExpression_2=ruleEqualityExpression();
                    _fsp--;
                    if (failed) return current;
                    if ( backtracking==0 ) {
                       
                              current = this_EqualityExpression_2; 
                              currentNode = currentNode.getParent();
                          
                    }

                    }
                    break;

            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
                  	lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruleNegatedExpression


    // $ANTLR start entryRuleEqualityExpression
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5933:1: entryRuleEqualityExpression returns [EObject current=null] : iv_ruleEqualityExpression= ruleEqualityExpression EOF ;
    public final EObject entryRuleEqualityExpression() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleEqualityExpression = null;


        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5934:2: (iv_ruleEqualityExpression= ruleEqualityExpression EOF )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5935:2: iv_ruleEqualityExpression= ruleEqualityExpression EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getEqualityExpressionRule(), currentNode); 
            }
            pushFollow(FOLLOW_ruleEqualityExpression_in_entryRuleEqualityExpression11299);
            iv_ruleEqualityExpression=ruleEqualityExpression();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruleEqualityExpression; 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleEqualityExpression11309); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuleEqualityExpression


    // $ANTLR start ruleEqualityExpression
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5942:1: ruleEqualityExpression returns [EObject current=null] : ( ( (lv_r_0_0= ruleRelationalExpression ) ) ( ( '=' | ( ruleIS ( ruleNOT )? ) | '!=' | '<>' ) ( (lv_r_6_0= ruleRelationalExpression ) ) )* ) ;
    public final EObject ruleEqualityExpression() throws RecognitionException {
        EObject current = null;

        EObject lv_r_0_0 = null;

        EObject lv_r_6_0 = null;


         EObject temp=null; setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5947:6: ( ( ( (lv_r_0_0= ruleRelationalExpression ) ) ( ( '=' | ( ruleIS ( ruleNOT )? ) | '!=' | '<>' ) ( (lv_r_6_0= ruleRelationalExpression ) ) )* ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5948:1: ( ( (lv_r_0_0= ruleRelationalExpression ) ) ( ( '=' | ( ruleIS ( ruleNOT )? ) | '!=' | '<>' ) ( (lv_r_6_0= ruleRelationalExpression ) ) )* )
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5948:1: ( ( (lv_r_0_0= ruleRelationalExpression ) ) ( ( '=' | ( ruleIS ( ruleNOT )? ) | '!=' | '<>' ) ( (lv_r_6_0= ruleRelationalExpression ) ) )* )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5948:2: ( (lv_r_0_0= ruleRelationalExpression ) ) ( ( '=' | ( ruleIS ( ruleNOT )? ) | '!=' | '<>' ) ( (lv_r_6_0= ruleRelationalExpression ) ) )*
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5948:2: ( (lv_r_0_0= ruleRelationalExpression ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5949:1: (lv_r_0_0= ruleRelationalExpression )
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5949:1: (lv_r_0_0= ruleRelationalExpression )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5950:3: lv_r_0_0= ruleRelationalExpression
            {
            if ( backtracking==0 ) {
               
              	        currentNode=createCompositeNode(grammarAccess.getEqualityExpressionAccess().getRRelationalExpressionParserRuleCall_0_0(), currentNode); 
              	    
            }
            pushFollow(FOLLOW_ruleRelationalExpression_in_ruleEqualityExpression11355);
            lv_r_0_0=ruleRelationalExpression();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {

              	        if (current==null) {
              	            current = factory.create(grammarAccess.getEqualityExpressionRule().getType().getClassifier());
              	            associateNodeWithAstElement(currentNode.getParent(), current);
              	        }
              	        try {
              	       		add(
              	       			current, 
              	       			"r",
              	        		lv_r_0_0, 
              	        		"RelationalExpression", 
              	        		currentNode);
              	        } catch (ValueConverterException vce) {
              				handleValueConverterException(vce);
              	        }
              	        currentNode = currentNode.getParent();
              	    
            }

            }


            }

            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5972:2: ( ( '=' | ( ruleIS ( ruleNOT )? ) | '!=' | '<>' ) ( (lv_r_6_0= ruleRelationalExpression ) ) )*
            loop72:
            do {
                int alt72=2;
                int LA72_0 = input.LA(1);

                if ( (LA72_0==13||LA72_0==50||LA72_0==52||(LA72_0>=169 && LA72_0<=171)) ) {
                    alt72=1;
                }


                switch (alt72) {
            	case 1 :
            	    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5972:3: ( '=' | ( ruleIS ( ruleNOT )? ) | '!=' | '<>' ) ( (lv_r_6_0= ruleRelationalExpression ) )
            	    {
            	    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5972:3: ( '=' | ( ruleIS ( ruleNOT )? ) | '!=' | '<>' )
            	    int alt71=4;
            	    switch ( input.LA(1) ) {
            	    case 13:
            	        {
            	        alt71=1;
            	        }
            	        break;
            	    case 169:
            	    case 170:
            	    case 171:
            	        {
            	        alt71=2;
            	        }
            	        break;
            	    case 50:
            	        {
            	        alt71=3;
            	        }
            	        break;
            	    case 52:
            	        {
            	        alt71=4;
            	        }
            	        break;
            	    default:
            	        if (backtracking>0) {failed=true; return current;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("5972:3: ( '=' | ( ruleIS ( ruleNOT )? ) | '!=' | '<>' )", 71, 0, input);

            	        throw nvae;
            	    }

            	    switch (alt71) {
            	        case 1 :
            	            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5972:5: '='
            	            {
            	            match(input,13,FOLLOW_13_in_ruleEqualityExpression11367); if (failed) return current;
            	            if ( backtracking==0 ) {

            	                      createLeafNode(grammarAccess.getEqualityExpressionAccess().getEqualsSignKeyword_1_0_0(), null); 
            	                  
            	            }

            	            }
            	            break;
            	        case 2 :
            	            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5977:6: ( ruleIS ( ruleNOT )? )
            	            {
            	            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5977:6: ( ruleIS ( ruleNOT )? )
            	            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5977:7: ruleIS ( ruleNOT )?
            	            {
            	            pushFollow(FOLLOW_ruleIS_in_ruleEqualityExpression11383);
            	            ruleIS();
            	            _fsp--;
            	            if (failed) return current;
            	            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5977:13: ( ruleNOT )?
            	            int alt70=2;
            	            int LA70_0 = input.LA(1);

            	            if ( (LA70_0==16||(LA70_0>=167 && LA70_0<=168)) ) {
            	                alt70=1;
            	            }
            	            switch (alt70) {
            	                case 1 :
            	                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5977:14: ruleNOT
            	                    {
            	                    pushFollow(FOLLOW_ruleNOT_in_ruleEqualityExpression11385);
            	                    ruleNOT();
            	                    _fsp--;
            	                    if (failed) return current;

            	                    }
            	                    break;

            	            }


            	            }


            	            }
            	            break;
            	        case 3 :
            	            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5978:7: '!='
            	            {
            	            match(input,50,FOLLOW_50_in_ruleEqualityExpression11396); if (failed) return current;
            	            if ( backtracking==0 ) {

            	                      createLeafNode(grammarAccess.getEqualityExpressionAccess().getExclamationMarkEqualsSignKeyword_1_0_2(), null); 
            	                  
            	            }

            	            }
            	            break;
            	        case 4 :
            	            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5983:7: '<>'
            	            {
            	            match(input,52,FOLLOW_52_in_ruleEqualityExpression11412); if (failed) return current;
            	            if ( backtracking==0 ) {

            	                      createLeafNode(grammarAccess.getEqualityExpressionAccess().getLessThanSignGreaterThanSignKeyword_1_0_3(), null); 
            	                  
            	            }

            	            }
            	            break;

            	    }

            	    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5987:2: ( (lv_r_6_0= ruleRelationalExpression ) )
            	    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5988:1: (lv_r_6_0= ruleRelationalExpression )
            	    {
            	    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5988:1: (lv_r_6_0= ruleRelationalExpression )
            	    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:5989:3: lv_r_6_0= ruleRelationalExpression
            	    {
            	    if ( backtracking==0 ) {
            	       
            	      	        currentNode=createCompositeNode(grammarAccess.getEqualityExpressionAccess().getRRelationalExpressionParserRuleCall_1_1_0(), currentNode); 
            	      	    
            	    }
            	    pushFollow(FOLLOW_ruleRelationalExpression_in_ruleEqualityExpression11434);
            	    lv_r_6_0=ruleRelationalExpression();
            	    _fsp--;
            	    if (failed) return current;
            	    if ( backtracking==0 ) {

            	      	        if (current==null) {
            	      	            current = factory.create(grammarAccess.getEqualityExpressionRule().getType().getClassifier());
            	      	            associateNodeWithAstElement(currentNode.getParent(), current);
            	      	        }
            	      	        try {
            	      	       		add(
            	      	       			current, 
            	      	       			"r",
            	      	        		lv_r_6_0, 
            	      	        		"RelationalExpression", 
            	      	        		currentNode);
            	      	        } catch (ValueConverterException vce) {
            	      				handleValueConverterException(vce);
            	      	        }
            	      	        currentNode = currentNode.getParent();
            	      	    
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop72;
                }
            } while (true);


            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
                  	lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruleEqualityExpression


    // $ANTLR start entryRuleRelationalExpression
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6019:1: entryRuleRelationalExpression returns [EObject current=null] : iv_ruleRelationalExpression= ruleRelationalExpression EOF ;
    public final EObject entryRuleRelationalExpression() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleRelationalExpression = null;


        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6020:2: (iv_ruleRelationalExpression= ruleRelationalExpression EOF )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6021:2: iv_ruleRelationalExpression= ruleRelationalExpression EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getRelationalExpressionRule(), currentNode); 
            }
            pushFollow(FOLLOW_ruleRelationalExpression_in_entryRuleRelationalExpression11472);
            iv_ruleRelationalExpression=ruleRelationalExpression();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruleRelationalExpression; 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleRelationalExpression11482); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuleRelationalExpression


    // $ANTLR start ruleRelationalExpression
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6028:1: ruleRelationalExpression returns [EObject current=null] : (this_Concatenation_0= ruleConcatenation ( ( ( '<' | '>' | '<=' | '>=' ) ( (lv_a_5_0= ruleAdditiveExpression ) ) )* | ( ( ruleNOT )? ( ( ruleIN ( (lv_i_8_0= ruleCompoundExpr ) ) ) | ( ruleBETWEEN ( (lv_b_10_0= ruleBetweenList ) ) ) | ( ruleLIKE ( (lv_c_12_0= ruleConcatenation ) ) ( (lv_l_13_0= ruleLikeEscape ) ) ) | ( ruleMEMBER ( ruleOF )? ( (lv_p_16_0= rulePath ) ) ) ) ) ) ) ;
    public final EObject ruleRelationalExpression() throws RecognitionException {
        EObject current = null;

        EObject this_Concatenation_0 = null;

        EObject lv_a_5_0 = null;

        EObject lv_i_8_0 = null;

        EObject lv_b_10_0 = null;

        EObject lv_c_12_0 = null;

        EObject lv_l_13_0 = null;

        AntlrDatatypeRuleToken lv_p_16_0 = null;


         EObject temp=null; setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6033:6: ( (this_Concatenation_0= ruleConcatenation ( ( ( '<' | '>' | '<=' | '>=' ) ( (lv_a_5_0= ruleAdditiveExpression ) ) )* | ( ( ruleNOT )? ( ( ruleIN ( (lv_i_8_0= ruleCompoundExpr ) ) ) | ( ruleBETWEEN ( (lv_b_10_0= ruleBetweenList ) ) ) | ( ruleLIKE ( (lv_c_12_0= ruleConcatenation ) ) ( (lv_l_13_0= ruleLikeEscape ) ) ) | ( ruleMEMBER ( ruleOF )? ( (lv_p_16_0= rulePath ) ) ) ) ) ) ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6034:1: (this_Concatenation_0= ruleConcatenation ( ( ( '<' | '>' | '<=' | '>=' ) ( (lv_a_5_0= ruleAdditiveExpression ) ) )* | ( ( ruleNOT )? ( ( ruleIN ( (lv_i_8_0= ruleCompoundExpr ) ) ) | ( ruleBETWEEN ( (lv_b_10_0= ruleBetweenList ) ) ) | ( ruleLIKE ( (lv_c_12_0= ruleConcatenation ) ) ( (lv_l_13_0= ruleLikeEscape ) ) ) | ( ruleMEMBER ( ruleOF )? ( (lv_p_16_0= rulePath ) ) ) ) ) ) )
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6034:1: (this_Concatenation_0= ruleConcatenation ( ( ( '<' | '>' | '<=' | '>=' ) ( (lv_a_5_0= ruleAdditiveExpression ) ) )* | ( ( ruleNOT )? ( ( ruleIN ( (lv_i_8_0= ruleCompoundExpr ) ) ) | ( ruleBETWEEN ( (lv_b_10_0= ruleBetweenList ) ) ) | ( ruleLIKE ( (lv_c_12_0= ruleConcatenation ) ) ( (lv_l_13_0= ruleLikeEscape ) ) ) | ( ruleMEMBER ( ruleOF )? ( (lv_p_16_0= rulePath ) ) ) ) ) ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6035:2: this_Concatenation_0= ruleConcatenation ( ( ( '<' | '>' | '<=' | '>=' ) ( (lv_a_5_0= ruleAdditiveExpression ) ) )* | ( ( ruleNOT )? ( ( ruleIN ( (lv_i_8_0= ruleCompoundExpr ) ) ) | ( ruleBETWEEN ( (lv_b_10_0= ruleBetweenList ) ) ) | ( ruleLIKE ( (lv_c_12_0= ruleConcatenation ) ) ( (lv_l_13_0= ruleLikeEscape ) ) ) | ( ruleMEMBER ( ruleOF )? ( (lv_p_16_0= rulePath ) ) ) ) ) )
            {
            if ( backtracking==0 ) {
               
              	  /* */ 
              	
            }
            if ( backtracking==0 ) {
               
                      currentNode=createCompositeNode(grammarAccess.getRelationalExpressionAccess().getConcatenationParserRuleCall_0(), currentNode); 
                  
            }
            pushFollow(FOLLOW_ruleConcatenation_in_ruleRelationalExpression11532);
            this_Concatenation_0=ruleConcatenation();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               
                      current = this_Concatenation_0; 
                      currentNode = currentNode.getParent();
                  
            }
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6046:1: ( ( ( '<' | '>' | '<=' | '>=' ) ( (lv_a_5_0= ruleAdditiveExpression ) ) )* | ( ( ruleNOT )? ( ( ruleIN ( (lv_i_8_0= ruleCompoundExpr ) ) ) | ( ruleBETWEEN ( (lv_b_10_0= ruleBetweenList ) ) ) | ( ruleLIKE ( (lv_c_12_0= ruleConcatenation ) ) ( (lv_l_13_0= ruleLikeEscape ) ) ) | ( ruleMEMBER ( ruleOF )? ( (lv_p_16_0= rulePath ) ) ) ) ) )
            int alt78=2;
            int LA78_0 = input.LA(1);

            if ( (LA78_0==EOF||LA78_0==13||(LA78_0>=28 && LA78_0<=29)||LA78_0==33||LA78_0==44||(LA78_0>=46 && LA78_0<=50)||LA78_0==52||LA78_0==71||(LA78_0>=92 && LA78_0<=100)||(LA78_0>=104 && LA78_0<=112)||(LA78_0>=128 && LA78_0<=130)||(LA78_0>=134 && LA78_0<=139)||(LA78_0>=143 && LA78_0<=166)||(LA78_0>=169 && LA78_0<=171)||(LA78_0>=195 && LA78_0<=197)) ) {
                alt78=1;
            }
            else if ( (LA78_0==16||LA78_0==53||(LA78_0>=119 && LA78_0<=121)||(LA78_0>=167 && LA78_0<=168)||(LA78_0>=172 && LA78_0<=179)) ) {
                alt78=2;
            }
            else {
                if (backtracking>0) {failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("6046:1: ( ( ( '<' | '>' | '<=' | '>=' ) ( (lv_a_5_0= ruleAdditiveExpression ) ) )* | ( ( ruleNOT )? ( ( ruleIN ( (lv_i_8_0= ruleCompoundExpr ) ) ) | ( ruleBETWEEN ( (lv_b_10_0= ruleBetweenList ) ) ) | ( ruleLIKE ( (lv_c_12_0= ruleConcatenation ) ) ( (lv_l_13_0= ruleLikeEscape ) ) ) | ( ruleMEMBER ( ruleOF )? ( (lv_p_16_0= rulePath ) ) ) ) ) )", 78, 0, input);

                throw nvae;
            }
            switch (alt78) {
                case 1 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6046:2: ( ( '<' | '>' | '<=' | '>=' ) ( (lv_a_5_0= ruleAdditiveExpression ) ) )*
                    {
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6046:2: ( ( '<' | '>' | '<=' | '>=' ) ( (lv_a_5_0= ruleAdditiveExpression ) ) )*
                    loop74:
                    do {
                        int alt74=2;
                        int LA74_0 = input.LA(1);

                        if ( ((LA74_0>=46 && LA74_0<=49)) ) {
                            alt74=1;
                        }


                        switch (alt74) {
                    	case 1 :
                    	    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6046:3: ( '<' | '>' | '<=' | '>=' ) ( (lv_a_5_0= ruleAdditiveExpression ) )
                    	    {
                    	    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6046:3: ( '<' | '>' | '<=' | '>=' )
                    	    int alt73=4;
                    	    switch ( input.LA(1) ) {
                    	    case 46:
                    	        {
                    	        alt73=1;
                    	        }
                    	        break;
                    	    case 47:
                    	        {
                    	        alt73=2;
                    	        }
                    	        break;
                    	    case 48:
                    	        {
                    	        alt73=3;
                    	        }
                    	        break;
                    	    case 49:
                    	        {
                    	        alt73=4;
                    	        }
                    	        break;
                    	    default:
                    	        if (backtracking>0) {failed=true; return current;}
                    	        NoViableAltException nvae =
                    	            new NoViableAltException("6046:3: ( '<' | '>' | '<=' | '>=' )", 73, 0, input);

                    	        throw nvae;
                    	    }

                    	    switch (alt73) {
                    	        case 1 :
                    	            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6046:5: '<'
                    	            {
                    	            match(input,46,FOLLOW_46_in_ruleRelationalExpression11544); if (failed) return current;
                    	            if ( backtracking==0 ) {

                    	                      createLeafNode(grammarAccess.getRelationalExpressionAccess().getLessThanSignKeyword_1_0_0_0(), null); 
                    	                  
                    	            }

                    	            }
                    	            break;
                    	        case 2 :
                    	            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6051:7: '>'
                    	            {
                    	            match(input,47,FOLLOW_47_in_ruleRelationalExpression11560); if (failed) return current;
                    	            if ( backtracking==0 ) {

                    	                      createLeafNode(grammarAccess.getRelationalExpressionAccess().getGreaterThanSignKeyword_1_0_0_1(), null); 
                    	                  
                    	            }

                    	            }
                    	            break;
                    	        case 3 :
                    	            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6056:7: '<='
                    	            {
                    	            match(input,48,FOLLOW_48_in_ruleRelationalExpression11576); if (failed) return current;
                    	            if ( backtracking==0 ) {

                    	                      createLeafNode(grammarAccess.getRelationalExpressionAccess().getLessThanSignEqualsSignKeyword_1_0_0_2(), null); 
                    	                  
                    	            }

                    	            }
                    	            break;
                    	        case 4 :
                    	            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6061:7: '>='
                    	            {
                    	            match(input,49,FOLLOW_49_in_ruleRelationalExpression11592); if (failed) return current;
                    	            if ( backtracking==0 ) {

                    	                      createLeafNode(grammarAccess.getRelationalExpressionAccess().getGreaterThanSignEqualsSignKeyword_1_0_0_3(), null); 
                    	                  
                    	            }

                    	            }
                    	            break;

                    	    }

                    	    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6065:2: ( (lv_a_5_0= ruleAdditiveExpression ) )
                    	    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6066:1: (lv_a_5_0= ruleAdditiveExpression )
                    	    {
                    	    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6066:1: (lv_a_5_0= ruleAdditiveExpression )
                    	    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6067:3: lv_a_5_0= ruleAdditiveExpression
                    	    {
                    	    if ( backtracking==0 ) {
                    	       
                    	      	        currentNode=createCompositeNode(grammarAccess.getRelationalExpressionAccess().getAAdditiveExpressionParserRuleCall_1_0_1_0(), currentNode); 
                    	      	    
                    	    }
                    	    pushFollow(FOLLOW_ruleAdditiveExpression_in_ruleRelationalExpression11614);
                    	    lv_a_5_0=ruleAdditiveExpression();
                    	    _fsp--;
                    	    if (failed) return current;
                    	    if ( backtracking==0 ) {

                    	      	        if (current==null) {
                    	      	            current = factory.create(grammarAccess.getRelationalExpressionRule().getType().getClassifier());
                    	      	            associateNodeWithAstElement(currentNode.getParent(), current);
                    	      	        }
                    	      	        try {
                    	      	       		add(
                    	      	       			current, 
                    	      	       			"a",
                    	      	        		lv_a_5_0, 
                    	      	        		"AdditiveExpression", 
                    	      	        		currentNode);
                    	      	        } catch (ValueConverterException vce) {
                    	      				handleValueConverterException(vce);
                    	      	        }
                    	      	        currentNode = currentNode.getParent();
                    	      	    
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop74;
                        }
                    } while (true);


                    }
                    break;
                case 2 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6090:6: ( ( ruleNOT )? ( ( ruleIN ( (lv_i_8_0= ruleCompoundExpr ) ) ) | ( ruleBETWEEN ( (lv_b_10_0= ruleBetweenList ) ) ) | ( ruleLIKE ( (lv_c_12_0= ruleConcatenation ) ) ( (lv_l_13_0= ruleLikeEscape ) ) ) | ( ruleMEMBER ( ruleOF )? ( (lv_p_16_0= rulePath ) ) ) ) )
                    {
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6090:6: ( ( ruleNOT )? ( ( ruleIN ( (lv_i_8_0= ruleCompoundExpr ) ) ) | ( ruleBETWEEN ( (lv_b_10_0= ruleBetweenList ) ) ) | ( ruleLIKE ( (lv_c_12_0= ruleConcatenation ) ) ( (lv_l_13_0= ruleLikeEscape ) ) ) | ( ruleMEMBER ( ruleOF )? ( (lv_p_16_0= rulePath ) ) ) ) )
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6090:7: ( ruleNOT )? ( ( ruleIN ( (lv_i_8_0= ruleCompoundExpr ) ) ) | ( ruleBETWEEN ( (lv_b_10_0= ruleBetweenList ) ) ) | ( ruleLIKE ( (lv_c_12_0= ruleConcatenation ) ) ( (lv_l_13_0= ruleLikeEscape ) ) ) | ( ruleMEMBER ( ruleOF )? ( (lv_p_16_0= rulePath ) ) ) )
                    {
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6090:7: ( ruleNOT )?
                    int alt75=2;
                    int LA75_0 = input.LA(1);

                    if ( (LA75_0==16||(LA75_0>=167 && LA75_0<=168)) ) {
                        alt75=1;
                    }
                    switch (alt75) {
                        case 1 :
                            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6090:8: ruleNOT
                            {
                            pushFollow(FOLLOW_ruleNOT_in_ruleRelationalExpression11633);
                            ruleNOT();
                            _fsp--;
                            if (failed) return current;

                            }
                            break;

                    }

                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6090:17: ( ( ruleIN ( (lv_i_8_0= ruleCompoundExpr ) ) ) | ( ruleBETWEEN ( (lv_b_10_0= ruleBetweenList ) ) ) | ( ruleLIKE ( (lv_c_12_0= ruleConcatenation ) ) ( (lv_l_13_0= ruleLikeEscape ) ) ) | ( ruleMEMBER ( ruleOF )? ( (lv_p_16_0= rulePath ) ) ) )
                    int alt77=4;
                    switch ( input.LA(1) ) {
                    case 119:
                    case 120:
                    case 121:
                        {
                        alt77=1;
                        }
                        break;
                    case 172:
                    case 173:
                    case 174:
                        {
                        alt77=2;
                        }
                        break;
                    case 53:
                    case 175:
                    case 176:
                        {
                        alt77=3;
                        }
                        break;
                    case 177:
                    case 178:
                    case 179:
                        {
                        alt77=4;
                        }
                        break;
                    default:
                        if (backtracking>0) {failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("6090:17: ( ( ruleIN ( (lv_i_8_0= ruleCompoundExpr ) ) ) | ( ruleBETWEEN ( (lv_b_10_0= ruleBetweenList ) ) ) | ( ruleLIKE ( (lv_c_12_0= ruleConcatenation ) ) ( (lv_l_13_0= ruleLikeEscape ) ) ) | ( ruleMEMBER ( ruleOF )? ( (lv_p_16_0= rulePath ) ) ) )", 77, 0, input);

                        throw nvae;
                    }

                    switch (alt77) {
                        case 1 :
                            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6090:18: ( ruleIN ( (lv_i_8_0= ruleCompoundExpr ) ) )
                            {
                            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6090:18: ( ruleIN ( (lv_i_8_0= ruleCompoundExpr ) ) )
                            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6090:19: ruleIN ( (lv_i_8_0= ruleCompoundExpr ) )
                            {
                            pushFollow(FOLLOW_ruleIN_in_ruleRelationalExpression11638);
                            ruleIN();
                            _fsp--;
                            if (failed) return current;
                            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6090:25: ( (lv_i_8_0= ruleCompoundExpr ) )
                            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6091:1: (lv_i_8_0= ruleCompoundExpr )
                            {
                            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6091:1: (lv_i_8_0= ruleCompoundExpr )
                            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6092:3: lv_i_8_0= ruleCompoundExpr
                            {
                            if ( backtracking==0 ) {
                               
                              	        currentNode=createCompositeNode(grammarAccess.getRelationalExpressionAccess().getICompoundExprParserRuleCall_1_1_1_0_1_0(), currentNode); 
                              	    
                            }
                            pushFollow(FOLLOW_ruleCompoundExpr_in_ruleRelationalExpression11651);
                            lv_i_8_0=ruleCompoundExpr();
                            _fsp--;
                            if (failed) return current;
                            if ( backtracking==0 ) {

                              	        if (current==null) {
                              	            current = factory.create(grammarAccess.getRelationalExpressionRule().getType().getClassifier());
                              	            associateNodeWithAstElement(currentNode.getParent(), current);
                              	        }
                              	        try {
                              	       		set(
                              	       			current, 
                              	       			"i",
                              	        		lv_i_8_0, 
                              	        		"CompoundExpr", 
                              	        		currentNode);
                              	        } catch (ValueConverterException vce) {
                              				handleValueConverterException(vce);
                              	        }
                              	        currentNode = currentNode.getParent();
                              	    
                            }

                            }


                            }


                            }


                            }
                            break;
                        case 2 :
                            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6115:6: ( ruleBETWEEN ( (lv_b_10_0= ruleBetweenList ) ) )
                            {
                            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6115:6: ( ruleBETWEEN ( (lv_b_10_0= ruleBetweenList ) ) )
                            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6115:7: ruleBETWEEN ( (lv_b_10_0= ruleBetweenList ) )
                            {
                            pushFollow(FOLLOW_ruleBETWEEN_in_ruleRelationalExpression11668);
                            ruleBETWEEN();
                            _fsp--;
                            if (failed) return current;
                            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6115:18: ( (lv_b_10_0= ruleBetweenList ) )
                            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6116:1: (lv_b_10_0= ruleBetweenList )
                            {
                            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6116:1: (lv_b_10_0= ruleBetweenList )
                            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6117:3: lv_b_10_0= ruleBetweenList
                            {
                            if ( backtracking==0 ) {
                               
                              	        currentNode=createCompositeNode(grammarAccess.getRelationalExpressionAccess().getBBetweenListParserRuleCall_1_1_1_1_1_0(), currentNode); 
                              	    
                            }
                            pushFollow(FOLLOW_ruleBetweenList_in_ruleRelationalExpression11681);
                            lv_b_10_0=ruleBetweenList();
                            _fsp--;
                            if (failed) return current;
                            if ( backtracking==0 ) {

                              	        if (current==null) {
                              	            current = factory.create(grammarAccess.getRelationalExpressionRule().getType().getClassifier());
                              	            associateNodeWithAstElement(currentNode.getParent(), current);
                              	        }
                              	        try {
                              	       		set(
                              	       			current, 
                              	       			"b",
                              	        		lv_b_10_0, 
                              	        		"BetweenList", 
                              	        		currentNode);
                              	        } catch (ValueConverterException vce) {
                              				handleValueConverterException(vce);
                              	        }
                              	        currentNode = currentNode.getParent();
                              	    
                            }

                            }


                            }


                            }


                            }
                            break;
                        case 3 :
                            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6140:6: ( ruleLIKE ( (lv_c_12_0= ruleConcatenation ) ) ( (lv_l_13_0= ruleLikeEscape ) ) )
                            {
                            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6140:6: ( ruleLIKE ( (lv_c_12_0= ruleConcatenation ) ) ( (lv_l_13_0= ruleLikeEscape ) ) )
                            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6140:7: ruleLIKE ( (lv_c_12_0= ruleConcatenation ) ) ( (lv_l_13_0= ruleLikeEscape ) )
                            {
                            pushFollow(FOLLOW_ruleLIKE_in_ruleRelationalExpression11698);
                            ruleLIKE();
                            _fsp--;
                            if (failed) return current;
                            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6140:15: ( (lv_c_12_0= ruleConcatenation ) )
                            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6141:1: (lv_c_12_0= ruleConcatenation )
                            {
                            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6141:1: (lv_c_12_0= ruleConcatenation )
                            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6142:3: lv_c_12_0= ruleConcatenation
                            {
                            if ( backtracking==0 ) {
                               
                              	        currentNode=createCompositeNode(grammarAccess.getRelationalExpressionAccess().getCConcatenationParserRuleCall_1_1_1_2_1_0(), currentNode); 
                              	    
                            }
                            pushFollow(FOLLOW_ruleConcatenation_in_ruleRelationalExpression11711);
                            lv_c_12_0=ruleConcatenation();
                            _fsp--;
                            if (failed) return current;
                            if ( backtracking==0 ) {

                              	        if (current==null) {
                              	            current = factory.create(grammarAccess.getRelationalExpressionRule().getType().getClassifier());
                              	            associateNodeWithAstElement(currentNode.getParent(), current);
                              	        }
                              	        try {
                              	       		set(
                              	       			current, 
                              	       			"c",
                              	        		lv_c_12_0, 
                              	        		"Concatenation", 
                              	        		currentNode);
                              	        } catch (ValueConverterException vce) {
                              				handleValueConverterException(vce);
                              	        }
                              	        currentNode = currentNode.getParent();
                              	    
                            }

                            }


                            }

                            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6164:2: ( (lv_l_13_0= ruleLikeEscape ) )
                            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6165:1: (lv_l_13_0= ruleLikeEscape )
                            {
                            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6165:1: (lv_l_13_0= ruleLikeEscape )
                            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6166:3: lv_l_13_0= ruleLikeEscape
                            {
                            if ( backtracking==0 ) {
                               
                              	        currentNode=createCompositeNode(grammarAccess.getRelationalExpressionAccess().getLLikeEscapeParserRuleCall_1_1_1_2_2_0(), currentNode); 
                              	    
                            }
                            pushFollow(FOLLOW_ruleLikeEscape_in_ruleRelationalExpression11732);
                            lv_l_13_0=ruleLikeEscape();
                            _fsp--;
                            if (failed) return current;
                            if ( backtracking==0 ) {

                              	        if (current==null) {
                              	            current = factory.create(grammarAccess.getRelationalExpressionRule().getType().getClassifier());
                              	            associateNodeWithAstElement(currentNode.getParent(), current);
                              	        }
                              	        try {
                              	       		set(
                              	       			current, 
                              	       			"l",
                              	        		lv_l_13_0, 
                              	        		"LikeEscape", 
                              	        		currentNode);
                              	        } catch (ValueConverterException vce) {
                              				handleValueConverterException(vce);
                              	        }
                              	        currentNode = currentNode.getParent();
                              	    
                            }

                            }


                            }


                            }


                            }
                            break;
                        case 4 :
                            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6189:6: ( ruleMEMBER ( ruleOF )? ( (lv_p_16_0= rulePath ) ) )
                            {
                            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6189:6: ( ruleMEMBER ( ruleOF )? ( (lv_p_16_0= rulePath ) ) )
                            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6189:7: ruleMEMBER ( ruleOF )? ( (lv_p_16_0= rulePath ) )
                            {
                            pushFollow(FOLLOW_ruleMEMBER_in_ruleRelationalExpression11749);
                            ruleMEMBER();
                            _fsp--;
                            if (failed) return current;
                            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6189:17: ( ruleOF )?
                            int alt76=2;
                            int LA76_0 = input.LA(1);

                            if ( ((LA76_0>=180 && LA76_0<=182)) ) {
                                alt76=1;
                            }
                            switch (alt76) {
                                case 1 :
                                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6189:18: ruleOF
                                    {
                                    pushFollow(FOLLOW_ruleOF_in_ruleRelationalExpression11751);
                                    ruleOF();
                                    _fsp--;
                                    if (failed) return current;

                                    }
                                    break;

                            }

                            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6189:26: ( (lv_p_16_0= rulePath ) )
                            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6190:1: (lv_p_16_0= rulePath )
                            {
                            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6190:1: (lv_p_16_0= rulePath )
                            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6191:3: lv_p_16_0= rulePath
                            {
                            if ( backtracking==0 ) {
                               
                              	        currentNode=createCompositeNode(grammarAccess.getRelationalExpressionAccess().getPPathParserRuleCall_1_1_1_3_2_0(), currentNode); 
                              	    
                            }
                            pushFollow(FOLLOW_rulePath_in_ruleRelationalExpression11766);
                            lv_p_16_0=rulePath();
                            _fsp--;
                            if (failed) return current;
                            if ( backtracking==0 ) {

                              	        if (current==null) {
                              	            current = factory.create(grammarAccess.getRelationalExpressionRule().getType().getClassifier());
                              	            associateNodeWithAstElement(currentNode.getParent(), current);
                              	        }
                              	        try {
                              	       		set(
                              	       			current, 
                              	       			"p",
                              	        		lv_p_16_0, 
                              	        		"Path", 
                              	        		currentNode);
                              	        } catch (ValueConverterException vce) {
                              				handleValueConverterException(vce);
                              	        }
                              	        currentNode = currentNode.getParent();
                              	    
                            }

                            }


                            }


                            }


                            }
                            break;

                    }


                    }


                    }
                    break;

            }


            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
                  	lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruleRelationalExpression


    // $ANTLR start entryRuleLikeEscape
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6221:1: entryRuleLikeEscape returns [EObject current=null] : iv_ruleLikeEscape= ruleLikeEscape EOF ;
    public final EObject entryRuleLikeEscape() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleLikeEscape = null;


        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6222:2: (iv_ruleLikeEscape= ruleLikeEscape EOF )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6223:2: iv_ruleLikeEscape= ruleLikeEscape EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getLikeEscapeRule(), currentNode); 
            }
            pushFollow(FOLLOW_ruleLikeEscape_in_entryRuleLikeEscape11806);
            iv_ruleLikeEscape=ruleLikeEscape();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruleLikeEscape; 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleLikeEscape11816); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuleLikeEscape


    // $ANTLR start ruleLikeEscape
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6230:1: ruleLikeEscape returns [EObject current=null] : ( () ( ruleESCAPE ( (lv_c_2_0= ruleConcatenation ) ) )? ) ;
    public final EObject ruleLikeEscape() throws RecognitionException {
        EObject current = null;

        EObject lv_c_2_0 = null;


         EObject temp=null; setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6235:6: ( ( () ( ruleESCAPE ( (lv_c_2_0= ruleConcatenation ) ) )? ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6236:1: ( () ( ruleESCAPE ( (lv_c_2_0= ruleConcatenation ) ) )? )
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6236:1: ( () ( ruleESCAPE ( (lv_c_2_0= ruleConcatenation ) ) )? )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6236:2: () ( ruleESCAPE ( (lv_c_2_0= ruleConcatenation ) ) )?
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6236:2: ()
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6237:2: 
            {
            if ( backtracking==0 ) {
               
              	  /* */ 
              	
            }
            if ( backtracking==0 ) {
               
                      temp=factory.create(grammarAccess.getLikeEscapeAccess().getLikeEscapeAction_0().getType().getClassifier());
                      current = temp; 
                      temp = null;
                      CompositeNode newNode = createCompositeNode(grammarAccess.getLikeEscapeAccess().getLikeEscapeAction_0(), currentNode.getParent());
                  newNode.getChildren().add(currentNode);
                  moveLookaheadInfo(currentNode, newNode);
                  currentNode = newNode; 
                      associateNodeWithAstElement(currentNode, current); 
                  
            }

            }

            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6250:2: ( ruleESCAPE ( (lv_c_2_0= ruleConcatenation ) ) )?
            int alt79=2;
            int LA79_0 = input.LA(1);

            if ( ((LA79_0>=183 && LA79_0<=185)) ) {
                alt79=1;
            }
            switch (alt79) {
                case 1 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6250:3: ruleESCAPE ( (lv_c_2_0= ruleConcatenation ) )
                    {
                    pushFollow(FOLLOW_ruleESCAPE_in_ruleLikeEscape11863);
                    ruleESCAPE();
                    _fsp--;
                    if (failed) return current;
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6250:13: ( (lv_c_2_0= ruleConcatenation ) )
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6251:1: (lv_c_2_0= ruleConcatenation )
                    {
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6251:1: (lv_c_2_0= ruleConcatenation )
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6252:3: lv_c_2_0= ruleConcatenation
                    {
                    if ( backtracking==0 ) {
                       
                      	        currentNode=createCompositeNode(grammarAccess.getLikeEscapeAccess().getCConcatenationParserRuleCall_1_1_0(), currentNode); 
                      	    
                    }
                    pushFollow(FOLLOW_ruleConcatenation_in_ruleLikeEscape11876);
                    lv_c_2_0=ruleConcatenation();
                    _fsp--;
                    if (failed) return current;
                    if ( backtracking==0 ) {

                      	        if (current==null) {
                      	            current = factory.create(grammarAccess.getLikeEscapeRule().getType().getClassifier());
                      	            associateNodeWithAstElement(currentNode.getParent(), current);
                      	        }
                      	        try {
                      	       		set(
                      	       			current, 
                      	       			"c",
                      	        		lv_c_2_0, 
                      	        		"Concatenation", 
                      	        		currentNode);
                      	        } catch (ValueConverterException vce) {
                      				handleValueConverterException(vce);
                      	        }
                      	        currentNode = currentNode.getParent();
                      	    
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
                  	lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruleLikeEscape


    // $ANTLR start entryRuleBetweenList
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6282:1: entryRuleBetweenList returns [EObject current=null] : iv_ruleBetweenList= ruleBetweenList EOF ;
    public final EObject entryRuleBetweenList() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleBetweenList = null;


        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6283:2: (iv_ruleBetweenList= ruleBetweenList EOF )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6284:2: iv_ruleBetweenList= ruleBetweenList EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getBetweenListRule(), currentNode); 
            }
            pushFollow(FOLLOW_ruleBetweenList_in_entryRuleBetweenList11914);
            iv_ruleBetweenList=ruleBetweenList();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruleBetweenList; 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleBetweenList11924); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuleBetweenList


    // $ANTLR start ruleBetweenList
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6291:1: ruleBetweenList returns [EObject current=null] : ( ( (lv_c_0_0= ruleConcatenation ) ) ruleAND ( (lv_c_2_0= ruleConcatenation ) ) ) ;
    public final EObject ruleBetweenList() throws RecognitionException {
        EObject current = null;

        EObject lv_c_0_0 = null;

        EObject lv_c_2_0 = null;


         EObject temp=null; setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6296:6: ( ( ( (lv_c_0_0= ruleConcatenation ) ) ruleAND ( (lv_c_2_0= ruleConcatenation ) ) ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6297:1: ( ( (lv_c_0_0= ruleConcatenation ) ) ruleAND ( (lv_c_2_0= ruleConcatenation ) ) )
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6297:1: ( ( (lv_c_0_0= ruleConcatenation ) ) ruleAND ( (lv_c_2_0= ruleConcatenation ) ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6297:2: ( (lv_c_0_0= ruleConcatenation ) ) ruleAND ( (lv_c_2_0= ruleConcatenation ) )
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6297:2: ( (lv_c_0_0= ruleConcatenation ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6298:1: (lv_c_0_0= ruleConcatenation )
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6298:1: (lv_c_0_0= ruleConcatenation )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6299:3: lv_c_0_0= ruleConcatenation
            {
            if ( backtracking==0 ) {
               
              	        currentNode=createCompositeNode(grammarAccess.getBetweenListAccess().getCConcatenationParserRuleCall_0_0(), currentNode); 
              	    
            }
            pushFollow(FOLLOW_ruleConcatenation_in_ruleBetweenList11970);
            lv_c_0_0=ruleConcatenation();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {

              	        if (current==null) {
              	            current = factory.create(grammarAccess.getBetweenListRule().getType().getClassifier());
              	            associateNodeWithAstElement(currentNode.getParent(), current);
              	        }
              	        try {
              	       		add(
              	       			current, 
              	       			"c",
              	        		lv_c_0_0, 
              	        		"Concatenation", 
              	        		currentNode);
              	        } catch (ValueConverterException vce) {
              				handleValueConverterException(vce);
              	        }
              	        currentNode = currentNode.getParent();
              	    
            }

            }


            }

            pushFollow(FOLLOW_ruleAND_in_ruleBetweenList11979);
            ruleAND();
            _fsp--;
            if (failed) return current;
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6321:9: ( (lv_c_2_0= ruleConcatenation ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6322:1: (lv_c_2_0= ruleConcatenation )
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6322:1: (lv_c_2_0= ruleConcatenation )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6323:3: lv_c_2_0= ruleConcatenation
            {
            if ( backtracking==0 ) {
               
              	        currentNode=createCompositeNode(grammarAccess.getBetweenListAccess().getCConcatenationParserRuleCall_2_0(), currentNode); 
              	    
            }
            pushFollow(FOLLOW_ruleConcatenation_in_ruleBetweenList11992);
            lv_c_2_0=ruleConcatenation();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {

              	        if (current==null) {
              	            current = factory.create(grammarAccess.getBetweenListRule().getType().getClassifier());
              	            associateNodeWithAstElement(currentNode.getParent(), current);
              	        }
              	        try {
              	       		add(
              	       			current, 
              	       			"c",
              	        		lv_c_2_0, 
              	        		"Concatenation", 
              	        		currentNode);
              	        } catch (ValueConverterException vce) {
              				handleValueConverterException(vce);
              	        }
              	        currentNode = currentNode.getParent();
              	    
            }

            }


            }


            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
                  	lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruleBetweenList


    // $ANTLR start entryRuleConcatenation
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6353:1: entryRuleConcatenation returns [EObject current=null] : iv_ruleConcatenation= ruleConcatenation EOF ;
    public final EObject entryRuleConcatenation() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleConcatenation = null;


        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6354:2: (iv_ruleConcatenation= ruleConcatenation EOF )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6355:2: iv_ruleConcatenation= ruleConcatenation EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getConcatenationRule(), currentNode); 
            }
            pushFollow(FOLLOW_ruleConcatenation_in_entryRuleConcatenation12028);
            iv_ruleConcatenation=ruleConcatenation();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruleConcatenation; 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleConcatenation12038); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuleConcatenation


    // $ANTLR start ruleConcatenation
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6362:1: ruleConcatenation returns [EObject current=null] : (this_AdditiveExpression_0= ruleAdditiveExpression ( '||' ( (lv_a_2_0= ruleAdditiveExpression ) ) ( '||' ( (lv_a_4_0= ruleAdditiveExpression ) ) )* )? ) ;
    public final EObject ruleConcatenation() throws RecognitionException {
        EObject current = null;

        EObject this_AdditiveExpression_0 = null;

        EObject lv_a_2_0 = null;

        EObject lv_a_4_0 = null;


         EObject temp=null; setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6367:6: ( (this_AdditiveExpression_0= ruleAdditiveExpression ( '||' ( (lv_a_2_0= ruleAdditiveExpression ) ) ( '||' ( (lv_a_4_0= ruleAdditiveExpression ) ) )* )? ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6368:1: (this_AdditiveExpression_0= ruleAdditiveExpression ( '||' ( (lv_a_2_0= ruleAdditiveExpression ) ) ( '||' ( (lv_a_4_0= ruleAdditiveExpression ) ) )* )? )
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6368:1: (this_AdditiveExpression_0= ruleAdditiveExpression ( '||' ( (lv_a_2_0= ruleAdditiveExpression ) ) ( '||' ( (lv_a_4_0= ruleAdditiveExpression ) ) )* )? )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6369:2: this_AdditiveExpression_0= ruleAdditiveExpression ( '||' ( (lv_a_2_0= ruleAdditiveExpression ) ) ( '||' ( (lv_a_4_0= ruleAdditiveExpression ) ) )* )?
            {
            if ( backtracking==0 ) {
               
              	  /* */ 
              	
            }
            if ( backtracking==0 ) {
               
                      currentNode=createCompositeNode(grammarAccess.getConcatenationAccess().getAdditiveExpressionParserRuleCall_0(), currentNode); 
                  
            }
            pushFollow(FOLLOW_ruleAdditiveExpression_in_ruleConcatenation12088);
            this_AdditiveExpression_0=ruleAdditiveExpression();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               
                      current = this_AdditiveExpression_0; 
                      currentNode = currentNode.getParent();
                  
            }
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6380:1: ( '||' ( (lv_a_2_0= ruleAdditiveExpression ) ) ( '||' ( (lv_a_4_0= ruleAdditiveExpression ) ) )* )?
            int alt81=2;
            int LA81_0 = input.LA(1);

            if ( (LA81_0==72) ) {
                alt81=1;
            }
            switch (alt81) {
                case 1 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6380:3: '||' ( (lv_a_2_0= ruleAdditiveExpression ) ) ( '||' ( (lv_a_4_0= ruleAdditiveExpression ) ) )*
                    {
                    match(input,72,FOLLOW_72_in_ruleConcatenation12098); if (failed) return current;
                    if ( backtracking==0 ) {

                              createLeafNode(grammarAccess.getConcatenationAccess().getVerticalLineVerticalLineKeyword_1_0(), null); 
                          
                    }
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6384:1: ( (lv_a_2_0= ruleAdditiveExpression ) )
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6385:1: (lv_a_2_0= ruleAdditiveExpression )
                    {
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6385:1: (lv_a_2_0= ruleAdditiveExpression )
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6386:3: lv_a_2_0= ruleAdditiveExpression
                    {
                    if ( backtracking==0 ) {
                       
                      	        currentNode=createCompositeNode(grammarAccess.getConcatenationAccess().getAAdditiveExpressionParserRuleCall_1_1_0(), currentNode); 
                      	    
                    }
                    pushFollow(FOLLOW_ruleAdditiveExpression_in_ruleConcatenation12119);
                    lv_a_2_0=ruleAdditiveExpression();
                    _fsp--;
                    if (failed) return current;
                    if ( backtracking==0 ) {

                      	        if (current==null) {
                      	            current = factory.create(grammarAccess.getConcatenationRule().getType().getClassifier());
                      	            associateNodeWithAstElement(currentNode.getParent(), current);
                      	        }
                      	        try {
                      	       		add(
                      	       			current, 
                      	       			"a",
                      	        		lv_a_2_0, 
                      	        		"AdditiveExpression", 
                      	        		currentNode);
                      	        } catch (ValueConverterException vce) {
                      				handleValueConverterException(vce);
                      	        }
                      	        currentNode = currentNode.getParent();
                      	    
                    }

                    }


                    }

                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6408:2: ( '||' ( (lv_a_4_0= ruleAdditiveExpression ) ) )*
                    loop80:
                    do {
                        int alt80=2;
                        int LA80_0 = input.LA(1);

                        if ( (LA80_0==72) ) {
                            alt80=1;
                        }


                        switch (alt80) {
                    	case 1 :
                    	    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6408:4: '||' ( (lv_a_4_0= ruleAdditiveExpression ) )
                    	    {
                    	    match(input,72,FOLLOW_72_in_ruleConcatenation12130); if (failed) return current;
                    	    if ( backtracking==0 ) {

                    	              createLeafNode(grammarAccess.getConcatenationAccess().getVerticalLineVerticalLineKeyword_1_2_0(), null); 
                    	          
                    	    }
                    	    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6412:1: ( (lv_a_4_0= ruleAdditiveExpression ) )
                    	    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6413:1: (lv_a_4_0= ruleAdditiveExpression )
                    	    {
                    	    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6413:1: (lv_a_4_0= ruleAdditiveExpression )
                    	    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6414:3: lv_a_4_0= ruleAdditiveExpression
                    	    {
                    	    if ( backtracking==0 ) {
                    	       
                    	      	        currentNode=createCompositeNode(grammarAccess.getConcatenationAccess().getAAdditiveExpressionParserRuleCall_1_2_1_0(), currentNode); 
                    	      	    
                    	    }
                    	    pushFollow(FOLLOW_ruleAdditiveExpression_in_ruleConcatenation12151);
                    	    lv_a_4_0=ruleAdditiveExpression();
                    	    _fsp--;
                    	    if (failed) return current;
                    	    if ( backtracking==0 ) {

                    	      	        if (current==null) {
                    	      	            current = factory.create(grammarAccess.getConcatenationRule().getType().getClassifier());
                    	      	            associateNodeWithAstElement(currentNode.getParent(), current);
                    	      	        }
                    	      	        try {
                    	      	       		add(
                    	      	       			current, 
                    	      	       			"a",
                    	      	        		lv_a_4_0, 
                    	      	        		"AdditiveExpression", 
                    	      	        		currentNode);
                    	      	        } catch (ValueConverterException vce) {
                    	      				handleValueConverterException(vce);
                    	      	        }
                    	      	        currentNode = currentNode.getParent();
                    	      	    
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop80;
                        }
                    } while (true);


                    }
                    break;

            }


            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
                  	lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruleConcatenation


    // $ANTLR start entryRuleAdditiveExpression
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6444:1: entryRuleAdditiveExpression returns [EObject current=null] : iv_ruleAdditiveExpression= ruleAdditiveExpression EOF ;
    public final EObject entryRuleAdditiveExpression() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleAdditiveExpression = null;


        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6445:2: (iv_ruleAdditiveExpression= ruleAdditiveExpression EOF )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6446:2: iv_ruleAdditiveExpression= ruleAdditiveExpression EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getAdditiveExpressionRule(), currentNode); 
            }
            pushFollow(FOLLOW_ruleAdditiveExpression_in_entryRuleAdditiveExpression12191);
            iv_ruleAdditiveExpression=ruleAdditiveExpression();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruleAdditiveExpression; 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleAdditiveExpression12201); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuleAdditiveExpression


    // $ANTLR start ruleAdditiveExpression
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6453:1: ruleAdditiveExpression returns [EObject current=null] : ( ( (lv_m_0_0= ruleMultiplyExpression ) ) ( ( '+' | '-' ) ( (lv_m_3_0= ruleMultiplyExpression ) ) )* ) ;
    public final EObject ruleAdditiveExpression() throws RecognitionException {
        EObject current = null;

        EObject lv_m_0_0 = null;

        EObject lv_m_3_0 = null;


         EObject temp=null; setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6458:6: ( ( ( (lv_m_0_0= ruleMultiplyExpression ) ) ( ( '+' | '-' ) ( (lv_m_3_0= ruleMultiplyExpression ) ) )* ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6459:1: ( ( (lv_m_0_0= ruleMultiplyExpression ) ) ( ( '+' | '-' ) ( (lv_m_3_0= ruleMultiplyExpression ) ) )* )
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6459:1: ( ( (lv_m_0_0= ruleMultiplyExpression ) ) ( ( '+' | '-' ) ( (lv_m_3_0= ruleMultiplyExpression ) ) )* )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6459:2: ( (lv_m_0_0= ruleMultiplyExpression ) ) ( ( '+' | '-' ) ( (lv_m_3_0= ruleMultiplyExpression ) ) )*
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6459:2: ( (lv_m_0_0= ruleMultiplyExpression ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6460:1: (lv_m_0_0= ruleMultiplyExpression )
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6460:1: (lv_m_0_0= ruleMultiplyExpression )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6461:3: lv_m_0_0= ruleMultiplyExpression
            {
            if ( backtracking==0 ) {
               
              	        currentNode=createCompositeNode(grammarAccess.getAdditiveExpressionAccess().getMMultiplyExpressionParserRuleCall_0_0(), currentNode); 
              	    
            }
            pushFollow(FOLLOW_ruleMultiplyExpression_in_ruleAdditiveExpression12247);
            lv_m_0_0=ruleMultiplyExpression();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {

              	        if (current==null) {
              	            current = factory.create(grammarAccess.getAdditiveExpressionRule().getType().getClassifier());
              	            associateNodeWithAstElement(currentNode.getParent(), current);
              	        }
              	        try {
              	       		add(
              	       			current, 
              	       			"m",
              	        		lv_m_0_0, 
              	        		"MultiplyExpression", 
              	        		currentNode);
              	        } catch (ValueConverterException vce) {
              				handleValueConverterException(vce);
              	        }
              	        currentNode = currentNode.getParent();
              	    
            }

            }


            }

            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6483:2: ( ( '+' | '-' ) ( (lv_m_3_0= ruleMultiplyExpression ) ) )*
            loop83:
            do {
                int alt83=2;
                int LA83_0 = input.LA(1);

                if ( ((LA83_0>=56 && LA83_0<=57)) ) {
                    alt83=1;
                }


                switch (alt83) {
            	case 1 :
            	    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6483:3: ( '+' | '-' ) ( (lv_m_3_0= ruleMultiplyExpression ) )
            	    {
            	    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6483:3: ( '+' | '-' )
            	    int alt82=2;
            	    int LA82_0 = input.LA(1);

            	    if ( (LA82_0==56) ) {
            	        alt82=1;
            	    }
            	    else if ( (LA82_0==57) ) {
            	        alt82=2;
            	    }
            	    else {
            	        if (backtracking>0) {failed=true; return current;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("6483:3: ( '+' | '-' )", 82, 0, input);

            	        throw nvae;
            	    }
            	    switch (alt82) {
            	        case 1 :
            	            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6483:5: '+'
            	            {
            	            match(input,56,FOLLOW_56_in_ruleAdditiveExpression12259); if (failed) return current;
            	            if ( backtracking==0 ) {

            	                      createLeafNode(grammarAccess.getAdditiveExpressionAccess().getPlusSignKeyword_1_0_0(), null); 
            	                  
            	            }

            	            }
            	            break;
            	        case 2 :
            	            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6488:7: '-'
            	            {
            	            match(input,57,FOLLOW_57_in_ruleAdditiveExpression12275); if (failed) return current;
            	            if ( backtracking==0 ) {

            	                      createLeafNode(grammarAccess.getAdditiveExpressionAccess().getHyphenMinusKeyword_1_0_1(), null); 
            	                  
            	            }

            	            }
            	            break;

            	    }

            	    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6492:2: ( (lv_m_3_0= ruleMultiplyExpression ) )
            	    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6493:1: (lv_m_3_0= ruleMultiplyExpression )
            	    {
            	    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6493:1: (lv_m_3_0= ruleMultiplyExpression )
            	    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6494:3: lv_m_3_0= ruleMultiplyExpression
            	    {
            	    if ( backtracking==0 ) {
            	       
            	      	        currentNode=createCompositeNode(grammarAccess.getAdditiveExpressionAccess().getMMultiplyExpressionParserRuleCall_1_1_0(), currentNode); 
            	      	    
            	    }
            	    pushFollow(FOLLOW_ruleMultiplyExpression_in_ruleAdditiveExpression12297);
            	    lv_m_3_0=ruleMultiplyExpression();
            	    _fsp--;
            	    if (failed) return current;
            	    if ( backtracking==0 ) {

            	      	        if (current==null) {
            	      	            current = factory.create(grammarAccess.getAdditiveExpressionRule().getType().getClassifier());
            	      	            associateNodeWithAstElement(currentNode.getParent(), current);
            	      	        }
            	      	        try {
            	      	       		add(
            	      	       			current, 
            	      	       			"m",
            	      	        		lv_m_3_0, 
            	      	        		"MultiplyExpression", 
            	      	        		currentNode);
            	      	        } catch (ValueConverterException vce) {
            	      				handleValueConverterException(vce);
            	      	        }
            	      	        currentNode = currentNode.getParent();
            	      	    
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop83;
                }
            } while (true);


            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
                  	lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruleAdditiveExpression


    // $ANTLR start entryRuleMultiplyExpression
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6524:1: entryRuleMultiplyExpression returns [EObject current=null] : iv_ruleMultiplyExpression= ruleMultiplyExpression EOF ;
    public final EObject entryRuleMultiplyExpression() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleMultiplyExpression = null;


        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6525:2: (iv_ruleMultiplyExpression= ruleMultiplyExpression EOF )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6526:2: iv_ruleMultiplyExpression= ruleMultiplyExpression EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getMultiplyExpressionRule(), currentNode); 
            }
            pushFollow(FOLLOW_ruleMultiplyExpression_in_entryRuleMultiplyExpression12335);
            iv_ruleMultiplyExpression=ruleMultiplyExpression();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruleMultiplyExpression; 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleMultiplyExpression12345); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuleMultiplyExpression


    // $ANTLR start ruleMultiplyExpression
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6533:1: ruleMultiplyExpression returns [EObject current=null] : ( ( (lv_u_0_0= ruleUnaryExpression ) ) ( ( '*' | '/' ) ( (lv_u_3_0= ruleUnaryExpression ) ) )* ) ;
    public final EObject ruleMultiplyExpression() throws RecognitionException {
        EObject current = null;

        EObject lv_u_0_0 = null;

        EObject lv_u_3_0 = null;


         EObject temp=null; setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6538:6: ( ( ( (lv_u_0_0= ruleUnaryExpression ) ) ( ( '*' | '/' ) ( (lv_u_3_0= ruleUnaryExpression ) ) )* ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6539:1: ( ( (lv_u_0_0= ruleUnaryExpression ) ) ( ( '*' | '/' ) ( (lv_u_3_0= ruleUnaryExpression ) ) )* )
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6539:1: ( ( (lv_u_0_0= ruleUnaryExpression ) ) ( ( '*' | '/' ) ( (lv_u_3_0= ruleUnaryExpression ) ) )* )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6539:2: ( (lv_u_0_0= ruleUnaryExpression ) ) ( ( '*' | '/' ) ( (lv_u_3_0= ruleUnaryExpression ) ) )*
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6539:2: ( (lv_u_0_0= ruleUnaryExpression ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6540:1: (lv_u_0_0= ruleUnaryExpression )
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6540:1: (lv_u_0_0= ruleUnaryExpression )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6541:3: lv_u_0_0= ruleUnaryExpression
            {
            if ( backtracking==0 ) {
               
              	        currentNode=createCompositeNode(grammarAccess.getMultiplyExpressionAccess().getUUnaryExpressionParserRuleCall_0_0(), currentNode); 
              	    
            }
            pushFollow(FOLLOW_ruleUnaryExpression_in_ruleMultiplyExpression12391);
            lv_u_0_0=ruleUnaryExpression();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {

              	        if (current==null) {
              	            current = factory.create(grammarAccess.getMultiplyExpressionRule().getType().getClassifier());
              	            associateNodeWithAstElement(currentNode.getParent(), current);
              	        }
              	        try {
              	       		add(
              	       			current, 
              	       			"u",
              	        		lv_u_0_0, 
              	        		"UnaryExpression", 
              	        		currentNode);
              	        } catch (ValueConverterException vce) {
              				handleValueConverterException(vce);
              	        }
              	        currentNode = currentNode.getParent();
              	    
            }

            }


            }

            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6563:2: ( ( '*' | '/' ) ( (lv_u_3_0= ruleUnaryExpression ) ) )*
            loop85:
            do {
                int alt85=2;
                int LA85_0 = input.LA(1);

                if ( ((LA85_0>=73 && LA85_0<=74)) ) {
                    alt85=1;
                }


                switch (alt85) {
            	case 1 :
            	    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6563:3: ( '*' | '/' ) ( (lv_u_3_0= ruleUnaryExpression ) )
            	    {
            	    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6563:3: ( '*' | '/' )
            	    int alt84=2;
            	    int LA84_0 = input.LA(1);

            	    if ( (LA84_0==73) ) {
            	        alt84=1;
            	    }
            	    else if ( (LA84_0==74) ) {
            	        alt84=2;
            	    }
            	    else {
            	        if (backtracking>0) {failed=true; return current;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("6563:3: ( '*' | '/' )", 84, 0, input);

            	        throw nvae;
            	    }
            	    switch (alt84) {
            	        case 1 :
            	            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6563:5: '*'
            	            {
            	            match(input,73,FOLLOW_73_in_ruleMultiplyExpression12403); if (failed) return current;
            	            if ( backtracking==0 ) {

            	                      createLeafNode(grammarAccess.getMultiplyExpressionAccess().getAsteriskKeyword_1_0_0(), null); 
            	                  
            	            }

            	            }
            	            break;
            	        case 2 :
            	            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6568:7: '/'
            	            {
            	            match(input,74,FOLLOW_74_in_ruleMultiplyExpression12419); if (failed) return current;
            	            if ( backtracking==0 ) {

            	                      createLeafNode(grammarAccess.getMultiplyExpressionAccess().getSolidusKeyword_1_0_1(), null); 
            	                  
            	            }

            	            }
            	            break;

            	    }

            	    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6572:2: ( (lv_u_3_0= ruleUnaryExpression ) )
            	    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6573:1: (lv_u_3_0= ruleUnaryExpression )
            	    {
            	    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6573:1: (lv_u_3_0= ruleUnaryExpression )
            	    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6574:3: lv_u_3_0= ruleUnaryExpression
            	    {
            	    if ( backtracking==0 ) {
            	       
            	      	        currentNode=createCompositeNode(grammarAccess.getMultiplyExpressionAccess().getUUnaryExpressionParserRuleCall_1_1_0(), currentNode); 
            	      	    
            	    }
            	    pushFollow(FOLLOW_ruleUnaryExpression_in_ruleMultiplyExpression12441);
            	    lv_u_3_0=ruleUnaryExpression();
            	    _fsp--;
            	    if (failed) return current;
            	    if ( backtracking==0 ) {

            	      	        if (current==null) {
            	      	            current = factory.create(grammarAccess.getMultiplyExpressionRule().getType().getClassifier());
            	      	            associateNodeWithAstElement(currentNode.getParent(), current);
            	      	        }
            	      	        try {
            	      	       		add(
            	      	       			current, 
            	      	       			"u",
            	      	        		lv_u_3_0, 
            	      	        		"UnaryExpression", 
            	      	        		currentNode);
            	      	        } catch (ValueConverterException vce) {
            	      				handleValueConverterException(vce);
            	      	        }
            	      	        currentNode = currentNode.getParent();
            	      	    
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop85;
                }
            } while (true);


            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
                  	lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruleMultiplyExpression


    // $ANTLR start entryRuleUnaryExpression
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6604:1: entryRuleUnaryExpression returns [EObject current=null] : iv_ruleUnaryExpression= ruleUnaryExpression EOF ;
    public final EObject entryRuleUnaryExpression() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleUnaryExpression = null;


        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6605:2: (iv_ruleUnaryExpression= ruleUnaryExpression EOF )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6606:2: iv_ruleUnaryExpression= ruleUnaryExpression EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getUnaryExpressionRule(), currentNode); 
            }
            pushFollow(FOLLOW_ruleUnaryExpression_in_entryRuleUnaryExpression12479);
            iv_ruleUnaryExpression=ruleUnaryExpression();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruleUnaryExpression; 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleUnaryExpression12489); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuleUnaryExpression


    // $ANTLR start ruleUnaryExpression
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6613:1: ruleUnaryExpression returns [EObject current=null] : ( ( '-' ( (lv_u_1_0= ruleUnaryExpression ) ) ) | ( '+' ( (lv_u_3_0= ruleUnaryExpression ) ) ) | this_CaseExpression_4= ruleCaseExpression | this_QuantifiedExpression_5= ruleQuantifiedExpression | this_Atom_6= ruleAtom ) ;
    public final EObject ruleUnaryExpression() throws RecognitionException {
        EObject current = null;

        EObject lv_u_1_0 = null;

        EObject lv_u_3_0 = null;

        EObject this_CaseExpression_4 = null;

        EObject this_QuantifiedExpression_5 = null;

        EObject this_Atom_6 = null;


         EObject temp=null; setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6618:6: ( ( ( '-' ( (lv_u_1_0= ruleUnaryExpression ) ) ) | ( '+' ( (lv_u_3_0= ruleUnaryExpression ) ) ) | this_CaseExpression_4= ruleCaseExpression | this_QuantifiedExpression_5= ruleQuantifiedExpression | this_Atom_6= ruleAtom ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6619:1: ( ( '-' ( (lv_u_1_0= ruleUnaryExpression ) ) ) | ( '+' ( (lv_u_3_0= ruleUnaryExpression ) ) ) | this_CaseExpression_4= ruleCaseExpression | this_QuantifiedExpression_5= ruleQuantifiedExpression | this_Atom_6= ruleAtom )
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6619:1: ( ( '-' ( (lv_u_1_0= ruleUnaryExpression ) ) ) | ( '+' ( (lv_u_3_0= ruleUnaryExpression ) ) ) | this_CaseExpression_4= ruleCaseExpression | this_QuantifiedExpression_5= ruleQuantifiedExpression | this_Atom_6= ruleAtom )
            int alt86=5;
            switch ( input.LA(1) ) {
            case 57:
                {
                alt86=1;
                }
                break;
            case 56:
                {
                alt86=2;
                }
                break;
            case 186:
            case 187:
            case 188:
                {
                alt86=3;
                }
                break;
            case 201:
            case 202:
            case 203:
            case 204:
            case 205:
            case 206:
            case 207:
            case 208:
            case 209:
            case 210:
            case 211:
            case 212:
                {
                alt86=4;
                }
                break;
            case RULE_ID:
            case RULE_STRING:
            case RULE_INT:
            case RULE_SIGNED_INT:
            case RULE_HEX:
            case 17:
            case 18:
            case 26:
            case 36:
            case 38:
            case 39:
            case 40:
            case 42:
            case 43:
            case 45:
            case 54:
            case 55:
            case 59:
            case 62:
            case 63:
            case 75:
            case 76:
            case 77:
            case 78:
            case 92:
            case 93:
            case 94:
            case 125:
            case 126:
            case 127:
            case 177:
            case 178:
            case 179:
            case 189:
            case 190:
            case 191:
            case 192:
            case 193:
            case 194:
            case 213:
            case 214:
            case 215:
            case 216:
            case 217:
            case 218:
            case 219:
            case 220:
            case 221:
            case 222:
            case 223:
            case 224:
            case 225:
            case 226:
            case 227:
            case 228:
            case 229:
            case 230:
            case 240:
            case 241:
            case 242:
            case 243:
            case 244:
            case 245:
            case 246:
            case 247:
            case 248:
            case 249:
                {
                alt86=5;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("6619:1: ( ( '-' ( (lv_u_1_0= ruleUnaryExpression ) ) ) | ( '+' ( (lv_u_3_0= ruleUnaryExpression ) ) ) | this_CaseExpression_4= ruleCaseExpression | this_QuantifiedExpression_5= ruleQuantifiedExpression | this_Atom_6= ruleAtom )", 86, 0, input);

                throw nvae;
            }

            switch (alt86) {
                case 1 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6619:2: ( '-' ( (lv_u_1_0= ruleUnaryExpression ) ) )
                    {
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6619:2: ( '-' ( (lv_u_1_0= ruleUnaryExpression ) ) )
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6619:4: '-' ( (lv_u_1_0= ruleUnaryExpression ) )
                    {
                    match(input,57,FOLLOW_57_in_ruleUnaryExpression12525); if (failed) return current;
                    if ( backtracking==0 ) {

                              createLeafNode(grammarAccess.getUnaryExpressionAccess().getHyphenMinusKeyword_0_0(), null); 
                          
                    }
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6623:1: ( (lv_u_1_0= ruleUnaryExpression ) )
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6624:1: (lv_u_1_0= ruleUnaryExpression )
                    {
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6624:1: (lv_u_1_0= ruleUnaryExpression )
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6625:3: lv_u_1_0= ruleUnaryExpression
                    {
                    if ( backtracking==0 ) {
                       
                      	        currentNode=createCompositeNode(grammarAccess.getUnaryExpressionAccess().getUUnaryExpressionParserRuleCall_0_1_0(), currentNode); 
                      	    
                    }
                    pushFollow(FOLLOW_ruleUnaryExpression_in_ruleUnaryExpression12546);
                    lv_u_1_0=ruleUnaryExpression();
                    _fsp--;
                    if (failed) return current;
                    if ( backtracking==0 ) {

                      	        if (current==null) {
                      	            current = factory.create(grammarAccess.getUnaryExpressionRule().getType().getClassifier());
                      	            associateNodeWithAstElement(currentNode.getParent(), current);
                      	        }
                      	        try {
                      	       		set(
                      	       			current, 
                      	       			"u",
                      	        		lv_u_1_0, 
                      	        		"UnaryExpression", 
                      	        		currentNode);
                      	        } catch (ValueConverterException vce) {
                      				handleValueConverterException(vce);
                      	        }
                      	        currentNode = currentNode.getParent();
                      	    
                    }

                    }


                    }


                    }


                    }
                    break;
                case 2 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6648:6: ( '+' ( (lv_u_3_0= ruleUnaryExpression ) ) )
                    {
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6648:6: ( '+' ( (lv_u_3_0= ruleUnaryExpression ) ) )
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6648:8: '+' ( (lv_u_3_0= ruleUnaryExpression ) )
                    {
                    match(input,56,FOLLOW_56_in_ruleUnaryExpression12564); if (failed) return current;
                    if ( backtracking==0 ) {

                              createLeafNode(grammarAccess.getUnaryExpressionAccess().getPlusSignKeyword_1_0(), null); 
                          
                    }
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6652:1: ( (lv_u_3_0= ruleUnaryExpression ) )
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6653:1: (lv_u_3_0= ruleUnaryExpression )
                    {
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6653:1: (lv_u_3_0= ruleUnaryExpression )
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6654:3: lv_u_3_0= ruleUnaryExpression
                    {
                    if ( backtracking==0 ) {
                       
                      	        currentNode=createCompositeNode(grammarAccess.getUnaryExpressionAccess().getUUnaryExpressionParserRuleCall_1_1_0(), currentNode); 
                      	    
                    }
                    pushFollow(FOLLOW_ruleUnaryExpression_in_ruleUnaryExpression12585);
                    lv_u_3_0=ruleUnaryExpression();
                    _fsp--;
                    if (failed) return current;
                    if ( backtracking==0 ) {

                      	        if (current==null) {
                      	            current = factory.create(grammarAccess.getUnaryExpressionRule().getType().getClassifier());
                      	            associateNodeWithAstElement(currentNode.getParent(), current);
                      	        }
                      	        try {
                      	       		set(
                      	       			current, 
                      	       			"u",
                      	        		lv_u_3_0, 
                      	        		"UnaryExpression", 
                      	        		currentNode);
                      	        } catch (ValueConverterException vce) {
                      				handleValueConverterException(vce);
                      	        }
                      	        currentNode = currentNode.getParent();
                      	    
                    }

                    }


                    }


                    }


                    }
                    break;
                case 3 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6678:2: this_CaseExpression_4= ruleCaseExpression
                    {
                    if ( backtracking==0 ) {
                       
                      	  /* */ 
                      	
                    }
                    if ( backtracking==0 ) {
                       
                              currentNode=createCompositeNode(grammarAccess.getUnaryExpressionAccess().getCaseExpressionParserRuleCall_2(), currentNode); 
                          
                    }
                    pushFollow(FOLLOW_ruleCaseExpression_in_ruleUnaryExpression12617);
                    this_CaseExpression_4=ruleCaseExpression();
                    _fsp--;
                    if (failed) return current;
                    if ( backtracking==0 ) {
                       
                              current = this_CaseExpression_4; 
                              currentNode = currentNode.getParent();
                          
                    }

                    }
                    break;
                case 4 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6691:2: this_QuantifiedExpression_5= ruleQuantifiedExpression
                    {
                    if ( backtracking==0 ) {
                       
                      	  /* */ 
                      	
                    }
                    if ( backtracking==0 ) {
                       
                              currentNode=createCompositeNode(grammarAccess.getUnaryExpressionAccess().getQuantifiedExpressionParserRuleCall_3(), currentNode); 
                          
                    }
                    pushFollow(FOLLOW_ruleQuantifiedExpression_in_ruleUnaryExpression12647);
                    this_QuantifiedExpression_5=ruleQuantifiedExpression();
                    _fsp--;
                    if (failed) return current;
                    if ( backtracking==0 ) {
                       
                              current = this_QuantifiedExpression_5; 
                              currentNode = currentNode.getParent();
                          
                    }

                    }
                    break;
                case 5 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6704:2: this_Atom_6= ruleAtom
                    {
                    if ( backtracking==0 ) {
                       
                      	  /* */ 
                      	
                    }
                    if ( backtracking==0 ) {
                       
                              currentNode=createCompositeNode(grammarAccess.getUnaryExpressionAccess().getAtomParserRuleCall_4(), currentNode); 
                          
                    }
                    pushFollow(FOLLOW_ruleAtom_in_ruleUnaryExpression12677);
                    this_Atom_6=ruleAtom();
                    _fsp--;
                    if (failed) return current;
                    if ( backtracking==0 ) {
                       
                              current = this_Atom_6; 
                              currentNode = currentNode.getParent();
                          
                    }

                    }
                    break;

            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
                  	lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruleUnaryExpression


    // $ANTLR start entryRuleCaseExpression
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6723:1: entryRuleCaseExpression returns [EObject current=null] : iv_ruleCaseExpression= ruleCaseExpression EOF ;
    public final EObject entryRuleCaseExpression() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleCaseExpression = null;


        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6724:2: (iv_ruleCaseExpression= ruleCaseExpression EOF )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6725:2: iv_ruleCaseExpression= ruleCaseExpression EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getCaseExpressionRule(), currentNode); 
            }
            pushFollow(FOLLOW_ruleCaseExpression_in_entryRuleCaseExpression12712);
            iv_ruleCaseExpression=ruleCaseExpression();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruleCaseExpression; 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleCaseExpression12722); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuleCaseExpression


    // $ANTLR start ruleCaseExpression
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6732:1: ruleCaseExpression returns [EObject current=null] : ( ( ruleCASE ( (lv_w_1_0= ruleWhenClause ) )+ ( (lv_e_2_0= ruleElseClause ) )? ruleEND ) | ( ruleCASE ( (lv_u_5_0= ruleUnaryExpression ) ) ( (lv_a_6_0= ruleAltWhenClause ) )+ ( (lv_e_7_0= ruleElseClause ) )? ruleEND ) ) ;
    public final EObject ruleCaseExpression() throws RecognitionException {
        EObject current = null;

        EObject lv_w_1_0 = null;

        EObject lv_e_2_0 = null;

        EObject lv_u_5_0 = null;

        EObject lv_a_6_0 = null;

        EObject lv_e_7_0 = null;


         EObject temp=null; setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6737:6: ( ( ( ruleCASE ( (lv_w_1_0= ruleWhenClause ) )+ ( (lv_e_2_0= ruleElseClause ) )? ruleEND ) | ( ruleCASE ( (lv_u_5_0= ruleUnaryExpression ) ) ( (lv_a_6_0= ruleAltWhenClause ) )+ ( (lv_e_7_0= ruleElseClause ) )? ruleEND ) ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6738:1: ( ( ruleCASE ( (lv_w_1_0= ruleWhenClause ) )+ ( (lv_e_2_0= ruleElseClause ) )? ruleEND ) | ( ruleCASE ( (lv_u_5_0= ruleUnaryExpression ) ) ( (lv_a_6_0= ruleAltWhenClause ) )+ ( (lv_e_7_0= ruleElseClause ) )? ruleEND ) )
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6738:1: ( ( ruleCASE ( (lv_w_1_0= ruleWhenClause ) )+ ( (lv_e_2_0= ruleElseClause ) )? ruleEND ) | ( ruleCASE ( (lv_u_5_0= ruleUnaryExpression ) ) ( (lv_a_6_0= ruleAltWhenClause ) )+ ( (lv_e_7_0= ruleElseClause ) )? ruleEND ) )
            int alt91=2;
            switch ( input.LA(1) ) {
            case 186:
                {
                int LA91_1 = input.LA(2);

                if ( (synpred155()) ) {
                    alt91=1;
                }
                else if ( (true) ) {
                    alt91=2;
                }
                else {
                    if (backtracking>0) {failed=true; return current;}
                    NoViableAltException nvae =
                        new NoViableAltException("6738:1: ( ( ruleCASE ( (lv_w_1_0= ruleWhenClause ) )+ ( (lv_e_2_0= ruleElseClause ) )? ruleEND ) | ( ruleCASE ( (lv_u_5_0= ruleUnaryExpression ) ) ( (lv_a_6_0= ruleAltWhenClause ) )+ ( (lv_e_7_0= ruleElseClause ) )? ruleEND ) )", 91, 1, input);

                    throw nvae;
                }
                }
                break;
            case 187:
                {
                int LA91_2 = input.LA(2);

                if ( (synpred155()) ) {
                    alt91=1;
                }
                else if ( (true) ) {
                    alt91=2;
                }
                else {
                    if (backtracking>0) {failed=true; return current;}
                    NoViableAltException nvae =
                        new NoViableAltException("6738:1: ( ( ruleCASE ( (lv_w_1_0= ruleWhenClause ) )+ ( (lv_e_2_0= ruleElseClause ) )? ruleEND ) | ( ruleCASE ( (lv_u_5_0= ruleUnaryExpression ) ) ( (lv_a_6_0= ruleAltWhenClause ) )+ ( (lv_e_7_0= ruleElseClause ) )? ruleEND ) )", 91, 2, input);

                    throw nvae;
                }
                }
                break;
            case 188:
                {
                int LA91_3 = input.LA(2);

                if ( (synpred155()) ) {
                    alt91=1;
                }
                else if ( (true) ) {
                    alt91=2;
                }
                else {
                    if (backtracking>0) {failed=true; return current;}
                    NoViableAltException nvae =
                        new NoViableAltException("6738:1: ( ( ruleCASE ( (lv_w_1_0= ruleWhenClause ) )+ ( (lv_e_2_0= ruleElseClause ) )? ruleEND ) | ( ruleCASE ( (lv_u_5_0= ruleUnaryExpression ) ) ( (lv_a_6_0= ruleAltWhenClause ) )+ ( (lv_e_7_0= ruleElseClause ) )? ruleEND ) )", 91, 3, input);

                    throw nvae;
                }
                }
                break;
            default:
                if (backtracking>0) {failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("6738:1: ( ( ruleCASE ( (lv_w_1_0= ruleWhenClause ) )+ ( (lv_e_2_0= ruleElseClause ) )? ruleEND ) | ( ruleCASE ( (lv_u_5_0= ruleUnaryExpression ) ) ( (lv_a_6_0= ruleAltWhenClause ) )+ ( (lv_e_7_0= ruleElseClause ) )? ruleEND ) )", 91, 0, input);

                throw nvae;
            }

            switch (alt91) {
                case 1 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6738:2: ( ruleCASE ( (lv_w_1_0= ruleWhenClause ) )+ ( (lv_e_2_0= ruleElseClause ) )? ruleEND )
                    {
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6738:2: ( ruleCASE ( (lv_w_1_0= ruleWhenClause ) )+ ( (lv_e_2_0= ruleElseClause ) )? ruleEND )
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6738:3: ruleCASE ( (lv_w_1_0= ruleWhenClause ) )+ ( (lv_e_2_0= ruleElseClause ) )? ruleEND
                    {
                    pushFollow(FOLLOW_ruleCASE_in_ruleCaseExpression12757);
                    ruleCASE();
                    _fsp--;
                    if (failed) return current;
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6738:11: ( (lv_w_1_0= ruleWhenClause ) )+
                    int cnt87=0;
                    loop87:
                    do {
                        int alt87=2;
                        int LA87_0 = input.LA(1);

                        if ( ((LA87_0>=192 && LA87_0<=194)) ) {
                            alt87=1;
                        }


                        switch (alt87) {
                    	case 1 :
                    	    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6739:1: (lv_w_1_0= ruleWhenClause )
                    	    {
                    	    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6739:1: (lv_w_1_0= ruleWhenClause )
                    	    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6740:3: lv_w_1_0= ruleWhenClause
                    	    {
                    	    if ( backtracking==0 ) {
                    	       
                    	      	        currentNode=createCompositeNode(grammarAccess.getCaseExpressionAccess().getWWhenClauseParserRuleCall_0_1_0(), currentNode); 
                    	      	    
                    	    }
                    	    pushFollow(FOLLOW_ruleWhenClause_in_ruleCaseExpression12770);
                    	    lv_w_1_0=ruleWhenClause();
                    	    _fsp--;
                    	    if (failed) return current;
                    	    if ( backtracking==0 ) {

                    	      	        if (current==null) {
                    	      	            current = factory.create(grammarAccess.getCaseExpressionRule().getType().getClassifier());
                    	      	            associateNodeWithAstElement(currentNode.getParent(), current);
                    	      	        }
                    	      	        try {
                    	      	       		add(
                    	      	       			current, 
                    	      	       			"w",
                    	      	        		lv_w_1_0, 
                    	      	        		"WhenClause", 
                    	      	        		currentNode);
                    	      	        } catch (ValueConverterException vce) {
                    	      				handleValueConverterException(vce);
                    	      	        }
                    	      	        currentNode = currentNode.getParent();
                    	      	    
                    	    }

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt87 >= 1 ) break loop87;
                    	    if (backtracking>0) {failed=true; return current;}
                                EarlyExitException eee =
                                    new EarlyExitException(87, input);
                                throw eee;
                        }
                        cnt87++;
                    } while (true);

                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6762:3: ( (lv_e_2_0= ruleElseClause ) )?
                    int alt88=2;
                    int LA88_0 = input.LA(1);

                    if ( ((LA88_0>=198 && LA88_0<=200)) ) {
                        alt88=1;
                    }
                    switch (alt88) {
                        case 1 :
                            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6763:1: (lv_e_2_0= ruleElseClause )
                            {
                            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6763:1: (lv_e_2_0= ruleElseClause )
                            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6764:3: lv_e_2_0= ruleElseClause
                            {
                            if ( backtracking==0 ) {
                               
                              	        currentNode=createCompositeNode(grammarAccess.getCaseExpressionAccess().getEElseClauseParserRuleCall_0_2_0(), currentNode); 
                              	    
                            }
                            pushFollow(FOLLOW_ruleElseClause_in_ruleCaseExpression12792);
                            lv_e_2_0=ruleElseClause();
                            _fsp--;
                            if (failed) return current;
                            if ( backtracking==0 ) {

                              	        if (current==null) {
                              	            current = factory.create(grammarAccess.getCaseExpressionRule().getType().getClassifier());
                              	            associateNodeWithAstElement(currentNode.getParent(), current);
                              	        }
                              	        try {
                              	       		set(
                              	       			current, 
                              	       			"e",
                              	        		lv_e_2_0, 
                              	        		"ElseClause", 
                              	        		currentNode);
                              	        } catch (ValueConverterException vce) {
                              				handleValueConverterException(vce);
                              	        }
                              	        currentNode = currentNode.getParent();
                              	    
                            }

                            }


                            }
                            break;

                    }

                    pushFollow(FOLLOW_ruleEND_in_ruleCaseExpression12802);
                    ruleEND();
                    _fsp--;
                    if (failed) return current;

                    }


                    }
                    break;
                case 2 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6787:6: ( ruleCASE ( (lv_u_5_0= ruleUnaryExpression ) ) ( (lv_a_6_0= ruleAltWhenClause ) )+ ( (lv_e_7_0= ruleElseClause ) )? ruleEND )
                    {
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6787:6: ( ruleCASE ( (lv_u_5_0= ruleUnaryExpression ) ) ( (lv_a_6_0= ruleAltWhenClause ) )+ ( (lv_e_7_0= ruleElseClause ) )? ruleEND )
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6787:7: ruleCASE ( (lv_u_5_0= ruleUnaryExpression ) ) ( (lv_a_6_0= ruleAltWhenClause ) )+ ( (lv_e_7_0= ruleElseClause ) )? ruleEND
                    {
                    pushFollow(FOLLOW_ruleCASE_in_ruleCaseExpression12811);
                    ruleCASE();
                    _fsp--;
                    if (failed) return current;
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6787:15: ( (lv_u_5_0= ruleUnaryExpression ) )
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6788:1: (lv_u_5_0= ruleUnaryExpression )
                    {
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6788:1: (lv_u_5_0= ruleUnaryExpression )
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6789:3: lv_u_5_0= ruleUnaryExpression
                    {
                    if ( backtracking==0 ) {
                       
                      	        currentNode=createCompositeNode(grammarAccess.getCaseExpressionAccess().getUUnaryExpressionParserRuleCall_1_1_0(), currentNode); 
                      	    
                    }
                    pushFollow(FOLLOW_ruleUnaryExpression_in_ruleCaseExpression12824);
                    lv_u_5_0=ruleUnaryExpression();
                    _fsp--;
                    if (failed) return current;
                    if ( backtracking==0 ) {

                      	        if (current==null) {
                      	            current = factory.create(grammarAccess.getCaseExpressionRule().getType().getClassifier());
                      	            associateNodeWithAstElement(currentNode.getParent(), current);
                      	        }
                      	        try {
                      	       		set(
                      	       			current, 
                      	       			"u",
                      	        		lv_u_5_0, 
                      	        		"UnaryExpression", 
                      	        		currentNode);
                      	        } catch (ValueConverterException vce) {
                      				handleValueConverterException(vce);
                      	        }
                      	        currentNode = currentNode.getParent();
                      	    
                    }

                    }


                    }

                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6811:2: ( (lv_a_6_0= ruleAltWhenClause ) )+
                    int cnt89=0;
                    loop89:
                    do {
                        int alt89=2;
                        int LA89_0 = input.LA(1);

                        if ( ((LA89_0>=192 && LA89_0<=194)) ) {
                            alt89=1;
                        }


                        switch (alt89) {
                    	case 1 :
                    	    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6812:1: (lv_a_6_0= ruleAltWhenClause )
                    	    {
                    	    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6812:1: (lv_a_6_0= ruleAltWhenClause )
                    	    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6813:3: lv_a_6_0= ruleAltWhenClause
                    	    {
                    	    if ( backtracking==0 ) {
                    	       
                    	      	        currentNode=createCompositeNode(grammarAccess.getCaseExpressionAccess().getAAltWhenClauseParserRuleCall_1_2_0(), currentNode); 
                    	      	    
                    	    }
                    	    pushFollow(FOLLOW_ruleAltWhenClause_in_ruleCaseExpression12845);
                    	    lv_a_6_0=ruleAltWhenClause();
                    	    _fsp--;
                    	    if (failed) return current;
                    	    if ( backtracking==0 ) {

                    	      	        if (current==null) {
                    	      	            current = factory.create(grammarAccess.getCaseExpressionRule().getType().getClassifier());
                    	      	            associateNodeWithAstElement(currentNode.getParent(), current);
                    	      	        }
                    	      	        try {
                    	      	       		add(
                    	      	       			current, 
                    	      	       			"a",
                    	      	        		lv_a_6_0, 
                    	      	        		"AltWhenClause", 
                    	      	        		currentNode);
                    	      	        } catch (ValueConverterException vce) {
                    	      				handleValueConverterException(vce);
                    	      	        }
                    	      	        currentNode = currentNode.getParent();
                    	      	    
                    	    }

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt89 >= 1 ) break loop89;
                    	    if (backtracking>0) {failed=true; return current;}
                                EarlyExitException eee =
                                    new EarlyExitException(89, input);
                                throw eee;
                        }
                        cnt89++;
                    } while (true);

                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6835:3: ( (lv_e_7_0= ruleElseClause ) )?
                    int alt90=2;
                    int LA90_0 = input.LA(1);

                    if ( ((LA90_0>=198 && LA90_0<=200)) ) {
                        alt90=1;
                    }
                    switch (alt90) {
                        case 1 :
                            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6836:1: (lv_e_7_0= ruleElseClause )
                            {
                            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6836:1: (lv_e_7_0= ruleElseClause )
                            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6837:3: lv_e_7_0= ruleElseClause
                            {
                            if ( backtracking==0 ) {
                               
                              	        currentNode=createCompositeNode(grammarAccess.getCaseExpressionAccess().getEElseClauseParserRuleCall_1_3_0(), currentNode); 
                              	    
                            }
                            pushFollow(FOLLOW_ruleElseClause_in_ruleCaseExpression12867);
                            lv_e_7_0=ruleElseClause();
                            _fsp--;
                            if (failed) return current;
                            if ( backtracking==0 ) {

                              	        if (current==null) {
                              	            current = factory.create(grammarAccess.getCaseExpressionRule().getType().getClassifier());
                              	            associateNodeWithAstElement(currentNode.getParent(), current);
                              	        }
                              	        try {
                              	       		set(
                              	       			current, 
                              	       			"e",
                              	        		lv_e_7_0, 
                              	        		"ElseClause", 
                              	        		currentNode);
                              	        } catch (ValueConverterException vce) {
                              				handleValueConverterException(vce);
                              	        }
                              	        currentNode = currentNode.getParent();
                              	    
                            }

                            }


                            }
                            break;

                    }

                    pushFollow(FOLLOW_ruleEND_in_ruleCaseExpression12877);
                    ruleEND();
                    _fsp--;
                    if (failed) return current;

                    }


                    }
                    break;

            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
                  	lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruleCaseExpression


    // $ANTLR start entryRuleWhenClause
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6867:1: entryRuleWhenClause returns [EObject current=null] : iv_ruleWhenClause= ruleWhenClause EOF ;
    public final EObject entryRuleWhenClause() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleWhenClause = null;


        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6868:2: (iv_ruleWhenClause= ruleWhenClause EOF )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6869:2: iv_ruleWhenClause= ruleWhenClause EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getWhenClauseRule(), currentNode); 
            }
            pushFollow(FOLLOW_ruleWhenClause_in_entryRuleWhenClause12906);
            iv_ruleWhenClause=ruleWhenClause();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruleWhenClause; 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleWhenClause12916); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuleWhenClause


    // $ANTLR start ruleWhenClause
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6876:1: ruleWhenClause returns [EObject current=null] : ( ruleWHEN ( (lv_whenExpr_1_0= ruleExpression ) ) ruleTHEN ( (lv_thenExpr_3_0= ruleUnaryExpression ) ) ) ;
    public final EObject ruleWhenClause() throws RecognitionException {
        EObject current = null;

        EObject lv_whenExpr_1_0 = null;

        EObject lv_thenExpr_3_0 = null;


         EObject temp=null; setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6881:6: ( ( ruleWHEN ( (lv_whenExpr_1_0= ruleExpression ) ) ruleTHEN ( (lv_thenExpr_3_0= ruleUnaryExpression ) ) ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6882:1: ( ruleWHEN ( (lv_whenExpr_1_0= ruleExpression ) ) ruleTHEN ( (lv_thenExpr_3_0= ruleUnaryExpression ) ) )
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6882:1: ( ruleWHEN ( (lv_whenExpr_1_0= ruleExpression ) ) ruleTHEN ( (lv_thenExpr_3_0= ruleUnaryExpression ) ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6882:2: ruleWHEN ( (lv_whenExpr_1_0= ruleExpression ) ) ruleTHEN ( (lv_thenExpr_3_0= ruleUnaryExpression ) )
            {
            pushFollow(FOLLOW_ruleWHEN_in_ruleWhenClause12950);
            ruleWHEN();
            _fsp--;
            if (failed) return current;
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6882:10: ( (lv_whenExpr_1_0= ruleExpression ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6883:1: (lv_whenExpr_1_0= ruleExpression )
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6883:1: (lv_whenExpr_1_0= ruleExpression )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6884:3: lv_whenExpr_1_0= ruleExpression
            {
            if ( backtracking==0 ) {
               
              	        currentNode=createCompositeNode(grammarAccess.getWhenClauseAccess().getWhenExprExpressionParserRuleCall_1_0(), currentNode); 
              	    
            }
            pushFollow(FOLLOW_ruleExpression_in_ruleWhenClause12963);
            lv_whenExpr_1_0=ruleExpression();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {

              	        if (current==null) {
              	            current = factory.create(grammarAccess.getWhenClauseRule().getType().getClassifier());
              	            associateNodeWithAstElement(currentNode.getParent(), current);
              	        }
              	        try {
              	       		set(
              	       			current, 
              	       			"whenExpr",
              	        		lv_whenExpr_1_0, 
              	        		"Expression", 
              	        		currentNode);
              	        } catch (ValueConverterException vce) {
              				handleValueConverterException(vce);
              	        }
              	        currentNode = currentNode.getParent();
              	    
            }

            }


            }

            pushFollow(FOLLOW_ruleTHEN_in_ruleWhenClause12972);
            ruleTHEN();
            _fsp--;
            if (failed) return current;
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6906:10: ( (lv_thenExpr_3_0= ruleUnaryExpression ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6907:1: (lv_thenExpr_3_0= ruleUnaryExpression )
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6907:1: (lv_thenExpr_3_0= ruleUnaryExpression )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6908:3: lv_thenExpr_3_0= ruleUnaryExpression
            {
            if ( backtracking==0 ) {
               
              	        currentNode=createCompositeNode(grammarAccess.getWhenClauseAccess().getThenExprUnaryExpressionParserRuleCall_3_0(), currentNode); 
              	    
            }
            pushFollow(FOLLOW_ruleUnaryExpression_in_ruleWhenClause12985);
            lv_thenExpr_3_0=ruleUnaryExpression();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {

              	        if (current==null) {
              	            current = factory.create(grammarAccess.getWhenClauseRule().getType().getClassifier());
              	            associateNodeWithAstElement(currentNode.getParent(), current);
              	        }
              	        try {
              	       		set(
              	       			current, 
              	       			"thenExpr",
              	        		lv_thenExpr_3_0, 
              	        		"UnaryExpression", 
              	        		currentNode);
              	        } catch (ValueConverterException vce) {
              				handleValueConverterException(vce);
              	        }
              	        currentNode = currentNode.getParent();
              	    
            }

            }


            }


            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
                  	lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruleWhenClause


    // $ANTLR start entryRuleAltWhenClause
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6938:1: entryRuleAltWhenClause returns [EObject current=null] : iv_ruleAltWhenClause= ruleAltWhenClause EOF ;
    public final EObject entryRuleAltWhenClause() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleAltWhenClause = null;


        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6939:2: (iv_ruleAltWhenClause= ruleAltWhenClause EOF )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6940:2: iv_ruleAltWhenClause= ruleAltWhenClause EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getAltWhenClauseRule(), currentNode); 
            }
            pushFollow(FOLLOW_ruleAltWhenClause_in_entryRuleAltWhenClause13021);
            iv_ruleAltWhenClause=ruleAltWhenClause();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruleAltWhenClause; 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleAltWhenClause13031); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuleAltWhenClause


    // $ANTLR start ruleAltWhenClause
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6947:1: ruleAltWhenClause returns [EObject current=null] : ( ruleWHEN ( (lv_w_1_0= ruleUnaryExpression ) ) ruleTHEN ( (lv_t_3_0= ruleUnaryExpression ) ) ) ;
    public final EObject ruleAltWhenClause() throws RecognitionException {
        EObject current = null;

        EObject lv_w_1_0 = null;

        EObject lv_t_3_0 = null;


         EObject temp=null; setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6952:6: ( ( ruleWHEN ( (lv_w_1_0= ruleUnaryExpression ) ) ruleTHEN ( (lv_t_3_0= ruleUnaryExpression ) ) ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6953:1: ( ruleWHEN ( (lv_w_1_0= ruleUnaryExpression ) ) ruleTHEN ( (lv_t_3_0= ruleUnaryExpression ) ) )
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6953:1: ( ruleWHEN ( (lv_w_1_0= ruleUnaryExpression ) ) ruleTHEN ( (lv_t_3_0= ruleUnaryExpression ) ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6953:2: ruleWHEN ( (lv_w_1_0= ruleUnaryExpression ) ) ruleTHEN ( (lv_t_3_0= ruleUnaryExpression ) )
            {
            pushFollow(FOLLOW_ruleWHEN_in_ruleAltWhenClause13065);
            ruleWHEN();
            _fsp--;
            if (failed) return current;
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6953:10: ( (lv_w_1_0= ruleUnaryExpression ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6954:1: (lv_w_1_0= ruleUnaryExpression )
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6954:1: (lv_w_1_0= ruleUnaryExpression )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6955:3: lv_w_1_0= ruleUnaryExpression
            {
            if ( backtracking==0 ) {
               
              	        currentNode=createCompositeNode(grammarAccess.getAltWhenClauseAccess().getWUnaryExpressionParserRuleCall_1_0(), currentNode); 
              	    
            }
            pushFollow(FOLLOW_ruleUnaryExpression_in_ruleAltWhenClause13078);
            lv_w_1_0=ruleUnaryExpression();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {

              	        if (current==null) {
              	            current = factory.create(grammarAccess.getAltWhenClauseRule().getType().getClassifier());
              	            associateNodeWithAstElement(currentNode.getParent(), current);
              	        }
              	        try {
              	       		set(
              	       			current, 
              	       			"w",
              	        		lv_w_1_0, 
              	        		"UnaryExpression", 
              	        		currentNode);
              	        } catch (ValueConverterException vce) {
              				handleValueConverterException(vce);
              	        }
              	        currentNode = currentNode.getParent();
              	    
            }

            }


            }

            pushFollow(FOLLOW_ruleTHEN_in_ruleAltWhenClause13087);
            ruleTHEN();
            _fsp--;
            if (failed) return current;
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6977:10: ( (lv_t_3_0= ruleUnaryExpression ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6978:1: (lv_t_3_0= ruleUnaryExpression )
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6978:1: (lv_t_3_0= ruleUnaryExpression )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6979:3: lv_t_3_0= ruleUnaryExpression
            {
            if ( backtracking==0 ) {
               
              	        currentNode=createCompositeNode(grammarAccess.getAltWhenClauseAccess().getTUnaryExpressionParserRuleCall_3_0(), currentNode); 
              	    
            }
            pushFollow(FOLLOW_ruleUnaryExpression_in_ruleAltWhenClause13100);
            lv_t_3_0=ruleUnaryExpression();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {

              	        if (current==null) {
              	            current = factory.create(grammarAccess.getAltWhenClauseRule().getType().getClassifier());
              	            associateNodeWithAstElement(currentNode.getParent(), current);
              	        }
              	        try {
              	       		set(
              	       			current, 
              	       			"t",
              	        		lv_t_3_0, 
              	        		"UnaryExpression", 
              	        		currentNode);
              	        } catch (ValueConverterException vce) {
              				handleValueConverterException(vce);
              	        }
              	        currentNode = currentNode.getParent();
              	    
            }

            }


            }


            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
                  	lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruleAltWhenClause


    // $ANTLR start entryRuleElseClause
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7009:1: entryRuleElseClause returns [EObject current=null] : iv_ruleElseClause= ruleElseClause EOF ;
    public final EObject entryRuleElseClause() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleElseClause = null;


        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7010:2: (iv_ruleElseClause= ruleElseClause EOF )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7011:2: iv_ruleElseClause= ruleElseClause EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getElseClauseRule(), currentNode); 
            }
            pushFollow(FOLLOW_ruleElseClause_in_entryRuleElseClause13136);
            iv_ruleElseClause=ruleElseClause();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruleElseClause; 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleElseClause13146); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuleElseClause


    // $ANTLR start ruleElseClause
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7018:1: ruleElseClause returns [EObject current=null] : ( ruleELSE ( (lv_u_1_0= ruleUnaryExpression ) ) ) ;
    public final EObject ruleElseClause() throws RecognitionException {
        EObject current = null;

        EObject lv_u_1_0 = null;


         EObject temp=null; setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7023:6: ( ( ruleELSE ( (lv_u_1_0= ruleUnaryExpression ) ) ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7024:1: ( ruleELSE ( (lv_u_1_0= ruleUnaryExpression ) ) )
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7024:1: ( ruleELSE ( (lv_u_1_0= ruleUnaryExpression ) ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7024:2: ruleELSE ( (lv_u_1_0= ruleUnaryExpression ) )
            {
            pushFollow(FOLLOW_ruleELSE_in_ruleElseClause13180);
            ruleELSE();
            _fsp--;
            if (failed) return current;
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7024:10: ( (lv_u_1_0= ruleUnaryExpression ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7025:1: (lv_u_1_0= ruleUnaryExpression )
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7025:1: (lv_u_1_0= ruleUnaryExpression )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7026:3: lv_u_1_0= ruleUnaryExpression
            {
            if ( backtracking==0 ) {
               
              	        currentNode=createCompositeNode(grammarAccess.getElseClauseAccess().getUUnaryExpressionParserRuleCall_1_0(), currentNode); 
              	    
            }
            pushFollow(FOLLOW_ruleUnaryExpression_in_ruleElseClause13193);
            lv_u_1_0=ruleUnaryExpression();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {

              	        if (current==null) {
              	            current = factory.create(grammarAccess.getElseClauseRule().getType().getClassifier());
              	            associateNodeWithAstElement(currentNode.getParent(), current);
              	        }
              	        try {
              	       		set(
              	       			current, 
              	       			"u",
              	        		lv_u_1_0, 
              	        		"UnaryExpression", 
              	        		currentNode);
              	        } catch (ValueConverterException vce) {
              				handleValueConverterException(vce);
              	        }
              	        currentNode = currentNode.getParent();
              	    
            }

            }


            }


            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
                  	lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruleElseClause


    // $ANTLR start entryRuleQuantifiedExpression
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7056:1: entryRuleQuantifiedExpression returns [EObject current=null] : iv_ruleQuantifiedExpression= ruleQuantifiedExpression EOF ;
    public final EObject entryRuleQuantifiedExpression() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleQuantifiedExpression = null;


        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7057:2: (iv_ruleQuantifiedExpression= ruleQuantifiedExpression EOF )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7058:2: iv_ruleQuantifiedExpression= ruleQuantifiedExpression EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getQuantifiedExpressionRule(), currentNode); 
            }
            pushFollow(FOLLOW_ruleQuantifiedExpression_in_entryRuleQuantifiedExpression13229);
            iv_ruleQuantifiedExpression=ruleQuantifiedExpression();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruleQuantifiedExpression; 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleQuantifiedExpression13239); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuleQuantifiedExpression


    // $ANTLR start ruleQuantifiedExpression
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7065:1: ruleQuantifiedExpression returns [EObject current=null] : ( () ( ruleSOME | ruleEXISTS | ruleALL | ruleANY ) ( ruleIdentifier | ruleCollectionExpr | ( '(' ( (lv_s_8_0= ruleUnionRule ) ) ')' ) ) ) ;
    public final EObject ruleQuantifiedExpression() throws RecognitionException {
        EObject current = null;

        EObject lv_s_8_0 = null;


         EObject temp=null; setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7070:6: ( ( () ( ruleSOME | ruleEXISTS | ruleALL | ruleANY ) ( ruleIdentifier | ruleCollectionExpr | ( '(' ( (lv_s_8_0= ruleUnionRule ) ) ')' ) ) ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7071:1: ( () ( ruleSOME | ruleEXISTS | ruleALL | ruleANY ) ( ruleIdentifier | ruleCollectionExpr | ( '(' ( (lv_s_8_0= ruleUnionRule ) ) ')' ) ) )
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7071:1: ( () ( ruleSOME | ruleEXISTS | ruleALL | ruleANY ) ( ruleIdentifier | ruleCollectionExpr | ( '(' ( (lv_s_8_0= ruleUnionRule ) ) ')' ) ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7071:2: () ( ruleSOME | ruleEXISTS | ruleALL | ruleANY ) ( ruleIdentifier | ruleCollectionExpr | ( '(' ( (lv_s_8_0= ruleUnionRule ) ) ')' ) )
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7071:2: ()
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7072:2: 
            {
            if ( backtracking==0 ) {
               
              	  /* */ 
              	
            }
            if ( backtracking==0 ) {
               
                      temp=factory.create(grammarAccess.getQuantifiedExpressionAccess().getQuantifiedExpressionAction_0().getType().getClassifier());
                      current = temp; 
                      temp = null;
                      CompositeNode newNode = createCompositeNode(grammarAccess.getQuantifiedExpressionAccess().getQuantifiedExpressionAction_0(), currentNode.getParent());
                  newNode.getChildren().add(currentNode);
                  moveLookaheadInfo(currentNode, newNode);
                  currentNode = newNode; 
                      associateNodeWithAstElement(currentNode, current); 
                  
            }

            }

            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7085:2: ( ruleSOME | ruleEXISTS | ruleALL | ruleANY )
            int alt92=4;
            switch ( input.LA(1) ) {
            case 201:
            case 202:
            case 203:
                {
                alt92=1;
                }
                break;
            case 204:
            case 205:
            case 206:
                {
                alt92=2;
                }
                break;
            case 207:
            case 208:
            case 209:
                {
                alt92=3;
                }
                break;
            case 210:
            case 211:
            case 212:
                {
                alt92=4;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("7085:2: ( ruleSOME | ruleEXISTS | ruleALL | ruleANY )", 92, 0, input);

                throw nvae;
            }

            switch (alt92) {
                case 1 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7085:3: ruleSOME
                    {
                    pushFollow(FOLLOW_ruleSOME_in_ruleQuantifiedExpression13286);
                    ruleSOME();
                    _fsp--;
                    if (failed) return current;

                    }
                    break;
                case 2 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7086:6: ruleEXISTS
                    {
                    pushFollow(FOLLOW_ruleEXISTS_in_ruleQuantifiedExpression13293);
                    ruleEXISTS();
                    _fsp--;
                    if (failed) return current;

                    }
                    break;
                case 3 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7087:6: ruleALL
                    {
                    pushFollow(FOLLOW_ruleALL_in_ruleQuantifiedExpression13300);
                    ruleALL();
                    _fsp--;
                    if (failed) return current;

                    }
                    break;
                case 4 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7088:6: ruleANY
                    {
                    pushFollow(FOLLOW_ruleANY_in_ruleQuantifiedExpression13307);
                    ruleANY();
                    _fsp--;
                    if (failed) return current;

                    }
                    break;

            }

            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7088:14: ( ruleIdentifier | ruleCollectionExpr | ( '(' ( (lv_s_8_0= ruleUnionRule ) ) ')' ) )
            int alt93=3;
            switch ( input.LA(1) ) {
            case RULE_ID:
            case 26:
            case 38:
            case 39:
            case 40:
            case 42:
            case 45:
            case 54:
            case 55:
            case 59:
            case 75:
            case 76:
            case 77:
            case 78:
            case 92:
            case 93:
            case 94:
            case 177:
            case 178:
            case 179:
            case 189:
            case 190:
            case 191:
            case 192:
            case 193:
            case 194:
                {
                alt93=1;
                }
                break;
            case 125:
            case 126:
            case 127:
            case 228:
            case 229:
            case 230:
                {
                alt93=2;
                }
                break;
            case 43:
                {
                alt93=3;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("7088:14: ( ruleIdentifier | ruleCollectionExpr | ( '(' ( (lv_s_8_0= ruleUnionRule ) ) ')' ) )", 93, 0, input);

                throw nvae;
            }

            switch (alt93) {
                case 1 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7088:15: ruleIdentifier
                    {
                    pushFollow(FOLLOW_ruleIdentifier_in_ruleQuantifiedExpression13310);
                    ruleIdentifier();
                    _fsp--;
                    if (failed) return current;

                    }
                    break;
                case 2 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7089:6: ruleCollectionExpr
                    {
                    pushFollow(FOLLOW_ruleCollectionExpr_in_ruleQuantifiedExpression13317);
                    ruleCollectionExpr();
                    _fsp--;
                    if (failed) return current;

                    }
                    break;
                case 3 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7090:6: ( '(' ( (lv_s_8_0= ruleUnionRule ) ) ')' )
                    {
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7090:6: ( '(' ( (lv_s_8_0= ruleUnionRule ) ) ')' )
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7090:8: '(' ( (lv_s_8_0= ruleUnionRule ) ) ')'
                    {
                    match(input,43,FOLLOW_43_in_ruleQuantifiedExpression13326); if (failed) return current;
                    if ( backtracking==0 ) {

                              createLeafNode(grammarAccess.getQuantifiedExpressionAccess().getLeftParenthesisKeyword_2_2_0(), null); 
                          
                    }
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7094:1: ( (lv_s_8_0= ruleUnionRule ) )
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7095:1: (lv_s_8_0= ruleUnionRule )
                    {
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7095:1: (lv_s_8_0= ruleUnionRule )
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7096:3: lv_s_8_0= ruleUnionRule
                    {
                    if ( backtracking==0 ) {
                       
                      	        currentNode=createCompositeNode(grammarAccess.getQuantifiedExpressionAccess().getSUnionRuleParserRuleCall_2_2_1_0(), currentNode); 
                      	    
                    }
                    pushFollow(FOLLOW_ruleUnionRule_in_ruleQuantifiedExpression13347);
                    lv_s_8_0=ruleUnionRule();
                    _fsp--;
                    if (failed) return current;
                    if ( backtracking==0 ) {

                      	        if (current==null) {
                      	            current = factory.create(grammarAccess.getQuantifiedExpressionRule().getType().getClassifier());
                      	            associateNodeWithAstElement(currentNode.getParent(), current);
                      	        }
                      	        try {
                      	       		set(
                      	       			current, 
                      	       			"s",
                      	        		lv_s_8_0, 
                      	        		"UnionRule", 
                      	        		currentNode);
                      	        } catch (ValueConverterException vce) {
                      				handleValueConverterException(vce);
                      	        }
                      	        currentNode = currentNode.getParent();
                      	    
                    }

                    }


                    }

                    match(input,44,FOLLOW_44_in_ruleQuantifiedExpression13357); if (failed) return current;
                    if ( backtracking==0 ) {

                              createLeafNode(grammarAccess.getQuantifiedExpressionAccess().getRightParenthesisKeyword_2_2_2(), null); 
                          
                    }

                    }


                    }
                    break;

            }


            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
                  	lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruleQuantifiedExpression


    // $ANTLR start entryRuleAtom
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7130:1: entryRuleAtom returns [EObject current=null] : iv_ruleAtom= ruleAtom EOF ;
    public final EObject entryRuleAtom() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleAtom = null;


        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7131:2: (iv_ruleAtom= ruleAtom EOF )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7132:2: iv_ruleAtom= ruleAtom EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getAtomRule(), currentNode); 
            }
            pushFollow(FOLLOW_ruleAtom_in_entryRuleAtom13395);
            iv_ruleAtom=ruleAtom();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruleAtom; 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleAtom13405); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuleAtom


    // $ANTLR start ruleAtom
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7139:1: ruleAtom returns [EObject current=null] : ( () ( ( (lv_prime_1_0= rulePrimaryExpression ) ) ( ( '.' ruleIdentifier ( '(' ( (lv_e_5_0= ruleExprList ) ) ')' )? ) | ( '[' ( (lv_exp_8_0= ruleExpression ) ) ']' ) )* ) ) ;
    public final EObject ruleAtom() throws RecognitionException {
        EObject current = null;

        EObject lv_prime_1_0 = null;

        EObject lv_e_5_0 = null;

        EObject lv_exp_8_0 = null;


         EObject temp=null; setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7144:6: ( ( () ( ( (lv_prime_1_0= rulePrimaryExpression ) ) ( ( '.' ruleIdentifier ( '(' ( (lv_e_5_0= ruleExprList ) ) ')' )? ) | ( '[' ( (lv_exp_8_0= ruleExpression ) ) ']' ) )* ) ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7145:1: ( () ( ( (lv_prime_1_0= rulePrimaryExpression ) ) ( ( '.' ruleIdentifier ( '(' ( (lv_e_5_0= ruleExprList ) ) ')' )? ) | ( '[' ( (lv_exp_8_0= ruleExpression ) ) ']' ) )* ) )
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7145:1: ( () ( ( (lv_prime_1_0= rulePrimaryExpression ) ) ( ( '.' ruleIdentifier ( '(' ( (lv_e_5_0= ruleExprList ) ) ')' )? ) | ( '[' ( (lv_exp_8_0= ruleExpression ) ) ']' ) )* ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7145:2: () ( ( (lv_prime_1_0= rulePrimaryExpression ) ) ( ( '.' ruleIdentifier ( '(' ( (lv_e_5_0= ruleExprList ) ) ')' )? ) | ( '[' ( (lv_exp_8_0= ruleExpression ) ) ']' ) )* )
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7145:2: ()
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7146:2: 
            {
            if ( backtracking==0 ) {
               
              	  /* */ 
              	
            }
            if ( backtracking==0 ) {
               
                      temp=factory.create(grammarAccess.getAtomAccess().getAtomAction_0().getType().getClassifier());
                      current = temp; 
                      temp = null;
                      CompositeNode newNode = createCompositeNode(grammarAccess.getAtomAccess().getAtomAction_0(), currentNode.getParent());
                  newNode.getChildren().add(currentNode);
                  moveLookaheadInfo(currentNode, newNode);
                  currentNode = newNode; 
                      associateNodeWithAstElement(currentNode, current); 
                  
            }

            }

            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7159:2: ( ( (lv_prime_1_0= rulePrimaryExpression ) ) ( ( '.' ruleIdentifier ( '(' ( (lv_e_5_0= ruleExprList ) ) ')' )? ) | ( '[' ( (lv_exp_8_0= ruleExpression ) ) ']' ) )* )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7159:3: ( (lv_prime_1_0= rulePrimaryExpression ) ) ( ( '.' ruleIdentifier ( '(' ( (lv_e_5_0= ruleExprList ) ) ')' )? ) | ( '[' ( (lv_exp_8_0= ruleExpression ) ) ']' ) )*
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7159:3: ( (lv_prime_1_0= rulePrimaryExpression ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7160:1: (lv_prime_1_0= rulePrimaryExpression )
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7160:1: (lv_prime_1_0= rulePrimaryExpression )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7161:3: lv_prime_1_0= rulePrimaryExpression
            {
            if ( backtracking==0 ) {
               
              	        currentNode=createCompositeNode(grammarAccess.getAtomAccess().getPrimePrimaryExpressionParserRuleCall_1_0_0(), currentNode); 
              	    
            }
            pushFollow(FOLLOW_rulePrimaryExpression_in_ruleAtom13464);
            lv_prime_1_0=rulePrimaryExpression();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {

              	        if (current==null) {
              	            current = factory.create(grammarAccess.getAtomRule().getType().getClassifier());
              	            associateNodeWithAstElement(currentNode.getParent(), current);
              	        }
              	        try {
              	       		set(
              	       			current, 
              	       			"prime",
              	        		lv_prime_1_0, 
              	        		"PrimaryExpression", 
              	        		currentNode);
              	        } catch (ValueConverterException vce) {
              				handleValueConverterException(vce);
              	        }
              	        currentNode = currentNode.getParent();
              	    
            }

            }


            }

            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7183:2: ( ( '.' ruleIdentifier ( '(' ( (lv_e_5_0= ruleExprList ) ) ')' )? ) | ( '[' ( (lv_exp_8_0= ruleExpression ) ) ']' ) )*
            loop95:
            do {
                int alt95=3;
                int LA95_0 = input.LA(1);

                if ( (LA95_0==36) ) {
                    alt95=1;
                }
                else if ( (LA95_0==32) ) {
                    alt95=2;
                }


                switch (alt95) {
            	case 1 :
            	    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7183:3: ( '.' ruleIdentifier ( '(' ( (lv_e_5_0= ruleExprList ) ) ')' )? )
            	    {
            	    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7183:3: ( '.' ruleIdentifier ( '(' ( (lv_e_5_0= ruleExprList ) ) ')' )? )
            	    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7183:5: '.' ruleIdentifier ( '(' ( (lv_e_5_0= ruleExprList ) ) ')' )?
            	    {
            	    match(input,36,FOLLOW_36_in_ruleAtom13476); if (failed) return current;
            	    if ( backtracking==0 ) {

            	              createLeafNode(grammarAccess.getAtomAccess().getFullStopKeyword_1_1_0_0(), null); 
            	          
            	    }
            	    pushFollow(FOLLOW_ruleIdentifier_in_ruleAtom13485);
            	    ruleIdentifier();
            	    _fsp--;
            	    if (failed) return current;
            	    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7187:15: ( '(' ( (lv_e_5_0= ruleExprList ) ) ')' )?
            	    int alt94=2;
            	    int LA94_0 = input.LA(1);

            	    if ( (LA94_0==43) ) {
            	        alt94=1;
            	    }
            	    switch (alt94) {
            	        case 1 :
            	            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7187:17: '(' ( (lv_e_5_0= ruleExprList ) ) ')'
            	            {
            	            match(input,43,FOLLOW_43_in_ruleAtom13488); if (failed) return current;
            	            if ( backtracking==0 ) {

            	                      createLeafNode(grammarAccess.getAtomAccess().getLeftParenthesisKeyword_1_1_0_2_0(), null); 
            	                  
            	            }
            	            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7191:1: ( (lv_e_5_0= ruleExprList ) )
            	            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7192:1: (lv_e_5_0= ruleExprList )
            	            {
            	            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7192:1: (lv_e_5_0= ruleExprList )
            	            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7193:3: lv_e_5_0= ruleExprList
            	            {
            	            if ( backtracking==0 ) {
            	               
            	              	        currentNode=createCompositeNode(grammarAccess.getAtomAccess().getEExprListParserRuleCall_1_1_0_2_1_0(), currentNode); 
            	              	    
            	            }
            	            pushFollow(FOLLOW_ruleExprList_in_ruleAtom13509);
            	            lv_e_5_0=ruleExprList();
            	            _fsp--;
            	            if (failed) return current;
            	            if ( backtracking==0 ) {

            	              	        if (current==null) {
            	              	            current = factory.create(grammarAccess.getAtomRule().getType().getClassifier());
            	              	            associateNodeWithAstElement(currentNode.getParent(), current);
            	              	        }
            	              	        try {
            	              	       		add(
            	              	       			current, 
            	              	       			"e",
            	              	        		lv_e_5_0, 
            	              	        		"ExprList", 
            	              	        		currentNode);
            	              	        } catch (ValueConverterException vce) {
            	              				handleValueConverterException(vce);
            	              	        }
            	              	        currentNode = currentNode.getParent();
            	              	    
            	            }

            	            }


            	            }

            	            match(input,44,FOLLOW_44_in_ruleAtom13519); if (failed) return current;
            	            if ( backtracking==0 ) {

            	                      createLeafNode(grammarAccess.getAtomAccess().getRightParenthesisKeyword_1_1_0_2_2(), null); 
            	                  
            	            }

            	            }
            	            break;

            	    }


            	    }


            	    }
            	    break;
            	case 2 :
            	    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7220:6: ( '[' ( (lv_exp_8_0= ruleExpression ) ) ']' )
            	    {
            	    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7220:6: ( '[' ( (lv_exp_8_0= ruleExpression ) ) ']' )
            	    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7220:8: '[' ( (lv_exp_8_0= ruleExpression ) ) ']'
            	    {
            	    match(input,32,FOLLOW_32_in_ruleAtom13539); if (failed) return current;
            	    if ( backtracking==0 ) {

            	              createLeafNode(grammarAccess.getAtomAccess().getLeftSquareBracketKeyword_1_1_1_0(), null); 
            	          
            	    }
            	    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7224:1: ( (lv_exp_8_0= ruleExpression ) )
            	    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7225:1: (lv_exp_8_0= ruleExpression )
            	    {
            	    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7225:1: (lv_exp_8_0= ruleExpression )
            	    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7226:3: lv_exp_8_0= ruleExpression
            	    {
            	    if ( backtracking==0 ) {
            	       
            	      	        currentNode=createCompositeNode(grammarAccess.getAtomAccess().getExpExpressionParserRuleCall_1_1_1_1_0(), currentNode); 
            	      	    
            	    }
            	    pushFollow(FOLLOW_ruleExpression_in_ruleAtom13560);
            	    lv_exp_8_0=ruleExpression();
            	    _fsp--;
            	    if (failed) return current;
            	    if ( backtracking==0 ) {

            	      	        if (current==null) {
            	      	            current = factory.create(grammarAccess.getAtomRule().getType().getClassifier());
            	      	            associateNodeWithAstElement(currentNode.getParent(), current);
            	      	        }
            	      	        try {
            	      	       		add(
            	      	       			current, 
            	      	       			"exp",
            	      	        		lv_exp_8_0, 
            	      	        		"Expression", 
            	      	        		currentNode);
            	      	        } catch (ValueConverterException vce) {
            	      				handleValueConverterException(vce);
            	      	        }
            	      	        currentNode = currentNode.getParent();
            	      	    
            	    }

            	    }


            	    }

            	    match(input,33,FOLLOW_33_in_ruleAtom13570); if (failed) return current;
            	    if ( backtracking==0 ) {

            	              createLeafNode(grammarAccess.getAtomAccess().getRightSquareBracketKeyword_1_1_1_2(), null); 
            	          
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop95;
                }
            } while (true);


            }


            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
                  	lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruleAtom


    // $ANTLR start entryRulePrimaryExpression
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7260:1: entryRulePrimaryExpression returns [EObject current=null] : iv_rulePrimaryExpression= rulePrimaryExpression EOF ;
    public final EObject entryRulePrimaryExpression() throws RecognitionException {
        EObject current = null;

        EObject iv_rulePrimaryExpression = null;


        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7261:2: (iv_rulePrimaryExpression= rulePrimaryExpression EOF )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7262:2: iv_rulePrimaryExpression= rulePrimaryExpression EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getPrimaryExpressionRule(), currentNode); 
            }
            pushFollow(FOLLOW_rulePrimaryExpression_in_entryRulePrimaryExpression13610);
            iv_rulePrimaryExpression=rulePrimaryExpression();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_rulePrimaryExpression; 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRulePrimaryExpression13620); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRulePrimaryExpression


    // $ANTLR start rulePrimaryExpression
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7269:1: rulePrimaryExpression returns [EObject current=null] : ( (this_IdentPrimary_0= ruleIdentPrimary ( '.' ruleCLASS )? ) | ruleConstant | ( ':' ruleIdentifier ) | ( '(' (this_ExpressionOrVector_7= ruleExpressionOrVector | this_UnionRule_8= ruleUnionRule ) ')' ) | ( '?' ( RULE_INT )? ) ) ;
    public final EObject rulePrimaryExpression() throws RecognitionException {
        EObject current = null;

        EObject this_IdentPrimary_0 = null;

        EObject this_ExpressionOrVector_7 = null;

        EObject this_UnionRule_8 = null;


         EObject temp=null; setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7274:6: ( ( (this_IdentPrimary_0= ruleIdentPrimary ( '.' ruleCLASS )? ) | ruleConstant | ( ':' ruleIdentifier ) | ( '(' (this_ExpressionOrVector_7= ruleExpressionOrVector | this_UnionRule_8= ruleUnionRule ) ')' ) | ( '?' ( RULE_INT )? ) ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7275:1: ( (this_IdentPrimary_0= ruleIdentPrimary ( '.' ruleCLASS )? ) | ruleConstant | ( ':' ruleIdentifier ) | ( '(' (this_ExpressionOrVector_7= ruleExpressionOrVector | this_UnionRule_8= ruleUnionRule ) ')' ) | ( '?' ( RULE_INT )? ) )
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7275:1: ( (this_IdentPrimary_0= ruleIdentPrimary ( '.' ruleCLASS )? ) | ruleConstant | ( ':' ruleIdentifier ) | ( '(' (this_ExpressionOrVector_7= ruleExpressionOrVector | this_UnionRule_8= ruleUnionRule ) ')' ) | ( '?' ( RULE_INT )? ) )
            int alt99=5;
            switch ( input.LA(1) ) {
            case RULE_ID:
            case 26:
            case 38:
            case 39:
            case 40:
            case 42:
            case 45:
            case 54:
            case 55:
            case 59:
            case 75:
            case 76:
            case 77:
            case 78:
            case 92:
            case 93:
            case 94:
            case 125:
            case 126:
            case 127:
            case 177:
            case 178:
            case 179:
            case 189:
            case 190:
            case 191:
            case 192:
            case 193:
            case 194:
            case 213:
            case 214:
            case 215:
            case 216:
            case 217:
            case 218:
            case 219:
            case 220:
            case 221:
            case 222:
            case 223:
            case 224:
            case 225:
            case 226:
            case 227:
            case 228:
            case 229:
            case 230:
                {
                alt99=1;
                }
                break;
            case RULE_STRING:
            case RULE_INT:
            case RULE_SIGNED_INT:
            case RULE_HEX:
            case 17:
            case 18:
            case 36:
            case 240:
            case 241:
            case 242:
            case 243:
            case 244:
            case 245:
            case 246:
            case 247:
            case 248:
            case 249:
                {
                alt99=2;
                }
                break;
            case 63:
                {
                alt99=3;
                }
                break;
            case 43:
                {
                alt99=4;
                }
                break;
            case 62:
                {
                alt99=5;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("7275:1: ( (this_IdentPrimary_0= ruleIdentPrimary ( '.' ruleCLASS )? ) | ruleConstant | ( ':' ruleIdentifier ) | ( '(' (this_ExpressionOrVector_7= ruleExpressionOrVector | this_UnionRule_8= ruleUnionRule ) ')' ) | ( '?' ( RULE_INT )? ) )", 99, 0, input);

                throw nvae;
            }

            switch (alt99) {
                case 1 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7275:2: (this_IdentPrimary_0= ruleIdentPrimary ( '.' ruleCLASS )? )
                    {
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7275:2: (this_IdentPrimary_0= ruleIdentPrimary ( '.' ruleCLASS )? )
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7276:2: this_IdentPrimary_0= ruleIdentPrimary ( '.' ruleCLASS )?
                    {
                    if ( backtracking==0 ) {
                       
                      	  /* */ 
                      	
                    }
                    if ( backtracking==0 ) {
                       
                              currentNode=createCompositeNode(grammarAccess.getPrimaryExpressionAccess().getIdentPrimaryParserRuleCall_0_0(), currentNode); 
                          
                    }
                    pushFollow(FOLLOW_ruleIdentPrimary_in_rulePrimaryExpression13671);
                    this_IdentPrimary_0=ruleIdentPrimary();
                    _fsp--;
                    if (failed) return current;
                    if ( backtracking==0 ) {
                       
                              current = this_IdentPrimary_0; 
                              currentNode = currentNode.getParent();
                          
                    }
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7287:1: ( '.' ruleCLASS )?
                    int alt96=2;
                    int LA96_0 = input.LA(1);

                    if ( (LA96_0==36) ) {
                        int LA96_1 = input.LA(2);

                        if ( ((LA96_1>=122 && LA96_1<=124)) ) {
                            alt96=1;
                        }
                    }
                    switch (alt96) {
                        case 1 :
                            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7287:3: '.' ruleCLASS
                            {
                            match(input,36,FOLLOW_36_in_rulePrimaryExpression13681); if (failed) return current;
                            if ( backtracking==0 ) {

                                      createLeafNode(grammarAccess.getPrimaryExpressionAccess().getFullStopKeyword_0_1_0(), null); 
                                  
                            }
                            pushFollow(FOLLOW_ruleCLASS_in_rulePrimaryExpression13690);
                            ruleCLASS();
                            _fsp--;
                            if (failed) return current;

                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7292:6: ruleConstant
                    {
                    pushFollow(FOLLOW_ruleConstant_in_rulePrimaryExpression13700);
                    ruleConstant();
                    _fsp--;
                    if (failed) return current;

                    }
                    break;
                case 3 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7293:6: ( ':' ruleIdentifier )
                    {
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7293:6: ( ':' ruleIdentifier )
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7293:8: ':' ruleIdentifier
                    {
                    match(input,63,FOLLOW_63_in_rulePrimaryExpression13709); if (failed) return current;
                    if ( backtracking==0 ) {

                              createLeafNode(grammarAccess.getPrimaryExpressionAccess().getColonKeyword_2_0(), null); 
                          
                    }
                    pushFollow(FOLLOW_ruleIdentifier_in_rulePrimaryExpression13718);
                    ruleIdentifier();
                    _fsp--;
                    if (failed) return current;

                    }


                    }
                    break;
                case 4 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7298:6: ( '(' (this_ExpressionOrVector_7= ruleExpressionOrVector | this_UnionRule_8= ruleUnionRule ) ')' )
                    {
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7298:6: ( '(' (this_ExpressionOrVector_7= ruleExpressionOrVector | this_UnionRule_8= ruleUnionRule ) ')' )
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7298:8: '(' (this_ExpressionOrVector_7= ruleExpressionOrVector | this_UnionRule_8= ruleUnionRule ) ')'
                    {
                    match(input,43,FOLLOW_43_in_rulePrimaryExpression13728); if (failed) return current;
                    if ( backtracking==0 ) {

                              createLeafNode(grammarAccess.getPrimaryExpressionAccess().getLeftParenthesisKeyword_3_0(), null); 
                          
                    }
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7302:1: (this_ExpressionOrVector_7= ruleExpressionOrVector | this_UnionRule_8= ruleUnionRule )
                    int alt97=2;
                    alt97 = dfa97.predict(input);
                    switch (alt97) {
                        case 1 :
                            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7303:2: this_ExpressionOrVector_7= ruleExpressionOrVector
                            {
                            if ( backtracking==0 ) {
                               
                              	  /* */ 
                              	
                            }
                            if ( backtracking==0 ) {
                               
                                      currentNode=createCompositeNode(grammarAccess.getPrimaryExpressionAccess().getExpressionOrVectorParserRuleCall_3_1_0(), currentNode); 
                                  
                            }
                            pushFollow(FOLLOW_ruleExpressionOrVector_in_rulePrimaryExpression13754);
                            this_ExpressionOrVector_7=ruleExpressionOrVector();
                            _fsp--;
                            if (failed) return current;
                            if ( backtracking==0 ) {
                               
                                      current = this_ExpressionOrVector_7; 
                                      currentNode = currentNode.getParent();
                                  
                            }

                            }
                            break;
                        case 2 :
                            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7316:2: this_UnionRule_8= ruleUnionRule
                            {
                            if ( backtracking==0 ) {
                               
                              	  /* */ 
                              	
                            }
                            if ( backtracking==0 ) {
                               
                                      currentNode=createCompositeNode(grammarAccess.getPrimaryExpressionAccess().getUnionRuleParserRuleCall_3_1_1(), currentNode); 
                                  
                            }
                            pushFollow(FOLLOW_ruleUnionRule_in_rulePrimaryExpression13784);
                            this_UnionRule_8=ruleUnionRule();
                            _fsp--;
                            if (failed) return current;
                            if ( backtracking==0 ) {
                               
                                      current = this_UnionRule_8; 
                                      currentNode = currentNode.getParent();
                                  
                            }

                            }
                            break;

                    }

                    match(input,44,FOLLOW_44_in_rulePrimaryExpression13794); if (failed) return current;
                    if ( backtracking==0 ) {

                              createLeafNode(grammarAccess.getPrimaryExpressionAccess().getRightParenthesisKeyword_3_2(), null); 
                          
                    }

                    }


                    }
                    break;
                case 5 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7332:6: ( '?' ( RULE_INT )? )
                    {
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7332:6: ( '?' ( RULE_INT )? )
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7332:8: '?' ( RULE_INT )?
                    {
                    match(input,62,FOLLOW_62_in_rulePrimaryExpression13812); if (failed) return current;
                    if ( backtracking==0 ) {

                              createLeafNode(grammarAccess.getPrimaryExpressionAccess().getQuestionMarkKeyword_4_0(), null); 
                          
                    }
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7336:1: ( RULE_INT )?
                    int alt98=2;
                    int LA98_0 = input.LA(1);

                    if ( (LA98_0==RULE_INT) ) {
                        alt98=1;
                    }
                    switch (alt98) {
                        case 1 :
                            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7336:2: RULE_INT
                            {
                            match(input,RULE_INT,FOLLOW_RULE_INT_in_rulePrimaryExpression13822); if (failed) return current;
                            if ( backtracking==0 ) {
                               
                                  createLeafNode(grammarAccess.getPrimaryExpressionAccess().getINTTerminalRuleCall_4_1(), null); 
                                  
                            }

                            }
                            break;

                    }


                    }


                    }
                    break;

            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
                  	lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end rulePrimaryExpression


    // $ANTLR start entryRuleExpressionOrVector
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7348:1: entryRuleExpressionOrVector returns [EObject current=null] : iv_ruleExpressionOrVector= ruleExpressionOrVector EOF ;
    public final EObject entryRuleExpressionOrVector() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleExpressionOrVector = null;


        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7349:2: (iv_ruleExpressionOrVector= ruleExpressionOrVector EOF )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7350:2: iv_ruleExpressionOrVector= ruleExpressionOrVector EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getExpressionOrVectorRule(), currentNode); 
            }
            pushFollow(FOLLOW_ruleExpressionOrVector_in_entryRuleExpressionOrVector13860);
            iv_ruleExpressionOrVector=ruleExpressionOrVector();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruleExpressionOrVector; 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleExpressionOrVector13870); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuleExpressionOrVector


    // $ANTLR start ruleExpressionOrVector
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7357:1: ruleExpressionOrVector returns [EObject current=null] : (this_Expression_0= ruleExpression ( (lv_v_1_0= ruleVectorExpr ) )? ) ;
    public final EObject ruleExpressionOrVector() throws RecognitionException {
        EObject current = null;

        EObject this_Expression_0 = null;

        EObject lv_v_1_0 = null;


         EObject temp=null; setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7362:6: ( (this_Expression_0= ruleExpression ( (lv_v_1_0= ruleVectorExpr ) )? ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7363:1: (this_Expression_0= ruleExpression ( (lv_v_1_0= ruleVectorExpr ) )? )
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7363:1: (this_Expression_0= ruleExpression ( (lv_v_1_0= ruleVectorExpr ) )? )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7364:2: this_Expression_0= ruleExpression ( (lv_v_1_0= ruleVectorExpr ) )?
            {
            if ( backtracking==0 ) {
               
              	  /* */ 
              	
            }
            if ( backtracking==0 ) {
               
                      currentNode=createCompositeNode(grammarAccess.getExpressionOrVectorAccess().getExpressionParserRuleCall_0(), currentNode); 
                  
            }
            pushFollow(FOLLOW_ruleExpression_in_ruleExpressionOrVector13920);
            this_Expression_0=ruleExpression();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               
                      current = this_Expression_0; 
                      currentNode = currentNode.getParent();
                  
            }
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7375:1: ( (lv_v_1_0= ruleVectorExpr ) )?
            int alt100=2;
            int LA100_0 = input.LA(1);

            if ( (LA100_0==28) ) {
                alt100=1;
            }
            switch (alt100) {
                case 1 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7376:1: (lv_v_1_0= ruleVectorExpr )
                    {
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7376:1: (lv_v_1_0= ruleVectorExpr )
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7377:3: lv_v_1_0= ruleVectorExpr
                    {
                    if ( backtracking==0 ) {
                       
                      	        currentNode=createCompositeNode(grammarAccess.getExpressionOrVectorAccess().getVVectorExprParserRuleCall_1_0(), currentNode); 
                      	    
                    }
                    pushFollow(FOLLOW_ruleVectorExpr_in_ruleExpressionOrVector13940);
                    lv_v_1_0=ruleVectorExpr();
                    _fsp--;
                    if (failed) return current;
                    if ( backtracking==0 ) {

                      	        if (current==null) {
                      	            current = factory.create(grammarAccess.getExpressionOrVectorRule().getType().getClassifier());
                      	            associateNodeWithAstElement(currentNode.getParent(), current);
                      	        }
                      	        try {
                      	       		set(
                      	       			current, 
                      	       			"v",
                      	        		lv_v_1_0, 
                      	        		"VectorExpr", 
                      	        		currentNode);
                      	        } catch (ValueConverterException vce) {
                      				handleValueConverterException(vce);
                      	        }
                      	        currentNode = currentNode.getParent();
                      	    
                    }

                    }


                    }
                    break;

            }


            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
                  	lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruleExpressionOrVector


    // $ANTLR start entryRuleVectorExpr
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7407:1: entryRuleVectorExpr returns [EObject current=null] : iv_ruleVectorExpr= ruleVectorExpr EOF ;
    public final EObject entryRuleVectorExpr() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleVectorExpr = null;


        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7408:2: (iv_ruleVectorExpr= ruleVectorExpr EOF )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7409:2: iv_ruleVectorExpr= ruleVectorExpr EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getVectorExprRule(), currentNode); 
            }
            pushFollow(FOLLOW_ruleVectorExpr_in_entryRuleVectorExpr13977);
            iv_ruleVectorExpr=ruleVectorExpr();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruleVectorExpr; 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleVectorExpr13987); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuleVectorExpr


    // $ANTLR start ruleVectorExpr
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7416:1: ruleVectorExpr returns [EObject current=null] : ( ',' ( (lv_e_1_0= ruleExpression ) ) ( ',' ( (lv_e_3_0= ruleExpression ) ) )* ) ;
    public final EObject ruleVectorExpr() throws RecognitionException {
        EObject current = null;

        EObject lv_e_1_0 = null;

        EObject lv_e_3_0 = null;


         EObject temp=null; setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7421:6: ( ( ',' ( (lv_e_1_0= ruleExpression ) ) ( ',' ( (lv_e_3_0= ruleExpression ) ) )* ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7422:1: ( ',' ( (lv_e_1_0= ruleExpression ) ) ( ',' ( (lv_e_3_0= ruleExpression ) ) )* )
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7422:1: ( ',' ( (lv_e_1_0= ruleExpression ) ) ( ',' ( (lv_e_3_0= ruleExpression ) ) )* )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7422:3: ',' ( (lv_e_1_0= ruleExpression ) ) ( ',' ( (lv_e_3_0= ruleExpression ) ) )*
            {
            match(input,28,FOLLOW_28_in_ruleVectorExpr14022); if (failed) return current;
            if ( backtracking==0 ) {

                      createLeafNode(grammarAccess.getVectorExprAccess().getCommaKeyword_0(), null); 
                  
            }
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7426:1: ( (lv_e_1_0= ruleExpression ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7427:1: (lv_e_1_0= ruleExpression )
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7427:1: (lv_e_1_0= ruleExpression )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7428:3: lv_e_1_0= ruleExpression
            {
            if ( backtracking==0 ) {
               
              	        currentNode=createCompositeNode(grammarAccess.getVectorExprAccess().getEExpressionParserRuleCall_1_0(), currentNode); 
              	    
            }
            pushFollow(FOLLOW_ruleExpression_in_ruleVectorExpr14043);
            lv_e_1_0=ruleExpression();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {

              	        if (current==null) {
              	            current = factory.create(grammarAccess.getVectorExprRule().getType().getClassifier());
              	            associateNodeWithAstElement(currentNode.getParent(), current);
              	        }
              	        try {
              	       		add(
              	       			current, 
              	       			"e",
              	        		lv_e_1_0, 
              	        		"Expression", 
              	        		currentNode);
              	        } catch (ValueConverterException vce) {
              				handleValueConverterException(vce);
              	        }
              	        currentNode = currentNode.getParent();
              	    
            }

            }


            }

            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7450:2: ( ',' ( (lv_e_3_0= ruleExpression ) ) )*
            loop101:
            do {
                int alt101=2;
                int LA101_0 = input.LA(1);

                if ( (LA101_0==28) ) {
                    alt101=1;
                }


                switch (alt101) {
            	case 1 :
            	    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7450:4: ',' ( (lv_e_3_0= ruleExpression ) )
            	    {
            	    match(input,28,FOLLOW_28_in_ruleVectorExpr14054); if (failed) return current;
            	    if ( backtracking==0 ) {

            	              createLeafNode(grammarAccess.getVectorExprAccess().getCommaKeyword_2_0(), null); 
            	          
            	    }
            	    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7454:1: ( (lv_e_3_0= ruleExpression ) )
            	    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7455:1: (lv_e_3_0= ruleExpression )
            	    {
            	    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7455:1: (lv_e_3_0= ruleExpression )
            	    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7456:3: lv_e_3_0= ruleExpression
            	    {
            	    if ( backtracking==0 ) {
            	       
            	      	        currentNode=createCompositeNode(grammarAccess.getVectorExprAccess().getEExpressionParserRuleCall_2_1_0(), currentNode); 
            	      	    
            	    }
            	    pushFollow(FOLLOW_ruleExpression_in_ruleVectorExpr14075);
            	    lv_e_3_0=ruleExpression();
            	    _fsp--;
            	    if (failed) return current;
            	    if ( backtracking==0 ) {

            	      	        if (current==null) {
            	      	            current = factory.create(grammarAccess.getVectorExprRule().getType().getClassifier());
            	      	            associateNodeWithAstElement(currentNode.getParent(), current);
            	      	        }
            	      	        try {
            	      	       		add(
            	      	       			current, 
            	      	       			"e",
            	      	        		lv_e_3_0, 
            	      	        		"Expression", 
            	      	        		currentNode);
            	      	        } catch (ValueConverterException vce) {
            	      				handleValueConverterException(vce);
            	      	        }
            	      	        currentNode = currentNode.getParent();
            	      	    
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop101;
                }
            } while (true);


            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
                  	lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruleVectorExpr


    // $ANTLR start entryRuleIdentPrimary
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7486:1: entryRuleIdentPrimary returns [EObject current=null] : iv_ruleIdentPrimary= ruleIdentPrimary EOF ;
    public final EObject entryRuleIdentPrimary() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleIdentPrimary = null;


        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7487:2: (iv_ruleIdentPrimary= ruleIdentPrimary EOF )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7488:2: iv_ruleIdentPrimary= ruleIdentPrimary EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getIdentPrimaryRule(), currentNode); 
            }
            pushFollow(FOLLOW_ruleIdentPrimary_in_entryRuleIdentPrimary14113);
            iv_ruleIdentPrimary=ruleIdentPrimary();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruleIdentPrimary; 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleIdentPrimary14123); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuleIdentPrimary


    // $ANTLR start ruleIdentPrimary
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7495:1: ruleIdentPrimary returns [EObject current=null] : ( ( () ( ruleIdentifier ( ( '.' ruleIdentifier ) | ( '.' ruleELEMENTS ) | ( '.' ruleOBJECT ) )* ( '(' ( (lv_e_9_0= ruleExprList ) ) ')' )? ) ) | this_Aggregate_11= ruleAggregate ) ;
    public final EObject ruleIdentPrimary() throws RecognitionException {
        EObject current = null;

        EObject lv_e_9_0 = null;

        EObject this_Aggregate_11 = null;


         EObject temp=null; setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7500:6: ( ( ( () ( ruleIdentifier ( ( '.' ruleIdentifier ) | ( '.' ruleELEMENTS ) | ( '.' ruleOBJECT ) )* ( '(' ( (lv_e_9_0= ruleExprList ) ) ')' )? ) ) | this_Aggregate_11= ruleAggregate ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7501:1: ( ( () ( ruleIdentifier ( ( '.' ruleIdentifier ) | ( '.' ruleELEMENTS ) | ( '.' ruleOBJECT ) )* ( '(' ( (lv_e_9_0= ruleExprList ) ) ')' )? ) ) | this_Aggregate_11= ruleAggregate )
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7501:1: ( ( () ( ruleIdentifier ( ( '.' ruleIdentifier ) | ( '.' ruleELEMENTS ) | ( '.' ruleOBJECT ) )* ( '(' ( (lv_e_9_0= ruleExprList ) ) ')' )? ) ) | this_Aggregate_11= ruleAggregate )
            int alt104=2;
            int LA104_0 = input.LA(1);

            if ( (LA104_0==RULE_ID||LA104_0==26||(LA104_0>=38 && LA104_0<=40)||LA104_0==42||LA104_0==45||(LA104_0>=54 && LA104_0<=55)||LA104_0==59||(LA104_0>=75 && LA104_0<=78)||(LA104_0>=92 && LA104_0<=94)||(LA104_0>=177 && LA104_0<=179)||(LA104_0>=189 && LA104_0<=194)) ) {
                alt104=1;
            }
            else if ( ((LA104_0>=125 && LA104_0<=127)||(LA104_0>=213 && LA104_0<=230)) ) {
                alt104=2;
            }
            else {
                if (backtracking>0) {failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("7501:1: ( ( () ( ruleIdentifier ( ( '.' ruleIdentifier ) | ( '.' ruleELEMENTS ) | ( '.' ruleOBJECT ) )* ( '(' ( (lv_e_9_0= ruleExprList ) ) ')' )? ) ) | this_Aggregate_11= ruleAggregate )", 104, 0, input);

                throw nvae;
            }
            switch (alt104) {
                case 1 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7501:2: ( () ( ruleIdentifier ( ( '.' ruleIdentifier ) | ( '.' ruleELEMENTS ) | ( '.' ruleOBJECT ) )* ( '(' ( (lv_e_9_0= ruleExprList ) ) ')' )? ) )
                    {
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7501:2: ( () ( ruleIdentifier ( ( '.' ruleIdentifier ) | ( '.' ruleELEMENTS ) | ( '.' ruleOBJECT ) )* ( '(' ( (lv_e_9_0= ruleExprList ) ) ')' )? ) )
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7501:3: () ( ruleIdentifier ( ( '.' ruleIdentifier ) | ( '.' ruleELEMENTS ) | ( '.' ruleOBJECT ) )* ( '(' ( (lv_e_9_0= ruleExprList ) ) ')' )? )
                    {
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7501:3: ()
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7502:2: 
                    {
                    if ( backtracking==0 ) {
                       
                      	  /* */ 
                      	
                    }
                    if ( backtracking==0 ) {
                       
                              temp=factory.create(grammarAccess.getIdentPrimaryAccess().getIdentPrimaryAction_0_0().getType().getClassifier());
                              current = temp; 
                              temp = null;
                              CompositeNode newNode = createCompositeNode(grammarAccess.getIdentPrimaryAccess().getIdentPrimaryAction_0_0(), currentNode.getParent());
                          newNode.getChildren().add(currentNode);
                          moveLookaheadInfo(currentNode, newNode);
                          currentNode = newNode; 
                              associateNodeWithAstElement(currentNode, current); 
                          
                    }

                    }

                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7515:2: ( ruleIdentifier ( ( '.' ruleIdentifier ) | ( '.' ruleELEMENTS ) | ( '.' ruleOBJECT ) )* ( '(' ( (lv_e_9_0= ruleExprList ) ) ')' )? )
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7515:3: ruleIdentifier ( ( '.' ruleIdentifier ) | ( '.' ruleELEMENTS ) | ( '.' ruleOBJECT ) )* ( '(' ( (lv_e_9_0= ruleExprList ) ) ')' )?
                    {
                    pushFollow(FOLLOW_ruleIdentifier_in_ruleIdentPrimary14171);
                    ruleIdentifier();
                    _fsp--;
                    if (failed) return current;
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7515:17: ( ( '.' ruleIdentifier ) | ( '.' ruleELEMENTS ) | ( '.' ruleOBJECT ) )*
                    loop102:
                    do {
                        int alt102=4;
                        int LA102_0 = input.LA(1);

                        if ( (LA102_0==36) ) {
                            switch ( input.LA(2) ) {
                            case 89:
                            case 90:
                            case 91:
                                {
                                alt102=3;
                                }
                                break;
                            case 75:
                                {
                                int LA102_4 = input.LA(3);

                                if ( (LA102_4==RULE_ID) ) {
                                    int LA102_5 = input.LA(4);

                                    if ( (synpred175()) ) {
                                        alt102=1;
                                    }


                                }


                                }
                                break;
                            case RULE_ID:
                                {
                                int LA102_5 = input.LA(3);

                                if ( (synpred175()) ) {
                                    alt102=1;
                                }


                                }
                                break;
                            case 76:
                                {
                                int LA102_6 = input.LA(3);

                                if ( (synpred175()) ) {
                                    alt102=1;
                                }


                                }
                                break;
                            case 77:
                                {
                                int LA102_7 = input.LA(3);

                                if ( (synpred175()) ) {
                                    alt102=1;
                                }


                                }
                                break;
                            case 78:
                                {
                                int LA102_8 = input.LA(3);

                                if ( (synpred175()) ) {
                                    alt102=1;
                                }


                                }
                                break;
                            case 42:
                                {
                                int LA102_9 = input.LA(3);

                                if ( (synpred175()) ) {
                                    alt102=1;
                                }


                                }
                                break;
                            case 45:
                                {
                                int LA102_10 = input.LA(3);

                                if ( (synpred175()) ) {
                                    alt102=1;
                                }


                                }
                                break;
                            case 54:
                                {
                                int LA102_11 = input.LA(3);

                                if ( (synpred175()) ) {
                                    alt102=1;
                                }


                                }
                                break;
                            case 55:
                                {
                                int LA102_12 = input.LA(3);

                                if ( (synpred175()) ) {
                                    alt102=1;
                                }


                                }
                                break;
                            case 26:
                                {
                                int LA102_13 = input.LA(3);

                                if ( (synpred175()) ) {
                                    alt102=1;
                                }


                                }
                                break;
                            case 38:
                                {
                                int LA102_14 = input.LA(3);

                                if ( (synpred175()) ) {
                                    alt102=1;
                                }


                                }
                                break;
                            case 40:
                                {
                                int LA102_15 = input.LA(3);

                                if ( (synpred175()) ) {
                                    alt102=1;
                                }


                                }
                                break;
                            case 39:
                                {
                                int LA102_16 = input.LA(3);

                                if ( (synpred175()) ) {
                                    alt102=1;
                                }


                                }
                                break;
                            case 59:
                                {
                                int LA102_17 = input.LA(3);

                                if ( (synpred175()) ) {
                                    alt102=1;
                                }


                                }
                                break;
                            case 189:
                                {
                                int LA102_18 = input.LA(3);

                                if ( (synpred175()) ) {
                                    alt102=1;
                                }


                                }
                                break;
                            case 190:
                                {
                                int LA102_19 = input.LA(3);

                                if ( (synpred175()) ) {
                                    alt102=1;
                                }


                                }
                                break;
                            case 191:
                                {
                                int LA102_20 = input.LA(3);

                                if ( (synpred175()) ) {
                                    alt102=1;
                                }


                                }
                                break;
                            case 192:
                                {
                                int LA102_21 = input.LA(3);

                                if ( (synpred175()) ) {
                                    alt102=1;
                                }


                                }
                                break;
                            case 193:
                                {
                                int LA102_22 = input.LA(3);

                                if ( (synpred175()) ) {
                                    alt102=1;
                                }


                                }
                                break;
                            case 194:
                                {
                                int LA102_23 = input.LA(3);

                                if ( (synpred175()) ) {
                                    alt102=1;
                                }


                                }
                                break;
                            case 92:
                                {
                                int LA102_24 = input.LA(3);

                                if ( (synpred175()) ) {
                                    alt102=1;
                                }


                                }
                                break;
                            case 93:
                                {
                                int LA102_25 = input.LA(3);

                                if ( (synpred175()) ) {
                                    alt102=1;
                                }


                                }
                                break;
                            case 94:
                                {
                                int LA102_26 = input.LA(3);

                                if ( (synpred175()) ) {
                                    alt102=1;
                                }


                                }
                                break;
                            case 177:
                                {
                                int LA102_27 = input.LA(3);

                                if ( (synpred175()) ) {
                                    alt102=1;
                                }


                                }
                                break;
                            case 178:
                                {
                                int LA102_28 = input.LA(3);

                                if ( (synpred175()) ) {
                                    alt102=1;
                                }


                                }
                                break;
                            case 179:
                                {
                                int LA102_29 = input.LA(3);

                                if ( (synpred175()) ) {
                                    alt102=1;
                                }


                                }
                                break;
                            case 125:
                            case 126:
                            case 127:
                                {
                                alt102=2;
                                }
                                break;

                            }

                        }


                        switch (alt102) {
                    	case 1 :
                    	    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7515:18: ( '.' ruleIdentifier )
                    	    {
                    	    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7515:18: ( '.' ruleIdentifier )
                    	    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7515:20: '.' ruleIdentifier
                    	    {
                    	    match(input,36,FOLLOW_36_in_ruleIdentPrimary14175); if (failed) return current;
                    	    if ( backtracking==0 ) {

                    	              createLeafNode(grammarAccess.getIdentPrimaryAccess().getFullStopKeyword_0_1_1_0_0(), null); 
                    	          
                    	    }
                    	    pushFollow(FOLLOW_ruleIdentifier_in_ruleIdentPrimary14184);
                    	    ruleIdentifier();
                    	    _fsp--;
                    	    if (failed) return current;

                    	    }


                    	    }
                    	    break;
                    	case 2 :
                    	    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7520:6: ( '.' ruleELEMENTS )
                    	    {
                    	    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7520:6: ( '.' ruleELEMENTS )
                    	    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7520:8: '.' ruleELEMENTS
                    	    {
                    	    match(input,36,FOLLOW_36_in_ruleIdentPrimary14194); if (failed) return current;
                    	    if ( backtracking==0 ) {

                    	              createLeafNode(grammarAccess.getIdentPrimaryAccess().getFullStopKeyword_0_1_1_1_0(), null); 
                    	          
                    	    }
                    	    pushFollow(FOLLOW_ruleELEMENTS_in_ruleIdentPrimary14203);
                    	    ruleELEMENTS();
                    	    _fsp--;
                    	    if (failed) return current;

                    	    }


                    	    }
                    	    break;
                    	case 3 :
                    	    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7525:6: ( '.' ruleOBJECT )
                    	    {
                    	    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7525:6: ( '.' ruleOBJECT )
                    	    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7525:8: '.' ruleOBJECT
                    	    {
                    	    match(input,36,FOLLOW_36_in_ruleIdentPrimary14213); if (failed) return current;
                    	    if ( backtracking==0 ) {

                    	              createLeafNode(grammarAccess.getIdentPrimaryAccess().getFullStopKeyword_0_1_1_2_0(), null); 
                    	          
                    	    }
                    	    pushFollow(FOLLOW_ruleOBJECT_in_ruleIdentPrimary14222);
                    	    ruleOBJECT();
                    	    _fsp--;
                    	    if (failed) return current;

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop102;
                        }
                    } while (true);

                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7529:14: ( '(' ( (lv_e_9_0= ruleExprList ) ) ')' )?
                    int alt103=2;
                    int LA103_0 = input.LA(1);

                    if ( (LA103_0==43) ) {
                        alt103=1;
                    }
                    switch (alt103) {
                        case 1 :
                            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7529:16: '(' ( (lv_e_9_0= ruleExprList ) ) ')'
                            {
                            match(input,43,FOLLOW_43_in_ruleIdentPrimary14228); if (failed) return current;
                            if ( backtracking==0 ) {

                                      createLeafNode(grammarAccess.getIdentPrimaryAccess().getLeftParenthesisKeyword_0_1_2_0(), null); 
                                  
                            }
                            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7533:1: ( (lv_e_9_0= ruleExprList ) )
                            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7534:1: (lv_e_9_0= ruleExprList )
                            {
                            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7534:1: (lv_e_9_0= ruleExprList )
                            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7535:3: lv_e_9_0= ruleExprList
                            {
                            if ( backtracking==0 ) {
                               
                              	        currentNode=createCompositeNode(grammarAccess.getIdentPrimaryAccess().getEExprListParserRuleCall_0_1_2_1_0(), currentNode); 
                              	    
                            }
                            pushFollow(FOLLOW_ruleExprList_in_ruleIdentPrimary14249);
                            lv_e_9_0=ruleExprList();
                            _fsp--;
                            if (failed) return current;
                            if ( backtracking==0 ) {

                              	        if (current==null) {
                              	            current = factory.create(grammarAccess.getIdentPrimaryRule().getType().getClassifier());
                              	            associateNodeWithAstElement(currentNode.getParent(), current);
                              	        }
                              	        try {
                              	       		set(
                              	       			current, 
                              	       			"e",
                              	        		lv_e_9_0, 
                              	        		"ExprList", 
                              	        		currentNode);
                              	        } catch (ValueConverterException vce) {
                              				handleValueConverterException(vce);
                              	        }
                              	        currentNode = currentNode.getParent();
                              	    
                            }

                            }


                            }

                            match(input,44,FOLLOW_44_in_ruleIdentPrimary14259); if (failed) return current;
                            if ( backtracking==0 ) {

                                      createLeafNode(grammarAccess.getIdentPrimaryAccess().getRightParenthesisKeyword_0_1_2_2(), null); 
                                  
                            }

                            }
                            break;

                    }


                    }


                    }


                    }
                    break;
                case 2 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7563:2: this_Aggregate_11= ruleAggregate
                    {
                    if ( backtracking==0 ) {
                       
                      	  /* */ 
                      	
                    }
                    if ( backtracking==0 ) {
                       
                              currentNode=createCompositeNode(grammarAccess.getIdentPrimaryAccess().getAggregateParserRuleCall_1(), currentNode); 
                          
                    }
                    pushFollow(FOLLOW_ruleAggregate_in_ruleIdentPrimary14294);
                    this_Aggregate_11=ruleAggregate();
                    _fsp--;
                    if (failed) return current;
                    if ( backtracking==0 ) {
                       
                              current = this_Aggregate_11; 
                              currentNode = currentNode.getParent();
                          
                    }

                    }
                    break;

            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
                  	lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruleIdentPrimary


    // $ANTLR start entryRuleAggregate
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7582:1: entryRuleAggregate returns [EObject current=null] : iv_ruleAggregate= ruleAggregate EOF ;
    public final EObject entryRuleAggregate() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleAggregate = null;


        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7583:2: (iv_ruleAggregate= ruleAggregate EOF )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7584:2: iv_ruleAggregate= ruleAggregate EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getAggregateRule(), currentNode); 
            }
            pushFollow(FOLLOW_ruleAggregate_in_entryRuleAggregate14329);
            iv_ruleAggregate=ruleAggregate();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruleAggregate; 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleAggregate14339); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuleAggregate


    // $ANTLR start ruleAggregate
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7591:1: ruleAggregate returns [EObject current=null] : ( ( () ( ruleSUM | ruleAVG | ruleMAX | ruleMIN ) '(' ( (lv_a_6_0= ruleAdditiveExpression ) ) ')' ) | ( () ruleCOUNT '(' ( '*' | ( ( ruleDISTINCT | ruleALL )? ( rulePath | ruleCollectionExpr ) ) ) ')' ) | ruleCollectionExpr ) ;
    public final EObject ruleAggregate() throws RecognitionException {
        EObject current = null;

        EObject lv_a_6_0 = null;


         EObject temp=null; setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7596:6: ( ( ( () ( ruleSUM | ruleAVG | ruleMAX | ruleMIN ) '(' ( (lv_a_6_0= ruleAdditiveExpression ) ) ')' ) | ( () ruleCOUNT '(' ( '*' | ( ( ruleDISTINCT | ruleALL )? ( rulePath | ruleCollectionExpr ) ) ) ')' ) | ruleCollectionExpr ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7597:1: ( ( () ( ruleSUM | ruleAVG | ruleMAX | ruleMIN ) '(' ( (lv_a_6_0= ruleAdditiveExpression ) ) ')' ) | ( () ruleCOUNT '(' ( '*' | ( ( ruleDISTINCT | ruleALL )? ( rulePath | ruleCollectionExpr ) ) ) ')' ) | ruleCollectionExpr )
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7597:1: ( ( () ( ruleSUM | ruleAVG | ruleMAX | ruleMIN ) '(' ( (lv_a_6_0= ruleAdditiveExpression ) ) ')' ) | ( () ruleCOUNT '(' ( '*' | ( ( ruleDISTINCT | ruleALL )? ( rulePath | ruleCollectionExpr ) ) ) ')' ) | ruleCollectionExpr )
            int alt109=3;
            switch ( input.LA(1) ) {
            case 213:
            case 214:
            case 215:
            case 216:
            case 217:
            case 218:
            case 219:
            case 220:
            case 221:
            case 222:
            case 223:
            case 224:
                {
                alt109=1;
                }
                break;
            case 225:
            case 226:
            case 227:
                {
                alt109=2;
                }
                break;
            case 125:
            case 126:
            case 127:
            case 228:
            case 229:
            case 230:
                {
                alt109=3;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("7597:1: ( ( () ( ruleSUM | ruleAVG | ruleMAX | ruleMIN ) '(' ( (lv_a_6_0= ruleAdditiveExpression ) ) ')' ) | ( () ruleCOUNT '(' ( '*' | ( ( ruleDISTINCT | ruleALL )? ( rulePath | ruleCollectionExpr ) ) ) ')' ) | ruleCollectionExpr )", 109, 0, input);

                throw nvae;
            }

            switch (alt109) {
                case 1 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7597:2: ( () ( ruleSUM | ruleAVG | ruleMAX | ruleMIN ) '(' ( (lv_a_6_0= ruleAdditiveExpression ) ) ')' )
                    {
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7597:2: ( () ( ruleSUM | ruleAVG | ruleMAX | ruleMIN ) '(' ( (lv_a_6_0= ruleAdditiveExpression ) ) ')' )
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7597:3: () ( ruleSUM | ruleAVG | ruleMAX | ruleMIN ) '(' ( (lv_a_6_0= ruleAdditiveExpression ) ) ')'
                    {
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7597:3: ()
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7598:2: 
                    {
                    if ( backtracking==0 ) {
                       
                      	  /* */ 
                      	
                    }
                    if ( backtracking==0 ) {
                       
                              temp=factory.create(grammarAccess.getAggregateAccess().getAggregateAction_0_0().getType().getClassifier());
                              current = temp; 
                              temp = null;
                              CompositeNode newNode = createCompositeNode(grammarAccess.getAggregateAccess().getAggregateAction_0_0(), currentNode.getParent());
                          newNode.getChildren().add(currentNode);
                          moveLookaheadInfo(currentNode, newNode);
                          currentNode = newNode; 
                              associateNodeWithAstElement(currentNode, current); 
                          
                    }

                    }

                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7611:2: ( ruleSUM | ruleAVG | ruleMAX | ruleMIN )
                    int alt105=4;
                    switch ( input.LA(1) ) {
                    case 213:
                    case 214:
                    case 215:
                        {
                        alt105=1;
                        }
                        break;
                    case 216:
                    case 217:
                    case 218:
                        {
                        alt105=2;
                        }
                        break;
                    case 219:
                    case 220:
                    case 221:
                        {
                        alt105=3;
                        }
                        break;
                    case 222:
                    case 223:
                    case 224:
                        {
                        alt105=4;
                        }
                        break;
                    default:
                        if (backtracking>0) {failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("7611:2: ( ruleSUM | ruleAVG | ruleMAX | ruleMIN )", 105, 0, input);

                        throw nvae;
                    }

                    switch (alt105) {
                        case 1 :
                            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7611:3: ruleSUM
                            {
                            pushFollow(FOLLOW_ruleSUM_in_ruleAggregate14387);
                            ruleSUM();
                            _fsp--;
                            if (failed) return current;

                            }
                            break;
                        case 2 :
                            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7612:6: ruleAVG
                            {
                            pushFollow(FOLLOW_ruleAVG_in_ruleAggregate14394);
                            ruleAVG();
                            _fsp--;
                            if (failed) return current;

                            }
                            break;
                        case 3 :
                            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7613:6: ruleMAX
                            {
                            pushFollow(FOLLOW_ruleMAX_in_ruleAggregate14401);
                            ruleMAX();
                            _fsp--;
                            if (failed) return current;

                            }
                            break;
                        case 4 :
                            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7614:6: ruleMIN
                            {
                            pushFollow(FOLLOW_ruleMIN_in_ruleAggregate14408);
                            ruleMIN();
                            _fsp--;
                            if (failed) return current;

                            }
                            break;

                    }

                    match(input,43,FOLLOW_43_in_ruleAggregate14411); if (failed) return current;
                    if ( backtracking==0 ) {

                              createLeafNode(grammarAccess.getAggregateAccess().getLeftParenthesisKeyword_0_2(), null); 
                          
                    }
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7618:1: ( (lv_a_6_0= ruleAdditiveExpression ) )
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7619:1: (lv_a_6_0= ruleAdditiveExpression )
                    {
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7619:1: (lv_a_6_0= ruleAdditiveExpression )
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7620:3: lv_a_6_0= ruleAdditiveExpression
                    {
                    if ( backtracking==0 ) {
                       
                      	        currentNode=createCompositeNode(grammarAccess.getAggregateAccess().getAAdditiveExpressionParserRuleCall_0_3_0(), currentNode); 
                      	    
                    }
                    pushFollow(FOLLOW_ruleAdditiveExpression_in_ruleAggregate14432);
                    lv_a_6_0=ruleAdditiveExpression();
                    _fsp--;
                    if (failed) return current;
                    if ( backtracking==0 ) {

                      	        if (current==null) {
                      	            current = factory.create(grammarAccess.getAggregateRule().getType().getClassifier());
                      	            associateNodeWithAstElement(currentNode.getParent(), current);
                      	        }
                      	        try {
                      	       		set(
                      	       			current, 
                      	       			"a",
                      	        		lv_a_6_0, 
                      	        		"AdditiveExpression", 
                      	        		currentNode);
                      	        } catch (ValueConverterException vce) {
                      				handleValueConverterException(vce);
                      	        }
                      	        currentNode = currentNode.getParent();
                      	    
                    }

                    }


                    }

                    match(input,44,FOLLOW_44_in_ruleAggregate14442); if (failed) return current;
                    if ( backtracking==0 ) {

                              createLeafNode(grammarAccess.getAggregateAccess().getRightParenthesisKeyword_0_4(), null); 
                          
                    }

                    }


                    }
                    break;
                case 2 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7647:6: ( () ruleCOUNT '(' ( '*' | ( ( ruleDISTINCT | ruleALL )? ( rulePath | ruleCollectionExpr ) ) ) ')' )
                    {
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7647:6: ( () ruleCOUNT '(' ( '*' | ( ( ruleDISTINCT | ruleALL )? ( rulePath | ruleCollectionExpr ) ) ) ')' )
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7647:7: () ruleCOUNT '(' ( '*' | ( ( ruleDISTINCT | ruleALL )? ( rulePath | ruleCollectionExpr ) ) ) ')'
                    {
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7647:7: ()
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7648:2: 
                    {
                    if ( backtracking==0 ) {
                       
                      	  /* */ 
                      	
                    }
                    if ( backtracking==0 ) {
                       
                              temp=factory.create(grammarAccess.getAggregateAccess().getAggregateAction_1_0().getType().getClassifier());
                              current = temp; 
                              temp = null;
                              CompositeNode newNode = createCompositeNode(grammarAccess.getAggregateAccess().getAggregateAction_1_0(), currentNode.getParent());
                          newNode.getChildren().add(currentNode);
                          moveLookaheadInfo(currentNode, newNode);
                          currentNode = newNode; 
                              associateNodeWithAstElement(currentNode, current); 
                          
                    }

                    }

                    pushFollow(FOLLOW_ruleCOUNT_in_ruleAggregate14471);
                    ruleCOUNT();
                    _fsp--;
                    if (failed) return current;
                    match(input,43,FOLLOW_43_in_ruleAggregate14473); if (failed) return current;
                    if ( backtracking==0 ) {

                              createLeafNode(grammarAccess.getAggregateAccess().getLeftParenthesisKeyword_1_2(), null); 
                          
                    }
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7665:1: ( '*' | ( ( ruleDISTINCT | ruleALL )? ( rulePath | ruleCollectionExpr ) ) )
                    int alt108=2;
                    int LA108_0 = input.LA(1);

                    if ( (LA108_0==73) ) {
                        alt108=1;
                    }
                    else if ( (LA108_0==RULE_ID||LA108_0==26||(LA108_0>=38 && LA108_0<=40)||LA108_0==42||LA108_0==45||(LA108_0>=54 && LA108_0<=55)||LA108_0==59||(LA108_0>=75 && LA108_0<=78)||(LA108_0>=83 && LA108_0<=85)||(LA108_0>=92 && LA108_0<=94)||(LA108_0>=125 && LA108_0<=127)||(LA108_0>=177 && LA108_0<=179)||(LA108_0>=189 && LA108_0<=194)||(LA108_0>=207 && LA108_0<=209)||(LA108_0>=228 && LA108_0<=230)) ) {
                        alt108=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("7665:1: ( '*' | ( ( ruleDISTINCT | ruleALL )? ( rulePath | ruleCollectionExpr ) ) )", 108, 0, input);

                        throw nvae;
                    }
                    switch (alt108) {
                        case 1 :
                            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7665:3: '*'
                            {
                            match(input,73,FOLLOW_73_in_ruleAggregate14484); if (failed) return current;
                            if ( backtracking==0 ) {

                                      createLeafNode(grammarAccess.getAggregateAccess().getAsteriskKeyword_1_3_0(), null); 
                                  
                            }

                            }
                            break;
                        case 2 :
                            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7670:6: ( ( ruleDISTINCT | ruleALL )? ( rulePath | ruleCollectionExpr ) )
                            {
                            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7670:6: ( ( ruleDISTINCT | ruleALL )? ( rulePath | ruleCollectionExpr ) )
                            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7670:7: ( ruleDISTINCT | ruleALL )? ( rulePath | ruleCollectionExpr )
                            {
                            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7670:7: ( ruleDISTINCT | ruleALL )?
                            int alt106=3;
                            int LA106_0 = input.LA(1);

                            if ( ((LA106_0>=83 && LA106_0<=85)) ) {
                                alt106=1;
                            }
                            else if ( ((LA106_0>=207 && LA106_0<=209)) ) {
                                alt106=2;
                            }
                            switch (alt106) {
                                case 1 :
                                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7670:8: ruleDISTINCT
                                    {
                                    pushFollow(FOLLOW_ruleDISTINCT_in_ruleAggregate14501);
                                    ruleDISTINCT();
                                    _fsp--;
                                    if (failed) return current;

                                    }
                                    break;
                                case 2 :
                                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7671:6: ruleALL
                                    {
                                    pushFollow(FOLLOW_ruleALL_in_ruleAggregate14508);
                                    ruleALL();
                                    _fsp--;
                                    if (failed) return current;

                                    }
                                    break;

                            }

                            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7671:15: ( rulePath | ruleCollectionExpr )
                            int alt107=2;
                            int LA107_0 = input.LA(1);

                            if ( (LA107_0==RULE_ID||LA107_0==26||(LA107_0>=38 && LA107_0<=40)||LA107_0==42||LA107_0==45||(LA107_0>=54 && LA107_0<=55)||LA107_0==59||(LA107_0>=75 && LA107_0<=78)||(LA107_0>=92 && LA107_0<=94)||(LA107_0>=177 && LA107_0<=179)||(LA107_0>=189 && LA107_0<=194)) ) {
                                alt107=1;
                            }
                            else if ( ((LA107_0>=125 && LA107_0<=127)||(LA107_0>=228 && LA107_0<=230)) ) {
                                alt107=2;
                            }
                            else {
                                if (backtracking>0) {failed=true; return current;}
                                NoViableAltException nvae =
                                    new NoViableAltException("7671:15: ( rulePath | ruleCollectionExpr )", 107, 0, input);

                                throw nvae;
                            }
                            switch (alt107) {
                                case 1 :
                                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7671:16: rulePath
                                    {
                                    pushFollow(FOLLOW_rulePath_in_ruleAggregate14512);
                                    rulePath();
                                    _fsp--;
                                    if (failed) return current;

                                    }
                                    break;
                                case 2 :
                                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7672:6: ruleCollectionExpr
                                    {
                                    pushFollow(FOLLOW_ruleCollectionExpr_in_ruleAggregate14519);
                                    ruleCollectionExpr();
                                    _fsp--;
                                    if (failed) return current;

                                    }
                                    break;

                            }


                            }


                            }
                            break;

                    }

                    match(input,44,FOLLOW_44_in_ruleAggregate14524); if (failed) return current;
                    if ( backtracking==0 ) {

                              createLeafNode(grammarAccess.getAggregateAccess().getRightParenthesisKeyword_1_4(), null); 
                          
                    }

                    }


                    }
                    break;
                case 3 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7677:6: ruleCollectionExpr
                    {
                    pushFollow(FOLLOW_ruleCollectionExpr_in_ruleAggregate14540);
                    ruleCollectionExpr();
                    _fsp--;
                    if (failed) return current;

                    }
                    break;

            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
                  	lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruleAggregate


    // $ANTLR start entryRuleCollectionExpr
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7685:1: entryRuleCollectionExpr returns [String current=null] : iv_ruleCollectionExpr= ruleCollectionExpr EOF ;
    public final String entryRuleCollectionExpr() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleCollectionExpr = null;


        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7686:2: (iv_ruleCollectionExpr= ruleCollectionExpr EOF )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7687:2: iv_ruleCollectionExpr= ruleCollectionExpr EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getCollectionExprRule(), currentNode); 
            }
            pushFollow(FOLLOW_ruleCollectionExpr_in_entryRuleCollectionExpr14569);
            iv_ruleCollectionExpr=ruleCollectionExpr();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruleCollectionExpr.getText(); 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleCollectionExpr14580); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuleCollectionExpr


    // $ANTLR start ruleCollectionExpr
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7694:1: ruleCollectionExpr returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : ( (this_ELEMENTS_0= ruleELEMENTS | this_INDICES_1= ruleINDICES ) kw= '(' this_Path_3= rulePath kw= ')' ) ;
    public final AntlrDatatypeRuleToken ruleCollectionExpr() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;
        AntlrDatatypeRuleToken this_ELEMENTS_0 = null;

        AntlrDatatypeRuleToken this_INDICES_1 = null;

        AntlrDatatypeRuleToken this_Path_3 = null;


         setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7699:6: ( ( (this_ELEMENTS_0= ruleELEMENTS | this_INDICES_1= ruleINDICES ) kw= '(' this_Path_3= rulePath kw= ')' ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7700:1: ( (this_ELEMENTS_0= ruleELEMENTS | this_INDICES_1= ruleINDICES ) kw= '(' this_Path_3= rulePath kw= ')' )
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7700:1: ( (this_ELEMENTS_0= ruleELEMENTS | this_INDICES_1= ruleINDICES ) kw= '(' this_Path_3= rulePath kw= ')' )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7700:2: (this_ELEMENTS_0= ruleELEMENTS | this_INDICES_1= ruleINDICES ) kw= '(' this_Path_3= rulePath kw= ')'
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7700:2: (this_ELEMENTS_0= ruleELEMENTS | this_INDICES_1= ruleINDICES )
            int alt110=2;
            int LA110_0 = input.LA(1);

            if ( ((LA110_0>=125 && LA110_0<=127)) ) {
                alt110=1;
            }
            else if ( ((LA110_0>=228 && LA110_0<=230)) ) {
                alt110=2;
            }
            else {
                if (backtracking>0) {failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("7700:2: (this_ELEMENTS_0= ruleELEMENTS | this_INDICES_1= ruleINDICES )", 110, 0, input);

                throw nvae;
            }
            switch (alt110) {
                case 1 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7701:5: this_ELEMENTS_0= ruleELEMENTS
                    {
                    if ( backtracking==0 ) {
                       
                              currentNode=createCompositeNode(grammarAccess.getCollectionExprAccess().getELEMENTSParserRuleCall_0_0(), currentNode); 
                          
                    }
                    pushFollow(FOLLOW_ruleELEMENTS_in_ruleCollectionExpr14628);
                    this_ELEMENTS_0=ruleELEMENTS();
                    _fsp--;
                    if (failed) return current;
                    if ( backtracking==0 ) {

                      		current.merge(this_ELEMENTS_0);
                          
                    }
                    if ( backtracking==0 ) {
                       
                              currentNode = currentNode.getParent();
                          
                    }

                    }
                    break;
                case 2 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7713:5: this_INDICES_1= ruleINDICES
                    {
                    if ( backtracking==0 ) {
                       
                              currentNode=createCompositeNode(grammarAccess.getCollectionExprAccess().getINDICESParserRuleCall_0_1(), currentNode); 
                          
                    }
                    pushFollow(FOLLOW_ruleINDICES_in_ruleCollectionExpr14661);
                    this_INDICES_1=ruleINDICES();
                    _fsp--;
                    if (failed) return current;
                    if ( backtracking==0 ) {

                      		current.merge(this_INDICES_1);
                          
                    }
                    if ( backtracking==0 ) {
                       
                              currentNode = currentNode.getParent();
                          
                    }

                    }
                    break;

            }

            kw=(Token)input.LT(1);
            match(input,43,FOLLOW_43_in_ruleCollectionExpr14680); if (failed) return current;
            if ( backtracking==0 ) {

                      current.merge(kw);
                      createLeafNode(grammarAccess.getCollectionExprAccess().getLeftParenthesisKeyword_1(), null); 
                  
            }
            if ( backtracking==0 ) {
               
                      currentNode=createCompositeNode(grammarAccess.getCollectionExprAccess().getPathParserRuleCall_2(), currentNode); 
                  
            }
            pushFollow(FOLLOW_rulePath_in_ruleCollectionExpr14702);
            this_Path_3=rulePath();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {

              		current.merge(this_Path_3);
                  
            }
            if ( backtracking==0 ) {
               
                      currentNode = currentNode.getParent();
                  
            }
            kw=(Token)input.LT(1);
            match(input,44,FOLLOW_44_in_ruleCollectionExpr14720); if (failed) return current;
            if ( backtracking==0 ) {

                      current.merge(kw);
                      createLeafNode(grammarAccess.getCollectionExprAccess().getRightParenthesisKeyword_3(), null); 
                  
            }

            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
              	    lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruleCollectionExpr


    // $ANTLR start entryRuleCompoundExpr
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7754:1: entryRuleCompoundExpr returns [EObject current=null] : iv_ruleCompoundExpr= ruleCompoundExpr EOF ;
    public final EObject entryRuleCompoundExpr() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleCompoundExpr = null;


        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7755:2: (iv_ruleCompoundExpr= ruleCompoundExpr EOF )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7756:2: iv_ruleCompoundExpr= ruleCompoundExpr EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getCompoundExprRule(), currentNode); 
            }
            pushFollow(FOLLOW_ruleCompoundExpr_in_entryRuleCompoundExpr14760);
            iv_ruleCompoundExpr=ruleCompoundExpr();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruleCompoundExpr; 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleCompoundExpr14770); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuleCompoundExpr


    // $ANTLR start ruleCompoundExpr
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7763:1: ruleCompoundExpr returns [EObject current=null] : ( ruleCollectionExpr | rulePath | ( '(' ( ( ( (lv_e_3_0= ruleExpression ) ) ( ',' ( (lv_e_5_0= ruleExpression ) ) )* ) | ( (lv_s_6_0= ruleUnionRule ) ) ) ')' ) ) ;
    public final EObject ruleCompoundExpr() throws RecognitionException {
        EObject current = null;

        EObject lv_e_3_0 = null;

        EObject lv_e_5_0 = null;

        EObject lv_s_6_0 = null;


         EObject temp=null; setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7768:6: ( ( ruleCollectionExpr | rulePath | ( '(' ( ( ( (lv_e_3_0= ruleExpression ) ) ( ',' ( (lv_e_5_0= ruleExpression ) ) )* ) | ( (lv_s_6_0= ruleUnionRule ) ) ) ')' ) ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7769:1: ( ruleCollectionExpr | rulePath | ( '(' ( ( ( (lv_e_3_0= ruleExpression ) ) ( ',' ( (lv_e_5_0= ruleExpression ) ) )* ) | ( (lv_s_6_0= ruleUnionRule ) ) ) ')' ) )
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7769:1: ( ruleCollectionExpr | rulePath | ( '(' ( ( ( (lv_e_3_0= ruleExpression ) ) ( ',' ( (lv_e_5_0= ruleExpression ) ) )* ) | ( (lv_s_6_0= ruleUnionRule ) ) ) ')' ) )
            int alt113=3;
            switch ( input.LA(1) ) {
            case 125:
            case 126:
            case 127:
            case 228:
            case 229:
            case 230:
                {
                alt113=1;
                }
                break;
            case RULE_ID:
            case 26:
            case 38:
            case 39:
            case 40:
            case 42:
            case 45:
            case 54:
            case 55:
            case 59:
            case 75:
            case 76:
            case 77:
            case 78:
            case 92:
            case 93:
            case 94:
            case 177:
            case 178:
            case 179:
            case 189:
            case 190:
            case 191:
            case 192:
            case 193:
            case 194:
                {
                alt113=2;
                }
                break;
            case 43:
                {
                alt113=3;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("7769:1: ( ruleCollectionExpr | rulePath | ( '(' ( ( ( (lv_e_3_0= ruleExpression ) ) ( ',' ( (lv_e_5_0= ruleExpression ) ) )* ) | ( (lv_s_6_0= ruleUnionRule ) ) ) ')' ) )", 113, 0, input);

                throw nvae;
            }

            switch (alt113) {
                case 1 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7769:2: ruleCollectionExpr
                    {
                    pushFollow(FOLLOW_ruleCollectionExpr_in_ruleCompoundExpr14804);
                    ruleCollectionExpr();
                    _fsp--;
                    if (failed) return current;

                    }
                    break;
                case 2 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7770:6: rulePath
                    {
                    pushFollow(FOLLOW_rulePath_in_ruleCompoundExpr14811);
                    rulePath();
                    _fsp--;
                    if (failed) return current;

                    }
                    break;
                case 3 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7771:6: ( '(' ( ( ( (lv_e_3_0= ruleExpression ) ) ( ',' ( (lv_e_5_0= ruleExpression ) ) )* ) | ( (lv_s_6_0= ruleUnionRule ) ) ) ')' )
                    {
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7771:6: ( '(' ( ( ( (lv_e_3_0= ruleExpression ) ) ( ',' ( (lv_e_5_0= ruleExpression ) ) )* ) | ( (lv_s_6_0= ruleUnionRule ) ) ) ')' )
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7771:8: '(' ( ( ( (lv_e_3_0= ruleExpression ) ) ( ',' ( (lv_e_5_0= ruleExpression ) ) )* ) | ( (lv_s_6_0= ruleUnionRule ) ) ) ')'
                    {
                    match(input,43,FOLLOW_43_in_ruleCompoundExpr14820); if (failed) return current;
                    if ( backtracking==0 ) {

                              createLeafNode(grammarAccess.getCompoundExprAccess().getLeftParenthesisKeyword_2_0(), null); 
                          
                    }
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7775:1: ( ( ( (lv_e_3_0= ruleExpression ) ) ( ',' ( (lv_e_5_0= ruleExpression ) ) )* ) | ( (lv_s_6_0= ruleUnionRule ) ) )
                    int alt112=2;
                    alt112 = dfa112.predict(input);
                    switch (alt112) {
                        case 1 :
                            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7775:2: ( ( (lv_e_3_0= ruleExpression ) ) ( ',' ( (lv_e_5_0= ruleExpression ) ) )* )
                            {
                            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7775:2: ( ( (lv_e_3_0= ruleExpression ) ) ( ',' ( (lv_e_5_0= ruleExpression ) ) )* )
                            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7775:3: ( (lv_e_3_0= ruleExpression ) ) ( ',' ( (lv_e_5_0= ruleExpression ) ) )*
                            {
                            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7775:3: ( (lv_e_3_0= ruleExpression ) )
                            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7776:1: (lv_e_3_0= ruleExpression )
                            {
                            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7776:1: (lv_e_3_0= ruleExpression )
                            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7777:3: lv_e_3_0= ruleExpression
                            {
                            if ( backtracking==0 ) {
                               
                              	        currentNode=createCompositeNode(grammarAccess.getCompoundExprAccess().getEExpressionParserRuleCall_2_1_0_0_0(), currentNode); 
                              	    
                            }
                            pushFollow(FOLLOW_ruleExpression_in_ruleCompoundExpr14843);
                            lv_e_3_0=ruleExpression();
                            _fsp--;
                            if (failed) return current;
                            if ( backtracking==0 ) {

                              	        if (current==null) {
                              	            current = factory.create(grammarAccess.getCompoundExprRule().getType().getClassifier());
                              	            associateNodeWithAstElement(currentNode.getParent(), current);
                              	        }
                              	        try {
                              	       		add(
                              	       			current, 
                              	       			"e",
                              	        		lv_e_3_0, 
                              	        		"Expression", 
                              	        		currentNode);
                              	        } catch (ValueConverterException vce) {
                              				handleValueConverterException(vce);
                              	        }
                              	        currentNode = currentNode.getParent();
                              	    
                            }

                            }


                            }

                            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7799:2: ( ',' ( (lv_e_5_0= ruleExpression ) ) )*
                            loop111:
                            do {
                                int alt111=2;
                                int LA111_0 = input.LA(1);

                                if ( (LA111_0==28) ) {
                                    alt111=1;
                                }


                                switch (alt111) {
                            	case 1 :
                            	    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7799:4: ',' ( (lv_e_5_0= ruleExpression ) )
                            	    {
                            	    match(input,28,FOLLOW_28_in_ruleCompoundExpr14854); if (failed) return current;
                            	    if ( backtracking==0 ) {

                            	              createLeafNode(grammarAccess.getCompoundExprAccess().getCommaKeyword_2_1_0_1_0(), null); 
                            	          
                            	    }
                            	    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7803:1: ( (lv_e_5_0= ruleExpression ) )
                            	    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7804:1: (lv_e_5_0= ruleExpression )
                            	    {
                            	    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7804:1: (lv_e_5_0= ruleExpression )
                            	    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7805:3: lv_e_5_0= ruleExpression
                            	    {
                            	    if ( backtracking==0 ) {
                            	       
                            	      	        currentNode=createCompositeNode(grammarAccess.getCompoundExprAccess().getEExpressionParserRuleCall_2_1_0_1_1_0(), currentNode); 
                            	      	    
                            	    }
                            	    pushFollow(FOLLOW_ruleExpression_in_ruleCompoundExpr14875);
                            	    lv_e_5_0=ruleExpression();
                            	    _fsp--;
                            	    if (failed) return current;
                            	    if ( backtracking==0 ) {

                            	      	        if (current==null) {
                            	      	            current = factory.create(grammarAccess.getCompoundExprRule().getType().getClassifier());
                            	      	            associateNodeWithAstElement(currentNode.getParent(), current);
                            	      	        }
                            	      	        try {
                            	      	       		add(
                            	      	       			current, 
                            	      	       			"e",
                            	      	        		lv_e_5_0, 
                            	      	        		"Expression", 
                            	      	        		currentNode);
                            	      	        } catch (ValueConverterException vce) {
                            	      				handleValueConverterException(vce);
                            	      	        }
                            	      	        currentNode = currentNode.getParent();
                            	      	    
                            	    }

                            	    }


                            	    }


                            	    }
                            	    break;

                            	default :
                            	    break loop111;
                                }
                            } while (true);


                            }


                            }
                            break;
                        case 2 :
                            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7828:6: ( (lv_s_6_0= ruleUnionRule ) )
                            {
                            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7828:6: ( (lv_s_6_0= ruleUnionRule ) )
                            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7829:1: (lv_s_6_0= ruleUnionRule )
                            {
                            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7829:1: (lv_s_6_0= ruleUnionRule )
                            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7830:3: lv_s_6_0= ruleUnionRule
                            {
                            if ( backtracking==0 ) {
                               
                              	        currentNode=createCompositeNode(grammarAccess.getCompoundExprAccess().getSUnionRuleParserRuleCall_2_1_1_0(), currentNode); 
                              	    
                            }
                            pushFollow(FOLLOW_ruleUnionRule_in_ruleCompoundExpr14905);
                            lv_s_6_0=ruleUnionRule();
                            _fsp--;
                            if (failed) return current;
                            if ( backtracking==0 ) {

                              	        if (current==null) {
                              	            current = factory.create(grammarAccess.getCompoundExprRule().getType().getClassifier());
                              	            associateNodeWithAstElement(currentNode.getParent(), current);
                              	        }
                              	        try {
                              	       		set(
                              	       			current, 
                              	       			"s",
                              	        		lv_s_6_0, 
                              	        		"UnionRule", 
                              	        		currentNode);
                              	        } catch (ValueConverterException vce) {
                              				handleValueConverterException(vce);
                              	        }
                              	        currentNode = currentNode.getParent();
                              	    
                            }

                            }


                            }


                            }
                            break;

                    }

                    match(input,44,FOLLOW_44_in_ruleCompoundExpr14916); if (failed) return current;
                    if ( backtracking==0 ) {

                              createLeafNode(grammarAccess.getCompoundExprAccess().getRightParenthesisKeyword_2_2(), null); 
                          
                    }

                    }


                    }
                    break;

            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
                  	lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruleCompoundExpr


    // $ANTLR start entryRuleExprList
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7864:1: entryRuleExprList returns [EObject current=null] : iv_ruleExprList= ruleExprList EOF ;
    public final EObject entryRuleExprList() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleExprList = null;


        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7865:2: (iv_ruleExprList= ruleExprList EOF )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7866:2: iv_ruleExprList= ruleExprList EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getExprListRule(), currentNode); 
            }
            pushFollow(FOLLOW_ruleExprList_in_entryRuleExprList14953);
            iv_ruleExprList=ruleExprList();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruleExprList; 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleExprList14963); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuleExprList


    // $ANTLR start ruleExprList
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7873:1: ruleExprList returns [EObject current=null] : ( ( ruleTRAILING | ruleLEADING | ruleBOTH )? ( ( ( (lv_e_3_0= ruleExpression ) ) ( ( ',' ( (lv_e_5_0= ruleExpression ) ) )+ | ( ruleFROM ( (lv_e_7_0= ruleExpression ) ) ) | ( ruleAS ( (lv_id_9_0= ruleIdentifier ) ) ) )? ) | ( ruleFROM ( (lv_e_11_0= ruleExpression ) ) ) )? ) ;
    public final EObject ruleExprList() throws RecognitionException {
        EObject current = null;

        EObject lv_e_3_0 = null;

        EObject lv_e_5_0 = null;

        EObject lv_e_7_0 = null;

        AntlrDatatypeRuleToken lv_id_9_0 = null;

        EObject lv_e_11_0 = null;


         EObject temp=null; setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7878:6: ( ( ( ruleTRAILING | ruleLEADING | ruleBOTH )? ( ( ( (lv_e_3_0= ruleExpression ) ) ( ( ',' ( (lv_e_5_0= ruleExpression ) ) )+ | ( ruleFROM ( (lv_e_7_0= ruleExpression ) ) ) | ( ruleAS ( (lv_id_9_0= ruleIdentifier ) ) ) )? ) | ( ruleFROM ( (lv_e_11_0= ruleExpression ) ) ) )? ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7879:1: ( ( ruleTRAILING | ruleLEADING | ruleBOTH )? ( ( ( (lv_e_3_0= ruleExpression ) ) ( ( ',' ( (lv_e_5_0= ruleExpression ) ) )+ | ( ruleFROM ( (lv_e_7_0= ruleExpression ) ) ) | ( ruleAS ( (lv_id_9_0= ruleIdentifier ) ) ) )? ) | ( ruleFROM ( (lv_e_11_0= ruleExpression ) ) ) )? )
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7879:1: ( ( ruleTRAILING | ruleLEADING | ruleBOTH )? ( ( ( (lv_e_3_0= ruleExpression ) ) ( ( ',' ( (lv_e_5_0= ruleExpression ) ) )+ | ( ruleFROM ( (lv_e_7_0= ruleExpression ) ) ) | ( ruleAS ( (lv_id_9_0= ruleIdentifier ) ) ) )? ) | ( ruleFROM ( (lv_e_11_0= ruleExpression ) ) ) )? )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7879:2: ( ruleTRAILING | ruleLEADING | ruleBOTH )? ( ( ( (lv_e_3_0= ruleExpression ) ) ( ( ',' ( (lv_e_5_0= ruleExpression ) ) )+ | ( ruleFROM ( (lv_e_7_0= ruleExpression ) ) ) | ( ruleAS ( (lv_id_9_0= ruleIdentifier ) ) ) )? ) | ( ruleFROM ( (lv_e_11_0= ruleExpression ) ) ) )?
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7879:2: ( ruleTRAILING | ruleLEADING | ruleBOTH )?
            int alt114=4;
            switch ( input.LA(1) ) {
                case 231:
                case 232:
                case 233:
                    {
                    alt114=1;
                    }
                    break;
                case 234:
                case 235:
                case 236:
                    {
                    alt114=2;
                    }
                    break;
                case 237:
                case 238:
                case 239:
                    {
                    alt114=3;
                    }
                    break;
            }

            switch (alt114) {
                case 1 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7879:3: ruleTRAILING
                    {
                    pushFollow(FOLLOW_ruleTRAILING_in_ruleExprList14998);
                    ruleTRAILING();
                    _fsp--;
                    if (failed) return current;

                    }
                    break;
                case 2 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7880:6: ruleLEADING
                    {
                    pushFollow(FOLLOW_ruleLEADING_in_ruleExprList15005);
                    ruleLEADING();
                    _fsp--;
                    if (failed) return current;

                    }
                    break;
                case 3 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7881:6: ruleBOTH
                    {
                    pushFollow(FOLLOW_ruleBOTH_in_ruleExprList15012);
                    ruleBOTH();
                    _fsp--;
                    if (failed) return current;

                    }
                    break;

            }

            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7881:16: ( ( ( (lv_e_3_0= ruleExpression ) ) ( ( ',' ( (lv_e_5_0= ruleExpression ) ) )+ | ( ruleFROM ( (lv_e_7_0= ruleExpression ) ) ) | ( ruleAS ( (lv_id_9_0= ruleIdentifier ) ) ) )? ) | ( ruleFROM ( (lv_e_11_0= ruleExpression ) ) ) )?
            int alt117=3;
            switch ( input.LA(1) ) {
                case RULE_ID:
                case RULE_STRING:
                case RULE_INT:
                case RULE_SIGNED_INT:
                case RULE_HEX:
                case 16:
                case 17:
                case 18:
                case 26:
                case 36:
                case 38:
                case 39:
                case 40:
                case 42:
                case 43:
                case 45:
                case 54:
                case 55:
                case 56:
                case 57:
                case 59:
                case 62:
                case 63:
                case 75:
                case 76:
                case 77:
                case 78:
                case 125:
                case 126:
                case 127:
                case 167:
                case 168:
                case 177:
                case 178:
                case 179:
                case 186:
                case 187:
                case 188:
                case 189:
                case 190:
                case 191:
                case 192:
                case 193:
                case 194:
                case 201:
                case 202:
                case 203:
                case 204:
                case 205:
                case 206:
                case 207:
                case 208:
                case 209:
                case 210:
                case 211:
                case 212:
                case 213:
                case 214:
                case 215:
                case 216:
                case 217:
                case 218:
                case 219:
                case 220:
                case 221:
                case 222:
                case 223:
                case 224:
                case 225:
                case 226:
                case 227:
                case 228:
                case 229:
                case 230:
                case 240:
                case 241:
                case 242:
                case 243:
                case 244:
                case 245:
                case 246:
                case 247:
                case 248:
                case 249:
                    {
                    alt117=1;
                    }
                    break;
                case 92:
                    {
                    int LA117_41 = input.LA(2);

                    if ( (synpred201()) ) {
                        alt117=1;
                    }
                    else if ( (synpred202()) ) {
                        alt117=2;
                    }
                    }
                    break;
                case 93:
                    {
                    int LA117_42 = input.LA(2);

                    if ( (synpred201()) ) {
                        alt117=1;
                    }
                    else if ( (synpred202()) ) {
                        alt117=2;
                    }
                    }
                    break;
                case 94:
                    {
                    int LA117_43 = input.LA(2);

                    if ( (synpred201()) ) {
                        alt117=1;
                    }
                    else if ( (synpred202()) ) {
                        alt117=2;
                    }
                    }
                    break;
            }

            switch (alt117) {
                case 1 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7881:17: ( ( (lv_e_3_0= ruleExpression ) ) ( ( ',' ( (lv_e_5_0= ruleExpression ) ) )+ | ( ruleFROM ( (lv_e_7_0= ruleExpression ) ) ) | ( ruleAS ( (lv_id_9_0= ruleIdentifier ) ) ) )? )
                    {
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7881:17: ( ( (lv_e_3_0= ruleExpression ) ) ( ( ',' ( (lv_e_5_0= ruleExpression ) ) )+ | ( ruleFROM ( (lv_e_7_0= ruleExpression ) ) ) | ( ruleAS ( (lv_id_9_0= ruleIdentifier ) ) ) )? )
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7881:18: ( (lv_e_3_0= ruleExpression ) ) ( ( ',' ( (lv_e_5_0= ruleExpression ) ) )+ | ( ruleFROM ( (lv_e_7_0= ruleExpression ) ) ) | ( ruleAS ( (lv_id_9_0= ruleIdentifier ) ) ) )?
                    {
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7881:18: ( (lv_e_3_0= ruleExpression ) )
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7882:1: (lv_e_3_0= ruleExpression )
                    {
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7882:1: (lv_e_3_0= ruleExpression )
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7883:3: lv_e_3_0= ruleExpression
                    {
                    if ( backtracking==0 ) {
                       
                      	        currentNode=createCompositeNode(grammarAccess.getExprListAccess().getEExpressionParserRuleCall_1_0_0_0(), currentNode); 
                      	    
                    }
                    pushFollow(FOLLOW_ruleExpression_in_ruleExprList15029);
                    lv_e_3_0=ruleExpression();
                    _fsp--;
                    if (failed) return current;
                    if ( backtracking==0 ) {

                      	        if (current==null) {
                      	            current = factory.create(grammarAccess.getExprListRule().getType().getClassifier());
                      	            associateNodeWithAstElement(currentNode.getParent(), current);
                      	        }
                      	        try {
                      	       		add(
                      	       			current, 
                      	       			"e",
                      	        		lv_e_3_0, 
                      	        		"Expression", 
                      	        		currentNode);
                      	        } catch (ValueConverterException vce) {
                      				handleValueConverterException(vce);
                      	        }
                      	        currentNode = currentNode.getParent();
                      	    
                    }

                    }


                    }

                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7905:2: ( ( ',' ( (lv_e_5_0= ruleExpression ) ) )+ | ( ruleFROM ( (lv_e_7_0= ruleExpression ) ) ) | ( ruleAS ( (lv_id_9_0= ruleIdentifier ) ) ) )?
                    int alt116=4;
                    switch ( input.LA(1) ) {
                        case 28:
                            {
                            alt116=1;
                            }
                            break;
                        case 92:
                        case 93:
                        case 94:
                            {
                            alt116=2;
                            }
                            break;
                        case 128:
                        case 129:
                        case 130:
                            {
                            alt116=3;
                            }
                            break;
                    }

                    switch (alt116) {
                        case 1 :
                            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7905:3: ( ',' ( (lv_e_5_0= ruleExpression ) ) )+
                            {
                            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7905:3: ( ',' ( (lv_e_5_0= ruleExpression ) ) )+
                            int cnt115=0;
                            loop115:
                            do {
                                int alt115=2;
                                int LA115_0 = input.LA(1);

                                if ( (LA115_0==28) ) {
                                    alt115=1;
                                }


                                switch (alt115) {
                            	case 1 :
                            	    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7905:5: ',' ( (lv_e_5_0= ruleExpression ) )
                            	    {
                            	    match(input,28,FOLLOW_28_in_ruleExprList15041); if (failed) return current;
                            	    if ( backtracking==0 ) {

                            	              createLeafNode(grammarAccess.getExprListAccess().getCommaKeyword_1_0_1_0_0(), null); 
                            	          
                            	    }
                            	    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7909:1: ( (lv_e_5_0= ruleExpression ) )
                            	    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7910:1: (lv_e_5_0= ruleExpression )
                            	    {
                            	    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7910:1: (lv_e_5_0= ruleExpression )
                            	    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7911:3: lv_e_5_0= ruleExpression
                            	    {
                            	    if ( backtracking==0 ) {
                            	       
                            	      	        currentNode=createCompositeNode(grammarAccess.getExprListAccess().getEExpressionParserRuleCall_1_0_1_0_1_0(), currentNode); 
                            	      	    
                            	    }
                            	    pushFollow(FOLLOW_ruleExpression_in_ruleExprList15062);
                            	    lv_e_5_0=ruleExpression();
                            	    _fsp--;
                            	    if (failed) return current;
                            	    if ( backtracking==0 ) {

                            	      	        if (current==null) {
                            	      	            current = factory.create(grammarAccess.getExprListRule().getType().getClassifier());
                            	      	            associateNodeWithAstElement(currentNode.getParent(), current);
                            	      	        }
                            	      	        try {
                            	      	       		add(
                            	      	       			current, 
                            	      	       			"e",
                            	      	        		lv_e_5_0, 
                            	      	        		"Expression", 
                            	      	        		currentNode);
                            	      	        } catch (ValueConverterException vce) {
                            	      				handleValueConverterException(vce);
                            	      	        }
                            	      	        currentNode = currentNode.getParent();
                            	      	    
                            	    }

                            	    }


                            	    }


                            	    }
                            	    break;

                            	default :
                            	    if ( cnt115 >= 1 ) break loop115;
                            	    if (backtracking>0) {failed=true; return current;}
                                        EarlyExitException eee =
                                            new EarlyExitException(115, input);
                                        throw eee;
                                }
                                cnt115++;
                            } while (true);


                            }
                            break;
                        case 2 :
                            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7934:6: ( ruleFROM ( (lv_e_7_0= ruleExpression ) ) )
                            {
                            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7934:6: ( ruleFROM ( (lv_e_7_0= ruleExpression ) ) )
                            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7934:7: ruleFROM ( (lv_e_7_0= ruleExpression ) )
                            {
                            pushFollow(FOLLOW_ruleFROM_in_ruleExprList15080);
                            ruleFROM();
                            _fsp--;
                            if (failed) return current;
                            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7934:15: ( (lv_e_7_0= ruleExpression ) )
                            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7935:1: (lv_e_7_0= ruleExpression )
                            {
                            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7935:1: (lv_e_7_0= ruleExpression )
                            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7936:3: lv_e_7_0= ruleExpression
                            {
                            if ( backtracking==0 ) {
                               
                              	        currentNode=createCompositeNode(grammarAccess.getExprListAccess().getEExpressionParserRuleCall_1_0_1_1_1_0(), currentNode); 
                              	    
                            }
                            pushFollow(FOLLOW_ruleExpression_in_ruleExprList15093);
                            lv_e_7_0=ruleExpression();
                            _fsp--;
                            if (failed) return current;
                            if ( backtracking==0 ) {

                              	        if (current==null) {
                              	            current = factory.create(grammarAccess.getExprListRule().getType().getClassifier());
                              	            associateNodeWithAstElement(currentNode.getParent(), current);
                              	        }
                              	        try {
                              	       		add(
                              	       			current, 
                              	       			"e",
                              	        		lv_e_7_0, 
                              	        		"Expression", 
                              	        		currentNode);
                              	        } catch (ValueConverterException vce) {
                              				handleValueConverterException(vce);
                              	        }
                              	        currentNode = currentNode.getParent();
                              	    
                            }

                            }


                            }


                            }


                            }
                            break;
                        case 3 :
                            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7959:6: ( ruleAS ( (lv_id_9_0= ruleIdentifier ) ) )
                            {
                            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7959:6: ( ruleAS ( (lv_id_9_0= ruleIdentifier ) ) )
                            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7959:7: ruleAS ( (lv_id_9_0= ruleIdentifier ) )
                            {
                            pushFollow(FOLLOW_ruleAS_in_ruleExprList15110);
                            ruleAS();
                            _fsp--;
                            if (failed) return current;
                            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7959:13: ( (lv_id_9_0= ruleIdentifier ) )
                            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7960:1: (lv_id_9_0= ruleIdentifier )
                            {
                            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7960:1: (lv_id_9_0= ruleIdentifier )
                            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7961:3: lv_id_9_0= ruleIdentifier
                            {
                            if ( backtracking==0 ) {
                               
                              	        currentNode=createCompositeNode(grammarAccess.getExprListAccess().getIdIdentifierParserRuleCall_1_0_1_2_1_0(), currentNode); 
                              	    
                            }
                            pushFollow(FOLLOW_ruleIdentifier_in_ruleExprList15123);
                            lv_id_9_0=ruleIdentifier();
                            _fsp--;
                            if (failed) return current;
                            if ( backtracking==0 ) {

                              	        if (current==null) {
                              	            current = factory.create(grammarAccess.getExprListRule().getType().getClassifier());
                              	            associateNodeWithAstElement(currentNode.getParent(), current);
                              	        }
                              	        try {
                              	       		set(
                              	       			current, 
                              	       			"id",
                              	        		lv_id_9_0, 
                              	        		"Identifier", 
                              	        		currentNode);
                              	        } catch (ValueConverterException vce) {
                              				handleValueConverterException(vce);
                              	        }
                              	        currentNode = currentNode.getParent();
                              	    
                            }

                            }


                            }


                            }


                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7984:6: ( ruleFROM ( (lv_e_11_0= ruleExpression ) ) )
                    {
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7984:6: ( ruleFROM ( (lv_e_11_0= ruleExpression ) ) )
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7984:7: ruleFROM ( (lv_e_11_0= ruleExpression ) )
                    {
                    pushFollow(FOLLOW_ruleFROM_in_ruleExprList15143);
                    ruleFROM();
                    _fsp--;
                    if (failed) return current;
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7984:15: ( (lv_e_11_0= ruleExpression ) )
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7985:1: (lv_e_11_0= ruleExpression )
                    {
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7985:1: (lv_e_11_0= ruleExpression )
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7986:3: lv_e_11_0= ruleExpression
                    {
                    if ( backtracking==0 ) {
                       
                      	        currentNode=createCompositeNode(grammarAccess.getExprListAccess().getEExpressionParserRuleCall_1_1_1_0(), currentNode); 
                      	    
                    }
                    pushFollow(FOLLOW_ruleExpression_in_ruleExprList15156);
                    lv_e_11_0=ruleExpression();
                    _fsp--;
                    if (failed) return current;
                    if ( backtracking==0 ) {

                      	        if (current==null) {
                      	            current = factory.create(grammarAccess.getExprListRule().getType().getClassifier());
                      	            associateNodeWithAstElement(currentNode.getParent(), current);
                      	        }
                      	        try {
                      	       		add(
                      	       			current, 
                      	       			"e",
                      	        		lv_e_11_0, 
                      	        		"Expression", 
                      	        		currentNode);
                      	        } catch (ValueConverterException vce) {
                      				handleValueConverterException(vce);
                      	        }
                      	        currentNode = currentNode.getParent();
                      	    
                    }

                    }


                    }


                    }


                    }
                    break;

            }


            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
                  	lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruleExprList


    // $ANTLR start entryRuleConstant
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8016:1: entryRuleConstant returns [String current=null] : iv_ruleConstant= ruleConstant EOF ;
    public final String entryRuleConstant() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleConstant = null;


        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8017:2: (iv_ruleConstant= ruleConstant EOF )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8018:2: iv_ruleConstant= ruleConstant EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getConstantRule(), currentNode); 
            }
            pushFollow(FOLLOW_ruleConstant_in_entryRuleConstant15196);
            iv_ruleConstant=ruleConstant();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruleConstant.getText(); 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleConstant15207); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuleConstant


    // $ANTLR start ruleConstant
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8025:1: ruleConstant returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (this_Number_0= ruleNumber | this_STRING_1= RULE_STRING | this_NULL_2= ruleNULL | this_TRUE_3= ruleTRUE | this_FALSE_4= ruleFALSE | this_EMPTY_5= ruleEMPTY ) ;
    public final AntlrDatatypeRuleToken ruleConstant() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token this_STRING_1=null;
        AntlrDatatypeRuleToken this_Number_0 = null;

        AntlrDatatypeRuleToken this_NULL_2 = null;

        AntlrDatatypeRuleToken this_TRUE_3 = null;

        AntlrDatatypeRuleToken this_FALSE_4 = null;

        AntlrDatatypeRuleToken this_EMPTY_5 = null;


         setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8030:6: ( (this_Number_0= ruleNumber | this_STRING_1= RULE_STRING | this_NULL_2= ruleNULL | this_TRUE_3= ruleTRUE | this_FALSE_4= ruleFALSE | this_EMPTY_5= ruleEMPTY ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8031:1: (this_Number_0= ruleNumber | this_STRING_1= RULE_STRING | this_NULL_2= ruleNULL | this_TRUE_3= ruleTRUE | this_FALSE_4= ruleFALSE | this_EMPTY_5= ruleEMPTY )
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8031:1: (this_Number_0= ruleNumber | this_STRING_1= RULE_STRING | this_NULL_2= ruleNULL | this_TRUE_3= ruleTRUE | this_FALSE_4= ruleFALSE | this_EMPTY_5= ruleEMPTY )
            int alt118=6;
            switch ( input.LA(1) ) {
            case RULE_INT:
            case RULE_SIGNED_INT:
            case RULE_HEX:
            case 36:
                {
                alt118=1;
                }
                break;
            case RULE_STRING:
                {
                alt118=2;
                }
                break;
            case 17:
            case 240:
            case 241:
                {
                alt118=3;
                }
                break;
            case 242:
            case 243:
            case 244:
                {
                alt118=4;
                }
                break;
            case 245:
            case 246:
            case 247:
                {
                alt118=5;
                }
                break;
            case 18:
            case 248:
            case 249:
                {
                alt118=6;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("8031:1: (this_Number_0= ruleNumber | this_STRING_1= RULE_STRING | this_NULL_2= ruleNULL | this_TRUE_3= ruleTRUE | this_FALSE_4= ruleFALSE | this_EMPTY_5= ruleEMPTY )", 118, 0, input);

                throw nvae;
            }

            switch (alt118) {
                case 1 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8032:5: this_Number_0= ruleNumber
                    {
                    if ( backtracking==0 ) {
                       
                              currentNode=createCompositeNode(grammarAccess.getConstantAccess().getNumberParserRuleCall_0(), currentNode); 
                          
                    }
                    pushFollow(FOLLOW_ruleNumber_in_ruleConstant15254);
                    this_Number_0=ruleNumber();
                    _fsp--;
                    if (failed) return current;
                    if ( backtracking==0 ) {

                      		current.merge(this_Number_0);
                          
                    }
                    if ( backtracking==0 ) {
                       
                              currentNode = currentNode.getParent();
                          
                    }

                    }
                    break;
                case 2 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8043:10: this_STRING_1= RULE_STRING
                    {
                    this_STRING_1=(Token)input.LT(1);
                    match(input,RULE_STRING,FOLLOW_RULE_STRING_in_ruleConstant15280); if (failed) return current;
                    if ( backtracking==0 ) {

                      		current.merge(this_STRING_1);
                          
                    }
                    if ( backtracking==0 ) {
                       
                          createLeafNode(grammarAccess.getConstantAccess().getSTRINGTerminalRuleCall_1(), null); 
                          
                    }

                    }
                    break;
                case 3 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8052:5: this_NULL_2= ruleNULL
                    {
                    if ( backtracking==0 ) {
                       
                              currentNode=createCompositeNode(grammarAccess.getConstantAccess().getNULLParserRuleCall_2(), currentNode); 
                          
                    }
                    pushFollow(FOLLOW_ruleNULL_in_ruleConstant15313);
                    this_NULL_2=ruleNULL();
                    _fsp--;
                    if (failed) return current;
                    if ( backtracking==0 ) {

                      		current.merge(this_NULL_2);
                          
                    }
                    if ( backtracking==0 ) {
                       
                              currentNode = currentNode.getParent();
                          
                    }

                    }
                    break;
                case 4 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8064:5: this_TRUE_3= ruleTRUE
                    {
                    if ( backtracking==0 ) {
                       
                              currentNode=createCompositeNode(grammarAccess.getConstantAccess().getTRUEParserRuleCall_3(), currentNode); 
                          
                    }
                    pushFollow(FOLLOW_ruleTRUE_in_ruleConstant15346);
                    this_TRUE_3=ruleTRUE();
                    _fsp--;
                    if (failed) return current;
                    if ( backtracking==0 ) {

                      		current.merge(this_TRUE_3);
                          
                    }
                    if ( backtracking==0 ) {
                       
                              currentNode = currentNode.getParent();
                          
                    }

                    }
                    break;
                case 5 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8076:5: this_FALSE_4= ruleFALSE
                    {
                    if ( backtracking==0 ) {
                       
                              currentNode=createCompositeNode(grammarAccess.getConstantAccess().getFALSEParserRuleCall_4(), currentNode); 
                          
                    }
                    pushFollow(FOLLOW_ruleFALSE_in_ruleConstant15379);
                    this_FALSE_4=ruleFALSE();
                    _fsp--;
                    if (failed) return current;
                    if ( backtracking==0 ) {

                      		current.merge(this_FALSE_4);
                          
                    }
                    if ( backtracking==0 ) {
                       
                              currentNode = currentNode.getParent();
                          
                    }

                    }
                    break;
                case 6 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8088:5: this_EMPTY_5= ruleEMPTY
                    {
                    if ( backtracking==0 ) {
                       
                              currentNode=createCompositeNode(grammarAccess.getConstantAccess().getEMPTYParserRuleCall_5(), currentNode); 
                          
                    }
                    pushFollow(FOLLOW_ruleEMPTY_in_ruleConstant15412);
                    this_EMPTY_5=ruleEMPTY();
                    _fsp--;
                    if (failed) return current;
                    if ( backtracking==0 ) {

                      		current.merge(this_EMPTY_5);
                          
                    }
                    if ( backtracking==0 ) {
                       
                              currentNode = currentNode.getParent();
                          
                    }

                    }
                    break;

            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
              	    lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruleConstant


    // $ANTLR start entryRulePath
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8106:1: entryRulePath returns [String current=null] : iv_rulePath= rulePath EOF ;
    public final String entryRulePath() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_rulePath = null;


        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8107:2: (iv_rulePath= rulePath EOF )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8108:2: iv_rulePath= rulePath EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getPathRule(), currentNode); 
            }
            pushFollow(FOLLOW_rulePath_in_entryRulePath15458);
            iv_rulePath=rulePath();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_rulePath.getText(); 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRulePath15469); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRulePath


    // $ANTLR start rulePath
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8115:1: rulePath returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (this_Identifier_0= ruleIdentifier (kw= '.' this_Identifier_2= ruleIdentifier )* ) ;
    public final AntlrDatatypeRuleToken rulePath() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;
        AntlrDatatypeRuleToken this_Identifier_0 = null;

        AntlrDatatypeRuleToken this_Identifier_2 = null;


         setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8120:6: ( (this_Identifier_0= ruleIdentifier (kw= '.' this_Identifier_2= ruleIdentifier )* ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8121:1: (this_Identifier_0= ruleIdentifier (kw= '.' this_Identifier_2= ruleIdentifier )* )
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8121:1: (this_Identifier_0= ruleIdentifier (kw= '.' this_Identifier_2= ruleIdentifier )* )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8122:5: this_Identifier_0= ruleIdentifier (kw= '.' this_Identifier_2= ruleIdentifier )*
            {
            if ( backtracking==0 ) {
               
                      currentNode=createCompositeNode(grammarAccess.getPathAccess().getIdentifierParserRuleCall_0(), currentNode); 
                  
            }
            pushFollow(FOLLOW_ruleIdentifier_in_rulePath15516);
            this_Identifier_0=ruleIdentifier();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {

              		current.merge(this_Identifier_0);
                  
            }
            if ( backtracking==0 ) {
               
                      currentNode = currentNode.getParent();
                  
            }
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8132:1: (kw= '.' this_Identifier_2= ruleIdentifier )*
            loop119:
            do {
                int alt119=2;
                int LA119_0 = input.LA(1);

                if ( (LA119_0==36) ) {
                    alt119=1;
                }


                switch (alt119) {
            	case 1 :
            	    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8133:2: kw= '.' this_Identifier_2= ruleIdentifier
            	    {
            	    kw=(Token)input.LT(1);
            	    match(input,36,FOLLOW_36_in_rulePath15535); if (failed) return current;
            	    if ( backtracking==0 ) {

            	              current.merge(kw);
            	              createLeafNode(grammarAccess.getPathAccess().getFullStopKeyword_1_0(), null); 
            	          
            	    }
            	    if ( backtracking==0 ) {
            	       
            	              currentNode=createCompositeNode(grammarAccess.getPathAccess().getIdentifierParserRuleCall_1_1(), currentNode); 
            	          
            	    }
            	    pushFollow(FOLLOW_ruleIdentifier_in_rulePath15557);
            	    this_Identifier_2=ruleIdentifier();
            	    _fsp--;
            	    if (failed) return current;
            	    if ( backtracking==0 ) {

            	      		current.merge(this_Identifier_2);
            	          
            	    }
            	    if ( backtracking==0 ) {
            	       
            	              currentNode = currentNode.getParent();
            	          
            	    }

            	    }
            	    break;

            	default :
            	    break loop119;
                }
            } while (true);


            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
              	    lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end rulePath


    // $ANTLR start entryRuleIdentifier
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8157:1: entryRuleIdentifier returns [String current=null] : iv_ruleIdentifier= ruleIdentifier EOF ;
    public final String entryRuleIdentifier() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleIdentifier = null;


        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8158:2: (iv_ruleIdentifier= ruleIdentifier EOF )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8159:2: iv_ruleIdentifier= ruleIdentifier EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getIdentifierRule(), currentNode); 
            }
            pushFollow(FOLLOW_ruleIdentifier_in_entryRuleIdentifier15605);
            iv_ruleIdentifier=ruleIdentifier();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruleIdentifier.getText(); 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleIdentifier15616); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuleIdentifier


    // $ANTLR start ruleIdentifier
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8166:1: ruleIdentifier returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : ( ( (kw= '$' )? this_ID_1= RULE_ID ) | kw= 'e' | kw= 'f' | kw= 'd' | kw= 'upper' | kw= 'lower' | kw= '$now' | kw= '$today' | kw= 'date' | kw= 'title' | kw= 'type' | kw= 'include' | kw= 'length' | this_END_14= ruleEND | this_WHEN_15= ruleWHEN | this_FROM_16= ruleFROM | this_MEMBER_17= ruleMEMBER ) ;
    public final AntlrDatatypeRuleToken ruleIdentifier() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;
        Token this_ID_1=null;
        AntlrDatatypeRuleToken this_END_14 = null;

        AntlrDatatypeRuleToken this_WHEN_15 = null;

        AntlrDatatypeRuleToken this_FROM_16 = null;

        AntlrDatatypeRuleToken this_MEMBER_17 = null;


         setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8171:6: ( ( ( (kw= '$' )? this_ID_1= RULE_ID ) | kw= 'e' | kw= 'f' | kw= 'd' | kw= 'upper' | kw= 'lower' | kw= '$now' | kw= '$today' | kw= 'date' | kw= 'title' | kw= 'type' | kw= 'include' | kw= 'length' | this_END_14= ruleEND | this_WHEN_15= ruleWHEN | this_FROM_16= ruleFROM | this_MEMBER_17= ruleMEMBER ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8172:1: ( ( (kw= '$' )? this_ID_1= RULE_ID ) | kw= 'e' | kw= 'f' | kw= 'd' | kw= 'upper' | kw= 'lower' | kw= '$now' | kw= '$today' | kw= 'date' | kw= 'title' | kw= 'type' | kw= 'include' | kw= 'length' | this_END_14= ruleEND | this_WHEN_15= ruleWHEN | this_FROM_16= ruleFROM | this_MEMBER_17= ruleMEMBER )
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8172:1: ( ( (kw= '$' )? this_ID_1= RULE_ID ) | kw= 'e' | kw= 'f' | kw= 'd' | kw= 'upper' | kw= 'lower' | kw= '$now' | kw= '$today' | kw= 'date' | kw= 'title' | kw= 'type' | kw= 'include' | kw= 'length' | this_END_14= ruleEND | this_WHEN_15= ruleWHEN | this_FROM_16= ruleFROM | this_MEMBER_17= ruleMEMBER )
            int alt121=17;
            switch ( input.LA(1) ) {
            case RULE_ID:
            case 75:
                {
                alt121=1;
                }
                break;
            case 76:
                {
                alt121=2;
                }
                break;
            case 77:
                {
                alt121=3;
                }
                break;
            case 78:
                {
                alt121=4;
                }
                break;
            case 42:
                {
                alt121=5;
                }
                break;
            case 45:
                {
                alt121=6;
                }
                break;
            case 54:
                {
                alt121=7;
                }
                break;
            case 55:
                {
                alt121=8;
                }
                break;
            case 26:
                {
                alt121=9;
                }
                break;
            case 38:
                {
                alt121=10;
                }
                break;
            case 40:
                {
                alt121=11;
                }
                break;
            case 39:
                {
                alt121=12;
                }
                break;
            case 59:
                {
                alt121=13;
                }
                break;
            case 189:
            case 190:
            case 191:
                {
                alt121=14;
                }
                break;
            case 192:
            case 193:
            case 194:
                {
                alt121=15;
                }
                break;
            case 92:
            case 93:
            case 94:
                {
                alt121=16;
                }
                break;
            case 177:
            case 178:
            case 179:
                {
                alt121=17;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("8172:1: ( ( (kw= '$' )? this_ID_1= RULE_ID ) | kw= 'e' | kw= 'f' | kw= 'd' | kw= 'upper' | kw= 'lower' | kw= '$now' | kw= '$today' | kw= 'date' | kw= 'title' | kw= 'type' | kw= 'include' | kw= 'length' | this_END_14= ruleEND | this_WHEN_15= ruleWHEN | this_FROM_16= ruleFROM | this_MEMBER_17= ruleMEMBER )", 121, 0, input);

                throw nvae;
            }

            switch (alt121) {
                case 1 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8172:2: ( (kw= '$' )? this_ID_1= RULE_ID )
                    {
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8172:2: ( (kw= '$' )? this_ID_1= RULE_ID )
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8172:3: (kw= '$' )? this_ID_1= RULE_ID
                    {
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8172:3: (kw= '$' )?
                    int alt120=2;
                    int LA120_0 = input.LA(1);

                    if ( (LA120_0==75) ) {
                        alt120=1;
                    }
                    switch (alt120) {
                        case 1 :
                            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8173:2: kw= '$'
                            {
                            kw=(Token)input.LT(1);
                            match(input,75,FOLLOW_75_in_ruleIdentifier15656); if (failed) return current;
                            if ( backtracking==0 ) {

                                      current.merge(kw);
                                      createLeafNode(grammarAccess.getIdentifierAccess().getDollarSignKeyword_0_0(), null); 
                                  
                            }

                            }
                            break;

                    }

                    this_ID_1=(Token)input.LT(1);
                    match(input,RULE_ID,FOLLOW_RULE_ID_in_ruleIdentifier15673); if (failed) return current;
                    if ( backtracking==0 ) {

                      		current.merge(this_ID_1);
                          
                    }
                    if ( backtracking==0 ) {
                       
                          createLeafNode(grammarAccess.getIdentifierAccess().getIDTerminalRuleCall_0_1(), null); 
                          
                    }

                    }


                    }
                    break;
                case 2 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8187:2: kw= 'e'
                    {
                    kw=(Token)input.LT(1);
                    match(input,76,FOLLOW_76_in_ruleIdentifier15698); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getIdentifierAccess().getEKeyword_1(), null); 
                          
                    }

                    }
                    break;
                case 3 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8194:2: kw= 'f'
                    {
                    kw=(Token)input.LT(1);
                    match(input,77,FOLLOW_77_in_ruleIdentifier15717); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getIdentifierAccess().getFKeyword_2(), null); 
                          
                    }

                    }
                    break;
                case 4 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8201:2: kw= 'd'
                    {
                    kw=(Token)input.LT(1);
                    match(input,78,FOLLOW_78_in_ruleIdentifier15736); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getIdentifierAccess().getDKeyword_3(), null); 
                          
                    }

                    }
                    break;
                case 5 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8208:2: kw= 'upper'
                    {
                    kw=(Token)input.LT(1);
                    match(input,42,FOLLOW_42_in_ruleIdentifier15755); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getIdentifierAccess().getUpperKeyword_4(), null); 
                          
                    }

                    }
                    break;
                case 6 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8215:2: kw= 'lower'
                    {
                    kw=(Token)input.LT(1);
                    match(input,45,FOLLOW_45_in_ruleIdentifier15774); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getIdentifierAccess().getLowerKeyword_5(), null); 
                          
                    }

                    }
                    break;
                case 7 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8222:2: kw= '$now'
                    {
                    kw=(Token)input.LT(1);
                    match(input,54,FOLLOW_54_in_ruleIdentifier15793); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getIdentifierAccess().getNowKeyword_6(), null); 
                          
                    }

                    }
                    break;
                case 8 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8229:2: kw= '$today'
                    {
                    kw=(Token)input.LT(1);
                    match(input,55,FOLLOW_55_in_ruleIdentifier15812); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getIdentifierAccess().getTodayKeyword_7(), null); 
                          
                    }

                    }
                    break;
                case 9 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8236:2: kw= 'date'
                    {
                    kw=(Token)input.LT(1);
                    match(input,26,FOLLOW_26_in_ruleIdentifier15831); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getIdentifierAccess().getDateKeyword_8(), null); 
                          
                    }

                    }
                    break;
                case 10 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8243:2: kw= 'title'
                    {
                    kw=(Token)input.LT(1);
                    match(input,38,FOLLOW_38_in_ruleIdentifier15850); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getIdentifierAccess().getTitleKeyword_9(), null); 
                          
                    }

                    }
                    break;
                case 11 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8250:2: kw= 'type'
                    {
                    kw=(Token)input.LT(1);
                    match(input,40,FOLLOW_40_in_ruleIdentifier15869); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getIdentifierAccess().getTypeKeyword_10(), null); 
                          
                    }

                    }
                    break;
                case 12 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8257:2: kw= 'include'
                    {
                    kw=(Token)input.LT(1);
                    match(input,39,FOLLOW_39_in_ruleIdentifier15888); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getIdentifierAccess().getIncludeKeyword_11(), null); 
                          
                    }

                    }
                    break;
                case 13 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8264:2: kw= 'length'
                    {
                    kw=(Token)input.LT(1);
                    match(input,59,FOLLOW_59_in_ruleIdentifier15907); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getIdentifierAccess().getLengthKeyword_12(), null); 
                          
                    }

                    }
                    break;
                case 14 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8271:5: this_END_14= ruleEND
                    {
                    if ( backtracking==0 ) {
                       
                              currentNode=createCompositeNode(grammarAccess.getIdentifierAccess().getENDParserRuleCall_13(), currentNode); 
                          
                    }
                    pushFollow(FOLLOW_ruleEND_in_ruleIdentifier15935);
                    this_END_14=ruleEND();
                    _fsp--;
                    if (failed) return current;
                    if ( backtracking==0 ) {

                      		current.merge(this_END_14);
                          
                    }
                    if ( backtracking==0 ) {
                       
                              currentNode = currentNode.getParent();
                          
                    }

                    }
                    break;
                case 15 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8283:5: this_WHEN_15= ruleWHEN
                    {
                    if ( backtracking==0 ) {
                       
                              currentNode=createCompositeNode(grammarAccess.getIdentifierAccess().getWHENParserRuleCall_14(), currentNode); 
                          
                    }
                    pushFollow(FOLLOW_ruleWHEN_in_ruleIdentifier15968);
                    this_WHEN_15=ruleWHEN();
                    _fsp--;
                    if (failed) return current;
                    if ( backtracking==0 ) {

                      		current.merge(this_WHEN_15);
                          
                    }
                    if ( backtracking==0 ) {
                       
                              currentNode = currentNode.getParent();
                          
                    }

                    }
                    break;
                case 16 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8295:5: this_FROM_16= ruleFROM
                    {
                    if ( backtracking==0 ) {
                       
                              currentNode=createCompositeNode(grammarAccess.getIdentifierAccess().getFROMParserRuleCall_15(), currentNode); 
                          
                    }
                    pushFollow(FOLLOW_ruleFROM_in_ruleIdentifier16001);
                    this_FROM_16=ruleFROM();
                    _fsp--;
                    if (failed) return current;
                    if ( backtracking==0 ) {

                      		current.merge(this_FROM_16);
                          
                    }
                    if ( backtracking==0 ) {
                       
                              currentNode = currentNode.getParent();
                          
                    }

                    }
                    break;
                case 17 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8307:5: this_MEMBER_17= ruleMEMBER
                    {
                    if ( backtracking==0 ) {
                       
                              currentNode=createCompositeNode(grammarAccess.getIdentifierAccess().getMEMBERParserRuleCall_16(), currentNode); 
                          
                    }
                    pushFollow(FOLLOW_ruleMEMBER_in_ruleIdentifier16034);
                    this_MEMBER_17=ruleMEMBER();
                    _fsp--;
                    if (failed) return current;
                    if ( backtracking==0 ) {

                      		current.merge(this_MEMBER_17);
                          
                    }
                    if ( backtracking==0 ) {
                       
                              currentNode = currentNode.getParent();
                          
                    }

                    }
                    break;

            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
              	    lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruleIdentifier


    // $ANTLR start entryRuleNumber
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8325:1: entryRuleNumber returns [String current=null] : iv_ruleNumber= ruleNumber EOF ;
    public final String entryRuleNumber() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleNumber = null;


        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8326:2: (iv_ruleNumber= ruleNumber EOF )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8327:2: iv_ruleNumber= ruleNumber EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getNumberRule(), currentNode); 
            }
            pushFollow(FOLLOW_ruleNumber_in_entryRuleNumber16080);
            iv_ruleNumber=ruleNumber();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruleNumber.getText(); 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleNumber16091); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuleNumber


    // $ANTLR start ruleNumber
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8334:1: ruleNumber returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : ( (kw= '.' (this_INT_1= RULE_INT (kw= 'e' (kw= '+' | kw= '-' )? this_INT_5= RULE_INT )? (kw= 'f' | kw= 'd' )? )? ) | ( (this_HEX_8= RULE_HEX | this_INT_9= RULE_INT | this_SIGNED_INT_10= RULE_SIGNED_INT ) (kw= 'l' | ( (kw= '.' (this_INT_13= RULE_INT )? (kw= 'e' (kw= '+' | kw= '-' )? this_INT_17= RULE_INT )? (kw= 'f' | kw= 'd' )? ) | (kw= 'e' (kw= '+' | kw= '-' )? this_INT_23= RULE_INT (kw= 'f' | kw= 'd' )? ) | kw= 'f' | kw= 'd' ) )? ) ) ;
    public final AntlrDatatypeRuleToken ruleNumber() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;
        Token this_INT_1=null;
        Token this_INT_5=null;
        Token this_HEX_8=null;
        Token this_INT_9=null;
        Token this_SIGNED_INT_10=null;
        Token this_INT_13=null;
        Token this_INT_17=null;
        Token this_INT_23=null;

         setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8339:6: ( ( (kw= '.' (this_INT_1= RULE_INT (kw= 'e' (kw= '+' | kw= '-' )? this_INT_5= RULE_INT )? (kw= 'f' | kw= 'd' )? )? ) | ( (this_HEX_8= RULE_HEX | this_INT_9= RULE_INT | this_SIGNED_INT_10= RULE_SIGNED_INT ) (kw= 'l' | ( (kw= '.' (this_INT_13= RULE_INT )? (kw= 'e' (kw= '+' | kw= '-' )? this_INT_17= RULE_INT )? (kw= 'f' | kw= 'd' )? ) | (kw= 'e' (kw= '+' | kw= '-' )? this_INT_23= RULE_INT (kw= 'f' | kw= 'd' )? ) | kw= 'f' | kw= 'd' ) )? ) ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8340:1: ( (kw= '.' (this_INT_1= RULE_INT (kw= 'e' (kw= '+' | kw= '-' )? this_INT_5= RULE_INT )? (kw= 'f' | kw= 'd' )? )? ) | ( (this_HEX_8= RULE_HEX | this_INT_9= RULE_INT | this_SIGNED_INT_10= RULE_SIGNED_INT ) (kw= 'l' | ( (kw= '.' (this_INT_13= RULE_INT )? (kw= 'e' (kw= '+' | kw= '-' )? this_INT_17= RULE_INT )? (kw= 'f' | kw= 'd' )? ) | (kw= 'e' (kw= '+' | kw= '-' )? this_INT_23= RULE_INT (kw= 'f' | kw= 'd' )? ) | kw= 'f' | kw= 'd' ) )? ) )
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8340:1: ( (kw= '.' (this_INT_1= RULE_INT (kw= 'e' (kw= '+' | kw= '-' )? this_INT_5= RULE_INT )? (kw= 'f' | kw= 'd' )? )? ) | ( (this_HEX_8= RULE_HEX | this_INT_9= RULE_INT | this_SIGNED_INT_10= RULE_SIGNED_INT ) (kw= 'l' | ( (kw= '.' (this_INT_13= RULE_INT )? (kw= 'e' (kw= '+' | kw= '-' )? this_INT_17= RULE_INT )? (kw= 'f' | kw= 'd' )? ) | (kw= 'e' (kw= '+' | kw= '-' )? this_INT_23= RULE_INT (kw= 'f' | kw= 'd' )? ) | kw= 'f' | kw= 'd' ) )? ) )
            int alt135=2;
            int LA135_0 = input.LA(1);

            if ( (LA135_0==36) ) {
                alt135=1;
            }
            else if ( ((LA135_0>=RULE_INT && LA135_0<=RULE_HEX)) ) {
                alt135=2;
            }
            else {
                if (backtracking>0) {failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("8340:1: ( (kw= '.' (this_INT_1= RULE_INT (kw= 'e' (kw= '+' | kw= '-' )? this_INT_5= RULE_INT )? (kw= 'f' | kw= 'd' )? )? ) | ( (this_HEX_8= RULE_HEX | this_INT_9= RULE_INT | this_SIGNED_INT_10= RULE_SIGNED_INT ) (kw= 'l' | ( (kw= '.' (this_INT_13= RULE_INT )? (kw= 'e' (kw= '+' | kw= '-' )? this_INT_17= RULE_INT )? (kw= 'f' | kw= 'd' )? ) | (kw= 'e' (kw= '+' | kw= '-' )? this_INT_23= RULE_INT (kw= 'f' | kw= 'd' )? ) | kw= 'f' | kw= 'd' ) )? ) )", 135, 0, input);

                throw nvae;
            }
            switch (alt135) {
                case 1 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8340:2: (kw= '.' (this_INT_1= RULE_INT (kw= 'e' (kw= '+' | kw= '-' )? this_INT_5= RULE_INT )? (kw= 'f' | kw= 'd' )? )? )
                    {
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8340:2: (kw= '.' (this_INT_1= RULE_INT (kw= 'e' (kw= '+' | kw= '-' )? this_INT_5= RULE_INT )? (kw= 'f' | kw= 'd' )? )? )
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8341:2: kw= '.' (this_INT_1= RULE_INT (kw= 'e' (kw= '+' | kw= '-' )? this_INT_5= RULE_INT )? (kw= 'f' | kw= 'd' )? )?
                    {
                    kw=(Token)input.LT(1);
                    match(input,36,FOLLOW_36_in_ruleNumber16130); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getNumberAccess().getFullStopKeyword_0_0(), null); 
                          
                    }
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8346:1: (this_INT_1= RULE_INT (kw= 'e' (kw= '+' | kw= '-' )? this_INT_5= RULE_INT )? (kw= 'f' | kw= 'd' )? )?
                    int alt125=2;
                    int LA125_0 = input.LA(1);

                    if ( (LA125_0==RULE_INT) ) {
                        alt125=1;
                    }
                    switch (alt125) {
                        case 1 :
                            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8346:6: this_INT_1= RULE_INT (kw= 'e' (kw= '+' | kw= '-' )? this_INT_5= RULE_INT )? (kw= 'f' | kw= 'd' )?
                            {
                            this_INT_1=(Token)input.LT(1);
                            match(input,RULE_INT,FOLLOW_RULE_INT_in_ruleNumber16146); if (failed) return current;
                            if ( backtracking==0 ) {

                              		current.merge(this_INT_1);
                                  
                            }
                            if ( backtracking==0 ) {
                               
                                  createLeafNode(grammarAccess.getNumberAccess().getINTTerminalRuleCall_0_1_0(), null); 
                                  
                            }
                            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8353:1: (kw= 'e' (kw= '+' | kw= '-' )? this_INT_5= RULE_INT )?
                            int alt123=2;
                            int LA123_0 = input.LA(1);

                            if ( (LA123_0==76) ) {
                                alt123=1;
                            }
                            switch (alt123) {
                                case 1 :
                                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8354:2: kw= 'e' (kw= '+' | kw= '-' )? this_INT_5= RULE_INT
                                    {
                                    kw=(Token)input.LT(1);
                                    match(input,76,FOLLOW_76_in_ruleNumber16165); if (failed) return current;
                                    if ( backtracking==0 ) {

                                              current.merge(kw);
                                              createLeafNode(grammarAccess.getNumberAccess().getEKeyword_0_1_1_0(), null); 
                                          
                                    }
                                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8359:1: (kw= '+' | kw= '-' )?
                                    int alt122=3;
                                    int LA122_0 = input.LA(1);

                                    if ( (LA122_0==56) ) {
                                        alt122=1;
                                    }
                                    else if ( (LA122_0==57) ) {
                                        alt122=2;
                                    }
                                    switch (alt122) {
                                        case 1 :
                                            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8360:2: kw= '+'
                                            {
                                            kw=(Token)input.LT(1);
                                            match(input,56,FOLLOW_56_in_ruleNumber16179); if (failed) return current;
                                            if ( backtracking==0 ) {

                                                      current.merge(kw);
                                                      createLeafNode(grammarAccess.getNumberAccess().getPlusSignKeyword_0_1_1_1_0(), null); 
                                                  
                                            }

                                            }
                                            break;
                                        case 2 :
                                            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8367:2: kw= '-'
                                            {
                                            kw=(Token)input.LT(1);
                                            match(input,57,FOLLOW_57_in_ruleNumber16198); if (failed) return current;
                                            if ( backtracking==0 ) {

                                                      current.merge(kw);
                                                      createLeafNode(grammarAccess.getNumberAccess().getHyphenMinusKeyword_0_1_1_1_1(), null); 
                                                  
                                            }

                                            }
                                            break;

                                    }

                                    this_INT_5=(Token)input.LT(1);
                                    match(input,RULE_INT,FOLLOW_RULE_INT_in_ruleNumber16215); if (failed) return current;
                                    if ( backtracking==0 ) {

                                      		current.merge(this_INT_5);
                                          
                                    }
                                    if ( backtracking==0 ) {
                                       
                                          createLeafNode(grammarAccess.getNumberAccess().getINTTerminalRuleCall_0_1_1_2(), null); 
                                          
                                    }

                                    }
                                    break;

                            }

                            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8379:3: (kw= 'f' | kw= 'd' )?
                            int alt124=3;
                            int LA124_0 = input.LA(1);

                            if ( (LA124_0==77) ) {
                                alt124=1;
                            }
                            else if ( (LA124_0==78) ) {
                                alt124=2;
                            }
                            switch (alt124) {
                                case 1 :
                                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8380:2: kw= 'f'
                                    {
                                    kw=(Token)input.LT(1);
                                    match(input,77,FOLLOW_77_in_ruleNumber16236); if (failed) return current;
                                    if ( backtracking==0 ) {

                                              current.merge(kw);
                                              createLeafNode(grammarAccess.getNumberAccess().getFKeyword_0_1_2_0(), null); 
                                          
                                    }

                                    }
                                    break;
                                case 2 :
                                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8387:2: kw= 'd'
                                    {
                                    kw=(Token)input.LT(1);
                                    match(input,78,FOLLOW_78_in_ruleNumber16255); if (failed) return current;
                                    if ( backtracking==0 ) {

                                              current.merge(kw);
                                              createLeafNode(grammarAccess.getNumberAccess().getDKeyword_0_1_2_1(), null); 
                                          
                                    }

                                    }
                                    break;

                            }


                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8393:6: ( (this_HEX_8= RULE_HEX | this_INT_9= RULE_INT | this_SIGNED_INT_10= RULE_SIGNED_INT ) (kw= 'l' | ( (kw= '.' (this_INT_13= RULE_INT )? (kw= 'e' (kw= '+' | kw= '-' )? this_INT_17= RULE_INT )? (kw= 'f' | kw= 'd' )? ) | (kw= 'e' (kw= '+' | kw= '-' )? this_INT_23= RULE_INT (kw= 'f' | kw= 'd' )? ) | kw= 'f' | kw= 'd' ) )? )
                    {
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8393:6: ( (this_HEX_8= RULE_HEX | this_INT_9= RULE_INT | this_SIGNED_INT_10= RULE_SIGNED_INT ) (kw= 'l' | ( (kw= '.' (this_INT_13= RULE_INT )? (kw= 'e' (kw= '+' | kw= '-' )? this_INT_17= RULE_INT )? (kw= 'f' | kw= 'd' )? ) | (kw= 'e' (kw= '+' | kw= '-' )? this_INT_23= RULE_INT (kw= 'f' | kw= 'd' )? ) | kw= 'f' | kw= 'd' ) )? )
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8393:7: (this_HEX_8= RULE_HEX | this_INT_9= RULE_INT | this_SIGNED_INT_10= RULE_SIGNED_INT ) (kw= 'l' | ( (kw= '.' (this_INT_13= RULE_INT )? (kw= 'e' (kw= '+' | kw= '-' )? this_INT_17= RULE_INT )? (kw= 'f' | kw= 'd' )? ) | (kw= 'e' (kw= '+' | kw= '-' )? this_INT_23= RULE_INT (kw= 'f' | kw= 'd' )? ) | kw= 'f' | kw= 'd' ) )?
                    {
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8393:7: (this_HEX_8= RULE_HEX | this_INT_9= RULE_INT | this_SIGNED_INT_10= RULE_SIGNED_INT )
                    int alt126=3;
                    switch ( input.LA(1) ) {
                    case RULE_HEX:
                        {
                        alt126=1;
                        }
                        break;
                    case RULE_INT:
                        {
                        alt126=2;
                        }
                        break;
                    case RULE_SIGNED_INT:
                        {
                        alt126=3;
                        }
                        break;
                    default:
                        if (backtracking>0) {failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("8393:7: (this_HEX_8= RULE_HEX | this_INT_9= RULE_INT | this_SIGNED_INT_10= RULE_SIGNED_INT )", 126, 0, input);

                        throw nvae;
                    }

                    switch (alt126) {
                        case 1 :
                            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8393:12: this_HEX_8= RULE_HEX
                            {
                            this_HEX_8=(Token)input.LT(1);
                            match(input,RULE_HEX,FOLLOW_RULE_HEX_in_ruleNumber16283); if (failed) return current;
                            if ( backtracking==0 ) {

                              		current.merge(this_HEX_8);
                                  
                            }
                            if ( backtracking==0 ) {
                               
                                  createLeafNode(grammarAccess.getNumberAccess().getHEXTerminalRuleCall_1_0_0(), null); 
                                  
                            }

                            }
                            break;
                        case 2 :
                            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8401:10: this_INT_9= RULE_INT
                            {
                            this_INT_9=(Token)input.LT(1);
                            match(input,RULE_INT,FOLLOW_RULE_INT_in_ruleNumber16309); if (failed) return current;
                            if ( backtracking==0 ) {

                              		current.merge(this_INT_9);
                                  
                            }
                            if ( backtracking==0 ) {
                               
                                  createLeafNode(grammarAccess.getNumberAccess().getINTTerminalRuleCall_1_0_1(), null); 
                                  
                            }

                            }
                            break;
                        case 3 :
                            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8409:10: this_SIGNED_INT_10= RULE_SIGNED_INT
                            {
                            this_SIGNED_INT_10=(Token)input.LT(1);
                            match(input,RULE_SIGNED_INT,FOLLOW_RULE_SIGNED_INT_in_ruleNumber16335); if (failed) return current;
                            if ( backtracking==0 ) {

                              		current.merge(this_SIGNED_INT_10);
                                  
                            }
                            if ( backtracking==0 ) {
                               
                                  createLeafNode(grammarAccess.getNumberAccess().getSIGNED_INTTerminalRuleCall_1_0_2(), null); 
                                  
                            }

                            }
                            break;

                    }

                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8416:2: (kw= 'l' | ( (kw= '.' (this_INT_13= RULE_INT )? (kw= 'e' (kw= '+' | kw= '-' )? this_INT_17= RULE_INT )? (kw= 'f' | kw= 'd' )? ) | (kw= 'e' (kw= '+' | kw= '-' )? this_INT_23= RULE_INT (kw= 'f' | kw= 'd' )? ) | kw= 'f' | kw= 'd' ) )?
                    int alt134=3;
                    switch ( input.LA(1) ) {
                        case 79:
                            {
                            alt134=1;
                            }
                            break;
                        case 36:
                            {
                            int LA134_2 = input.LA(2);

                            if ( (synpred249()) ) {
                                alt134=2;
                            }
                            }
                            break;
                        case 76:
                        case 77:
                        case 78:
                            {
                            alt134=2;
                            }
                            break;
                    }

                    switch (alt134) {
                        case 1 :
                            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8417:2: kw= 'l'
                            {
                            kw=(Token)input.LT(1);
                            match(input,79,FOLLOW_79_in_ruleNumber16355); if (failed) return current;
                            if ( backtracking==0 ) {

                                      current.merge(kw);
                                      createLeafNode(grammarAccess.getNumberAccess().getLKeyword_1_1_0(), null); 
                                  
                            }

                            }
                            break;
                        case 2 :
                            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8423:6: ( (kw= '.' (this_INT_13= RULE_INT )? (kw= 'e' (kw= '+' | kw= '-' )? this_INT_17= RULE_INT )? (kw= 'f' | kw= 'd' )? ) | (kw= 'e' (kw= '+' | kw= '-' )? this_INT_23= RULE_INT (kw= 'f' | kw= 'd' )? ) | kw= 'f' | kw= 'd' )
                            {
                            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8423:6: ( (kw= '.' (this_INT_13= RULE_INT )? (kw= 'e' (kw= '+' | kw= '-' )? this_INT_17= RULE_INT )? (kw= 'f' | kw= 'd' )? ) | (kw= 'e' (kw= '+' | kw= '-' )? this_INT_23= RULE_INT (kw= 'f' | kw= 'd' )? ) | kw= 'f' | kw= 'd' )
                            int alt133=4;
                            switch ( input.LA(1) ) {
                            case 36:
                                {
                                alt133=1;
                                }
                                break;
                            case 76:
                                {
                                alt133=2;
                                }
                                break;
                            case 77:
                                {
                                alt133=3;
                                }
                                break;
                            case 78:
                                {
                                alt133=4;
                                }
                                break;
                            default:
                                if (backtracking>0) {failed=true; return current;}
                                NoViableAltException nvae =
                                    new NoViableAltException("8423:6: ( (kw= '.' (this_INT_13= RULE_INT )? (kw= 'e' (kw= '+' | kw= '-' )? this_INT_17= RULE_INT )? (kw= 'f' | kw= 'd' )? ) | (kw= 'e' (kw= '+' | kw= '-' )? this_INT_23= RULE_INT (kw= 'f' | kw= 'd' )? ) | kw= 'f' | kw= 'd' )", 133, 0, input);

                                throw nvae;
                            }

                            switch (alt133) {
                                case 1 :
                                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8423:7: (kw= '.' (this_INT_13= RULE_INT )? (kw= 'e' (kw= '+' | kw= '-' )? this_INT_17= RULE_INT )? (kw= 'f' | kw= 'd' )? )
                                    {
                                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8423:7: (kw= '.' (this_INT_13= RULE_INT )? (kw= 'e' (kw= '+' | kw= '-' )? this_INT_17= RULE_INT )? (kw= 'f' | kw= 'd' )? )
                                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8424:2: kw= '.' (this_INT_13= RULE_INT )? (kw= 'e' (kw= '+' | kw= '-' )? this_INT_17= RULE_INT )? (kw= 'f' | kw= 'd' )?
                                    {
                                    kw=(Token)input.LT(1);
                                    match(input,36,FOLLOW_36_in_ruleNumber16376); if (failed) return current;
                                    if ( backtracking==0 ) {

                                              current.merge(kw);
                                              createLeafNode(grammarAccess.getNumberAccess().getFullStopKeyword_1_1_1_0_0(), null); 
                                          
                                    }
                                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8429:1: (this_INT_13= RULE_INT )?
                                    int alt127=2;
                                    int LA127_0 = input.LA(1);

                                    if ( (LA127_0==RULE_INT) ) {
                                        alt127=1;
                                    }
                                    switch (alt127) {
                                        case 1 :
                                            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8429:6: this_INT_13= RULE_INT
                                            {
                                            this_INT_13=(Token)input.LT(1);
                                            match(input,RULE_INT,FOLLOW_RULE_INT_in_ruleNumber16392); if (failed) return current;
                                            if ( backtracking==0 ) {

                                              		current.merge(this_INT_13);
                                                  
                                            }
                                            if ( backtracking==0 ) {
                                               
                                                  createLeafNode(grammarAccess.getNumberAccess().getINTTerminalRuleCall_1_1_1_0_1(), null); 
                                                  
                                            }

                                            }
                                            break;

                                    }

                                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8436:3: (kw= 'e' (kw= '+' | kw= '-' )? this_INT_17= RULE_INT )?
                                    int alt129=2;
                                    int LA129_0 = input.LA(1);

                                    if ( (LA129_0==76) ) {
                                        alt129=1;
                                    }
                                    switch (alt129) {
                                        case 1 :
                                            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8437:2: kw= 'e' (kw= '+' | kw= '-' )? this_INT_17= RULE_INT
                                            {
                                            kw=(Token)input.LT(1);
                                            match(input,76,FOLLOW_76_in_ruleNumber16413); if (failed) return current;
                                            if ( backtracking==0 ) {

                                                      current.merge(kw);
                                                      createLeafNode(grammarAccess.getNumberAccess().getEKeyword_1_1_1_0_2_0(), null); 
                                                  
                                            }
                                            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8442:1: (kw= '+' | kw= '-' )?
                                            int alt128=3;
                                            int LA128_0 = input.LA(1);

                                            if ( (LA128_0==56) ) {
                                                alt128=1;
                                            }
                                            else if ( (LA128_0==57) ) {
                                                alt128=2;
                                            }
                                            switch (alt128) {
                                                case 1 :
                                                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8443:2: kw= '+'
                                                    {
                                                    kw=(Token)input.LT(1);
                                                    match(input,56,FOLLOW_56_in_ruleNumber16427); if (failed) return current;
                                                    if ( backtracking==0 ) {

                                                              current.merge(kw);
                                                              createLeafNode(grammarAccess.getNumberAccess().getPlusSignKeyword_1_1_1_0_2_1_0(), null); 
                                                          
                                                    }

                                                    }
                                                    break;
                                                case 2 :
                                                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8450:2: kw= '-'
                                                    {
                                                    kw=(Token)input.LT(1);
                                                    match(input,57,FOLLOW_57_in_ruleNumber16446); if (failed) return current;
                                                    if ( backtracking==0 ) {

                                                              current.merge(kw);
                                                              createLeafNode(grammarAccess.getNumberAccess().getHyphenMinusKeyword_1_1_1_0_2_1_1(), null); 
                                                          
                                                    }

                                                    }
                                                    break;

                                            }

                                            this_INT_17=(Token)input.LT(1);
                                            match(input,RULE_INT,FOLLOW_RULE_INT_in_ruleNumber16463); if (failed) return current;
                                            if ( backtracking==0 ) {

                                              		current.merge(this_INT_17);
                                                  
                                            }
                                            if ( backtracking==0 ) {
                                               
                                                  createLeafNode(grammarAccess.getNumberAccess().getINTTerminalRuleCall_1_1_1_0_2_2(), null); 
                                                  
                                            }

                                            }
                                            break;

                                    }

                                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8462:3: (kw= 'f' | kw= 'd' )?
                                    int alt130=3;
                                    int LA130_0 = input.LA(1);

                                    if ( (LA130_0==77) ) {
                                        alt130=1;
                                    }
                                    else if ( (LA130_0==78) ) {
                                        alt130=2;
                                    }
                                    switch (alt130) {
                                        case 1 :
                                            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8463:2: kw= 'f'
                                            {
                                            kw=(Token)input.LT(1);
                                            match(input,77,FOLLOW_77_in_ruleNumber16484); if (failed) return current;
                                            if ( backtracking==0 ) {

                                                      current.merge(kw);
                                                      createLeafNode(grammarAccess.getNumberAccess().getFKeyword_1_1_1_0_3_0(), null); 
                                                  
                                            }

                                            }
                                            break;
                                        case 2 :
                                            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8470:2: kw= 'd'
                                            {
                                            kw=(Token)input.LT(1);
                                            match(input,78,FOLLOW_78_in_ruleNumber16503); if (failed) return current;
                                            if ( backtracking==0 ) {

                                                      current.merge(kw);
                                                      createLeafNode(grammarAccess.getNumberAccess().getDKeyword_1_1_1_0_3_1(), null); 
                                                  
                                            }

                                            }
                                            break;

                                    }


                                    }


                                    }
                                    break;
                                case 2 :
                                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8476:6: (kw= 'e' (kw= '+' | kw= '-' )? this_INT_23= RULE_INT (kw= 'f' | kw= 'd' )? )
                                    {
                                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8476:6: (kw= 'e' (kw= '+' | kw= '-' )? this_INT_23= RULE_INT (kw= 'f' | kw= 'd' )? )
                                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8477:2: kw= 'e' (kw= '+' | kw= '-' )? this_INT_23= RULE_INT (kw= 'f' | kw= 'd' )?
                                    {
                                    kw=(Token)input.LT(1);
                                    match(input,76,FOLLOW_76_in_ruleNumber16526); if (failed) return current;
                                    if ( backtracking==0 ) {

                                              current.merge(kw);
                                              createLeafNode(grammarAccess.getNumberAccess().getEKeyword_1_1_1_1_0(), null); 
                                          
                                    }
                                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8482:1: (kw= '+' | kw= '-' )?
                                    int alt131=3;
                                    int LA131_0 = input.LA(1);

                                    if ( (LA131_0==56) ) {
                                        alt131=1;
                                    }
                                    else if ( (LA131_0==57) ) {
                                        alt131=2;
                                    }
                                    switch (alt131) {
                                        case 1 :
                                            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8483:2: kw= '+'
                                            {
                                            kw=(Token)input.LT(1);
                                            match(input,56,FOLLOW_56_in_ruleNumber16540); if (failed) return current;
                                            if ( backtracking==0 ) {

                                                      current.merge(kw);
                                                      createLeafNode(grammarAccess.getNumberAccess().getPlusSignKeyword_1_1_1_1_1_0(), null); 
                                                  
                                            }

                                            }
                                            break;
                                        case 2 :
                                            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8490:2: kw= '-'
                                            {
                                            kw=(Token)input.LT(1);
                                            match(input,57,FOLLOW_57_in_ruleNumber16559); if (failed) return current;
                                            if ( backtracking==0 ) {

                                                      current.merge(kw);
                                                      createLeafNode(grammarAccess.getNumberAccess().getHyphenMinusKeyword_1_1_1_1_1_1(), null); 
                                                  
                                            }

                                            }
                                            break;

                                    }

                                    this_INT_23=(Token)input.LT(1);
                                    match(input,RULE_INT,FOLLOW_RULE_INT_in_ruleNumber16576); if (failed) return current;
                                    if ( backtracking==0 ) {

                                      		current.merge(this_INT_23);
                                          
                                    }
                                    if ( backtracking==0 ) {
                                       
                                          createLeafNode(grammarAccess.getNumberAccess().getINTTerminalRuleCall_1_1_1_1_2(), null); 
                                          
                                    }
                                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8502:1: (kw= 'f' | kw= 'd' )?
                                    int alt132=3;
                                    int LA132_0 = input.LA(1);

                                    if ( (LA132_0==77) ) {
                                        alt132=1;
                                    }
                                    else if ( (LA132_0==78) ) {
                                        alt132=2;
                                    }
                                    switch (alt132) {
                                        case 1 :
                                            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8503:2: kw= 'f'
                                            {
                                            kw=(Token)input.LT(1);
                                            match(input,77,FOLLOW_77_in_ruleNumber16595); if (failed) return current;
                                            if ( backtracking==0 ) {

                                                      current.merge(kw);
                                                      createLeafNode(grammarAccess.getNumberAccess().getFKeyword_1_1_1_1_3_0(), null); 
                                                  
                                            }

                                            }
                                            break;
                                        case 2 :
                                            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8510:2: kw= 'd'
                                            {
                                            kw=(Token)input.LT(1);
                                            match(input,78,FOLLOW_78_in_ruleNumber16614); if (failed) return current;
                                            if ( backtracking==0 ) {

                                                      current.merge(kw);
                                                      createLeafNode(grammarAccess.getNumberAccess().getDKeyword_1_1_1_1_3_1(), null); 
                                                  
                                            }

                                            }
                                            break;

                                    }


                                    }


                                    }
                                    break;
                                case 3 :
                                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8517:2: kw= 'f'
                                    {
                                    kw=(Token)input.LT(1);
                                    match(input,77,FOLLOW_77_in_ruleNumber16636); if (failed) return current;
                                    if ( backtracking==0 ) {

                                              current.merge(kw);
                                              createLeafNode(grammarAccess.getNumberAccess().getFKeyword_1_1_1_2(), null); 
                                          
                                    }

                                    }
                                    break;
                                case 4 :
                                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8524:2: kw= 'd'
                                    {
                                    kw=(Token)input.LT(1);
                                    match(input,78,FOLLOW_78_in_ruleNumber16655); if (failed) return current;
                                    if ( backtracking==0 ) {

                                              current.merge(kw);
                                              createLeafNode(grammarAccess.getNumberAccess().getDKeyword_1_1_1_3(), null); 
                                          
                                    }

                                    }
                                    break;

                            }


                            }
                            break;

                    }


                    }


                    }
                    break;

            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
              	    lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruleNumber


    // $ANTLR start entryRuleSELECT
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8537:1: entryRuleSELECT returns [String current=null] : iv_ruleSELECT= ruleSELECT EOF ;
    public final String entryRuleSELECT() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleSELECT = null;


        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8538:2: (iv_ruleSELECT= ruleSELECT EOF )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8539:2: iv_ruleSELECT= ruleSELECT EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getSELECTRule(), currentNode); 
            }
            pushFollow(FOLLOW_ruleSELECT_in_entryRuleSELECT16700);
            iv_ruleSELECT=ruleSELECT();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruleSELECT.getText(); 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleSELECT16711); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuleSELECT


    // $ANTLR start ruleSELECT
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8546:1: ruleSELECT returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (kw= 'SELECT' | kw= 'Select' | kw= 'select' ) ;
    public final AntlrDatatypeRuleToken ruleSELECT() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;

         setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8551:6: ( (kw= 'SELECT' | kw= 'Select' | kw= 'select' ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8552:1: (kw= 'SELECT' | kw= 'Select' | kw= 'select' )
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8552:1: (kw= 'SELECT' | kw= 'Select' | kw= 'select' )
            int alt136=3;
            switch ( input.LA(1) ) {
            case 80:
                {
                alt136=1;
                }
                break;
            case 81:
                {
                alt136=2;
                }
                break;
            case 82:
                {
                alt136=3;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("8552:1: (kw= 'SELECT' | kw= 'Select' | kw= 'select' )", 136, 0, input);

                throw nvae;
            }

            switch (alt136) {
                case 1 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8553:2: kw= 'SELECT'
                    {
                    kw=(Token)input.LT(1);
                    match(input,80,FOLLOW_80_in_ruleSELECT16749); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getSELECTAccess().getSELECTKeyword_0(), null); 
                          
                    }

                    }
                    break;
                case 2 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8560:2: kw= 'Select'
                    {
                    kw=(Token)input.LT(1);
                    match(input,81,FOLLOW_81_in_ruleSELECT16768); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getSELECTAccess().getSelectKeyword_1(), null); 
                          
                    }

                    }
                    break;
                case 3 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8567:2: kw= 'select'
                    {
                    kw=(Token)input.LT(1);
                    match(input,82,FOLLOW_82_in_ruleSELECT16787); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getSELECTAccess().getSelectKeyword_2(), null); 
                          
                    }

                    }
                    break;

            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
              	    lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruleSELECT


    // $ANTLR start entryRuleDISTINCT
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8580:1: entryRuleDISTINCT returns [String current=null] : iv_ruleDISTINCT= ruleDISTINCT EOF ;
    public final String entryRuleDISTINCT() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleDISTINCT = null;


        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8581:2: (iv_ruleDISTINCT= ruleDISTINCT EOF )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8582:2: iv_ruleDISTINCT= ruleDISTINCT EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getDISTINCTRule(), currentNode); 
            }
            pushFollow(FOLLOW_ruleDISTINCT_in_entryRuleDISTINCT16828);
            iv_ruleDISTINCT=ruleDISTINCT();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruleDISTINCT.getText(); 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleDISTINCT16839); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuleDISTINCT


    // $ANTLR start ruleDISTINCT
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8589:1: ruleDISTINCT returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (kw= 'DISTINCT' | kw= 'Distinct' | kw= 'distinct' ) ;
    public final AntlrDatatypeRuleToken ruleDISTINCT() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;

         setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8594:6: ( (kw= 'DISTINCT' | kw= 'Distinct' | kw= 'distinct' ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8595:1: (kw= 'DISTINCT' | kw= 'Distinct' | kw= 'distinct' )
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8595:1: (kw= 'DISTINCT' | kw= 'Distinct' | kw= 'distinct' )
            int alt137=3;
            switch ( input.LA(1) ) {
            case 83:
                {
                alt137=1;
                }
                break;
            case 84:
                {
                alt137=2;
                }
                break;
            case 85:
                {
                alt137=3;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("8595:1: (kw= 'DISTINCT' | kw= 'Distinct' | kw= 'distinct' )", 137, 0, input);

                throw nvae;
            }

            switch (alt137) {
                case 1 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8596:2: kw= 'DISTINCT'
                    {
                    kw=(Token)input.LT(1);
                    match(input,83,FOLLOW_83_in_ruleDISTINCT16877); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getDISTINCTAccess().getDISTINCTKeyword_0(), null); 
                          
                    }

                    }
                    break;
                case 2 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8603:2: kw= 'Distinct'
                    {
                    kw=(Token)input.LT(1);
                    match(input,84,FOLLOW_84_in_ruleDISTINCT16896); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getDISTINCTAccess().getDistinctKeyword_1(), null); 
                          
                    }

                    }
                    break;
                case 3 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8610:2: kw= 'distinct'
                    {
                    kw=(Token)input.LT(1);
                    match(input,85,FOLLOW_85_in_ruleDISTINCT16915); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getDISTINCTAccess().getDistinctKeyword_2(), null); 
                          
                    }

                    }
                    break;

            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
              	    lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruleDISTINCT


    // $ANTLR start entryRuleNEW
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8623:1: entryRuleNEW returns [String current=null] : iv_ruleNEW= ruleNEW EOF ;
    public final String entryRuleNEW() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleNEW = null;


        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8624:2: (iv_ruleNEW= ruleNEW EOF )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8625:2: iv_ruleNEW= ruleNEW EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getNEWRule(), currentNode); 
            }
            pushFollow(FOLLOW_ruleNEW_in_entryRuleNEW16956);
            iv_ruleNEW=ruleNEW();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruleNEW.getText(); 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleNEW16967); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuleNEW


    // $ANTLR start ruleNEW
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8632:1: ruleNEW returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (kw= 'NEW' | kw= 'New' | kw= 'new' ) ;
    public final AntlrDatatypeRuleToken ruleNEW() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;

         setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8637:6: ( (kw= 'NEW' | kw= 'New' | kw= 'new' ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8638:1: (kw= 'NEW' | kw= 'New' | kw= 'new' )
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8638:1: (kw= 'NEW' | kw= 'New' | kw= 'new' )
            int alt138=3;
            switch ( input.LA(1) ) {
            case 86:
                {
                alt138=1;
                }
                break;
            case 87:
                {
                alt138=2;
                }
                break;
            case 88:
                {
                alt138=3;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("8638:1: (kw= 'NEW' | kw= 'New' | kw= 'new' )", 138, 0, input);

                throw nvae;
            }

            switch (alt138) {
                case 1 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8639:2: kw= 'NEW'
                    {
                    kw=(Token)input.LT(1);
                    match(input,86,FOLLOW_86_in_ruleNEW17005); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getNEWAccess().getNEWKeyword_0(), null); 
                          
                    }

                    }
                    break;
                case 2 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8646:2: kw= 'New'
                    {
                    kw=(Token)input.LT(1);
                    match(input,87,FOLLOW_87_in_ruleNEW17024); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getNEWAccess().getNewKeyword_1(), null); 
                          
                    }

                    }
                    break;
                case 3 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8653:2: kw= 'new'
                    {
                    kw=(Token)input.LT(1);
                    match(input,88,FOLLOW_88_in_ruleNEW17043); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getNEWAccess().getNewKeyword_2(), null); 
                          
                    }

                    }
                    break;

            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
              	    lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruleNEW


    // $ANTLR start entryRuleOBJECT
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8666:1: entryRuleOBJECT returns [String current=null] : iv_ruleOBJECT= ruleOBJECT EOF ;
    public final String entryRuleOBJECT() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleOBJECT = null;


        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8667:2: (iv_ruleOBJECT= ruleOBJECT EOF )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8668:2: iv_ruleOBJECT= ruleOBJECT EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getOBJECTRule(), currentNode); 
            }
            pushFollow(FOLLOW_ruleOBJECT_in_entryRuleOBJECT17084);
            iv_ruleOBJECT=ruleOBJECT();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruleOBJECT.getText(); 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleOBJECT17095); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuleOBJECT


    // $ANTLR start ruleOBJECT
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8675:1: ruleOBJECT returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (kw= 'OBJECT' | kw= 'Object' | kw= 'object' ) ;
    public final AntlrDatatypeRuleToken ruleOBJECT() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;

         setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8680:6: ( (kw= 'OBJECT' | kw= 'Object' | kw= 'object' ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8681:1: (kw= 'OBJECT' | kw= 'Object' | kw= 'object' )
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8681:1: (kw= 'OBJECT' | kw= 'Object' | kw= 'object' )
            int alt139=3;
            switch ( input.LA(1) ) {
            case 89:
                {
                alt139=1;
                }
                break;
            case 90:
                {
                alt139=2;
                }
                break;
            case 91:
                {
                alt139=3;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("8681:1: (kw= 'OBJECT' | kw= 'Object' | kw= 'object' )", 139, 0, input);

                throw nvae;
            }

            switch (alt139) {
                case 1 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8682:2: kw= 'OBJECT'
                    {
                    kw=(Token)input.LT(1);
                    match(input,89,FOLLOW_89_in_ruleOBJECT17133); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getOBJECTAccess().getOBJECTKeyword_0(), null); 
                          
                    }

                    }
                    break;
                case 2 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8689:2: kw= 'Object'
                    {
                    kw=(Token)input.LT(1);
                    match(input,90,FOLLOW_90_in_ruleOBJECT17152); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getOBJECTAccess().getObjectKeyword_1(), null); 
                          
                    }

                    }
                    break;
                case 3 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8696:2: kw= 'object'
                    {
                    kw=(Token)input.LT(1);
                    match(input,91,FOLLOW_91_in_ruleOBJECT17171); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getOBJECTAccess().getObjectKeyword_2(), null); 
                          
                    }

                    }
                    break;

            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
              	    lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruleOBJECT


    // $ANTLR start entryRuleFROM
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8709:1: entryRuleFROM returns [String current=null] : iv_ruleFROM= ruleFROM EOF ;
    public final String entryRuleFROM() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleFROM = null;


        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8710:2: (iv_ruleFROM= ruleFROM EOF )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8711:2: iv_ruleFROM= ruleFROM EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getFROMRule(), currentNode); 
            }
            pushFollow(FOLLOW_ruleFROM_in_entryRuleFROM17212);
            iv_ruleFROM=ruleFROM();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruleFROM.getText(); 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleFROM17223); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuleFROM


    // $ANTLR start ruleFROM
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8718:1: ruleFROM returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (kw= 'FROM' | kw= 'From' | kw= 'from' ) ;
    public final AntlrDatatypeRuleToken ruleFROM() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;

         setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8723:6: ( (kw= 'FROM' | kw= 'From' | kw= 'from' ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8724:1: (kw= 'FROM' | kw= 'From' | kw= 'from' )
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8724:1: (kw= 'FROM' | kw= 'From' | kw= 'from' )
            int alt140=3;
            switch ( input.LA(1) ) {
            case 92:
                {
                alt140=1;
                }
                break;
            case 93:
                {
                alt140=2;
                }
                break;
            case 94:
                {
                alt140=3;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("8724:1: (kw= 'FROM' | kw= 'From' | kw= 'from' )", 140, 0, input);

                throw nvae;
            }

            switch (alt140) {
                case 1 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8725:2: kw= 'FROM'
                    {
                    kw=(Token)input.LT(1);
                    match(input,92,FOLLOW_92_in_ruleFROM17261); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getFROMAccess().getFROMKeyword_0(), null); 
                          
                    }

                    }
                    break;
                case 2 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8732:2: kw= 'From'
                    {
                    kw=(Token)input.LT(1);
                    match(input,93,FOLLOW_93_in_ruleFROM17280); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getFROMAccess().getFromKeyword_1(), null); 
                          
                    }

                    }
                    break;
                case 3 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8739:2: kw= 'from'
                    {
                    kw=(Token)input.LT(1);
                    match(input,94,FOLLOW_94_in_ruleFROM17299); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getFROMAccess().getFromKeyword_2(), null); 
                          
                    }

                    }
                    break;

            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
              	    lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruleFROM


    // $ANTLR start entryRuleLEFT
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8752:1: entryRuleLEFT returns [String current=null] : iv_ruleLEFT= ruleLEFT EOF ;
    public final String entryRuleLEFT() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleLEFT = null;


        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8753:2: (iv_ruleLEFT= ruleLEFT EOF )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8754:2: iv_ruleLEFT= ruleLEFT EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getLEFTRule(), currentNode); 
            }
            pushFollow(FOLLOW_ruleLEFT_in_entryRuleLEFT17340);
            iv_ruleLEFT=ruleLEFT();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruleLEFT.getText(); 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleLEFT17351); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuleLEFT


    // $ANTLR start ruleLEFT
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8761:1: ruleLEFT returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (kw= 'LEFT' | kw= 'Left' | kw= 'left' ) ;
    public final AntlrDatatypeRuleToken ruleLEFT() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;

         setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8766:6: ( (kw= 'LEFT' | kw= 'Left' | kw= 'left' ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8767:1: (kw= 'LEFT' | kw= 'Left' | kw= 'left' )
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8767:1: (kw= 'LEFT' | kw= 'Left' | kw= 'left' )
            int alt141=3;
            switch ( input.LA(1) ) {
            case 95:
                {
                alt141=1;
                }
                break;
            case 96:
                {
                alt141=2;
                }
                break;
            case 97:
                {
                alt141=3;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("8767:1: (kw= 'LEFT' | kw= 'Left' | kw= 'left' )", 141, 0, input);

                throw nvae;
            }

            switch (alt141) {
                case 1 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8768:2: kw= 'LEFT'
                    {
                    kw=(Token)input.LT(1);
                    match(input,95,FOLLOW_95_in_ruleLEFT17389); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getLEFTAccess().getLEFTKeyword_0(), null); 
                          
                    }

                    }
                    break;
                case 2 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8775:2: kw= 'Left'
                    {
                    kw=(Token)input.LT(1);
                    match(input,96,FOLLOW_96_in_ruleLEFT17408); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getLEFTAccess().getLeftKeyword_1(), null); 
                          
                    }

                    }
                    break;
                case 3 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8782:2: kw= 'left'
                    {
                    kw=(Token)input.LT(1);
                    match(input,97,FOLLOW_97_in_ruleLEFT17427); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getLEFTAccess().getLeftKeyword_2(), null); 
                          
                    }

                    }
                    break;

            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
              	    lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruleLEFT


    // $ANTLR start entryRuleRIGHT
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8795:1: entryRuleRIGHT returns [String current=null] : iv_ruleRIGHT= ruleRIGHT EOF ;
    public final String entryRuleRIGHT() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleRIGHT = null;


        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8796:2: (iv_ruleRIGHT= ruleRIGHT EOF )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8797:2: iv_ruleRIGHT= ruleRIGHT EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getRIGHTRule(), currentNode); 
            }
            pushFollow(FOLLOW_ruleRIGHT_in_entryRuleRIGHT17468);
            iv_ruleRIGHT=ruleRIGHT();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruleRIGHT.getText(); 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleRIGHT17479); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuleRIGHT


    // $ANTLR start ruleRIGHT
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8804:1: ruleRIGHT returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (kw= 'RIGHT' | kw= 'Right' | kw= 'right' ) ;
    public final AntlrDatatypeRuleToken ruleRIGHT() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;

         setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8809:6: ( (kw= 'RIGHT' | kw= 'Right' | kw= 'right' ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8810:1: (kw= 'RIGHT' | kw= 'Right' | kw= 'right' )
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8810:1: (kw= 'RIGHT' | kw= 'Right' | kw= 'right' )
            int alt142=3;
            switch ( input.LA(1) ) {
            case 98:
                {
                alt142=1;
                }
                break;
            case 99:
                {
                alt142=2;
                }
                break;
            case 100:
                {
                alt142=3;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("8810:1: (kw= 'RIGHT' | kw= 'Right' | kw= 'right' )", 142, 0, input);

                throw nvae;
            }

            switch (alt142) {
                case 1 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8811:2: kw= 'RIGHT'
                    {
                    kw=(Token)input.LT(1);
                    match(input,98,FOLLOW_98_in_ruleRIGHT17517); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getRIGHTAccess().getRIGHTKeyword_0(), null); 
                          
                    }

                    }
                    break;
                case 2 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8818:2: kw= 'Right'
                    {
                    kw=(Token)input.LT(1);
                    match(input,99,FOLLOW_99_in_ruleRIGHT17536); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getRIGHTAccess().getRightKeyword_1(), null); 
                          
                    }

                    }
                    break;
                case 3 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8825:2: kw= 'right'
                    {
                    kw=(Token)input.LT(1);
                    match(input,100,FOLLOW_100_in_ruleRIGHT17555); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getRIGHTAccess().getRightKeyword_2(), null); 
                          
                    }

                    }
                    break;

            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
              	    lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruleRIGHT


    // $ANTLR start entryRuleOUTER
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8838:1: entryRuleOUTER returns [String current=null] : iv_ruleOUTER= ruleOUTER EOF ;
    public final String entryRuleOUTER() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleOUTER = null;


        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8839:2: (iv_ruleOUTER= ruleOUTER EOF )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8840:2: iv_ruleOUTER= ruleOUTER EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getOUTERRule(), currentNode); 
            }
            pushFollow(FOLLOW_ruleOUTER_in_entryRuleOUTER17596);
            iv_ruleOUTER=ruleOUTER();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruleOUTER.getText(); 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleOUTER17607); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuleOUTER


    // $ANTLR start ruleOUTER
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8847:1: ruleOUTER returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (kw= 'OUTER' | kw= 'Outer' | kw= 'outer' ) ;
    public final AntlrDatatypeRuleToken ruleOUTER() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;

         setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8852:6: ( (kw= 'OUTER' | kw= 'Outer' | kw= 'outer' ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8853:1: (kw= 'OUTER' | kw= 'Outer' | kw= 'outer' )
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8853:1: (kw= 'OUTER' | kw= 'Outer' | kw= 'outer' )
            int alt143=3;
            switch ( input.LA(1) ) {
            case 101:
                {
                alt143=1;
                }
                break;
            case 102:
                {
                alt143=2;
                }
                break;
            case 103:
                {
                alt143=3;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("8853:1: (kw= 'OUTER' | kw= 'Outer' | kw= 'outer' )", 143, 0, input);

                throw nvae;
            }

            switch (alt143) {
                case 1 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8854:2: kw= 'OUTER'
                    {
                    kw=(Token)input.LT(1);
                    match(input,101,FOLLOW_101_in_ruleOUTER17645); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getOUTERAccess().getOUTERKeyword_0(), null); 
                          
                    }

                    }
                    break;
                case 2 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8861:2: kw= 'Outer'
                    {
                    kw=(Token)input.LT(1);
                    match(input,102,FOLLOW_102_in_ruleOUTER17664); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getOUTERAccess().getOuterKeyword_1(), null); 
                          
                    }

                    }
                    break;
                case 3 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8868:2: kw= 'outer'
                    {
                    kw=(Token)input.LT(1);
                    match(input,103,FOLLOW_103_in_ruleOUTER17683); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getOUTERAccess().getOuterKeyword_2(), null); 
                          
                    }

                    }
                    break;

            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
              	    lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruleOUTER


    // $ANTLR start entryRuleFULL
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8881:1: entryRuleFULL returns [String current=null] : iv_ruleFULL= ruleFULL EOF ;
    public final String entryRuleFULL() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleFULL = null;


        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8882:2: (iv_ruleFULL= ruleFULL EOF )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8883:2: iv_ruleFULL= ruleFULL EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getFULLRule(), currentNode); 
            }
            pushFollow(FOLLOW_ruleFULL_in_entryRuleFULL17724);
            iv_ruleFULL=ruleFULL();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruleFULL.getText(); 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleFULL17735); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuleFULL


    // $ANTLR start ruleFULL
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8890:1: ruleFULL returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (kw= 'FULL' | kw= 'Full' | kw= 'full' ) ;
    public final AntlrDatatypeRuleToken ruleFULL() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;

         setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8895:6: ( (kw= 'FULL' | kw= 'Full' | kw= 'full' ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8896:1: (kw= 'FULL' | kw= 'Full' | kw= 'full' )
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8896:1: (kw= 'FULL' | kw= 'Full' | kw= 'full' )
            int alt144=3;
            switch ( input.LA(1) ) {
            case 104:
                {
                alt144=1;
                }
                break;
            case 105:
                {
                alt144=2;
                }
                break;
            case 106:
                {
                alt144=3;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("8896:1: (kw= 'FULL' | kw= 'Full' | kw= 'full' )", 144, 0, input);

                throw nvae;
            }

            switch (alt144) {
                case 1 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8897:2: kw= 'FULL'
                    {
                    kw=(Token)input.LT(1);
                    match(input,104,FOLLOW_104_in_ruleFULL17773); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getFULLAccess().getFULLKeyword_0(), null); 
                          
                    }

                    }
                    break;
                case 2 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8904:2: kw= 'Full'
                    {
                    kw=(Token)input.LT(1);
                    match(input,105,FOLLOW_105_in_ruleFULL17792); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getFULLAccess().getFullKeyword_1(), null); 
                          
                    }

                    }
                    break;
                case 3 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8911:2: kw= 'full'
                    {
                    kw=(Token)input.LT(1);
                    match(input,106,FOLLOW_106_in_ruleFULL17811); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getFULLAccess().getFullKeyword_2(), null); 
                          
                    }

                    }
                    break;

            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
              	    lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruleFULL


    // $ANTLR start entryRuleINNER
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8924:1: entryRuleINNER returns [String current=null] : iv_ruleINNER= ruleINNER EOF ;
    public final String entryRuleINNER() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleINNER = null;


        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8925:2: (iv_ruleINNER= ruleINNER EOF )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8926:2: iv_ruleINNER= ruleINNER EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getINNERRule(), currentNode); 
            }
            pushFollow(FOLLOW_ruleINNER_in_entryRuleINNER17852);
            iv_ruleINNER=ruleINNER();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruleINNER.getText(); 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleINNER17863); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuleINNER


    // $ANTLR start ruleINNER
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8933:1: ruleINNER returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (kw= 'INNER' | kw= 'Inner' | kw= 'inner' ) ;
    public final AntlrDatatypeRuleToken ruleINNER() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;

         setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8938:6: ( (kw= 'INNER' | kw= 'Inner' | kw= 'inner' ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8939:1: (kw= 'INNER' | kw= 'Inner' | kw= 'inner' )
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8939:1: (kw= 'INNER' | kw= 'Inner' | kw= 'inner' )
            int alt145=3;
            switch ( input.LA(1) ) {
            case 107:
                {
                alt145=1;
                }
                break;
            case 108:
                {
                alt145=2;
                }
                break;
            case 109:
                {
                alt145=3;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("8939:1: (kw= 'INNER' | kw= 'Inner' | kw= 'inner' )", 145, 0, input);

                throw nvae;
            }

            switch (alt145) {
                case 1 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8940:2: kw= 'INNER'
                    {
                    kw=(Token)input.LT(1);
                    match(input,107,FOLLOW_107_in_ruleINNER17901); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getINNERAccess().getINNERKeyword_0(), null); 
                          
                    }

                    }
                    break;
                case 2 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8947:2: kw= 'Inner'
                    {
                    kw=(Token)input.LT(1);
                    match(input,108,FOLLOW_108_in_ruleINNER17920); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getINNERAccess().getInnerKeyword_1(), null); 
                          
                    }

                    }
                    break;
                case 3 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8954:2: kw= 'inner'
                    {
                    kw=(Token)input.LT(1);
                    match(input,109,FOLLOW_109_in_ruleINNER17939); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getINNERAccess().getInnerKeyword_2(), null); 
                          
                    }

                    }
                    break;

            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
              	    lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruleINNER


    // $ANTLR start entryRuleJOIN
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8967:1: entryRuleJOIN returns [String current=null] : iv_ruleJOIN= ruleJOIN EOF ;
    public final String entryRuleJOIN() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleJOIN = null;


        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8968:2: (iv_ruleJOIN= ruleJOIN EOF )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8969:2: iv_ruleJOIN= ruleJOIN EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getJOINRule(), currentNode); 
            }
            pushFollow(FOLLOW_ruleJOIN_in_entryRuleJOIN17980);
            iv_ruleJOIN=ruleJOIN();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruleJOIN.getText(); 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleJOIN17991); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuleJOIN


    // $ANTLR start ruleJOIN
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8976:1: ruleJOIN returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (kw= 'JOIN' | kw= 'Join' | kw= 'join' ) ;
    public final AntlrDatatypeRuleToken ruleJOIN() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;

         setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8981:6: ( (kw= 'JOIN' | kw= 'Join' | kw= 'join' ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8982:1: (kw= 'JOIN' | kw= 'Join' | kw= 'join' )
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8982:1: (kw= 'JOIN' | kw= 'Join' | kw= 'join' )
            int alt146=3;
            switch ( input.LA(1) ) {
            case 110:
                {
                alt146=1;
                }
                break;
            case 111:
                {
                alt146=2;
                }
                break;
            case 112:
                {
                alt146=3;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("8982:1: (kw= 'JOIN' | kw= 'Join' | kw= 'join' )", 146, 0, input);

                throw nvae;
            }

            switch (alt146) {
                case 1 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8983:2: kw= 'JOIN'
                    {
                    kw=(Token)input.LT(1);
                    match(input,110,FOLLOW_110_in_ruleJOIN18029); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getJOINAccess().getJOINKeyword_0(), null); 
                          
                    }

                    }
                    break;
                case 2 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8990:2: kw= 'Join'
                    {
                    kw=(Token)input.LT(1);
                    match(input,111,FOLLOW_111_in_ruleJOIN18048); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getJOINAccess().getJoinKeyword_1(), null); 
                          
                    }

                    }
                    break;
                case 3 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8997:2: kw= 'join'
                    {
                    kw=(Token)input.LT(1);
                    match(input,112,FOLLOW_112_in_ruleJOIN18067); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getJOINAccess().getJoinKeyword_2(), null); 
                          
                    }

                    }
                    break;

            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
              	    lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruleJOIN


    // $ANTLR start entryRuleFETCH
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9010:1: entryRuleFETCH returns [String current=null] : iv_ruleFETCH= ruleFETCH EOF ;
    public final String entryRuleFETCH() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleFETCH = null;


        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9011:2: (iv_ruleFETCH= ruleFETCH EOF )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9012:2: iv_ruleFETCH= ruleFETCH EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getFETCHRule(), currentNode); 
            }
            pushFollow(FOLLOW_ruleFETCH_in_entryRuleFETCH18108);
            iv_ruleFETCH=ruleFETCH();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruleFETCH.getText(); 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleFETCH18119); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuleFETCH


    // $ANTLR start ruleFETCH
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9019:1: ruleFETCH returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (kw= 'FETCH' | kw= 'Fetch' | kw= 'fetch' ) ;
    public final AntlrDatatypeRuleToken ruleFETCH() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;

         setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9024:6: ( (kw= 'FETCH' | kw= 'Fetch' | kw= 'fetch' ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9025:1: (kw= 'FETCH' | kw= 'Fetch' | kw= 'fetch' )
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9025:1: (kw= 'FETCH' | kw= 'Fetch' | kw= 'fetch' )
            int alt147=3;
            switch ( input.LA(1) ) {
            case 113:
                {
                alt147=1;
                }
                break;
            case 114:
                {
                alt147=2;
                }
                break;
            case 115:
                {
                alt147=3;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("9025:1: (kw= 'FETCH' | kw= 'Fetch' | kw= 'fetch' )", 147, 0, input);

                throw nvae;
            }

            switch (alt147) {
                case 1 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9026:2: kw= 'FETCH'
                    {
                    kw=(Token)input.LT(1);
                    match(input,113,FOLLOW_113_in_ruleFETCH18157); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getFETCHAccess().getFETCHKeyword_0(), null); 
                          
                    }

                    }
                    break;
                case 2 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9033:2: kw= 'Fetch'
                    {
                    kw=(Token)input.LT(1);
                    match(input,114,FOLLOW_114_in_ruleFETCH18176); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getFETCHAccess().getFetchKeyword_1(), null); 
                          
                    }

                    }
                    break;
                case 3 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9040:2: kw= 'fetch'
                    {
                    kw=(Token)input.LT(1);
                    match(input,115,FOLLOW_115_in_ruleFETCH18195); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getFETCHAccess().getFetchKeyword_2(), null); 
                          
                    }

                    }
                    break;

            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
              	    lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruleFETCH


    // $ANTLR start entryRuleWITH
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9053:1: entryRuleWITH returns [String current=null] : iv_ruleWITH= ruleWITH EOF ;
    public final String entryRuleWITH() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleWITH = null;


        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9054:2: (iv_ruleWITH= ruleWITH EOF )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9055:2: iv_ruleWITH= ruleWITH EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getWITHRule(), currentNode); 
            }
            pushFollow(FOLLOW_ruleWITH_in_entryRuleWITH18236);
            iv_ruleWITH=ruleWITH();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruleWITH.getText(); 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleWITH18247); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuleWITH


    // $ANTLR start ruleWITH
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9062:1: ruleWITH returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (kw= 'WITH' | kw= 'With' | kw= 'with' ) ;
    public final AntlrDatatypeRuleToken ruleWITH() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;

         setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9067:6: ( (kw= 'WITH' | kw= 'With' | kw= 'with' ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9068:1: (kw= 'WITH' | kw= 'With' | kw= 'with' )
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9068:1: (kw= 'WITH' | kw= 'With' | kw= 'with' )
            int alt148=3;
            switch ( input.LA(1) ) {
            case 116:
                {
                alt148=1;
                }
                break;
            case 117:
                {
                alt148=2;
                }
                break;
            case 118:
                {
                alt148=3;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("9068:1: (kw= 'WITH' | kw= 'With' | kw= 'with' )", 148, 0, input);

                throw nvae;
            }

            switch (alt148) {
                case 1 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9069:2: kw= 'WITH'
                    {
                    kw=(Token)input.LT(1);
                    match(input,116,FOLLOW_116_in_ruleWITH18285); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getWITHAccess().getWITHKeyword_0(), null); 
                          
                    }

                    }
                    break;
                case 2 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9076:2: kw= 'With'
                    {
                    kw=(Token)input.LT(1);
                    match(input,117,FOLLOW_117_in_ruleWITH18304); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getWITHAccess().getWithKeyword_1(), null); 
                          
                    }

                    }
                    break;
                case 3 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9083:2: kw= 'with'
                    {
                    kw=(Token)input.LT(1);
                    match(input,118,FOLLOW_118_in_ruleWITH18323); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getWITHAccess().getWithKeyword_2(), null); 
                          
                    }

                    }
                    break;

            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
              	    lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruleWITH


    // $ANTLR start entryRuleIN
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9096:1: entryRuleIN returns [String current=null] : iv_ruleIN= ruleIN EOF ;
    public final String entryRuleIN() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleIN = null;


        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9097:2: (iv_ruleIN= ruleIN EOF )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9098:2: iv_ruleIN= ruleIN EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getINRule(), currentNode); 
            }
            pushFollow(FOLLOW_ruleIN_in_entryRuleIN18364);
            iv_ruleIN=ruleIN();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruleIN.getText(); 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleIN18375); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuleIN


    // $ANTLR start ruleIN
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9105:1: ruleIN returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (kw= 'IN' | kw= 'In' | kw= 'in' ) ;
    public final AntlrDatatypeRuleToken ruleIN() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;

         setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9110:6: ( (kw= 'IN' | kw= 'In' | kw= 'in' ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9111:1: (kw= 'IN' | kw= 'In' | kw= 'in' )
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9111:1: (kw= 'IN' | kw= 'In' | kw= 'in' )
            int alt149=3;
            switch ( input.LA(1) ) {
            case 119:
                {
                alt149=1;
                }
                break;
            case 120:
                {
                alt149=2;
                }
                break;
            case 121:
                {
                alt149=3;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("9111:1: (kw= 'IN' | kw= 'In' | kw= 'in' )", 149, 0, input);

                throw nvae;
            }

            switch (alt149) {
                case 1 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9112:2: kw= 'IN'
                    {
                    kw=(Token)input.LT(1);
                    match(input,119,FOLLOW_119_in_ruleIN18413); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getINAccess().getINKeyword_0(), null); 
                          
                    }

                    }
                    break;
                case 2 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9119:2: kw= 'In'
                    {
                    kw=(Token)input.LT(1);
                    match(input,120,FOLLOW_120_in_ruleIN18432); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getINAccess().getInKeyword_1(), null); 
                          
                    }

                    }
                    break;
                case 3 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9126:2: kw= 'in'
                    {
                    kw=(Token)input.LT(1);
                    match(input,121,FOLLOW_121_in_ruleIN18451); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getINAccess().getInKeyword_2(), null); 
                          
                    }

                    }
                    break;

            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
              	    lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruleIN


    // $ANTLR start entryRuleCLASS
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9139:1: entryRuleCLASS returns [String current=null] : iv_ruleCLASS= ruleCLASS EOF ;
    public final String entryRuleCLASS() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleCLASS = null;


        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9140:2: (iv_ruleCLASS= ruleCLASS EOF )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9141:2: iv_ruleCLASS= ruleCLASS EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getCLASSRule(), currentNode); 
            }
            pushFollow(FOLLOW_ruleCLASS_in_entryRuleCLASS18492);
            iv_ruleCLASS=ruleCLASS();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruleCLASS.getText(); 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleCLASS18503); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuleCLASS


    // $ANTLR start ruleCLASS
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9148:1: ruleCLASS returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (kw= 'CLASS' | kw= 'Class' | kw= 'class' ) ;
    public final AntlrDatatypeRuleToken ruleCLASS() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;

         setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9153:6: ( (kw= 'CLASS' | kw= 'Class' | kw= 'class' ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9154:1: (kw= 'CLASS' | kw= 'Class' | kw= 'class' )
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9154:1: (kw= 'CLASS' | kw= 'Class' | kw= 'class' )
            int alt150=3;
            switch ( input.LA(1) ) {
            case 122:
                {
                alt150=1;
                }
                break;
            case 123:
                {
                alt150=2;
                }
                break;
            case 124:
                {
                alt150=3;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("9154:1: (kw= 'CLASS' | kw= 'Class' | kw= 'class' )", 150, 0, input);

                throw nvae;
            }

            switch (alt150) {
                case 1 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9155:2: kw= 'CLASS'
                    {
                    kw=(Token)input.LT(1);
                    match(input,122,FOLLOW_122_in_ruleCLASS18541); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getCLASSAccess().getCLASSKeyword_0(), null); 
                          
                    }

                    }
                    break;
                case 2 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9162:2: kw= 'Class'
                    {
                    kw=(Token)input.LT(1);
                    match(input,123,FOLLOW_123_in_ruleCLASS18560); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getCLASSAccess().getClassKeyword_1(), null); 
                          
                    }

                    }
                    break;
                case 3 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9169:2: kw= 'class'
                    {
                    kw=(Token)input.LT(1);
                    match(input,124,FOLLOW_124_in_ruleCLASS18579); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getCLASSAccess().getClassKeyword_2(), null); 
                          
                    }

                    }
                    break;

            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
              	    lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruleCLASS


    // $ANTLR start entryRuleIN_CLASS
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9182:1: entryRuleIN_CLASS returns [String current=null] : iv_ruleIN_CLASS= ruleIN_CLASS EOF ;
    public final String entryRuleIN_CLASS() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleIN_CLASS = null;


        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9183:2: (iv_ruleIN_CLASS= ruleIN_CLASS EOF )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9184:2: iv_ruleIN_CLASS= ruleIN_CLASS EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getIN_CLASSRule(), currentNode); 
            }
            pushFollow(FOLLOW_ruleIN_CLASS_in_entryRuleIN_CLASS18620);
            iv_ruleIN_CLASS=ruleIN_CLASS();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruleIN_CLASS.getText(); 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleIN_CLASS18631); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuleIN_CLASS


    // $ANTLR start ruleIN_CLASS
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9191:1: ruleIN_CLASS returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (this_IN_0= ruleIN this_CLASS_1= ruleCLASS ) ;
    public final AntlrDatatypeRuleToken ruleIN_CLASS() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        AntlrDatatypeRuleToken this_IN_0 = null;

        AntlrDatatypeRuleToken this_CLASS_1 = null;


         setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9196:6: ( (this_IN_0= ruleIN this_CLASS_1= ruleCLASS ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9197:1: (this_IN_0= ruleIN this_CLASS_1= ruleCLASS )
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9197:1: (this_IN_0= ruleIN this_CLASS_1= ruleCLASS )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9198:5: this_IN_0= ruleIN this_CLASS_1= ruleCLASS
            {
            if ( backtracking==0 ) {
               
                      currentNode=createCompositeNode(grammarAccess.getIN_CLASSAccess().getINParserRuleCall_0(), currentNode); 
                  
            }
            pushFollow(FOLLOW_ruleIN_in_ruleIN_CLASS18678);
            this_IN_0=ruleIN();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {

              		current.merge(this_IN_0);
                  
            }
            if ( backtracking==0 ) {
               
                      currentNode = currentNode.getParent();
                  
            }
            if ( backtracking==0 ) {
               
                      currentNode=createCompositeNode(grammarAccess.getIN_CLASSAccess().getCLASSParserRuleCall_1(), currentNode); 
                  
            }
            pushFollow(FOLLOW_ruleCLASS_in_ruleIN_CLASS18705);
            this_CLASS_1=ruleCLASS();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {

              		current.merge(this_CLASS_1);
                  
            }
            if ( backtracking==0 ) {
               
                      currentNode = currentNode.getParent();
                  
            }

            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
              	    lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruleIN_CLASS


    // $ANTLR start entryRuleELEMENTS
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9227:1: entryRuleELEMENTS returns [String current=null] : iv_ruleELEMENTS= ruleELEMENTS EOF ;
    public final String entryRuleELEMENTS() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleELEMENTS = null;


        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9228:2: (iv_ruleELEMENTS= ruleELEMENTS EOF )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9229:2: iv_ruleELEMENTS= ruleELEMENTS EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getELEMENTSRule(), currentNode); 
            }
            pushFollow(FOLLOW_ruleELEMENTS_in_entryRuleELEMENTS18751);
            iv_ruleELEMENTS=ruleELEMENTS();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruleELEMENTS.getText(); 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleELEMENTS18762); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuleELEMENTS


    // $ANTLR start ruleELEMENTS
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9236:1: ruleELEMENTS returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (kw= 'ELEMENTS' | kw= 'Elements' | kw= 'elements' ) ;
    public final AntlrDatatypeRuleToken ruleELEMENTS() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;

         setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9241:6: ( (kw= 'ELEMENTS' | kw= 'Elements' | kw= 'elements' ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9242:1: (kw= 'ELEMENTS' | kw= 'Elements' | kw= 'elements' )
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9242:1: (kw= 'ELEMENTS' | kw= 'Elements' | kw= 'elements' )
            int alt151=3;
            switch ( input.LA(1) ) {
            case 125:
                {
                alt151=1;
                }
                break;
            case 126:
                {
                alt151=2;
                }
                break;
            case 127:
                {
                alt151=3;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("9242:1: (kw= 'ELEMENTS' | kw= 'Elements' | kw= 'elements' )", 151, 0, input);

                throw nvae;
            }

            switch (alt151) {
                case 1 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9243:2: kw= 'ELEMENTS'
                    {
                    kw=(Token)input.LT(1);
                    match(input,125,FOLLOW_125_in_ruleELEMENTS18800); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getELEMENTSAccess().getELEMENTSKeyword_0(), null); 
                          
                    }

                    }
                    break;
                case 2 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9250:2: kw= 'Elements'
                    {
                    kw=(Token)input.LT(1);
                    match(input,126,FOLLOW_126_in_ruleELEMENTS18819); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getELEMENTSAccess().getElementsKeyword_1(), null); 
                          
                    }

                    }
                    break;
                case 3 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9257:2: kw= 'elements'
                    {
                    kw=(Token)input.LT(1);
                    match(input,127,FOLLOW_127_in_ruleELEMENTS18838); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getELEMENTSAccess().getElementsKeyword_2(), null); 
                          
                    }

                    }
                    break;

            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
              	    lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruleELEMENTS


    // $ANTLR start entryRuleIN_ELEMENTS
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9270:1: entryRuleIN_ELEMENTS returns [String current=null] : iv_ruleIN_ELEMENTS= ruleIN_ELEMENTS EOF ;
    public final String entryRuleIN_ELEMENTS() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleIN_ELEMENTS = null;


        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9271:2: (iv_ruleIN_ELEMENTS= ruleIN_ELEMENTS EOF )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9272:2: iv_ruleIN_ELEMENTS= ruleIN_ELEMENTS EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getIN_ELEMENTSRule(), currentNode); 
            }
            pushFollow(FOLLOW_ruleIN_ELEMENTS_in_entryRuleIN_ELEMENTS18879);
            iv_ruleIN_ELEMENTS=ruleIN_ELEMENTS();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruleIN_ELEMENTS.getText(); 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleIN_ELEMENTS18890); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuleIN_ELEMENTS


    // $ANTLR start ruleIN_ELEMENTS
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9279:1: ruleIN_ELEMENTS returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (this_IN_0= ruleIN this_ELEMENTS_1= ruleELEMENTS ) ;
    public final AntlrDatatypeRuleToken ruleIN_ELEMENTS() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        AntlrDatatypeRuleToken this_IN_0 = null;

        AntlrDatatypeRuleToken this_ELEMENTS_1 = null;


         setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9284:6: ( (this_IN_0= ruleIN this_ELEMENTS_1= ruleELEMENTS ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9285:1: (this_IN_0= ruleIN this_ELEMENTS_1= ruleELEMENTS )
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9285:1: (this_IN_0= ruleIN this_ELEMENTS_1= ruleELEMENTS )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9286:5: this_IN_0= ruleIN this_ELEMENTS_1= ruleELEMENTS
            {
            if ( backtracking==0 ) {
               
                      currentNode=createCompositeNode(grammarAccess.getIN_ELEMENTSAccess().getINParserRuleCall_0(), currentNode); 
                  
            }
            pushFollow(FOLLOW_ruleIN_in_ruleIN_ELEMENTS18937);
            this_IN_0=ruleIN();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {

              		current.merge(this_IN_0);
                  
            }
            if ( backtracking==0 ) {
               
                      currentNode = currentNode.getParent();
                  
            }
            if ( backtracking==0 ) {
               
                      currentNode=createCompositeNode(grammarAccess.getIN_ELEMENTSAccess().getELEMENTSParserRuleCall_1(), currentNode); 
                  
            }
            pushFollow(FOLLOW_ruleELEMENTS_in_ruleIN_ELEMENTS18964);
            this_ELEMENTS_1=ruleELEMENTS();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {

              		current.merge(this_ELEMENTS_1);
                  
            }
            if ( backtracking==0 ) {
               
                      currentNode = currentNode.getParent();
                  
            }

            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
              	    lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruleIN_ELEMENTS


    // $ANTLR start entryRuleAS
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9315:1: entryRuleAS returns [String current=null] : iv_ruleAS= ruleAS EOF ;
    public final String entryRuleAS() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleAS = null;


        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9316:2: (iv_ruleAS= ruleAS EOF )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9317:2: iv_ruleAS= ruleAS EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getASRule(), currentNode); 
            }
            pushFollow(FOLLOW_ruleAS_in_entryRuleAS19010);
            iv_ruleAS=ruleAS();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruleAS.getText(); 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleAS19021); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuleAS


    // $ANTLR start ruleAS
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9324:1: ruleAS returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (kw= 'AS' | kw= 'As' | kw= 'as' ) ;
    public final AntlrDatatypeRuleToken ruleAS() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;

         setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9329:6: ( (kw= 'AS' | kw= 'As' | kw= 'as' ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9330:1: (kw= 'AS' | kw= 'As' | kw= 'as' )
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9330:1: (kw= 'AS' | kw= 'As' | kw= 'as' )
            int alt152=3;
            switch ( input.LA(1) ) {
            case 128:
                {
                alt152=1;
                }
                break;
            case 129:
                {
                alt152=2;
                }
                break;
            case 130:
                {
                alt152=3;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("9330:1: (kw= 'AS' | kw= 'As' | kw= 'as' )", 152, 0, input);

                throw nvae;
            }

            switch (alt152) {
                case 1 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9331:2: kw= 'AS'
                    {
                    kw=(Token)input.LT(1);
                    match(input,128,FOLLOW_128_in_ruleAS19059); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getASAccess().getASKeyword_0(), null); 
                          
                    }

                    }
                    break;
                case 2 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9338:2: kw= 'As'
                    {
                    kw=(Token)input.LT(1);
                    match(input,129,FOLLOW_129_in_ruleAS19078); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getASAccess().getAsKeyword_1(), null); 
                          
                    }

                    }
                    break;
                case 3 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9345:2: kw= 'as'
                    {
                    kw=(Token)input.LT(1);
                    match(input,130,FOLLOW_130_in_ruleAS19097); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getASAccess().getAsKeyword_2(), null); 
                          
                    }

                    }
                    break;

            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
              	    lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruleAS


    // $ANTLR start entryRulePROPERTIES
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9358:1: entryRulePROPERTIES returns [String current=null] : iv_rulePROPERTIES= rulePROPERTIES EOF ;
    public final String entryRulePROPERTIES() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_rulePROPERTIES = null;


        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9359:2: (iv_rulePROPERTIES= rulePROPERTIES EOF )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9360:2: iv_rulePROPERTIES= rulePROPERTIES EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getPROPERTIESRule(), currentNode); 
            }
            pushFollow(FOLLOW_rulePROPERTIES_in_entryRulePROPERTIES19138);
            iv_rulePROPERTIES=rulePROPERTIES();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_rulePROPERTIES.getText(); 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRulePROPERTIES19149); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRulePROPERTIES


    // $ANTLR start rulePROPERTIES
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9367:1: rulePROPERTIES returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (kw= 'PROPERTIES' | kw= 'Properties' | kw= 'properties' ) ;
    public final AntlrDatatypeRuleToken rulePROPERTIES() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;

         setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9372:6: ( (kw= 'PROPERTIES' | kw= 'Properties' | kw= 'properties' ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9373:1: (kw= 'PROPERTIES' | kw= 'Properties' | kw= 'properties' )
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9373:1: (kw= 'PROPERTIES' | kw= 'Properties' | kw= 'properties' )
            int alt153=3;
            switch ( input.LA(1) ) {
            case 131:
                {
                alt153=1;
                }
                break;
            case 132:
                {
                alt153=2;
                }
                break;
            case 133:
                {
                alt153=3;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("9373:1: (kw= 'PROPERTIES' | kw= 'Properties' | kw= 'properties' )", 153, 0, input);

                throw nvae;
            }

            switch (alt153) {
                case 1 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9374:2: kw= 'PROPERTIES'
                    {
                    kw=(Token)input.LT(1);
                    match(input,131,FOLLOW_131_in_rulePROPERTIES19187); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getPROPERTIESAccess().getPROPERTIESKeyword_0(), null); 
                          
                    }

                    }
                    break;
                case 2 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9381:2: kw= 'Properties'
                    {
                    kw=(Token)input.LT(1);
                    match(input,132,FOLLOW_132_in_rulePROPERTIES19206); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getPROPERTIESAccess().getPropertiesKeyword_1(), null); 
                          
                    }

                    }
                    break;
                case 3 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9388:2: kw= 'properties'
                    {
                    kw=(Token)input.LT(1);
                    match(input,133,FOLLOW_133_in_rulePROPERTIES19225); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getPROPERTIESAccess().getPropertiesKeyword_2(), null); 
                          
                    }

                    }
                    break;

            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
              	    lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end rulePROPERTIES


    // $ANTLR start entryRuleGROUP_BY
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9401:1: entryRuleGROUP_BY returns [String current=null] : iv_ruleGROUP_BY= ruleGROUP_BY EOF ;
    public final String entryRuleGROUP_BY() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleGROUP_BY = null;


        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9402:2: (iv_ruleGROUP_BY= ruleGROUP_BY EOF )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9403:2: iv_ruleGROUP_BY= ruleGROUP_BY EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getGROUP_BYRule(), currentNode); 
            }
            pushFollow(FOLLOW_ruleGROUP_BY_in_entryRuleGROUP_BY19266);
            iv_ruleGROUP_BY=ruleGROUP_BY();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruleGROUP_BY.getText(); 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleGROUP_BY19277); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuleGROUP_BY


    // $ANTLR start ruleGROUP_BY
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9410:1: ruleGROUP_BY returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : ( (kw= 'GROUP' | kw= 'Group' | kw= 'group' ) this_BY_3= ruleBY ) ;
    public final AntlrDatatypeRuleToken ruleGROUP_BY() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;
        AntlrDatatypeRuleToken this_BY_3 = null;


         setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9415:6: ( ( (kw= 'GROUP' | kw= 'Group' | kw= 'group' ) this_BY_3= ruleBY ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9416:1: ( (kw= 'GROUP' | kw= 'Group' | kw= 'group' ) this_BY_3= ruleBY )
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9416:1: ( (kw= 'GROUP' | kw= 'Group' | kw= 'group' ) this_BY_3= ruleBY )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9416:2: (kw= 'GROUP' | kw= 'Group' | kw= 'group' ) this_BY_3= ruleBY
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9416:2: (kw= 'GROUP' | kw= 'Group' | kw= 'group' )
            int alt154=3;
            switch ( input.LA(1) ) {
            case 134:
                {
                alt154=1;
                }
                break;
            case 135:
                {
                alt154=2;
                }
                break;
            case 136:
                {
                alt154=3;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("9416:2: (kw= 'GROUP' | kw= 'Group' | kw= 'group' )", 154, 0, input);

                throw nvae;
            }

            switch (alt154) {
                case 1 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9417:2: kw= 'GROUP'
                    {
                    kw=(Token)input.LT(1);
                    match(input,134,FOLLOW_134_in_ruleGROUP_BY19316); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getGROUP_BYAccess().getGROUPKeyword_0_0(), null); 
                          
                    }

                    }
                    break;
                case 2 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9424:2: kw= 'Group'
                    {
                    kw=(Token)input.LT(1);
                    match(input,135,FOLLOW_135_in_ruleGROUP_BY19335); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getGROUP_BYAccess().getGroupKeyword_0_1(), null); 
                          
                    }

                    }
                    break;
                case 3 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9431:2: kw= 'group'
                    {
                    kw=(Token)input.LT(1);
                    match(input,136,FOLLOW_136_in_ruleGROUP_BY19354); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getGROUP_BYAccess().getGroupKeyword_0_2(), null); 
                          
                    }

                    }
                    break;

            }

            if ( backtracking==0 ) {
               
                      currentNode=createCompositeNode(grammarAccess.getGROUP_BYAccess().getBYParserRuleCall_1(), currentNode); 
                  
            }
            pushFollow(FOLLOW_ruleBY_in_ruleGROUP_BY19377);
            this_BY_3=ruleBY();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {

              		current.merge(this_BY_3);
                  
            }
            if ( backtracking==0 ) {
               
                      currentNode = currentNode.getParent();
                  
            }

            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
              	    lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruleGROUP_BY


    // $ANTLR start entryRuleORDER_BY
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9455:1: entryRuleORDER_BY returns [String current=null] : iv_ruleORDER_BY= ruleORDER_BY EOF ;
    public final String entryRuleORDER_BY() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleORDER_BY = null;


        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9456:2: (iv_ruleORDER_BY= ruleORDER_BY EOF )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9457:2: iv_ruleORDER_BY= ruleORDER_BY EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getORDER_BYRule(), currentNode); 
            }
            pushFollow(FOLLOW_ruleORDER_BY_in_entryRuleORDER_BY19423);
            iv_ruleORDER_BY=ruleORDER_BY();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruleORDER_BY.getText(); 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleORDER_BY19434); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuleORDER_BY


    // $ANTLR start ruleORDER_BY
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9464:1: ruleORDER_BY returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : ( (kw= 'ORDER' | kw= 'Order' | kw= 'order' ) this_BY_3= ruleBY ) ;
    public final AntlrDatatypeRuleToken ruleORDER_BY() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;
        AntlrDatatypeRuleToken this_BY_3 = null;


         setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9469:6: ( ( (kw= 'ORDER' | kw= 'Order' | kw= 'order' ) this_BY_3= ruleBY ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9470:1: ( (kw= 'ORDER' | kw= 'Order' | kw= 'order' ) this_BY_3= ruleBY )
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9470:1: ( (kw= 'ORDER' | kw= 'Order' | kw= 'order' ) this_BY_3= ruleBY )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9470:2: (kw= 'ORDER' | kw= 'Order' | kw= 'order' ) this_BY_3= ruleBY
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9470:2: (kw= 'ORDER' | kw= 'Order' | kw= 'order' )
            int alt155=3;
            switch ( input.LA(1) ) {
            case 137:
                {
                alt155=1;
                }
                break;
            case 138:
                {
                alt155=2;
                }
                break;
            case 139:
                {
                alt155=3;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("9470:2: (kw= 'ORDER' | kw= 'Order' | kw= 'order' )", 155, 0, input);

                throw nvae;
            }

            switch (alt155) {
                case 1 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9471:2: kw= 'ORDER'
                    {
                    kw=(Token)input.LT(1);
                    match(input,137,FOLLOW_137_in_ruleORDER_BY19473); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getORDER_BYAccess().getORDERKeyword_0_0(), null); 
                          
                    }

                    }
                    break;
                case 2 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9478:2: kw= 'Order'
                    {
                    kw=(Token)input.LT(1);
                    match(input,138,FOLLOW_138_in_ruleORDER_BY19492); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getORDER_BYAccess().getOrderKeyword_0_1(), null); 
                          
                    }

                    }
                    break;
                case 3 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9485:2: kw= 'order'
                    {
                    kw=(Token)input.LT(1);
                    match(input,139,FOLLOW_139_in_ruleORDER_BY19511); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getORDER_BYAccess().getOrderKeyword_0_2(), null); 
                          
                    }

                    }
                    break;

            }

            if ( backtracking==0 ) {
               
                      currentNode=createCompositeNode(grammarAccess.getORDER_BYAccess().getBYParserRuleCall_1(), currentNode); 
                  
            }
            pushFollow(FOLLOW_ruleBY_in_ruleORDER_BY19534);
            this_BY_3=ruleBY();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {

              		current.merge(this_BY_3);
                  
            }
            if ( backtracking==0 ) {
               
                      currentNode = currentNode.getParent();
                  
            }

            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
              	    lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruleORDER_BY


    // $ANTLR start entryRuleBY
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9509:1: entryRuleBY returns [String current=null] : iv_ruleBY= ruleBY EOF ;
    public final String entryRuleBY() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleBY = null;


        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9510:2: (iv_ruleBY= ruleBY EOF )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9511:2: iv_ruleBY= ruleBY EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getBYRule(), currentNode); 
            }
            pushFollow(FOLLOW_ruleBY_in_entryRuleBY19580);
            iv_ruleBY=ruleBY();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruleBY.getText(); 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleBY19591); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuleBY


    // $ANTLR start ruleBY
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9518:1: ruleBY returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (kw= 'BY' | kw= 'By' | kw= 'by' ) ;
    public final AntlrDatatypeRuleToken ruleBY() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;

         setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9523:6: ( (kw= 'BY' | kw= 'By' | kw= 'by' ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9524:1: (kw= 'BY' | kw= 'By' | kw= 'by' )
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9524:1: (kw= 'BY' | kw= 'By' | kw= 'by' )
            int alt156=3;
            switch ( input.LA(1) ) {
            case 140:
                {
                alt156=1;
                }
                break;
            case 141:
                {
                alt156=2;
                }
                break;
            case 142:
                {
                alt156=3;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("9524:1: (kw= 'BY' | kw= 'By' | kw= 'by' )", 156, 0, input);

                throw nvae;
            }

            switch (alt156) {
                case 1 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9525:2: kw= 'BY'
                    {
                    kw=(Token)input.LT(1);
                    match(input,140,FOLLOW_140_in_ruleBY19629); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getBYAccess().getBYKeyword_0(), null); 
                          
                    }

                    }
                    break;
                case 2 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9532:2: kw= 'By'
                    {
                    kw=(Token)input.LT(1);
                    match(input,141,FOLLOW_141_in_ruleBY19648); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getBYAccess().getByKeyword_1(), null); 
                          
                    }

                    }
                    break;
                case 3 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9539:2: kw= 'by'
                    {
                    kw=(Token)input.LT(1);
                    match(input,142,FOLLOW_142_in_ruleBY19667); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getBYAccess().getByKeyword_2(), null); 
                          
                    }

                    }
                    break;

            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
              	    lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruleBY


    // $ANTLR start entryRuleASC
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9552:1: entryRuleASC returns [String current=null] : iv_ruleASC= ruleASC EOF ;
    public final String entryRuleASC() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleASC = null;


        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9553:2: (iv_ruleASC= ruleASC EOF )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9554:2: iv_ruleASC= ruleASC EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getASCRule(), currentNode); 
            }
            pushFollow(FOLLOW_ruleASC_in_entryRuleASC19708);
            iv_ruleASC=ruleASC();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruleASC.getText(); 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleASC19719); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuleASC


    // $ANTLR start ruleASC
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9561:1: ruleASC returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (kw= 'ASC' | kw= 'Asc' | kw= 'asc' | kw= 'ASCENDING' | kw= 'Ascending' | kw= 'ascending' ) ;
    public final AntlrDatatypeRuleToken ruleASC() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;

         setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9566:6: ( (kw= 'ASC' | kw= 'Asc' | kw= 'asc' | kw= 'ASCENDING' | kw= 'Ascending' | kw= 'ascending' ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9567:1: (kw= 'ASC' | kw= 'Asc' | kw= 'asc' | kw= 'ASCENDING' | kw= 'Ascending' | kw= 'ascending' )
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9567:1: (kw= 'ASC' | kw= 'Asc' | kw= 'asc' | kw= 'ASCENDING' | kw= 'Ascending' | kw= 'ascending' )
            int alt157=6;
            switch ( input.LA(1) ) {
            case 143:
                {
                alt157=1;
                }
                break;
            case 144:
                {
                alt157=2;
                }
                break;
            case 145:
                {
                alt157=3;
                }
                break;
            case 146:
                {
                alt157=4;
                }
                break;
            case 147:
                {
                alt157=5;
                }
                break;
            case 148:
                {
                alt157=6;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("9567:1: (kw= 'ASC' | kw= 'Asc' | kw= 'asc' | kw= 'ASCENDING' | kw= 'Ascending' | kw= 'ascending' )", 157, 0, input);

                throw nvae;
            }

            switch (alt157) {
                case 1 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9568:2: kw= 'ASC'
                    {
                    kw=(Token)input.LT(1);
                    match(input,143,FOLLOW_143_in_ruleASC19757); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getASCAccess().getASCKeyword_0(), null); 
                          
                    }

                    }
                    break;
                case 2 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9575:2: kw= 'Asc'
                    {
                    kw=(Token)input.LT(1);
                    match(input,144,FOLLOW_144_in_ruleASC19776); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getASCAccess().getAscKeyword_1(), null); 
                          
                    }

                    }
                    break;
                case 3 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9582:2: kw= 'asc'
                    {
                    kw=(Token)input.LT(1);
                    match(input,145,FOLLOW_145_in_ruleASC19795); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getASCAccess().getAscKeyword_2(), null); 
                          
                    }

                    }
                    break;
                case 4 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9589:2: kw= 'ASCENDING'
                    {
                    kw=(Token)input.LT(1);
                    match(input,146,FOLLOW_146_in_ruleASC19814); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getASCAccess().getASCENDINGKeyword_3(), null); 
                          
                    }

                    }
                    break;
                case 5 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9596:2: kw= 'Ascending'
                    {
                    kw=(Token)input.LT(1);
                    match(input,147,FOLLOW_147_in_ruleASC19833); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getASCAccess().getAscendingKeyword_4(), null); 
                          
                    }

                    }
                    break;
                case 6 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9603:2: kw= 'ascending'
                    {
                    kw=(Token)input.LT(1);
                    match(input,148,FOLLOW_148_in_ruleASC19852); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getASCAccess().getAscendingKeyword_5(), null); 
                          
                    }

                    }
                    break;

            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
              	    lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruleASC


    // $ANTLR start entryRuleDESC
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9616:1: entryRuleDESC returns [String current=null] : iv_ruleDESC= ruleDESC EOF ;
    public final String entryRuleDESC() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleDESC = null;


        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9617:2: (iv_ruleDESC= ruleDESC EOF )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9618:2: iv_ruleDESC= ruleDESC EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getDESCRule(), currentNode); 
            }
            pushFollow(FOLLOW_ruleDESC_in_entryRuleDESC19893);
            iv_ruleDESC=ruleDESC();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruleDESC.getText(); 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleDESC19904); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuleDESC


    // $ANTLR start ruleDESC
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9625:1: ruleDESC returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (kw= 'DESC' | kw= 'Desc' | kw= 'desc' | kw= 'DESCENDING' | kw= 'Descending' | kw= 'descending' ) ;
    public final AntlrDatatypeRuleToken ruleDESC() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;

         setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9630:6: ( (kw= 'DESC' | kw= 'Desc' | kw= 'desc' | kw= 'DESCENDING' | kw= 'Descending' | kw= 'descending' ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9631:1: (kw= 'DESC' | kw= 'Desc' | kw= 'desc' | kw= 'DESCENDING' | kw= 'Descending' | kw= 'descending' )
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9631:1: (kw= 'DESC' | kw= 'Desc' | kw= 'desc' | kw= 'DESCENDING' | kw= 'Descending' | kw= 'descending' )
            int alt158=6;
            switch ( input.LA(1) ) {
            case 149:
                {
                alt158=1;
                }
                break;
            case 150:
                {
                alt158=2;
                }
                break;
            case 151:
                {
                alt158=3;
                }
                break;
            case 152:
                {
                alt158=4;
                }
                break;
            case 153:
                {
                alt158=5;
                }
                break;
            case 154:
                {
                alt158=6;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("9631:1: (kw= 'DESC' | kw= 'Desc' | kw= 'desc' | kw= 'DESCENDING' | kw= 'Descending' | kw= 'descending' )", 158, 0, input);

                throw nvae;
            }

            switch (alt158) {
                case 1 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9632:2: kw= 'DESC'
                    {
                    kw=(Token)input.LT(1);
                    match(input,149,FOLLOW_149_in_ruleDESC19942); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getDESCAccess().getDESCKeyword_0(), null); 
                          
                    }

                    }
                    break;
                case 2 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9639:2: kw= 'Desc'
                    {
                    kw=(Token)input.LT(1);
                    match(input,150,FOLLOW_150_in_ruleDESC19961); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getDESCAccess().getDescKeyword_1(), null); 
                          
                    }

                    }
                    break;
                case 3 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9646:2: kw= 'desc'
                    {
                    kw=(Token)input.LT(1);
                    match(input,151,FOLLOW_151_in_ruleDESC19980); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getDESCAccess().getDescKeyword_2(), null); 
                          
                    }

                    }
                    break;
                case 4 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9653:2: kw= 'DESCENDING'
                    {
                    kw=(Token)input.LT(1);
                    match(input,152,FOLLOW_152_in_ruleDESC19999); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getDESCAccess().getDESCENDINGKeyword_3(), null); 
                          
                    }

                    }
                    break;
                case 5 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9660:2: kw= 'Descending'
                    {
                    kw=(Token)input.LT(1);
                    match(input,153,FOLLOW_153_in_ruleDESC20018); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getDESCAccess().getDescendingKeyword_4(), null); 
                          
                    }

                    }
                    break;
                case 6 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9667:2: kw= 'descending'
                    {
                    kw=(Token)input.LT(1);
                    match(input,154,FOLLOW_154_in_ruleDESC20037); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getDESCAccess().getDescendingKeyword_5(), null); 
                          
                    }

                    }
                    break;

            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
              	    lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruleDESC


    // $ANTLR start entryRuleHAVING
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9680:1: entryRuleHAVING returns [String current=null] : iv_ruleHAVING= ruleHAVING EOF ;
    public final String entryRuleHAVING() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleHAVING = null;


        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9681:2: (iv_ruleHAVING= ruleHAVING EOF )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9682:2: iv_ruleHAVING= ruleHAVING EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getHAVINGRule(), currentNode); 
            }
            pushFollow(FOLLOW_ruleHAVING_in_entryRuleHAVING20078);
            iv_ruleHAVING=ruleHAVING();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruleHAVING.getText(); 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleHAVING20089); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuleHAVING


    // $ANTLR start ruleHAVING
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9689:1: ruleHAVING returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (kw= 'HAVING' | kw= 'Having' | kw= 'having' ) ;
    public final AntlrDatatypeRuleToken ruleHAVING() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;

         setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9694:6: ( (kw= 'HAVING' | kw= 'Having' | kw= 'having' ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9695:1: (kw= 'HAVING' | kw= 'Having' | kw= 'having' )
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9695:1: (kw= 'HAVING' | kw= 'Having' | kw= 'having' )
            int alt159=3;
            switch ( input.LA(1) ) {
            case 155:
                {
                alt159=1;
                }
                break;
            case 156:
                {
                alt159=2;
                }
                break;
            case 157:
                {
                alt159=3;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("9695:1: (kw= 'HAVING' | kw= 'Having' | kw= 'having' )", 159, 0, input);

                throw nvae;
            }

            switch (alt159) {
                case 1 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9696:2: kw= 'HAVING'
                    {
                    kw=(Token)input.LT(1);
                    match(input,155,FOLLOW_155_in_ruleHAVING20127); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getHAVINGAccess().getHAVINGKeyword_0(), null); 
                          
                    }

                    }
                    break;
                case 2 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9703:2: kw= 'Having'
                    {
                    kw=(Token)input.LT(1);
                    match(input,156,FOLLOW_156_in_ruleHAVING20146); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getHAVINGAccess().getHavingKeyword_1(), null); 
                          
                    }

                    }
                    break;
                case 3 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9710:2: kw= 'having'
                    {
                    kw=(Token)input.LT(1);
                    match(input,157,FOLLOW_157_in_ruleHAVING20165); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getHAVINGAccess().getHavingKeyword_2(), null); 
                          
                    }

                    }
                    break;

            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
              	    lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruleHAVING


    // $ANTLR start entryRuleWHERE
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9723:1: entryRuleWHERE returns [String current=null] : iv_ruleWHERE= ruleWHERE EOF ;
    public final String entryRuleWHERE() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleWHERE = null;


        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9724:2: (iv_ruleWHERE= ruleWHERE EOF )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9725:2: iv_ruleWHERE= ruleWHERE EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getWHERERule(), currentNode); 
            }
            pushFollow(FOLLOW_ruleWHERE_in_entryRuleWHERE20206);
            iv_ruleWHERE=ruleWHERE();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruleWHERE.getText(); 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleWHERE20217); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuleWHERE


    // $ANTLR start ruleWHERE
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9732:1: ruleWHERE returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (kw= 'WHERE' | kw= 'Where' | kw= 'where' ) ;
    public final AntlrDatatypeRuleToken ruleWHERE() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;

         setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9737:6: ( (kw= 'WHERE' | kw= 'Where' | kw= 'where' ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9738:1: (kw= 'WHERE' | kw= 'Where' | kw= 'where' )
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9738:1: (kw= 'WHERE' | kw= 'Where' | kw= 'where' )
            int alt160=3;
            switch ( input.LA(1) ) {
            case 158:
                {
                alt160=1;
                }
                break;
            case 159:
                {
                alt160=2;
                }
                break;
            case 160:
                {
                alt160=3;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("9738:1: (kw= 'WHERE' | kw= 'Where' | kw= 'where' )", 160, 0, input);

                throw nvae;
            }

            switch (alt160) {
                case 1 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9739:2: kw= 'WHERE'
                    {
                    kw=(Token)input.LT(1);
                    match(input,158,FOLLOW_158_in_ruleWHERE20255); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getWHEREAccess().getWHEREKeyword_0(), null); 
                          
                    }

                    }
                    break;
                case 2 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9746:2: kw= 'Where'
                    {
                    kw=(Token)input.LT(1);
                    match(input,159,FOLLOW_159_in_ruleWHERE20274); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getWHEREAccess().getWhereKeyword_1(), null); 
                          
                    }

                    }
                    break;
                case 3 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9753:2: kw= 'where'
                    {
                    kw=(Token)input.LT(1);
                    match(input,160,FOLLOW_160_in_ruleWHERE20293); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getWHEREAccess().getWhereKeyword_2(), null); 
                          
                    }

                    }
                    break;

            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
              	    lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruleWHERE


    // $ANTLR start entryRuleOR
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9766:1: entryRuleOR returns [String current=null] : iv_ruleOR= ruleOR EOF ;
    public final String entryRuleOR() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleOR = null;


        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9767:2: (iv_ruleOR= ruleOR EOF )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9768:2: iv_ruleOR= ruleOR EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getORRule(), currentNode); 
            }
            pushFollow(FOLLOW_ruleOR_in_entryRuleOR20334);
            iv_ruleOR=ruleOR();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruleOR.getText(); 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleOR20345); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuleOR


    // $ANTLR start ruleOR
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9775:1: ruleOR returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (kw= 'OR' | kw= 'Or' | kw= 'or' ) ;
    public final AntlrDatatypeRuleToken ruleOR() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;

         setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9780:6: ( (kw= 'OR' | kw= 'Or' | kw= 'or' ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9781:1: (kw= 'OR' | kw= 'Or' | kw= 'or' )
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9781:1: (kw= 'OR' | kw= 'Or' | kw= 'or' )
            int alt161=3;
            switch ( input.LA(1) ) {
            case 161:
                {
                alt161=1;
                }
                break;
            case 162:
                {
                alt161=2;
                }
                break;
            case 163:
                {
                alt161=3;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("9781:1: (kw= 'OR' | kw= 'Or' | kw= 'or' )", 161, 0, input);

                throw nvae;
            }

            switch (alt161) {
                case 1 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9782:2: kw= 'OR'
                    {
                    kw=(Token)input.LT(1);
                    match(input,161,FOLLOW_161_in_ruleOR20383); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getORAccess().getORKeyword_0(), null); 
                          
                    }

                    }
                    break;
                case 2 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9789:2: kw= 'Or'
                    {
                    kw=(Token)input.LT(1);
                    match(input,162,FOLLOW_162_in_ruleOR20402); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getORAccess().getOrKeyword_1(), null); 
                          
                    }

                    }
                    break;
                case 3 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9796:2: kw= 'or'
                    {
                    kw=(Token)input.LT(1);
                    match(input,163,FOLLOW_163_in_ruleOR20421); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getORAccess().getOrKeyword_2(), null); 
                          
                    }

                    }
                    break;

            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
              	    lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruleOR


    // $ANTLR start entryRuleAND
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9809:1: entryRuleAND returns [String current=null] : iv_ruleAND= ruleAND EOF ;
    public final String entryRuleAND() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleAND = null;


        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9810:2: (iv_ruleAND= ruleAND EOF )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9811:2: iv_ruleAND= ruleAND EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getANDRule(), currentNode); 
            }
            pushFollow(FOLLOW_ruleAND_in_entryRuleAND20462);
            iv_ruleAND=ruleAND();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruleAND.getText(); 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleAND20473); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuleAND


    // $ANTLR start ruleAND
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9818:1: ruleAND returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (kw= 'AND' | kw= 'And' | kw= 'and' ) ;
    public final AntlrDatatypeRuleToken ruleAND() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;

         setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9823:6: ( (kw= 'AND' | kw= 'And' | kw= 'and' ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9824:1: (kw= 'AND' | kw= 'And' | kw= 'and' )
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9824:1: (kw= 'AND' | kw= 'And' | kw= 'and' )
            int alt162=3;
            switch ( input.LA(1) ) {
            case 164:
                {
                alt162=1;
                }
                break;
            case 165:
                {
                alt162=2;
                }
                break;
            case 166:
                {
                alt162=3;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("9824:1: (kw= 'AND' | kw= 'And' | kw= 'and' )", 162, 0, input);

                throw nvae;
            }

            switch (alt162) {
                case 1 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9825:2: kw= 'AND'
                    {
                    kw=(Token)input.LT(1);
                    match(input,164,FOLLOW_164_in_ruleAND20511); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getANDAccess().getANDKeyword_0(), null); 
                          
                    }

                    }
                    break;
                case 2 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9832:2: kw= 'And'
                    {
                    kw=(Token)input.LT(1);
                    match(input,165,FOLLOW_165_in_ruleAND20530); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getANDAccess().getAndKeyword_1(), null); 
                          
                    }

                    }
                    break;
                case 3 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9839:2: kw= 'and'
                    {
                    kw=(Token)input.LT(1);
                    match(input,166,FOLLOW_166_in_ruleAND20549); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getANDAccess().getAndKeyword_2(), null); 
                          
                    }

                    }
                    break;

            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
              	    lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruleAND


    // $ANTLR start entryRuleNOT
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9852:1: entryRuleNOT returns [String current=null] : iv_ruleNOT= ruleNOT EOF ;
    public final String entryRuleNOT() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleNOT = null;


        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9853:2: (iv_ruleNOT= ruleNOT EOF )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9854:2: iv_ruleNOT= ruleNOT EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getNOTRule(), currentNode); 
            }
            pushFollow(FOLLOW_ruleNOT_in_entryRuleNOT20590);
            iv_ruleNOT=ruleNOT();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruleNOT.getText(); 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleNOT20601); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuleNOT


    // $ANTLR start ruleNOT
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9861:1: ruleNOT returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (kw= 'NOT' | kw= 'Not' | kw= 'not' ) ;
    public final AntlrDatatypeRuleToken ruleNOT() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;

         setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9866:6: ( (kw= 'NOT' | kw= 'Not' | kw= 'not' ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9867:1: (kw= 'NOT' | kw= 'Not' | kw= 'not' )
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9867:1: (kw= 'NOT' | kw= 'Not' | kw= 'not' )
            int alt163=3;
            switch ( input.LA(1) ) {
            case 167:
                {
                alt163=1;
                }
                break;
            case 168:
                {
                alt163=2;
                }
                break;
            case 16:
                {
                alt163=3;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("9867:1: (kw= 'NOT' | kw= 'Not' | kw= 'not' )", 163, 0, input);

                throw nvae;
            }

            switch (alt163) {
                case 1 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9868:2: kw= 'NOT'
                    {
                    kw=(Token)input.LT(1);
                    match(input,167,FOLLOW_167_in_ruleNOT20639); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getNOTAccess().getNOTKeyword_0(), null); 
                          
                    }

                    }
                    break;
                case 2 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9875:2: kw= 'Not'
                    {
                    kw=(Token)input.LT(1);
                    match(input,168,FOLLOW_168_in_ruleNOT20658); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getNOTAccess().getNotKeyword_1(), null); 
                          
                    }

                    }
                    break;
                case 3 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9882:2: kw= 'not'
                    {
                    kw=(Token)input.LT(1);
                    match(input,16,FOLLOW_16_in_ruleNOT20677); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getNOTAccess().getNotKeyword_2(), null); 
                          
                    }

                    }
                    break;

            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
              	    lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruleNOT


    // $ANTLR start entryRuleIS
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9895:1: entryRuleIS returns [String current=null] : iv_ruleIS= ruleIS EOF ;
    public final String entryRuleIS() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleIS = null;


        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9896:2: (iv_ruleIS= ruleIS EOF )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9897:2: iv_ruleIS= ruleIS EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getISRule(), currentNode); 
            }
            pushFollow(FOLLOW_ruleIS_in_entryRuleIS20718);
            iv_ruleIS=ruleIS();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruleIS.getText(); 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleIS20729); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuleIS


    // $ANTLR start ruleIS
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9904:1: ruleIS returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (kw= 'IS' | kw= 'Is' | kw= 'is' ) ;
    public final AntlrDatatypeRuleToken ruleIS() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;

         setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9909:6: ( (kw= 'IS' | kw= 'Is' | kw= 'is' ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9910:1: (kw= 'IS' | kw= 'Is' | kw= 'is' )
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9910:1: (kw= 'IS' | kw= 'Is' | kw= 'is' )
            int alt164=3;
            switch ( input.LA(1) ) {
            case 169:
                {
                alt164=1;
                }
                break;
            case 170:
                {
                alt164=2;
                }
                break;
            case 171:
                {
                alt164=3;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("9910:1: (kw= 'IS' | kw= 'Is' | kw= 'is' )", 164, 0, input);

                throw nvae;
            }

            switch (alt164) {
                case 1 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9911:2: kw= 'IS'
                    {
                    kw=(Token)input.LT(1);
                    match(input,169,FOLLOW_169_in_ruleIS20767); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getISAccess().getISKeyword_0(), null); 
                          
                    }

                    }
                    break;
                case 2 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9918:2: kw= 'Is'
                    {
                    kw=(Token)input.LT(1);
                    match(input,170,FOLLOW_170_in_ruleIS20786); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getISAccess().getIsKeyword_1(), null); 
                          
                    }

                    }
                    break;
                case 3 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9925:2: kw= 'is'
                    {
                    kw=(Token)input.LT(1);
                    match(input,171,FOLLOW_171_in_ruleIS20805); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getISAccess().getIsKeyword_2(), null); 
                          
                    }

                    }
                    break;

            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
              	    lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruleIS


    // $ANTLR start entryRuleBETWEEN
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9938:1: entryRuleBETWEEN returns [String current=null] : iv_ruleBETWEEN= ruleBETWEEN EOF ;
    public final String entryRuleBETWEEN() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleBETWEEN = null;


        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9939:2: (iv_ruleBETWEEN= ruleBETWEEN EOF )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9940:2: iv_ruleBETWEEN= ruleBETWEEN EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getBETWEENRule(), currentNode); 
            }
            pushFollow(FOLLOW_ruleBETWEEN_in_entryRuleBETWEEN20846);
            iv_ruleBETWEEN=ruleBETWEEN();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruleBETWEEN.getText(); 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleBETWEEN20857); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuleBETWEEN


    // $ANTLR start ruleBETWEEN
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9947:1: ruleBETWEEN returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (kw= 'BETWEEN' | kw= 'Between' | kw= 'between' ) ;
    public final AntlrDatatypeRuleToken ruleBETWEEN() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;

         setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9952:6: ( (kw= 'BETWEEN' | kw= 'Between' | kw= 'between' ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9953:1: (kw= 'BETWEEN' | kw= 'Between' | kw= 'between' )
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9953:1: (kw= 'BETWEEN' | kw= 'Between' | kw= 'between' )
            int alt165=3;
            switch ( input.LA(1) ) {
            case 172:
                {
                alt165=1;
                }
                break;
            case 173:
                {
                alt165=2;
                }
                break;
            case 174:
                {
                alt165=3;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("9953:1: (kw= 'BETWEEN' | kw= 'Between' | kw= 'between' )", 165, 0, input);

                throw nvae;
            }

            switch (alt165) {
                case 1 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9954:2: kw= 'BETWEEN'
                    {
                    kw=(Token)input.LT(1);
                    match(input,172,FOLLOW_172_in_ruleBETWEEN20895); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getBETWEENAccess().getBETWEENKeyword_0(), null); 
                          
                    }

                    }
                    break;
                case 2 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9961:2: kw= 'Between'
                    {
                    kw=(Token)input.LT(1);
                    match(input,173,FOLLOW_173_in_ruleBETWEEN20914); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getBETWEENAccess().getBetweenKeyword_1(), null); 
                          
                    }

                    }
                    break;
                case 3 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9968:2: kw= 'between'
                    {
                    kw=(Token)input.LT(1);
                    match(input,174,FOLLOW_174_in_ruleBETWEEN20933); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getBETWEENAccess().getBetweenKeyword_2(), null); 
                          
                    }

                    }
                    break;

            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
              	    lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruleBETWEEN


    // $ANTLR start entryRuleLIKE
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9981:1: entryRuleLIKE returns [String current=null] : iv_ruleLIKE= ruleLIKE EOF ;
    public final String entryRuleLIKE() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleLIKE = null;


        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9982:2: (iv_ruleLIKE= ruleLIKE EOF )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9983:2: iv_ruleLIKE= ruleLIKE EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getLIKERule(), currentNode); 
            }
            pushFollow(FOLLOW_ruleLIKE_in_entryRuleLIKE20974);
            iv_ruleLIKE=ruleLIKE();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruleLIKE.getText(); 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleLIKE20985); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuleLIKE


    // $ANTLR start ruleLIKE
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9990:1: ruleLIKE returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (kw= 'LIKE' | kw= 'Like' | kw= 'like' ) ;
    public final AntlrDatatypeRuleToken ruleLIKE() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;

         setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9995:6: ( (kw= 'LIKE' | kw= 'Like' | kw= 'like' ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9996:1: (kw= 'LIKE' | kw= 'Like' | kw= 'like' )
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9996:1: (kw= 'LIKE' | kw= 'Like' | kw= 'like' )
            int alt166=3;
            switch ( input.LA(1) ) {
            case 175:
                {
                alt166=1;
                }
                break;
            case 176:
                {
                alt166=2;
                }
                break;
            case 53:
                {
                alt166=3;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("9996:1: (kw= 'LIKE' | kw= 'Like' | kw= 'like' )", 166, 0, input);

                throw nvae;
            }

            switch (alt166) {
                case 1 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:9997:2: kw= 'LIKE'
                    {
                    kw=(Token)input.LT(1);
                    match(input,175,FOLLOW_175_in_ruleLIKE21023); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getLIKEAccess().getLIKEKeyword_0(), null); 
                          
                    }

                    }
                    break;
                case 2 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10004:2: kw= 'Like'
                    {
                    kw=(Token)input.LT(1);
                    match(input,176,FOLLOW_176_in_ruleLIKE21042); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getLIKEAccess().getLikeKeyword_1(), null); 
                          
                    }

                    }
                    break;
                case 3 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10011:2: kw= 'like'
                    {
                    kw=(Token)input.LT(1);
                    match(input,53,FOLLOW_53_in_ruleLIKE21061); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getLIKEAccess().getLikeKeyword_2(), null); 
                          
                    }

                    }
                    break;

            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
              	    lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruleLIKE


    // $ANTLR start entryRuleMEMBER
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10024:1: entryRuleMEMBER returns [String current=null] : iv_ruleMEMBER= ruleMEMBER EOF ;
    public final String entryRuleMEMBER() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleMEMBER = null;


        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10025:2: (iv_ruleMEMBER= ruleMEMBER EOF )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10026:2: iv_ruleMEMBER= ruleMEMBER EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getMEMBERRule(), currentNode); 
            }
            pushFollow(FOLLOW_ruleMEMBER_in_entryRuleMEMBER21102);
            iv_ruleMEMBER=ruleMEMBER();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruleMEMBER.getText(); 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleMEMBER21113); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuleMEMBER


    // $ANTLR start ruleMEMBER
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10033:1: ruleMEMBER returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (kw= 'MEMBER' | kw= 'Member' | kw= 'member' ) ;
    public final AntlrDatatypeRuleToken ruleMEMBER() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;

         setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10038:6: ( (kw= 'MEMBER' | kw= 'Member' | kw= 'member' ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10039:1: (kw= 'MEMBER' | kw= 'Member' | kw= 'member' )
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10039:1: (kw= 'MEMBER' | kw= 'Member' | kw= 'member' )
            int alt167=3;
            switch ( input.LA(1) ) {
            case 177:
                {
                alt167=1;
                }
                break;
            case 178:
                {
                alt167=2;
                }
                break;
            case 179:
                {
                alt167=3;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("10039:1: (kw= 'MEMBER' | kw= 'Member' | kw= 'member' )", 167, 0, input);

                throw nvae;
            }

            switch (alt167) {
                case 1 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10040:2: kw= 'MEMBER'
                    {
                    kw=(Token)input.LT(1);
                    match(input,177,FOLLOW_177_in_ruleMEMBER21151); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getMEMBERAccess().getMEMBERKeyword_0(), null); 
                          
                    }

                    }
                    break;
                case 2 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10047:2: kw= 'Member'
                    {
                    kw=(Token)input.LT(1);
                    match(input,178,FOLLOW_178_in_ruleMEMBER21170); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getMEMBERAccess().getMemberKeyword_1(), null); 
                          
                    }

                    }
                    break;
                case 3 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10054:2: kw= 'member'
                    {
                    kw=(Token)input.LT(1);
                    match(input,179,FOLLOW_179_in_ruleMEMBER21189); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getMEMBERAccess().getMemberKeyword_2(), null); 
                          
                    }

                    }
                    break;

            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
              	    lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruleMEMBER


    // $ANTLR start entryRuleOF
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10067:1: entryRuleOF returns [String current=null] : iv_ruleOF= ruleOF EOF ;
    public final String entryRuleOF() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleOF = null;


        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10068:2: (iv_ruleOF= ruleOF EOF )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10069:2: iv_ruleOF= ruleOF EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getOFRule(), currentNode); 
            }
            pushFollow(FOLLOW_ruleOF_in_entryRuleOF21230);
            iv_ruleOF=ruleOF();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruleOF.getText(); 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleOF21241); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuleOF


    // $ANTLR start ruleOF
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10076:1: ruleOF returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (kw= 'OF' | kw= 'Of' | kw= 'of' ) ;
    public final AntlrDatatypeRuleToken ruleOF() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;

         setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10081:6: ( (kw= 'OF' | kw= 'Of' | kw= 'of' ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10082:1: (kw= 'OF' | kw= 'Of' | kw= 'of' )
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10082:1: (kw= 'OF' | kw= 'Of' | kw= 'of' )
            int alt168=3;
            switch ( input.LA(1) ) {
            case 180:
                {
                alt168=1;
                }
                break;
            case 181:
                {
                alt168=2;
                }
                break;
            case 182:
                {
                alt168=3;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("10082:1: (kw= 'OF' | kw= 'Of' | kw= 'of' )", 168, 0, input);

                throw nvae;
            }

            switch (alt168) {
                case 1 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10083:2: kw= 'OF'
                    {
                    kw=(Token)input.LT(1);
                    match(input,180,FOLLOW_180_in_ruleOF21279); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getOFAccess().getOFKeyword_0(), null); 
                          
                    }

                    }
                    break;
                case 2 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10090:2: kw= 'Of'
                    {
                    kw=(Token)input.LT(1);
                    match(input,181,FOLLOW_181_in_ruleOF21298); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getOFAccess().getOfKeyword_1(), null); 
                          
                    }

                    }
                    break;
                case 3 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10097:2: kw= 'of'
                    {
                    kw=(Token)input.LT(1);
                    match(input,182,FOLLOW_182_in_ruleOF21317); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getOFAccess().getOfKeyword_2(), null); 
                          
                    }

                    }
                    break;

            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
              	    lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruleOF


    // $ANTLR start entryRuleESCAPE
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10110:1: entryRuleESCAPE returns [String current=null] : iv_ruleESCAPE= ruleESCAPE EOF ;
    public final String entryRuleESCAPE() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleESCAPE = null;


        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10111:2: (iv_ruleESCAPE= ruleESCAPE EOF )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10112:2: iv_ruleESCAPE= ruleESCAPE EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getESCAPERule(), currentNode); 
            }
            pushFollow(FOLLOW_ruleESCAPE_in_entryRuleESCAPE21358);
            iv_ruleESCAPE=ruleESCAPE();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruleESCAPE.getText(); 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleESCAPE21369); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuleESCAPE


    // $ANTLR start ruleESCAPE
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10119:1: ruleESCAPE returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (kw= 'ESCAPE' | kw= 'Escape' | kw= 'escape' ) ;
    public final AntlrDatatypeRuleToken ruleESCAPE() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;

         setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10124:6: ( (kw= 'ESCAPE' | kw= 'Escape' | kw= 'escape' ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10125:1: (kw= 'ESCAPE' | kw= 'Escape' | kw= 'escape' )
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10125:1: (kw= 'ESCAPE' | kw= 'Escape' | kw= 'escape' )
            int alt169=3;
            switch ( input.LA(1) ) {
            case 183:
                {
                alt169=1;
                }
                break;
            case 184:
                {
                alt169=2;
                }
                break;
            case 185:
                {
                alt169=3;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("10125:1: (kw= 'ESCAPE' | kw= 'Escape' | kw= 'escape' )", 169, 0, input);

                throw nvae;
            }

            switch (alt169) {
                case 1 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10126:2: kw= 'ESCAPE'
                    {
                    kw=(Token)input.LT(1);
                    match(input,183,FOLLOW_183_in_ruleESCAPE21407); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getESCAPEAccess().getESCAPEKeyword_0(), null); 
                          
                    }

                    }
                    break;
                case 2 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10133:2: kw= 'Escape'
                    {
                    kw=(Token)input.LT(1);
                    match(input,184,FOLLOW_184_in_ruleESCAPE21426); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getESCAPEAccess().getEscapeKeyword_1(), null); 
                          
                    }

                    }
                    break;
                case 3 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10140:2: kw= 'escape'
                    {
                    kw=(Token)input.LT(1);
                    match(input,185,FOLLOW_185_in_ruleESCAPE21445); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getESCAPEAccess().getEscapeKeyword_2(), null); 
                          
                    }

                    }
                    break;

            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
              	    lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruleESCAPE


    // $ANTLR start entryRuleCASE
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10153:1: entryRuleCASE returns [String current=null] : iv_ruleCASE= ruleCASE EOF ;
    public final String entryRuleCASE() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleCASE = null;


        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10154:2: (iv_ruleCASE= ruleCASE EOF )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10155:2: iv_ruleCASE= ruleCASE EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getCASERule(), currentNode); 
            }
            pushFollow(FOLLOW_ruleCASE_in_entryRuleCASE21486);
            iv_ruleCASE=ruleCASE();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruleCASE.getText(); 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleCASE21497); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuleCASE


    // $ANTLR start ruleCASE
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10162:1: ruleCASE returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (kw= 'CASE' | kw= 'Case' | kw= 'case' ) ;
    public final AntlrDatatypeRuleToken ruleCASE() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;

         setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10167:6: ( (kw= 'CASE' | kw= 'Case' | kw= 'case' ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10168:1: (kw= 'CASE' | kw= 'Case' | kw= 'case' )
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10168:1: (kw= 'CASE' | kw= 'Case' | kw= 'case' )
            int alt170=3;
            switch ( input.LA(1) ) {
            case 186:
                {
                alt170=1;
                }
                break;
            case 187:
                {
                alt170=2;
                }
                break;
            case 188:
                {
                alt170=3;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("10168:1: (kw= 'CASE' | kw= 'Case' | kw= 'case' )", 170, 0, input);

                throw nvae;
            }

            switch (alt170) {
                case 1 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10169:2: kw= 'CASE'
                    {
                    kw=(Token)input.LT(1);
                    match(input,186,FOLLOW_186_in_ruleCASE21535); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getCASEAccess().getCASEKeyword_0(), null); 
                          
                    }

                    }
                    break;
                case 2 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10176:2: kw= 'Case'
                    {
                    kw=(Token)input.LT(1);
                    match(input,187,FOLLOW_187_in_ruleCASE21554); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getCASEAccess().getCaseKeyword_1(), null); 
                          
                    }

                    }
                    break;
                case 3 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10183:2: kw= 'case'
                    {
                    kw=(Token)input.LT(1);
                    match(input,188,FOLLOW_188_in_ruleCASE21573); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getCASEAccess().getCaseKeyword_2(), null); 
                          
                    }

                    }
                    break;

            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
              	    lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruleCASE


    // $ANTLR start entryRuleEND
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10196:1: entryRuleEND returns [String current=null] : iv_ruleEND= ruleEND EOF ;
    public final String entryRuleEND() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleEND = null;


        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10197:2: (iv_ruleEND= ruleEND EOF )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10198:2: iv_ruleEND= ruleEND EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getENDRule(), currentNode); 
            }
            pushFollow(FOLLOW_ruleEND_in_entryRuleEND21614);
            iv_ruleEND=ruleEND();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruleEND.getText(); 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleEND21625); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuleEND


    // $ANTLR start ruleEND
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10205:1: ruleEND returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (kw= 'END' | kw= 'End' | kw= 'end' ) ;
    public final AntlrDatatypeRuleToken ruleEND() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;

         setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10210:6: ( (kw= 'END' | kw= 'End' | kw= 'end' ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10211:1: (kw= 'END' | kw= 'End' | kw= 'end' )
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10211:1: (kw= 'END' | kw= 'End' | kw= 'end' )
            int alt171=3;
            switch ( input.LA(1) ) {
            case 189:
                {
                alt171=1;
                }
                break;
            case 190:
                {
                alt171=2;
                }
                break;
            case 191:
                {
                alt171=3;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("10211:1: (kw= 'END' | kw= 'End' | kw= 'end' )", 171, 0, input);

                throw nvae;
            }

            switch (alt171) {
                case 1 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10212:2: kw= 'END'
                    {
                    kw=(Token)input.LT(1);
                    match(input,189,FOLLOW_189_in_ruleEND21663); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getENDAccess().getENDKeyword_0(), null); 
                          
                    }

                    }
                    break;
                case 2 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10219:2: kw= 'End'
                    {
                    kw=(Token)input.LT(1);
                    match(input,190,FOLLOW_190_in_ruleEND21682); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getENDAccess().getEndKeyword_1(), null); 
                          
                    }

                    }
                    break;
                case 3 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10226:2: kw= 'end'
                    {
                    kw=(Token)input.LT(1);
                    match(input,191,FOLLOW_191_in_ruleEND21701); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getENDAccess().getEndKeyword_2(), null); 
                          
                    }

                    }
                    break;

            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
              	    lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruleEND


    // $ANTLR start entryRuleWHEN
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10239:1: entryRuleWHEN returns [String current=null] : iv_ruleWHEN= ruleWHEN EOF ;
    public final String entryRuleWHEN() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleWHEN = null;


        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10240:2: (iv_ruleWHEN= ruleWHEN EOF )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10241:2: iv_ruleWHEN= ruleWHEN EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getWHENRule(), currentNode); 
            }
            pushFollow(FOLLOW_ruleWHEN_in_entryRuleWHEN21742);
            iv_ruleWHEN=ruleWHEN();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruleWHEN.getText(); 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleWHEN21753); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuleWHEN


    // $ANTLR start ruleWHEN
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10248:1: ruleWHEN returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (kw= 'WHEN' | kw= 'When' | kw= 'when' ) ;
    public final AntlrDatatypeRuleToken ruleWHEN() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;

         setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10253:6: ( (kw= 'WHEN' | kw= 'When' | kw= 'when' ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10254:1: (kw= 'WHEN' | kw= 'When' | kw= 'when' )
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10254:1: (kw= 'WHEN' | kw= 'When' | kw= 'when' )
            int alt172=3;
            switch ( input.LA(1) ) {
            case 192:
                {
                alt172=1;
                }
                break;
            case 193:
                {
                alt172=2;
                }
                break;
            case 194:
                {
                alt172=3;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("10254:1: (kw= 'WHEN' | kw= 'When' | kw= 'when' )", 172, 0, input);

                throw nvae;
            }

            switch (alt172) {
                case 1 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10255:2: kw= 'WHEN'
                    {
                    kw=(Token)input.LT(1);
                    match(input,192,FOLLOW_192_in_ruleWHEN21791); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getWHENAccess().getWHENKeyword_0(), null); 
                          
                    }

                    }
                    break;
                case 2 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10262:2: kw= 'When'
                    {
                    kw=(Token)input.LT(1);
                    match(input,193,FOLLOW_193_in_ruleWHEN21810); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getWHENAccess().getWhenKeyword_1(), null); 
                          
                    }

                    }
                    break;
                case 3 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10269:2: kw= 'when'
                    {
                    kw=(Token)input.LT(1);
                    match(input,194,FOLLOW_194_in_ruleWHEN21829); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getWHENAccess().getWhenKeyword_2(), null); 
                          
                    }

                    }
                    break;

            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
              	    lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruleWHEN


    // $ANTLR start entryRuleTHEN
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10282:1: entryRuleTHEN returns [String current=null] : iv_ruleTHEN= ruleTHEN EOF ;
    public final String entryRuleTHEN() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleTHEN = null;


        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10283:2: (iv_ruleTHEN= ruleTHEN EOF )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10284:2: iv_ruleTHEN= ruleTHEN EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getTHENRule(), currentNode); 
            }
            pushFollow(FOLLOW_ruleTHEN_in_entryRuleTHEN21870);
            iv_ruleTHEN=ruleTHEN();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruleTHEN.getText(); 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleTHEN21881); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuleTHEN


    // $ANTLR start ruleTHEN
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10291:1: ruleTHEN returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (kw= 'THEN' | kw= 'Then' | kw= 'then' ) ;
    public final AntlrDatatypeRuleToken ruleTHEN() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;

         setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10296:6: ( (kw= 'THEN' | kw= 'Then' | kw= 'then' ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10297:1: (kw= 'THEN' | kw= 'Then' | kw= 'then' )
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10297:1: (kw= 'THEN' | kw= 'Then' | kw= 'then' )
            int alt173=3;
            switch ( input.LA(1) ) {
            case 195:
                {
                alt173=1;
                }
                break;
            case 196:
                {
                alt173=2;
                }
                break;
            case 197:
                {
                alt173=3;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("10297:1: (kw= 'THEN' | kw= 'Then' | kw= 'then' )", 173, 0, input);

                throw nvae;
            }

            switch (alt173) {
                case 1 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10298:2: kw= 'THEN'
                    {
                    kw=(Token)input.LT(1);
                    match(input,195,FOLLOW_195_in_ruleTHEN21919); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getTHENAccess().getTHENKeyword_0(), null); 
                          
                    }

                    }
                    break;
                case 2 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10305:2: kw= 'Then'
                    {
                    kw=(Token)input.LT(1);
                    match(input,196,FOLLOW_196_in_ruleTHEN21938); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getTHENAccess().getThenKeyword_1(), null); 
                          
                    }

                    }
                    break;
                case 3 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10312:2: kw= 'then'
                    {
                    kw=(Token)input.LT(1);
                    match(input,197,FOLLOW_197_in_ruleTHEN21957); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getTHENAccess().getThenKeyword_2(), null); 
                          
                    }

                    }
                    break;

            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
              	    lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruleTHEN


    // $ANTLR start entryRuleELSE
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10325:1: entryRuleELSE returns [String current=null] : iv_ruleELSE= ruleELSE EOF ;
    public final String entryRuleELSE() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleELSE = null;


        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10326:2: (iv_ruleELSE= ruleELSE EOF )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10327:2: iv_ruleELSE= ruleELSE EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getELSERule(), currentNode); 
            }
            pushFollow(FOLLOW_ruleELSE_in_entryRuleELSE21998);
            iv_ruleELSE=ruleELSE();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruleELSE.getText(); 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleELSE22009); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuleELSE


    // $ANTLR start ruleELSE
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10334:1: ruleELSE returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (kw= 'ELSE' | kw= 'Else' | kw= 'else' ) ;
    public final AntlrDatatypeRuleToken ruleELSE() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;

         setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10339:6: ( (kw= 'ELSE' | kw= 'Else' | kw= 'else' ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10340:1: (kw= 'ELSE' | kw= 'Else' | kw= 'else' )
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10340:1: (kw= 'ELSE' | kw= 'Else' | kw= 'else' )
            int alt174=3;
            switch ( input.LA(1) ) {
            case 198:
                {
                alt174=1;
                }
                break;
            case 199:
                {
                alt174=2;
                }
                break;
            case 200:
                {
                alt174=3;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("10340:1: (kw= 'ELSE' | kw= 'Else' | kw= 'else' )", 174, 0, input);

                throw nvae;
            }

            switch (alt174) {
                case 1 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10341:2: kw= 'ELSE'
                    {
                    kw=(Token)input.LT(1);
                    match(input,198,FOLLOW_198_in_ruleELSE22047); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getELSEAccess().getELSEKeyword_0(), null); 
                          
                    }

                    }
                    break;
                case 2 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10348:2: kw= 'Else'
                    {
                    kw=(Token)input.LT(1);
                    match(input,199,FOLLOW_199_in_ruleELSE22066); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getELSEAccess().getElseKeyword_1(), null); 
                          
                    }

                    }
                    break;
                case 3 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10355:2: kw= 'else'
                    {
                    kw=(Token)input.LT(1);
                    match(input,200,FOLLOW_200_in_ruleELSE22085); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getELSEAccess().getElseKeyword_2(), null); 
                          
                    }

                    }
                    break;

            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
              	    lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruleELSE


    // $ANTLR start entryRuleSOME
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10368:1: entryRuleSOME returns [String current=null] : iv_ruleSOME= ruleSOME EOF ;
    public final String entryRuleSOME() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleSOME = null;


        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10369:2: (iv_ruleSOME= ruleSOME EOF )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10370:2: iv_ruleSOME= ruleSOME EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getSOMERule(), currentNode); 
            }
            pushFollow(FOLLOW_ruleSOME_in_entryRuleSOME22126);
            iv_ruleSOME=ruleSOME();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruleSOME.getText(); 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleSOME22137); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuleSOME


    // $ANTLR start ruleSOME
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10377:1: ruleSOME returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (kw= 'SOME' | kw= 'Some' | kw= 'some' ) ;
    public final AntlrDatatypeRuleToken ruleSOME() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;

         setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10382:6: ( (kw= 'SOME' | kw= 'Some' | kw= 'some' ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10383:1: (kw= 'SOME' | kw= 'Some' | kw= 'some' )
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10383:1: (kw= 'SOME' | kw= 'Some' | kw= 'some' )
            int alt175=3;
            switch ( input.LA(1) ) {
            case 201:
                {
                alt175=1;
                }
                break;
            case 202:
                {
                alt175=2;
                }
                break;
            case 203:
                {
                alt175=3;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("10383:1: (kw= 'SOME' | kw= 'Some' | kw= 'some' )", 175, 0, input);

                throw nvae;
            }

            switch (alt175) {
                case 1 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10384:2: kw= 'SOME'
                    {
                    kw=(Token)input.LT(1);
                    match(input,201,FOLLOW_201_in_ruleSOME22175); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getSOMEAccess().getSOMEKeyword_0(), null); 
                          
                    }

                    }
                    break;
                case 2 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10391:2: kw= 'Some'
                    {
                    kw=(Token)input.LT(1);
                    match(input,202,FOLLOW_202_in_ruleSOME22194); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getSOMEAccess().getSomeKeyword_1(), null); 
                          
                    }

                    }
                    break;
                case 3 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10398:2: kw= 'some'
                    {
                    kw=(Token)input.LT(1);
                    match(input,203,FOLLOW_203_in_ruleSOME22213); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getSOMEAccess().getSomeKeyword_2(), null); 
                          
                    }

                    }
                    break;

            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
              	    lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruleSOME


    // $ANTLR start entryRuleEXISTS
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10411:1: entryRuleEXISTS returns [String current=null] : iv_ruleEXISTS= ruleEXISTS EOF ;
    public final String entryRuleEXISTS() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleEXISTS = null;


        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10412:2: (iv_ruleEXISTS= ruleEXISTS EOF )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10413:2: iv_ruleEXISTS= ruleEXISTS EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getEXISTSRule(), currentNode); 
            }
            pushFollow(FOLLOW_ruleEXISTS_in_entryRuleEXISTS22254);
            iv_ruleEXISTS=ruleEXISTS();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruleEXISTS.getText(); 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleEXISTS22265); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuleEXISTS


    // $ANTLR start ruleEXISTS
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10420:1: ruleEXISTS returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (kw= 'EXISTS' | kw= 'Exists' | kw= 'exists' ) ;
    public final AntlrDatatypeRuleToken ruleEXISTS() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;

         setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10425:6: ( (kw= 'EXISTS' | kw= 'Exists' | kw= 'exists' ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10426:1: (kw= 'EXISTS' | kw= 'Exists' | kw= 'exists' )
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10426:1: (kw= 'EXISTS' | kw= 'Exists' | kw= 'exists' )
            int alt176=3;
            switch ( input.LA(1) ) {
            case 204:
                {
                alt176=1;
                }
                break;
            case 205:
                {
                alt176=2;
                }
                break;
            case 206:
                {
                alt176=3;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("10426:1: (kw= 'EXISTS' | kw= 'Exists' | kw= 'exists' )", 176, 0, input);

                throw nvae;
            }

            switch (alt176) {
                case 1 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10427:2: kw= 'EXISTS'
                    {
                    kw=(Token)input.LT(1);
                    match(input,204,FOLLOW_204_in_ruleEXISTS22303); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getEXISTSAccess().getEXISTSKeyword_0(), null); 
                          
                    }

                    }
                    break;
                case 2 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10434:2: kw= 'Exists'
                    {
                    kw=(Token)input.LT(1);
                    match(input,205,FOLLOW_205_in_ruleEXISTS22322); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getEXISTSAccess().getExistsKeyword_1(), null); 
                          
                    }

                    }
                    break;
                case 3 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10441:2: kw= 'exists'
                    {
                    kw=(Token)input.LT(1);
                    match(input,206,FOLLOW_206_in_ruleEXISTS22341); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getEXISTSAccess().getExistsKeyword_2(), null); 
                          
                    }

                    }
                    break;

            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
              	    lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruleEXISTS


    // $ANTLR start entryRuleALL
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10454:1: entryRuleALL returns [String current=null] : iv_ruleALL= ruleALL EOF ;
    public final String entryRuleALL() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleALL = null;


        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10455:2: (iv_ruleALL= ruleALL EOF )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10456:2: iv_ruleALL= ruleALL EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getALLRule(), currentNode); 
            }
            pushFollow(FOLLOW_ruleALL_in_entryRuleALL22382);
            iv_ruleALL=ruleALL();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruleALL.getText(); 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleALL22393); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuleALL


    // $ANTLR start ruleALL
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10463:1: ruleALL returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (kw= 'ALL' | kw= 'All' | kw= 'all' ) ;
    public final AntlrDatatypeRuleToken ruleALL() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;

         setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10468:6: ( (kw= 'ALL' | kw= 'All' | kw= 'all' ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10469:1: (kw= 'ALL' | kw= 'All' | kw= 'all' )
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10469:1: (kw= 'ALL' | kw= 'All' | kw= 'all' )
            int alt177=3;
            switch ( input.LA(1) ) {
            case 207:
                {
                alt177=1;
                }
                break;
            case 208:
                {
                alt177=2;
                }
                break;
            case 209:
                {
                alt177=3;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("10469:1: (kw= 'ALL' | kw= 'All' | kw= 'all' )", 177, 0, input);

                throw nvae;
            }

            switch (alt177) {
                case 1 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10470:2: kw= 'ALL'
                    {
                    kw=(Token)input.LT(1);
                    match(input,207,FOLLOW_207_in_ruleALL22431); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getALLAccess().getALLKeyword_0(), null); 
                          
                    }

                    }
                    break;
                case 2 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10477:2: kw= 'All'
                    {
                    kw=(Token)input.LT(1);
                    match(input,208,FOLLOW_208_in_ruleALL22450); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getALLAccess().getAllKeyword_1(), null); 
                          
                    }

                    }
                    break;
                case 3 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10484:2: kw= 'all'
                    {
                    kw=(Token)input.LT(1);
                    match(input,209,FOLLOW_209_in_ruleALL22469); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getALLAccess().getAllKeyword_2(), null); 
                          
                    }

                    }
                    break;

            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
              	    lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruleALL


    // $ANTLR start entryRuleANY
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10497:1: entryRuleANY returns [String current=null] : iv_ruleANY= ruleANY EOF ;
    public final String entryRuleANY() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleANY = null;


        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10498:2: (iv_ruleANY= ruleANY EOF )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10499:2: iv_ruleANY= ruleANY EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getANYRule(), currentNode); 
            }
            pushFollow(FOLLOW_ruleANY_in_entryRuleANY22510);
            iv_ruleANY=ruleANY();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruleANY.getText(); 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleANY22521); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuleANY


    // $ANTLR start ruleANY
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10506:1: ruleANY returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (kw= 'ANY' | kw= 'Any' | kw= 'any' ) ;
    public final AntlrDatatypeRuleToken ruleANY() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;

         setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10511:6: ( (kw= 'ANY' | kw= 'Any' | kw= 'any' ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10512:1: (kw= 'ANY' | kw= 'Any' | kw= 'any' )
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10512:1: (kw= 'ANY' | kw= 'Any' | kw= 'any' )
            int alt178=3;
            switch ( input.LA(1) ) {
            case 210:
                {
                alt178=1;
                }
                break;
            case 211:
                {
                alt178=2;
                }
                break;
            case 212:
                {
                alt178=3;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("10512:1: (kw= 'ANY' | kw= 'Any' | kw= 'any' )", 178, 0, input);

                throw nvae;
            }

            switch (alt178) {
                case 1 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10513:2: kw= 'ANY'
                    {
                    kw=(Token)input.LT(1);
                    match(input,210,FOLLOW_210_in_ruleANY22559); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getANYAccess().getANYKeyword_0(), null); 
                          
                    }

                    }
                    break;
                case 2 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10520:2: kw= 'Any'
                    {
                    kw=(Token)input.LT(1);
                    match(input,211,FOLLOW_211_in_ruleANY22578); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getANYAccess().getAnyKeyword_1(), null); 
                          
                    }

                    }
                    break;
                case 3 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10527:2: kw= 'any'
                    {
                    kw=(Token)input.LT(1);
                    match(input,212,FOLLOW_212_in_ruleANY22597); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getANYAccess().getAnyKeyword_2(), null); 
                          
                    }

                    }
                    break;

            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
              	    lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruleANY


    // $ANTLR start entryRuleSUM
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10540:1: entryRuleSUM returns [String current=null] : iv_ruleSUM= ruleSUM EOF ;
    public final String entryRuleSUM() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleSUM = null;


        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10541:2: (iv_ruleSUM= ruleSUM EOF )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10542:2: iv_ruleSUM= ruleSUM EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getSUMRule(), currentNode); 
            }
            pushFollow(FOLLOW_ruleSUM_in_entryRuleSUM22638);
            iv_ruleSUM=ruleSUM();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruleSUM.getText(); 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleSUM22649); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuleSUM


    // $ANTLR start ruleSUM
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10549:1: ruleSUM returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (kw= 'SUM' | kw= 'Sum' | kw= 'sum' ) ;
    public final AntlrDatatypeRuleToken ruleSUM() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;

         setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10554:6: ( (kw= 'SUM' | kw= 'Sum' | kw= 'sum' ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10555:1: (kw= 'SUM' | kw= 'Sum' | kw= 'sum' )
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10555:1: (kw= 'SUM' | kw= 'Sum' | kw= 'sum' )
            int alt179=3;
            switch ( input.LA(1) ) {
            case 213:
                {
                alt179=1;
                }
                break;
            case 214:
                {
                alt179=2;
                }
                break;
            case 215:
                {
                alt179=3;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("10555:1: (kw= 'SUM' | kw= 'Sum' | kw= 'sum' )", 179, 0, input);

                throw nvae;
            }

            switch (alt179) {
                case 1 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10556:2: kw= 'SUM'
                    {
                    kw=(Token)input.LT(1);
                    match(input,213,FOLLOW_213_in_ruleSUM22687); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getSUMAccess().getSUMKeyword_0(), null); 
                          
                    }

                    }
                    break;
                case 2 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10563:2: kw= 'Sum'
                    {
                    kw=(Token)input.LT(1);
                    match(input,214,FOLLOW_214_in_ruleSUM22706); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getSUMAccess().getSumKeyword_1(), null); 
                          
                    }

                    }
                    break;
                case 3 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10570:2: kw= 'sum'
                    {
                    kw=(Token)input.LT(1);
                    match(input,215,FOLLOW_215_in_ruleSUM22725); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getSUMAccess().getSumKeyword_2(), null); 
                          
                    }

                    }
                    break;

            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
              	    lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruleSUM


    // $ANTLR start entryRuleAVG
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10583:1: entryRuleAVG returns [String current=null] : iv_ruleAVG= ruleAVG EOF ;
    public final String entryRuleAVG() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleAVG = null;


        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10584:2: (iv_ruleAVG= ruleAVG EOF )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10585:2: iv_ruleAVG= ruleAVG EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getAVGRule(), currentNode); 
            }
            pushFollow(FOLLOW_ruleAVG_in_entryRuleAVG22766);
            iv_ruleAVG=ruleAVG();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruleAVG.getText(); 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleAVG22777); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuleAVG


    // $ANTLR start ruleAVG
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10592:1: ruleAVG returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (kw= 'AVG' | kw= 'Avg' | kw= 'avg' ) ;
    public final AntlrDatatypeRuleToken ruleAVG() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;

         setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10597:6: ( (kw= 'AVG' | kw= 'Avg' | kw= 'avg' ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10598:1: (kw= 'AVG' | kw= 'Avg' | kw= 'avg' )
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10598:1: (kw= 'AVG' | kw= 'Avg' | kw= 'avg' )
            int alt180=3;
            switch ( input.LA(1) ) {
            case 216:
                {
                alt180=1;
                }
                break;
            case 217:
                {
                alt180=2;
                }
                break;
            case 218:
                {
                alt180=3;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("10598:1: (kw= 'AVG' | kw= 'Avg' | kw= 'avg' )", 180, 0, input);

                throw nvae;
            }

            switch (alt180) {
                case 1 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10599:2: kw= 'AVG'
                    {
                    kw=(Token)input.LT(1);
                    match(input,216,FOLLOW_216_in_ruleAVG22815); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getAVGAccess().getAVGKeyword_0(), null); 
                          
                    }

                    }
                    break;
                case 2 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10606:2: kw= 'Avg'
                    {
                    kw=(Token)input.LT(1);
                    match(input,217,FOLLOW_217_in_ruleAVG22834); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getAVGAccess().getAvgKeyword_1(), null); 
                          
                    }

                    }
                    break;
                case 3 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10613:2: kw= 'avg'
                    {
                    kw=(Token)input.LT(1);
                    match(input,218,FOLLOW_218_in_ruleAVG22853); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getAVGAccess().getAvgKeyword_2(), null); 
                          
                    }

                    }
                    break;

            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
              	    lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruleAVG


    // $ANTLR start entryRuleMAX
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10626:1: entryRuleMAX returns [String current=null] : iv_ruleMAX= ruleMAX EOF ;
    public final String entryRuleMAX() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleMAX = null;


        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10627:2: (iv_ruleMAX= ruleMAX EOF )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10628:2: iv_ruleMAX= ruleMAX EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getMAXRule(), currentNode); 
            }
            pushFollow(FOLLOW_ruleMAX_in_entryRuleMAX22894);
            iv_ruleMAX=ruleMAX();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruleMAX.getText(); 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleMAX22905); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuleMAX


    // $ANTLR start ruleMAX
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10635:1: ruleMAX returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (kw= 'MAX' | kw= 'Max' | kw= 'max' ) ;
    public final AntlrDatatypeRuleToken ruleMAX() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;

         setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10640:6: ( (kw= 'MAX' | kw= 'Max' | kw= 'max' ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10641:1: (kw= 'MAX' | kw= 'Max' | kw= 'max' )
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10641:1: (kw= 'MAX' | kw= 'Max' | kw= 'max' )
            int alt181=3;
            switch ( input.LA(1) ) {
            case 219:
                {
                alt181=1;
                }
                break;
            case 220:
                {
                alt181=2;
                }
                break;
            case 221:
                {
                alt181=3;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("10641:1: (kw= 'MAX' | kw= 'Max' | kw= 'max' )", 181, 0, input);

                throw nvae;
            }

            switch (alt181) {
                case 1 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10642:2: kw= 'MAX'
                    {
                    kw=(Token)input.LT(1);
                    match(input,219,FOLLOW_219_in_ruleMAX22943); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getMAXAccess().getMAXKeyword_0(), null); 
                          
                    }

                    }
                    break;
                case 2 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10649:2: kw= 'Max'
                    {
                    kw=(Token)input.LT(1);
                    match(input,220,FOLLOW_220_in_ruleMAX22962); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getMAXAccess().getMaxKeyword_1(), null); 
                          
                    }

                    }
                    break;
                case 3 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10656:2: kw= 'max'
                    {
                    kw=(Token)input.LT(1);
                    match(input,221,FOLLOW_221_in_ruleMAX22981); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getMAXAccess().getMaxKeyword_2(), null); 
                          
                    }

                    }
                    break;

            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
              	    lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruleMAX


    // $ANTLR start entryRuleMIN
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10669:1: entryRuleMIN returns [String current=null] : iv_ruleMIN= ruleMIN EOF ;
    public final String entryRuleMIN() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleMIN = null;


        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10670:2: (iv_ruleMIN= ruleMIN EOF )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10671:2: iv_ruleMIN= ruleMIN EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getMINRule(), currentNode); 
            }
            pushFollow(FOLLOW_ruleMIN_in_entryRuleMIN23022);
            iv_ruleMIN=ruleMIN();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruleMIN.getText(); 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleMIN23033); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuleMIN


    // $ANTLR start ruleMIN
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10678:1: ruleMIN returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (kw= 'MIN' | kw= 'Min' | kw= 'min' ) ;
    public final AntlrDatatypeRuleToken ruleMIN() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;

         setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10683:6: ( (kw= 'MIN' | kw= 'Min' | kw= 'min' ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10684:1: (kw= 'MIN' | kw= 'Min' | kw= 'min' )
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10684:1: (kw= 'MIN' | kw= 'Min' | kw= 'min' )
            int alt182=3;
            switch ( input.LA(1) ) {
            case 222:
                {
                alt182=1;
                }
                break;
            case 223:
                {
                alt182=2;
                }
                break;
            case 224:
                {
                alt182=3;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("10684:1: (kw= 'MIN' | kw= 'Min' | kw= 'min' )", 182, 0, input);

                throw nvae;
            }

            switch (alt182) {
                case 1 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10685:2: kw= 'MIN'
                    {
                    kw=(Token)input.LT(1);
                    match(input,222,FOLLOW_222_in_ruleMIN23071); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getMINAccess().getMINKeyword_0(), null); 
                          
                    }

                    }
                    break;
                case 2 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10692:2: kw= 'Min'
                    {
                    kw=(Token)input.LT(1);
                    match(input,223,FOLLOW_223_in_ruleMIN23090); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getMINAccess().getMinKeyword_1(), null); 
                          
                    }

                    }
                    break;
                case 3 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10699:2: kw= 'min'
                    {
                    kw=(Token)input.LT(1);
                    match(input,224,FOLLOW_224_in_ruleMIN23109); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getMINAccess().getMinKeyword_2(), null); 
                          
                    }

                    }
                    break;

            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
              	    lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruleMIN


    // $ANTLR start entryRuleCOUNT
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10712:1: entryRuleCOUNT returns [String current=null] : iv_ruleCOUNT= ruleCOUNT EOF ;
    public final String entryRuleCOUNT() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleCOUNT = null;


        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10713:2: (iv_ruleCOUNT= ruleCOUNT EOF )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10714:2: iv_ruleCOUNT= ruleCOUNT EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getCOUNTRule(), currentNode); 
            }
            pushFollow(FOLLOW_ruleCOUNT_in_entryRuleCOUNT23150);
            iv_ruleCOUNT=ruleCOUNT();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruleCOUNT.getText(); 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleCOUNT23161); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuleCOUNT


    // $ANTLR start ruleCOUNT
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10721:1: ruleCOUNT returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (kw= 'COUNT' | kw= 'Count' | kw= 'count' ) ;
    public final AntlrDatatypeRuleToken ruleCOUNT() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;

         setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10726:6: ( (kw= 'COUNT' | kw= 'Count' | kw= 'count' ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10727:1: (kw= 'COUNT' | kw= 'Count' | kw= 'count' )
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10727:1: (kw= 'COUNT' | kw= 'Count' | kw= 'count' )
            int alt183=3;
            switch ( input.LA(1) ) {
            case 225:
                {
                alt183=1;
                }
                break;
            case 226:
                {
                alt183=2;
                }
                break;
            case 227:
                {
                alt183=3;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("10727:1: (kw= 'COUNT' | kw= 'Count' | kw= 'count' )", 183, 0, input);

                throw nvae;
            }

            switch (alt183) {
                case 1 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10728:2: kw= 'COUNT'
                    {
                    kw=(Token)input.LT(1);
                    match(input,225,FOLLOW_225_in_ruleCOUNT23199); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getCOUNTAccess().getCOUNTKeyword_0(), null); 
                          
                    }

                    }
                    break;
                case 2 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10735:2: kw= 'Count'
                    {
                    kw=(Token)input.LT(1);
                    match(input,226,FOLLOW_226_in_ruleCOUNT23218); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getCOUNTAccess().getCountKeyword_1(), null); 
                          
                    }

                    }
                    break;
                case 3 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10742:2: kw= 'count'
                    {
                    kw=(Token)input.LT(1);
                    match(input,227,FOLLOW_227_in_ruleCOUNT23237); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getCOUNTAccess().getCountKeyword_2(), null); 
                          
                    }

                    }
                    break;

            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
              	    lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruleCOUNT


    // $ANTLR start entryRuleINDICES
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10755:1: entryRuleINDICES returns [String current=null] : iv_ruleINDICES= ruleINDICES EOF ;
    public final String entryRuleINDICES() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleINDICES = null;


        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10756:2: (iv_ruleINDICES= ruleINDICES EOF )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10757:2: iv_ruleINDICES= ruleINDICES EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getINDICESRule(), currentNode); 
            }
            pushFollow(FOLLOW_ruleINDICES_in_entryRuleINDICES23278);
            iv_ruleINDICES=ruleINDICES();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruleINDICES.getText(); 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleINDICES23289); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuleINDICES


    // $ANTLR start ruleINDICES
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10764:1: ruleINDICES returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (kw= 'INDICES' | kw= 'Indices' | kw= 'indices' ) ;
    public final AntlrDatatypeRuleToken ruleINDICES() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;

         setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10769:6: ( (kw= 'INDICES' | kw= 'Indices' | kw= 'indices' ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10770:1: (kw= 'INDICES' | kw= 'Indices' | kw= 'indices' )
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10770:1: (kw= 'INDICES' | kw= 'Indices' | kw= 'indices' )
            int alt184=3;
            switch ( input.LA(1) ) {
            case 228:
                {
                alt184=1;
                }
                break;
            case 229:
                {
                alt184=2;
                }
                break;
            case 230:
                {
                alt184=3;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("10770:1: (kw= 'INDICES' | kw= 'Indices' | kw= 'indices' )", 184, 0, input);

                throw nvae;
            }

            switch (alt184) {
                case 1 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10771:2: kw= 'INDICES'
                    {
                    kw=(Token)input.LT(1);
                    match(input,228,FOLLOW_228_in_ruleINDICES23327); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getINDICESAccess().getINDICESKeyword_0(), null); 
                          
                    }

                    }
                    break;
                case 2 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10778:2: kw= 'Indices'
                    {
                    kw=(Token)input.LT(1);
                    match(input,229,FOLLOW_229_in_ruleINDICES23346); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getINDICESAccess().getIndicesKeyword_1(), null); 
                          
                    }

                    }
                    break;
                case 3 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10785:2: kw= 'indices'
                    {
                    kw=(Token)input.LT(1);
                    match(input,230,FOLLOW_230_in_ruleINDICES23365); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getINDICESAccess().getIndicesKeyword_2(), null); 
                          
                    }

                    }
                    break;

            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
              	    lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruleINDICES


    // $ANTLR start entryRuleTRAILING
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10798:1: entryRuleTRAILING returns [String current=null] : iv_ruleTRAILING= ruleTRAILING EOF ;
    public final String entryRuleTRAILING() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleTRAILING = null;


        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10799:2: (iv_ruleTRAILING= ruleTRAILING EOF )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10800:2: iv_ruleTRAILING= ruleTRAILING EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getTRAILINGRule(), currentNode); 
            }
            pushFollow(FOLLOW_ruleTRAILING_in_entryRuleTRAILING23406);
            iv_ruleTRAILING=ruleTRAILING();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruleTRAILING.getText(); 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleTRAILING23417); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuleTRAILING


    // $ANTLR start ruleTRAILING
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10807:1: ruleTRAILING returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (kw= 'TRAILING' | kw= 'Trailing' | kw= 'trailing' ) ;
    public final AntlrDatatypeRuleToken ruleTRAILING() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;

         setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10812:6: ( (kw= 'TRAILING' | kw= 'Trailing' | kw= 'trailing' ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10813:1: (kw= 'TRAILING' | kw= 'Trailing' | kw= 'trailing' )
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10813:1: (kw= 'TRAILING' | kw= 'Trailing' | kw= 'trailing' )
            int alt185=3;
            switch ( input.LA(1) ) {
            case 231:
                {
                alt185=1;
                }
                break;
            case 232:
                {
                alt185=2;
                }
                break;
            case 233:
                {
                alt185=3;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("10813:1: (kw= 'TRAILING' | kw= 'Trailing' | kw= 'trailing' )", 185, 0, input);

                throw nvae;
            }

            switch (alt185) {
                case 1 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10814:2: kw= 'TRAILING'
                    {
                    kw=(Token)input.LT(1);
                    match(input,231,FOLLOW_231_in_ruleTRAILING23455); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getTRAILINGAccess().getTRAILINGKeyword_0(), null); 
                          
                    }

                    }
                    break;
                case 2 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10821:2: kw= 'Trailing'
                    {
                    kw=(Token)input.LT(1);
                    match(input,232,FOLLOW_232_in_ruleTRAILING23474); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getTRAILINGAccess().getTrailingKeyword_1(), null); 
                          
                    }

                    }
                    break;
                case 3 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10828:2: kw= 'trailing'
                    {
                    kw=(Token)input.LT(1);
                    match(input,233,FOLLOW_233_in_ruleTRAILING23493); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getTRAILINGAccess().getTrailingKeyword_2(), null); 
                          
                    }

                    }
                    break;

            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
              	    lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruleTRAILING


    // $ANTLR start entryRuleLEADING
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10841:1: entryRuleLEADING returns [String current=null] : iv_ruleLEADING= ruleLEADING EOF ;
    public final String entryRuleLEADING() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleLEADING = null;


        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10842:2: (iv_ruleLEADING= ruleLEADING EOF )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10843:2: iv_ruleLEADING= ruleLEADING EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getLEADINGRule(), currentNode); 
            }
            pushFollow(FOLLOW_ruleLEADING_in_entryRuleLEADING23534);
            iv_ruleLEADING=ruleLEADING();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruleLEADING.getText(); 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleLEADING23545); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuleLEADING


    // $ANTLR start ruleLEADING
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10850:1: ruleLEADING returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (kw= 'LEADING' | kw= 'Leading' | kw= 'leading' ) ;
    public final AntlrDatatypeRuleToken ruleLEADING() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;

         setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10855:6: ( (kw= 'LEADING' | kw= 'Leading' | kw= 'leading' ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10856:1: (kw= 'LEADING' | kw= 'Leading' | kw= 'leading' )
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10856:1: (kw= 'LEADING' | kw= 'Leading' | kw= 'leading' )
            int alt186=3;
            switch ( input.LA(1) ) {
            case 234:
                {
                alt186=1;
                }
                break;
            case 235:
                {
                alt186=2;
                }
                break;
            case 236:
                {
                alt186=3;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("10856:1: (kw= 'LEADING' | kw= 'Leading' | kw= 'leading' )", 186, 0, input);

                throw nvae;
            }

            switch (alt186) {
                case 1 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10857:2: kw= 'LEADING'
                    {
                    kw=(Token)input.LT(1);
                    match(input,234,FOLLOW_234_in_ruleLEADING23583); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getLEADINGAccess().getLEADINGKeyword_0(), null); 
                          
                    }

                    }
                    break;
                case 2 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10864:2: kw= 'Leading'
                    {
                    kw=(Token)input.LT(1);
                    match(input,235,FOLLOW_235_in_ruleLEADING23602); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getLEADINGAccess().getLeadingKeyword_1(), null); 
                          
                    }

                    }
                    break;
                case 3 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10871:2: kw= 'leading'
                    {
                    kw=(Token)input.LT(1);
                    match(input,236,FOLLOW_236_in_ruleLEADING23621); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getLEADINGAccess().getLeadingKeyword_2(), null); 
                          
                    }

                    }
                    break;

            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
              	    lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruleLEADING


    // $ANTLR start entryRuleBOTH
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10884:1: entryRuleBOTH returns [String current=null] : iv_ruleBOTH= ruleBOTH EOF ;
    public final String entryRuleBOTH() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleBOTH = null;


        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10885:2: (iv_ruleBOTH= ruleBOTH EOF )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10886:2: iv_ruleBOTH= ruleBOTH EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getBOTHRule(), currentNode); 
            }
            pushFollow(FOLLOW_ruleBOTH_in_entryRuleBOTH23662);
            iv_ruleBOTH=ruleBOTH();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruleBOTH.getText(); 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleBOTH23673); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuleBOTH


    // $ANTLR start ruleBOTH
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10893:1: ruleBOTH returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (kw= 'BOTH' | kw= 'Both' | kw= 'both' ) ;
    public final AntlrDatatypeRuleToken ruleBOTH() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;

         setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10898:6: ( (kw= 'BOTH' | kw= 'Both' | kw= 'both' ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10899:1: (kw= 'BOTH' | kw= 'Both' | kw= 'both' )
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10899:1: (kw= 'BOTH' | kw= 'Both' | kw= 'both' )
            int alt187=3;
            switch ( input.LA(1) ) {
            case 237:
                {
                alt187=1;
                }
                break;
            case 238:
                {
                alt187=2;
                }
                break;
            case 239:
                {
                alt187=3;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("10899:1: (kw= 'BOTH' | kw= 'Both' | kw= 'both' )", 187, 0, input);

                throw nvae;
            }

            switch (alt187) {
                case 1 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10900:2: kw= 'BOTH'
                    {
                    kw=(Token)input.LT(1);
                    match(input,237,FOLLOW_237_in_ruleBOTH23711); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getBOTHAccess().getBOTHKeyword_0(), null); 
                          
                    }

                    }
                    break;
                case 2 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10907:2: kw= 'Both'
                    {
                    kw=(Token)input.LT(1);
                    match(input,238,FOLLOW_238_in_ruleBOTH23730); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getBOTHAccess().getBothKeyword_1(), null); 
                          
                    }

                    }
                    break;
                case 3 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10914:2: kw= 'both'
                    {
                    kw=(Token)input.LT(1);
                    match(input,239,FOLLOW_239_in_ruleBOTH23749); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getBOTHAccess().getBothKeyword_2(), null); 
                          
                    }

                    }
                    break;

            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
              	    lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruleBOTH


    // $ANTLR start entryRuleNULL
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10927:1: entryRuleNULL returns [String current=null] : iv_ruleNULL= ruleNULL EOF ;
    public final String entryRuleNULL() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleNULL = null;


        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10928:2: (iv_ruleNULL= ruleNULL EOF )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10929:2: iv_ruleNULL= ruleNULL EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getNULLRule(), currentNode); 
            }
            pushFollow(FOLLOW_ruleNULL_in_entryRuleNULL23790);
            iv_ruleNULL=ruleNULL();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruleNULL.getText(); 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleNULL23801); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuleNULL


    // $ANTLR start ruleNULL
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10936:1: ruleNULL returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (kw= 'NULL' | kw= 'Null' | kw= 'null' ) ;
    public final AntlrDatatypeRuleToken ruleNULL() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;

         setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10941:6: ( (kw= 'NULL' | kw= 'Null' | kw= 'null' ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10942:1: (kw= 'NULL' | kw= 'Null' | kw= 'null' )
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10942:1: (kw= 'NULL' | kw= 'Null' | kw= 'null' )
            int alt188=3;
            switch ( input.LA(1) ) {
            case 240:
                {
                alt188=1;
                }
                break;
            case 241:
                {
                alt188=2;
                }
                break;
            case 17:
                {
                alt188=3;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("10942:1: (kw= 'NULL' | kw= 'Null' | kw= 'null' )", 188, 0, input);

                throw nvae;
            }

            switch (alt188) {
                case 1 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10943:2: kw= 'NULL'
                    {
                    kw=(Token)input.LT(1);
                    match(input,240,FOLLOW_240_in_ruleNULL23839); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getNULLAccess().getNULLKeyword_0(), null); 
                          
                    }

                    }
                    break;
                case 2 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10950:2: kw= 'Null'
                    {
                    kw=(Token)input.LT(1);
                    match(input,241,FOLLOW_241_in_ruleNULL23858); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getNULLAccess().getNullKeyword_1(), null); 
                          
                    }

                    }
                    break;
                case 3 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10957:2: kw= 'null'
                    {
                    kw=(Token)input.LT(1);
                    match(input,17,FOLLOW_17_in_ruleNULL23877); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getNULLAccess().getNullKeyword_2(), null); 
                          
                    }

                    }
                    break;

            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
              	    lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruleNULL


    // $ANTLR start entryRuleTRUE
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10970:1: entryRuleTRUE returns [String current=null] : iv_ruleTRUE= ruleTRUE EOF ;
    public final String entryRuleTRUE() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleTRUE = null;


        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10971:2: (iv_ruleTRUE= ruleTRUE EOF )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10972:2: iv_ruleTRUE= ruleTRUE EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getTRUERule(), currentNode); 
            }
            pushFollow(FOLLOW_ruleTRUE_in_entryRuleTRUE23918);
            iv_ruleTRUE=ruleTRUE();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruleTRUE.getText(); 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleTRUE23929); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuleTRUE


    // $ANTLR start ruleTRUE
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10979:1: ruleTRUE returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (kw= 'TRUE' | kw= 'True' | kw= 'true' ) ;
    public final AntlrDatatypeRuleToken ruleTRUE() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;

         setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10984:6: ( (kw= 'TRUE' | kw= 'True' | kw= 'true' ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10985:1: (kw= 'TRUE' | kw= 'True' | kw= 'true' )
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10985:1: (kw= 'TRUE' | kw= 'True' | kw= 'true' )
            int alt189=3;
            switch ( input.LA(1) ) {
            case 242:
                {
                alt189=1;
                }
                break;
            case 243:
                {
                alt189=2;
                }
                break;
            case 244:
                {
                alt189=3;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("10985:1: (kw= 'TRUE' | kw= 'True' | kw= 'true' )", 189, 0, input);

                throw nvae;
            }

            switch (alt189) {
                case 1 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10986:2: kw= 'TRUE'
                    {
                    kw=(Token)input.LT(1);
                    match(input,242,FOLLOW_242_in_ruleTRUE23967); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getTRUEAccess().getTRUEKeyword_0(), null); 
                          
                    }

                    }
                    break;
                case 2 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:10993:2: kw= 'True'
                    {
                    kw=(Token)input.LT(1);
                    match(input,243,FOLLOW_243_in_ruleTRUE23986); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getTRUEAccess().getTrueKeyword_1(), null); 
                          
                    }

                    }
                    break;
                case 3 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:11000:2: kw= 'true'
                    {
                    kw=(Token)input.LT(1);
                    match(input,244,FOLLOW_244_in_ruleTRUE24005); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getTRUEAccess().getTrueKeyword_2(), null); 
                          
                    }

                    }
                    break;

            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
              	    lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruleTRUE


    // $ANTLR start entryRuleFALSE
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:11013:1: entryRuleFALSE returns [String current=null] : iv_ruleFALSE= ruleFALSE EOF ;
    public final String entryRuleFALSE() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleFALSE = null;


        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:11014:2: (iv_ruleFALSE= ruleFALSE EOF )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:11015:2: iv_ruleFALSE= ruleFALSE EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getFALSERule(), currentNode); 
            }
            pushFollow(FOLLOW_ruleFALSE_in_entryRuleFALSE24046);
            iv_ruleFALSE=ruleFALSE();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruleFALSE.getText(); 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleFALSE24057); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuleFALSE


    // $ANTLR start ruleFALSE
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:11022:1: ruleFALSE returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (kw= 'FALSE' | kw= 'False' | kw= 'false' ) ;
    public final AntlrDatatypeRuleToken ruleFALSE() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;

         setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:11027:6: ( (kw= 'FALSE' | kw= 'False' | kw= 'false' ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:11028:1: (kw= 'FALSE' | kw= 'False' | kw= 'false' )
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:11028:1: (kw= 'FALSE' | kw= 'False' | kw= 'false' )
            int alt190=3;
            switch ( input.LA(1) ) {
            case 245:
                {
                alt190=1;
                }
                break;
            case 246:
                {
                alt190=2;
                }
                break;
            case 247:
                {
                alt190=3;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("11028:1: (kw= 'FALSE' | kw= 'False' | kw= 'false' )", 190, 0, input);

                throw nvae;
            }

            switch (alt190) {
                case 1 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:11029:2: kw= 'FALSE'
                    {
                    kw=(Token)input.LT(1);
                    match(input,245,FOLLOW_245_in_ruleFALSE24095); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getFALSEAccess().getFALSEKeyword_0(), null); 
                          
                    }

                    }
                    break;
                case 2 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:11036:2: kw= 'False'
                    {
                    kw=(Token)input.LT(1);
                    match(input,246,FOLLOW_246_in_ruleFALSE24114); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getFALSEAccess().getFalseKeyword_1(), null); 
                          
                    }

                    }
                    break;
                case 3 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:11043:2: kw= 'false'
                    {
                    kw=(Token)input.LT(1);
                    match(input,247,FOLLOW_247_in_ruleFALSE24133); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getFALSEAccess().getFalseKeyword_2(), null); 
                          
                    }

                    }
                    break;

            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
              	    lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruleFALSE


    // $ANTLR start entryRuleEMPTY
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:11056:1: entryRuleEMPTY returns [String current=null] : iv_ruleEMPTY= ruleEMPTY EOF ;
    public final String entryRuleEMPTY() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleEMPTY = null;


        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:11057:2: (iv_ruleEMPTY= ruleEMPTY EOF )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:11058:2: iv_ruleEMPTY= ruleEMPTY EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getEMPTYRule(), currentNode); 
            }
            pushFollow(FOLLOW_ruleEMPTY_in_entryRuleEMPTY24174);
            iv_ruleEMPTY=ruleEMPTY();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruleEMPTY.getText(); 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleEMPTY24185); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuleEMPTY


    // $ANTLR start ruleEMPTY
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:11065:1: ruleEMPTY returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (kw= 'EMPTY' | kw= 'Empty' | kw= 'empty' ) ;
    public final AntlrDatatypeRuleToken ruleEMPTY() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;

         setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:11070:6: ( (kw= 'EMPTY' | kw= 'Empty' | kw= 'empty' ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:11071:1: (kw= 'EMPTY' | kw= 'Empty' | kw= 'empty' )
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:11071:1: (kw= 'EMPTY' | kw= 'Empty' | kw= 'empty' )
            int alt191=3;
            switch ( input.LA(1) ) {
            case 248:
                {
                alt191=1;
                }
                break;
            case 249:
                {
                alt191=2;
                }
                break;
            case 18:
                {
                alt191=3;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("11071:1: (kw= 'EMPTY' | kw= 'Empty' | kw= 'empty' )", 191, 0, input);

                throw nvae;
            }

            switch (alt191) {
                case 1 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:11072:2: kw= 'EMPTY'
                    {
                    kw=(Token)input.LT(1);
                    match(input,248,FOLLOW_248_in_ruleEMPTY24223); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getEMPTYAccess().getEMPTYKeyword_0(), null); 
                          
                    }

                    }
                    break;
                case 2 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:11079:2: kw= 'Empty'
                    {
                    kw=(Token)input.LT(1);
                    match(input,249,FOLLOW_249_in_ruleEMPTY24242); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getEMPTYAccess().getEmptyKeyword_1(), null); 
                          
                    }

                    }
                    break;
                case 3 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:11086:2: kw= 'empty'
                    {
                    kw=(Token)input.LT(1);
                    match(input,18,FOLLOW_18_in_ruleEMPTY24261); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getEMPTYAccess().getEmptyKeyword_2(), null); 
                          
                    }

                    }
                    break;

            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
              	    lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruleEMPTY


    // $ANTLR start entryRuleIdOrKeyword
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:11099:1: entryRuleIdOrKeyword returns [String current=null] : iv_ruleIdOrKeyword= ruleIdOrKeyword EOF ;
    public final String entryRuleIdOrKeyword() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleIdOrKeyword = null;


        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:11100:2: (iv_ruleIdOrKeyword= ruleIdOrKeyword EOF )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:11101:2: iv_ruleIdOrKeyword= ruleIdOrKeyword EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getIdOrKeywordRule(), currentNode); 
            }
            pushFollow(FOLLOW_ruleIdOrKeyword_in_entryRuleIdOrKeyword24302);
            iv_ruleIdOrKeyword=ruleIdOrKeyword();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruleIdOrKeyword.getText(); 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleIdOrKeyword24313); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuleIdOrKeyword


    // $ANTLR start ruleIdOrKeyword
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:11108:1: ruleIdOrKeyword returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (this_ID_0= RULE_ID | this_Keyword_1= ruleKeyword ) ;
    public final AntlrDatatypeRuleToken ruleIdOrKeyword() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token this_ID_0=null;
        AntlrDatatypeRuleToken this_Keyword_1 = null;


         setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:11113:6: ( (this_ID_0= RULE_ID | this_Keyword_1= ruleKeyword ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:11114:1: (this_ID_0= RULE_ID | this_Keyword_1= ruleKeyword )
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:11114:1: (this_ID_0= RULE_ID | this_Keyword_1= ruleKeyword )
            int alt192=2;
            int LA192_0 = input.LA(1);

            if ( (LA192_0==RULE_ID) ) {
                alt192=1;
            }
            else if ( (LA192_0==23||(LA192_0>=25 && LA192_0<=26)||LA192_0==30||LA192_0==38||LA192_0==40||LA192_0==59||LA192_0==91||LA192_0==179||LA192_0==191||LA192_0==194||LA192_0==197||LA192_0==209||LA192_0==221) ) {
                alt192=2;
            }
            else {
                if (backtracking>0) {failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("11114:1: (this_ID_0= RULE_ID | this_Keyword_1= ruleKeyword )", 192, 0, input);

                throw nvae;
            }
            switch (alt192) {
                case 1 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:11114:6: this_ID_0= RULE_ID
                    {
                    this_ID_0=(Token)input.LT(1);
                    match(input,RULE_ID,FOLLOW_RULE_ID_in_ruleIdOrKeyword24353); if (failed) return current;
                    if ( backtracking==0 ) {

                      		current.merge(this_ID_0);
                          
                    }
                    if ( backtracking==0 ) {
                       
                          createLeafNode(grammarAccess.getIdOrKeywordAccess().getIDTerminalRuleCall_0(), null); 
                          
                    }

                    }
                    break;
                case 2 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:11123:5: this_Keyword_1= ruleKeyword
                    {
                    if ( backtracking==0 ) {
                       
                              currentNode=createCompositeNode(grammarAccess.getIdOrKeywordAccess().getKeywordParserRuleCall_1(), currentNode); 
                          
                    }
                    pushFollow(FOLLOW_ruleKeyword_in_ruleIdOrKeyword24386);
                    this_Keyword_1=ruleKeyword();
                    _fsp--;
                    if (failed) return current;
                    if ( backtracking==0 ) {

                      		current.merge(this_Keyword_1);
                          
                    }
                    if ( backtracking==0 ) {
                       
                              currentNode = currentNode.getParent();
                          
                    }

                    }
                    break;

            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
              	    lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruleIdOrKeyword


    // $ANTLR start entryRuleKeyword
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:11141:1: entryRuleKeyword returns [String current=null] : iv_ruleKeyword= ruleKeyword EOF ;
    public final String entryRuleKeyword() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleKeyword = null;


        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:11142:2: (iv_ruleKeyword= ruleKeyword EOF )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:11143:2: iv_ruleKeyword= ruleKeyword EOF
            {
            if ( backtracking==0 ) {
               currentNode = createCompositeNode(grammarAccess.getKeywordRule(), currentNode); 
            }
            pushFollow(FOLLOW_ruleKeyword_in_entryRuleKeyword24432);
            iv_ruleKeyword=ruleKeyword();
            _fsp--;
            if (failed) return current;
            if ( backtracking==0 ) {
               current =iv_ruleKeyword.getText(); 
            }
            match(input,EOF,FOLLOW_EOF_in_entryRuleKeyword24443); if (failed) return current;

            }

        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end entryRuleKeyword


    // $ANTLR start ruleKeyword
    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:11150:1: ruleKeyword returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (kw= 'all' | kw= 'length' | kw= 'char' | kw= 'type' | kw= 'file' | kw= 'text' | kw= 'title' | kw= 'max' | kw= 'when' | kw= 'member' | kw= 'end' | kw= 'object' | kw= 'date' | kw= 'then' ) ;
    public final AntlrDatatypeRuleToken ruleKeyword() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;

         setCurrentLookahead(); resetLookahead(); 
            
        try {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:11155:6: ( (kw= 'all' | kw= 'length' | kw= 'char' | kw= 'type' | kw= 'file' | kw= 'text' | kw= 'title' | kw= 'max' | kw= 'when' | kw= 'member' | kw= 'end' | kw= 'object' | kw= 'date' | kw= 'then' ) )
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:11156:1: (kw= 'all' | kw= 'length' | kw= 'char' | kw= 'type' | kw= 'file' | kw= 'text' | kw= 'title' | kw= 'max' | kw= 'when' | kw= 'member' | kw= 'end' | kw= 'object' | kw= 'date' | kw= 'then' )
            {
            // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:11156:1: (kw= 'all' | kw= 'length' | kw= 'char' | kw= 'type' | kw= 'file' | kw= 'text' | kw= 'title' | kw= 'max' | kw= 'when' | kw= 'member' | kw= 'end' | kw= 'object' | kw= 'date' | kw= 'then' )
            int alt193=14;
            switch ( input.LA(1) ) {
            case 209:
                {
                alt193=1;
                }
                break;
            case 59:
                {
                alt193=2;
                }
                break;
            case 30:
                {
                alt193=3;
                }
                break;
            case 40:
                {
                alt193=4;
                }
                break;
            case 25:
                {
                alt193=5;
                }
                break;
            case 23:
                {
                alt193=6;
                }
                break;
            case 38:
                {
                alt193=7;
                }
                break;
            case 221:
                {
                alt193=8;
                }
                break;
            case 194:
                {
                alt193=9;
                }
                break;
            case 179:
                {
                alt193=10;
                }
                break;
            case 191:
                {
                alt193=11;
                }
                break;
            case 91:
                {
                alt193=12;
                }
                break;
            case 26:
                {
                alt193=13;
                }
                break;
            case 197:
                {
                alt193=14;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("11156:1: (kw= 'all' | kw= 'length' | kw= 'char' | kw= 'type' | kw= 'file' | kw= 'text' | kw= 'title' | kw= 'max' | kw= 'when' | kw= 'member' | kw= 'end' | kw= 'object' | kw= 'date' | kw= 'then' )", 193, 0, input);

                throw nvae;
            }

            switch (alt193) {
                case 1 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:11157:2: kw= 'all'
                    {
                    kw=(Token)input.LT(1);
                    match(input,209,FOLLOW_209_in_ruleKeyword24481); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getKeywordAccess().getAllKeyword_0(), null); 
                          
                    }

                    }
                    break;
                case 2 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:11164:2: kw= 'length'
                    {
                    kw=(Token)input.LT(1);
                    match(input,59,FOLLOW_59_in_ruleKeyword24500); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getKeywordAccess().getLengthKeyword_1(), null); 
                          
                    }

                    }
                    break;
                case 3 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:11171:2: kw= 'char'
                    {
                    kw=(Token)input.LT(1);
                    match(input,30,FOLLOW_30_in_ruleKeyword24519); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getKeywordAccess().getCharKeyword_2(), null); 
                          
                    }

                    }
                    break;
                case 4 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:11178:2: kw= 'type'
                    {
                    kw=(Token)input.LT(1);
                    match(input,40,FOLLOW_40_in_ruleKeyword24538); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getKeywordAccess().getTypeKeyword_3(), null); 
                          
                    }

                    }
                    break;
                case 5 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:11185:2: kw= 'file'
                    {
                    kw=(Token)input.LT(1);
                    match(input,25,FOLLOW_25_in_ruleKeyword24557); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getKeywordAccess().getFileKeyword_4(), null); 
                          
                    }

                    }
                    break;
                case 6 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:11192:2: kw= 'text'
                    {
                    kw=(Token)input.LT(1);
                    match(input,23,FOLLOW_23_in_ruleKeyword24576); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getKeywordAccess().getTextKeyword_5(), null); 
                          
                    }

                    }
                    break;
                case 7 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:11199:2: kw= 'title'
                    {
                    kw=(Token)input.LT(1);
                    match(input,38,FOLLOW_38_in_ruleKeyword24595); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getKeywordAccess().getTitleKeyword_6(), null); 
                          
                    }

                    }
                    break;
                case 8 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:11206:2: kw= 'max'
                    {
                    kw=(Token)input.LT(1);
                    match(input,221,FOLLOW_221_in_ruleKeyword24614); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getKeywordAccess().getMaxKeyword_7(), null); 
                          
                    }

                    }
                    break;
                case 9 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:11213:2: kw= 'when'
                    {
                    kw=(Token)input.LT(1);
                    match(input,194,FOLLOW_194_in_ruleKeyword24633); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getKeywordAccess().getWhenKeyword_8(), null); 
                          
                    }

                    }
                    break;
                case 10 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:11220:2: kw= 'member'
                    {
                    kw=(Token)input.LT(1);
                    match(input,179,FOLLOW_179_in_ruleKeyword24652); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getKeywordAccess().getMemberKeyword_9(), null); 
                          
                    }

                    }
                    break;
                case 11 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:11227:2: kw= 'end'
                    {
                    kw=(Token)input.LT(1);
                    match(input,191,FOLLOW_191_in_ruleKeyword24671); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getKeywordAccess().getEndKeyword_10(), null); 
                          
                    }

                    }
                    break;
                case 12 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:11234:2: kw= 'object'
                    {
                    kw=(Token)input.LT(1);
                    match(input,91,FOLLOW_91_in_ruleKeyword24690); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getKeywordAccess().getObjectKeyword_11(), null); 
                          
                    }

                    }
                    break;
                case 13 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:11241:2: kw= 'date'
                    {
                    kw=(Token)input.LT(1);
                    match(input,26,FOLLOW_26_in_ruleKeyword24709); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getKeywordAccess().getDateKeyword_12(), null); 
                          
                    }

                    }
                    break;
                case 14 :
                    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:11248:2: kw= 'then'
                    {
                    kw=(Token)input.LT(1);
                    match(input,197,FOLLOW_197_in_ruleKeyword24728); if (failed) return current;
                    if ( backtracking==0 ) {

                              current.merge(kw);
                              createLeafNode(grammarAccess.getKeywordAccess().getThenKeyword_13(), null); 
                          
                    }

                    }
                    break;

            }


            }

            if ( backtracking==0 ) {
               resetLookahead(); 
              	    lastConsumedNode = currentNode;
                  
            }
        }
         
            catch (RecognitionException re) { 
                recover(input,re); 
                appendSkippedTokens();
            } 
        finally {
        }
        return current;
    }
    // $ANTLR end ruleKeyword

    // $ANTLR start synpred1
    public final void synpred1_fragment() throws RecognitionException {   
        // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:98:3: ( RULE_LINEBREAK )
        // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:98:3: RULE_LINEBREAK
        {
        match(input,RULE_LINEBREAK,FOLLOW_RULE_LINEBREAK_in_synpred1126); if (failed) return ;

        }
    }
    // $ANTLR end synpred1

    // $ANTLR start synpred13
    public final void synpred13_fragment() throws RecognitionException {   
        // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:285:1: ( ( RULE_FIELDCOMMENT ) )
        // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:285:1: ( RULE_FIELDCOMMENT )
        {
        // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:285:1: ( RULE_FIELDCOMMENT )
        // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:286:3: RULE_FIELDCOMMENT
        {
        match(input,RULE_FIELDCOMMENT,FOLLOW_RULE_FIELDCOMMENT_in_synpred13519); if (failed) return ;

        }


        }
    }
    // $ANTLR end synpred13

    // $ANTLR start synpred15
    public final void synpred15_fragment() throws RecognitionException {   
        // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:439:4: ( ({...}? => ( ( ( 'unique' ) ) ) ) )
        // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:439:4: ({...}? => ( ( ( 'unique' ) ) ) )
        {
        // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:439:4: ({...}? => ( ( ( 'unique' ) ) ) )
        // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:440:5: {...}? => ( ( ( 'unique' ) ) )
        {
        if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getModifiersAccess().getUnorderedGroup(), 0) ) {
            if (backtracking>0) {failed=true; return ;}
            throw new FailedPredicateException(input, "synpred15", "getUnorderedGroupHelper().canSelect(grammarAccess.getModifiersAccess().getUnorderedGroup(), 0)");
        }
        // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:440:104: ( ( ( 'unique' ) ) )
        // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:441:6: ( ( 'unique' ) )
        {
        if ( backtracking==0 ) {
           
          	 				  getUnorderedGroupHelper().select(grammarAccess.getModifiersAccess().getUnorderedGroup(), 0);
          	 				
        }
        // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:444:6: ( ( 'unique' ) )
        // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:445:1: ( 'unique' )
        {
        // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:445:1: ( 'unique' )
        // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:446:3: 'unique'
        {
        match(input,14,FOLLOW_14_in_synpred15802); if (failed) return ;

        }


        }


        }


        }


        }
    }
    // $ANTLR end synpred15

    // $ANTLR start synpred16
    public final void synpred16_fragment() throws RecognitionException {   
        // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:472:4: ( ({...}? => ( ( ( 'fixed' ) ) ) ) )
        // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:472:4: ({...}? => ( ( ( 'fixed' ) ) ) )
        {
        // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:472:4: ({...}? => ( ( ( 'fixed' ) ) ) )
        // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:473:5: {...}? => ( ( ( 'fixed' ) ) )
        {
        if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getModifiersAccess().getUnorderedGroup(), 1) ) {
            if (backtracking>0) {failed=true; return ;}
            throw new FailedPredicateException(input, "synpred16", "getUnorderedGroupHelper().canSelect(grammarAccess.getModifiersAccess().getUnorderedGroup(), 1)");
        }
        // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:473:104: ( ( ( 'fixed' ) ) )
        // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:474:6: ( ( 'fixed' ) )
        {
        if ( backtracking==0 ) {
           
          	 				  getUnorderedGroupHelper().select(grammarAccess.getModifiersAccess().getUnorderedGroup(), 1);
          	 				
        }
        // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:477:6: ( ( 'fixed' ) )
        // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:478:1: ( 'fixed' )
        {
        // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:478:1: ( 'fixed' )
        // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:479:3: 'fixed'
        {
        match(input,15,FOLLOW_15_in_synpred16883); if (failed) return ;

        }


        }


        }


        }


        }
    }
    // $ANTLR end synpred16

    // $ANTLR start synpred17
    public final void synpred17_fragment() throws RecognitionException {   
        // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:505:4: ( ({...}? => ( ( ( ( 'not' ) ) 'null' ) ) ) )
        // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:505:4: ({...}? => ( ( ( ( 'not' ) ) 'null' ) ) )
        {
        // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:505:4: ({...}? => ( ( ( ( 'not' ) ) 'null' ) ) )
        // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:506:5: {...}? => ( ( ( ( 'not' ) ) 'null' ) )
        {
        if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getModifiersAccess().getUnorderedGroup(), 2) ) {
            if (backtracking>0) {failed=true; return ;}
            throw new FailedPredicateException(input, "synpred17", "getUnorderedGroupHelper().canSelect(grammarAccess.getModifiersAccess().getUnorderedGroup(), 2)");
        }
        // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:506:104: ( ( ( ( 'not' ) ) 'null' ) )
        // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:507:6: ( ( ( 'not' ) ) 'null' )
        {
        if ( backtracking==0 ) {
           
          	 				  getUnorderedGroupHelper().select(grammarAccess.getModifiersAccess().getUnorderedGroup(), 2);
          	 				
        }
        // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:510:6: ( ( ( 'not' ) ) 'null' )
        // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:510:7: ( ( 'not' ) ) 'null'
        {
        // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:510:7: ( ( 'not' ) )
        // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:511:1: ( 'not' )
        {
        // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:511:1: ( 'not' )
        // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:512:3: 'not'
        {
        match(input,16,FOLLOW_16_in_synpred17965); if (failed) return ;

        }


        }

        match(input,17,FOLLOW_17_in_synpred17988); if (failed) return ;

        }


        }


        }


        }
    }
    // $ANTLR end synpred17

    // $ANTLR start synpred18
    public final void synpred18_fragment() throws RecognitionException {   
        // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:542:4: ( ({...}? => ( ( ( ( 'not' ) ) 'empty' ) ) ) )
        // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:542:4: ({...}? => ( ( ( ( 'not' ) ) 'empty' ) ) )
        {
        // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:542:4: ({...}? => ( ( ( ( 'not' ) ) 'empty' ) ) )
        // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:543:5: {...}? => ( ( ( ( 'not' ) ) 'empty' ) )
        {
        if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getModifiersAccess().getUnorderedGroup(), 3) ) {
            if (backtracking>0) {failed=true; return ;}
            throw new FailedPredicateException(input, "synpred18", "getUnorderedGroupHelper().canSelect(grammarAccess.getModifiersAccess().getUnorderedGroup(), 3)");
        }
        // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:543:104: ( ( ( ( 'not' ) ) 'empty' ) )
        // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:544:6: ( ( ( 'not' ) ) 'empty' )
        {
        if ( backtracking==0 ) {
           
          	 				  getUnorderedGroupHelper().select(grammarAccess.getModifiersAccess().getUnorderedGroup(), 3);
          	 				
        }
        // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:547:6: ( ( ( 'not' ) ) 'empty' )
        // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:547:7: ( ( 'not' ) ) 'empty'
        {
        // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:547:7: ( ( 'not' ) )
        // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:548:1: ( 'not' )
        {
        // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:548:1: ( 'not' )
        // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:549:3: 'not'
        {
        match(input,16,FOLLOW_16_in_synpred181058); if (failed) return ;

        }


        }

        match(input,18,FOLLOW_18_in_synpred181081); if (failed) return ;

        }


        }


        }


        }
    }
    // $ANTLR end synpred18

    // $ANTLR start synpred92
    public final void synpred92_fragment() throws RecognitionException {   
        // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4020:2: ( ( ( ruleStatement ) ) )
        // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4020:2: ( ( ruleStatement ) )
        {
        // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4020:2: ( ( ruleStatement ) )
        // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4021:1: ( ruleStatement )
        {
        // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4021:1: ( ruleStatement )
        // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:4022:3: ruleStatement
        {
        if ( backtracking==0 ) {
           
          	        currentNode=createCompositeNode(grammarAccess.getFunctionBodyAccess().getSStatementParserRuleCall_1_0_0(), currentNode); 
          	    
        }
        pushFollow(FOLLOW_ruleStatement_in_synpred927789);
        ruleStatement();
        _fsp--;
        if (failed) return ;

        }


        }


        }
    }
    // $ANTLR end synpred92

    // $ANTLR start synpred155
    public final void synpred155_fragment() throws RecognitionException {   
        // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6738:2: ( ( ruleCASE ( ( ruleWhenClause ) )+ ( ( ruleElseClause ) )? ruleEND ) )
        // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6738:2: ( ruleCASE ( ( ruleWhenClause ) )+ ( ( ruleElseClause ) )? ruleEND )
        {
        // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6738:2: ( ruleCASE ( ( ruleWhenClause ) )+ ( ( ruleElseClause ) )? ruleEND )
        // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6738:3: ruleCASE ( ( ruleWhenClause ) )+ ( ( ruleElseClause ) )? ruleEND
        {
        pushFollow(FOLLOW_ruleCASE_in_synpred15512757);
        ruleCASE();
        _fsp--;
        if (failed) return ;
        // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6738:11: ( ( ruleWhenClause ) )+
        int cnt205=0;
        loop205:
        do {
            int alt205=2;
            int LA205_0 = input.LA(1);

            if ( ((LA205_0>=192 && LA205_0<=194)) ) {
                alt205=1;
            }


            switch (alt205) {
        	case 1 :
        	    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6739:1: ( ruleWhenClause )
        	    {
        	    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6739:1: ( ruleWhenClause )
        	    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6740:3: ruleWhenClause
        	    {
        	    if ( backtracking==0 ) {
        	       
        	      	        currentNode=createCompositeNode(grammarAccess.getCaseExpressionAccess().getWWhenClauseParserRuleCall_0_1_0(), currentNode); 
        	      	    
        	    }
        	    pushFollow(FOLLOW_ruleWhenClause_in_synpred15512770);
        	    ruleWhenClause();
        	    _fsp--;
        	    if (failed) return ;

        	    }


        	    }
        	    break;

        	default :
        	    if ( cnt205 >= 1 ) break loop205;
        	    if (backtracking>0) {failed=true; return ;}
                    EarlyExitException eee =
                        new EarlyExitException(205, input);
                    throw eee;
            }
            cnt205++;
        } while (true);

        // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6762:3: ( ( ruleElseClause ) )?
        int alt206=2;
        int LA206_0 = input.LA(1);

        if ( ((LA206_0>=198 && LA206_0<=200)) ) {
            alt206=1;
        }
        switch (alt206) {
            case 1 :
                // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6763:1: ( ruleElseClause )
                {
                // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6763:1: ( ruleElseClause )
                // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:6764:3: ruleElseClause
                {
                if ( backtracking==0 ) {
                   
                  	        currentNode=createCompositeNode(grammarAccess.getCaseExpressionAccess().getEElseClauseParserRuleCall_0_2_0(), currentNode); 
                  	    
                }
                pushFollow(FOLLOW_ruleElseClause_in_synpred15512792);
                ruleElseClause();
                _fsp--;
                if (failed) return ;

                }


                }
                break;

        }

        pushFollow(FOLLOW_ruleEND_in_synpred15512802);
        ruleEND();
        _fsp--;
        if (failed) return ;

        }


        }
    }
    // $ANTLR end synpred155

    // $ANTLR start synpred170
    public final void synpred170_fragment() throws RecognitionException {   
        // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7303:2: ( ruleExpressionOrVector )
        // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7303:2: ruleExpressionOrVector
        {
        if ( backtracking==0 ) {
           
          	  /* */ 
          	
        }
        pushFollow(FOLLOW_ruleExpressionOrVector_in_synpred17013754);
        ruleExpressionOrVector();
        _fsp--;
        if (failed) return ;

        }
    }
    // $ANTLR end synpred170

    // $ANTLR start synpred175
    public final void synpred175_fragment() throws RecognitionException {   
        // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7515:18: ( ( '.' ruleIdentifier ) )
        // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7515:18: ( '.' ruleIdentifier )
        {
        // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7515:18: ( '.' ruleIdentifier )
        // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7515:20: '.' ruleIdentifier
        {
        match(input,36,FOLLOW_36_in_synpred17514175); if (failed) return ;
        pushFollow(FOLLOW_ruleIdentifier_in_synpred17514184);
        ruleIdentifier();
        _fsp--;
        if (failed) return ;

        }


        }
    }
    // $ANTLR end synpred175

    // $ANTLR start synpred193
    public final void synpred193_fragment() throws RecognitionException {   
        // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7775:2: ( ( ( ( ruleExpression ) ) ( ',' ( ( ruleExpression ) ) )* ) )
        // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7775:2: ( ( ( ruleExpression ) ) ( ',' ( ( ruleExpression ) ) )* )
        {
        // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7775:2: ( ( ( ruleExpression ) ) ( ',' ( ( ruleExpression ) ) )* )
        // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7775:3: ( ( ruleExpression ) ) ( ',' ( ( ruleExpression ) ) )*
        {
        // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7775:3: ( ( ruleExpression ) )
        // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7776:1: ( ruleExpression )
        {
        // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7776:1: ( ruleExpression )
        // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7777:3: ruleExpression
        {
        if ( backtracking==0 ) {
           
          	        currentNode=createCompositeNode(grammarAccess.getCompoundExprAccess().getEExpressionParserRuleCall_2_1_0_0_0(), currentNode); 
          	    
        }
        pushFollow(FOLLOW_ruleExpression_in_synpred19314843);
        ruleExpression();
        _fsp--;
        if (failed) return ;

        }


        }

        // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7799:2: ( ',' ( ( ruleExpression ) ) )*
        loop216:
        do {
            int alt216=2;
            int LA216_0 = input.LA(1);

            if ( (LA216_0==28) ) {
                alt216=1;
            }


            switch (alt216) {
        	case 1 :
        	    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7799:4: ',' ( ( ruleExpression ) )
        	    {
        	    match(input,28,FOLLOW_28_in_synpred19314854); if (failed) return ;
        	    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7803:1: ( ( ruleExpression ) )
        	    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7804:1: ( ruleExpression )
        	    {
        	    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7804:1: ( ruleExpression )
        	    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7805:3: ruleExpression
        	    {
        	    if ( backtracking==0 ) {
        	       
        	      	        currentNode=createCompositeNode(grammarAccess.getCompoundExprAccess().getEExpressionParserRuleCall_2_1_0_1_1_0(), currentNode); 
        	      	    
        	    }
        	    pushFollow(FOLLOW_ruleExpression_in_synpred19314875);
        	    ruleExpression();
        	    _fsp--;
        	    if (failed) return ;

        	    }


        	    }


        	    }
        	    break;

        	default :
        	    break loop216;
            }
        } while (true);


        }


        }
    }
    // $ANTLR end synpred193

    // $ANTLR start synpred201
    public final void synpred201_fragment() throws RecognitionException {   
        // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7881:17: ( ( ( ( ruleExpression ) ) ( ( ',' ( ( ruleExpression ) ) )+ | ( ruleFROM ( ( ruleExpression ) ) ) | ( ruleAS ( ( ruleIdentifier ) ) ) )? ) )
        // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7881:17: ( ( ( ruleExpression ) ) ( ( ',' ( ( ruleExpression ) ) )+ | ( ruleFROM ( ( ruleExpression ) ) ) | ( ruleAS ( ( ruleIdentifier ) ) ) )? )
        {
        // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7881:17: ( ( ( ruleExpression ) ) ( ( ',' ( ( ruleExpression ) ) )+ | ( ruleFROM ( ( ruleExpression ) ) ) | ( ruleAS ( ( ruleIdentifier ) ) ) )? )
        // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7881:18: ( ( ruleExpression ) ) ( ( ',' ( ( ruleExpression ) ) )+ | ( ruleFROM ( ( ruleExpression ) ) ) | ( ruleAS ( ( ruleIdentifier ) ) ) )?
        {
        // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7881:18: ( ( ruleExpression ) )
        // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7882:1: ( ruleExpression )
        {
        // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7882:1: ( ruleExpression )
        // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7883:3: ruleExpression
        {
        if ( backtracking==0 ) {
           
          	        currentNode=createCompositeNode(grammarAccess.getExprListAccess().getEExpressionParserRuleCall_1_0_0_0(), currentNode); 
          	    
        }
        pushFollow(FOLLOW_ruleExpression_in_synpred20115029);
        ruleExpression();
        _fsp--;
        if (failed) return ;

        }


        }

        // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7905:2: ( ( ',' ( ( ruleExpression ) ) )+ | ( ruleFROM ( ( ruleExpression ) ) ) | ( ruleAS ( ( ruleIdentifier ) ) ) )?
        int alt219=4;
        switch ( input.LA(1) ) {
            case 28:
                {
                alt219=1;
                }
                break;
            case 92:
            case 93:
            case 94:
                {
                alt219=2;
                }
                break;
            case 128:
            case 129:
            case 130:
                {
                alt219=3;
                }
                break;
        }

        switch (alt219) {
            case 1 :
                // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7905:3: ( ',' ( ( ruleExpression ) ) )+
                {
                // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7905:3: ( ',' ( ( ruleExpression ) ) )+
                int cnt218=0;
                loop218:
                do {
                    int alt218=2;
                    int LA218_0 = input.LA(1);

                    if ( (LA218_0==28) ) {
                        alt218=1;
                    }


                    switch (alt218) {
                	case 1 :
                	    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7905:5: ',' ( ( ruleExpression ) )
                	    {
                	    match(input,28,FOLLOW_28_in_synpred20115041); if (failed) return ;
                	    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7909:1: ( ( ruleExpression ) )
                	    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7910:1: ( ruleExpression )
                	    {
                	    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7910:1: ( ruleExpression )
                	    // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7911:3: ruleExpression
                	    {
                	    if ( backtracking==0 ) {
                	       
                	      	        currentNode=createCompositeNode(grammarAccess.getExprListAccess().getEExpressionParserRuleCall_1_0_1_0_1_0(), currentNode); 
                	      	    
                	    }
                	    pushFollow(FOLLOW_ruleExpression_in_synpred20115062);
                	    ruleExpression();
                	    _fsp--;
                	    if (failed) return ;

                	    }


                	    }


                	    }
                	    break;

                	default :
                	    if ( cnt218 >= 1 ) break loop218;
                	    if (backtracking>0) {failed=true; return ;}
                            EarlyExitException eee =
                                new EarlyExitException(218, input);
                            throw eee;
                    }
                    cnt218++;
                } while (true);


                }
                break;
            case 2 :
                // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7934:6: ( ruleFROM ( ( ruleExpression ) ) )
                {
                // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7934:6: ( ruleFROM ( ( ruleExpression ) ) )
                // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7934:7: ruleFROM ( ( ruleExpression ) )
                {
                pushFollow(FOLLOW_ruleFROM_in_synpred20115080);
                ruleFROM();
                _fsp--;
                if (failed) return ;
                // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7934:15: ( ( ruleExpression ) )
                // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7935:1: ( ruleExpression )
                {
                // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7935:1: ( ruleExpression )
                // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7936:3: ruleExpression
                {
                if ( backtracking==0 ) {
                   
                  	        currentNode=createCompositeNode(grammarAccess.getExprListAccess().getEExpressionParserRuleCall_1_0_1_1_1_0(), currentNode); 
                  	    
                }
                pushFollow(FOLLOW_ruleExpression_in_synpred20115093);
                ruleExpression();
                _fsp--;
                if (failed) return ;

                }


                }


                }


                }
                break;
            case 3 :
                // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7959:6: ( ruleAS ( ( ruleIdentifier ) ) )
                {
                // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7959:6: ( ruleAS ( ( ruleIdentifier ) ) )
                // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7959:7: ruleAS ( ( ruleIdentifier ) )
                {
                pushFollow(FOLLOW_ruleAS_in_synpred20115110);
                ruleAS();
                _fsp--;
                if (failed) return ;
                // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7959:13: ( ( ruleIdentifier ) )
                // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7960:1: ( ruleIdentifier )
                {
                // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7960:1: ( ruleIdentifier )
                // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7961:3: ruleIdentifier
                {
                if ( backtracking==0 ) {
                   
                  	        currentNode=createCompositeNode(grammarAccess.getExprListAccess().getIdIdentifierParserRuleCall_1_0_1_2_1_0(), currentNode); 
                  	    
                }
                pushFollow(FOLLOW_ruleIdentifier_in_synpred20115123);
                ruleIdentifier();
                _fsp--;
                if (failed) return ;

                }


                }


                }


                }
                break;

        }


        }


        }
    }
    // $ANTLR end synpred201

    // $ANTLR start synpred202
    public final void synpred202_fragment() throws RecognitionException {   
        // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7984:6: ( ( ruleFROM ( ( ruleExpression ) ) ) )
        // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7984:6: ( ruleFROM ( ( ruleExpression ) ) )
        {
        // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7984:6: ( ruleFROM ( ( ruleExpression ) ) )
        // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7984:7: ruleFROM ( ( ruleExpression ) )
        {
        pushFollow(FOLLOW_ruleFROM_in_synpred20215143);
        ruleFROM();
        _fsp--;
        if (failed) return ;
        // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7984:15: ( ( ruleExpression ) )
        // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7985:1: ( ruleExpression )
        {
        // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7985:1: ( ruleExpression )
        // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:7986:3: ruleExpression
        {
        if ( backtracking==0 ) {
           
          	        currentNode=createCompositeNode(grammarAccess.getExprListAccess().getEExpressionParserRuleCall_1_1_1_0(), currentNode); 
          	    
        }
        pushFollow(FOLLOW_ruleExpression_in_synpred20215156);
        ruleExpression();
        _fsp--;
        if (failed) return ;

        }


        }


        }


        }
    }
    // $ANTLR end synpred202

    // $ANTLR start synpred249
    public final void synpred249_fragment() throws RecognitionException {   
        // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8423:6: ( ( ( '.' ( RULE_INT )? ( 'e' ( '+' | '-' )? RULE_INT )? ( 'f' | 'd' )? ) | ( 'e' ( '+' | '-' )? RULE_INT ( 'f' | 'd' )? ) | 'f' | 'd' ) )
        // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8423:6: ( ( '.' ( RULE_INT )? ( 'e' ( '+' | '-' )? RULE_INT )? ( 'f' | 'd' )? ) | ( 'e' ( '+' | '-' )? RULE_INT ( 'f' | 'd' )? ) | 'f' | 'd' )
        {
        // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8423:6: ( ( '.' ( RULE_INT )? ( 'e' ( '+' | '-' )? RULE_INT )? ( 'f' | 'd' )? ) | ( 'e' ( '+' | '-' )? RULE_INT ( 'f' | 'd' )? ) | 'f' | 'd' )
        int alt242=4;
        switch ( input.LA(1) ) {
        case 36:
            {
            alt242=1;
            }
            break;
        case 76:
            {
            alt242=2;
            }
            break;
        case 77:
            {
            alt242=3;
            }
            break;
        case 78:
            {
            alt242=4;
            }
            break;
        default:
            if (backtracking>0) {failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("8423:6: ( ( '.' ( RULE_INT )? ( 'e' ( '+' | '-' )? RULE_INT )? ( 'f' | 'd' )? ) | ( 'e' ( '+' | '-' )? RULE_INT ( 'f' | 'd' )? ) | 'f' | 'd' )", 242, 0, input);

            throw nvae;
        }

        switch (alt242) {
            case 1 :
                // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8423:7: ( '.' ( RULE_INT )? ( 'e' ( '+' | '-' )? RULE_INT )? ( 'f' | 'd' )? )
                {
                // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8423:7: ( '.' ( RULE_INT )? ( 'e' ( '+' | '-' )? RULE_INT )? ( 'f' | 'd' )? )
                // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8424:2: '.' ( RULE_INT )? ( 'e' ( '+' | '-' )? RULE_INT )? ( 'f' | 'd' )?
                {
                match(input,36,FOLLOW_36_in_synpred24916376); if (failed) return ;
                // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8429:1: ( RULE_INT )?
                int alt236=2;
                int LA236_0 = input.LA(1);

                if ( (LA236_0==RULE_INT) ) {
                    alt236=1;
                }
                switch (alt236) {
                    case 1 :
                        // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8429:6: RULE_INT
                        {
                        match(input,RULE_INT,FOLLOW_RULE_INT_in_synpred24916392); if (failed) return ;

                        }
                        break;

                }

                // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8436:3: ( 'e' ( '+' | '-' )? RULE_INT )?
                int alt238=2;
                int LA238_0 = input.LA(1);

                if ( (LA238_0==76) ) {
                    alt238=1;
                }
                switch (alt238) {
                    case 1 :
                        // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8437:2: 'e' ( '+' | '-' )? RULE_INT
                        {
                        match(input,76,FOLLOW_76_in_synpred24916413); if (failed) return ;
                        // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8442:1: ( '+' | '-' )?
                        int alt237=2;
                        int LA237_0 = input.LA(1);

                        if ( ((LA237_0>=56 && LA237_0<=57)) ) {
                            alt237=1;
                        }
                        switch (alt237) {
                            case 1 :
                                // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:
                                {
                                if ( (input.LA(1)>=56 && input.LA(1)<=57) ) {
                                    input.consume();
                                    errorRecovery=false;failed=false;
                                }
                                else {
                                    if (backtracking>0) {failed=true; return ;}
                                    MismatchedSetException mse =
                                        new MismatchedSetException(null,input);
                                    recoverFromMismatchedSet(input,mse,FOLLOW_set_in_synpred24916422);    throw mse;
                                }


                                }
                                break;

                        }

                        match(input,RULE_INT,FOLLOW_RULE_INT_in_synpred24916463); if (failed) return ;

                        }
                        break;

                }

                // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8462:3: ( 'f' | 'd' )?
                int alt239=2;
                int LA239_0 = input.LA(1);

                if ( ((LA239_0>=77 && LA239_0<=78)) ) {
                    alt239=1;
                }
                switch (alt239) {
                    case 1 :
                        // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:
                        {
                        if ( (input.LA(1)>=77 && input.LA(1)<=78) ) {
                            input.consume();
                            errorRecovery=false;failed=false;
                        }
                        else {
                            if (backtracking>0) {failed=true; return ;}
                            MismatchedSetException mse =
                                new MismatchedSetException(null,input);
                            recoverFromMismatchedSet(input,mse,FOLLOW_set_in_synpred24916479);    throw mse;
                        }


                        }
                        break;

                }


                }


                }
                break;
            case 2 :
                // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8476:6: ( 'e' ( '+' | '-' )? RULE_INT ( 'f' | 'd' )? )
                {
                // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8476:6: ( 'e' ( '+' | '-' )? RULE_INT ( 'f' | 'd' )? )
                // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8477:2: 'e' ( '+' | '-' )? RULE_INT ( 'f' | 'd' )?
                {
                match(input,76,FOLLOW_76_in_synpred24916526); if (failed) return ;
                // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8482:1: ( '+' | '-' )?
                int alt240=2;
                int LA240_0 = input.LA(1);

                if ( ((LA240_0>=56 && LA240_0<=57)) ) {
                    alt240=1;
                }
                switch (alt240) {
                    case 1 :
                        // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:
                        {
                        if ( (input.LA(1)>=56 && input.LA(1)<=57) ) {
                            input.consume();
                            errorRecovery=false;failed=false;
                        }
                        else {
                            if (backtracking>0) {failed=true; return ;}
                            MismatchedSetException mse =
                                new MismatchedSetException(null,input);
                            recoverFromMismatchedSet(input,mse,FOLLOW_set_in_synpred24916535);    throw mse;
                        }


                        }
                        break;

                }

                match(input,RULE_INT,FOLLOW_RULE_INT_in_synpred24916576); if (failed) return ;
                // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8502:1: ( 'f' | 'd' )?
                int alt241=2;
                int LA241_0 = input.LA(1);

                if ( ((LA241_0>=77 && LA241_0<=78)) ) {
                    alt241=1;
                }
                switch (alt241) {
                    case 1 :
                        // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:
                        {
                        if ( (input.LA(1)>=77 && input.LA(1)<=78) ) {
                            input.consume();
                            errorRecovery=false;failed=false;
                        }
                        else {
                            if (backtracking>0) {failed=true; return ;}
                            MismatchedSetException mse =
                                new MismatchedSetException(null,input);
                            recoverFromMismatchedSet(input,mse,FOLLOW_set_in_synpred24916590);    throw mse;
                        }


                        }
                        break;

                }


                }


                }
                break;
            case 3 :
                // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8517:2: 'f'
                {
                match(input,77,FOLLOW_77_in_synpred24916636); if (failed) return ;

                }
                break;
            case 4 :
                // ../org.makumba.devel.eclipse.mdd/src-gen/org/makumba/devel/eclipse/mdd/parser/antlr/internal/InternalMDD.g:8524:2: 'd'
                {
                match(input,78,FOLLOW_78_in_synpred24916655); if (failed) return ;

                }
                break;

        }


        }
    }
    // $ANTLR end synpred249

    public final boolean synpred92() {
        backtracking++;
        int start = input.mark();
        try {
            synpred92_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred18() {
        backtracking++;
        int start = input.mark();
        try {
            synpred18_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred1() {
        backtracking++;
        int start = input.mark();
        try {
            synpred1_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred170() {
        backtracking++;
        int start = input.mark();
        try {
            synpred170_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred201() {
        backtracking++;
        int start = input.mark();
        try {
            synpred201_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred175() {
        backtracking++;
        int start = input.mark();
        try {
            synpred175_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred202() {
        backtracking++;
        int start = input.mark();
        try {
            synpred202_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred15() {
        backtracking++;
        int start = input.mark();
        try {
            synpred15_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred16() {
        backtracking++;
        int start = input.mark();
        try {
            synpred16_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred249() {
        backtracking++;
        int start = input.mark();
        try {
            synpred249_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred17() {
        backtracking++;
        int start = input.mark();
        try {
            synpred17_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred155() {
        backtracking++;
        int start = input.mark();
        try {
            synpred155_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred193() {
        backtracking++;
        int start = input.mark();
        try {
            synpred193_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred13() {
        backtracking++;
        int start = input.mark();
        try {
            synpred13_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }


    protected DFA4 dfa4 = new DFA4(this);
    protected DFA41 dfa41 = new DFA41(this);
    protected DFA97 dfa97 = new DFA97(this);
    protected DFA112 dfa112 = new DFA112(this);
    static final String DFA4_eotS =
        "\4\uffff";
    static final String DFA4_eofS =
        "\2\2\2\uffff";
    static final String DFA4_minS =
        "\2\4\2\uffff";
    static final String DFA4_maxS =
        "\1\4\1\u00dd\2\uffff";
    static final String DFA4_acceptS =
        "\2\uffff\1\2\1\1";
    static final String DFA4_specialS =
        "\4\uffff}>";
    static final String[] DFA4_transitionS = {
            "\1\1",
            "\1\1\1\uffff\1\3\7\uffff\1\3\10\uffff\1\3\1\uffff\2\3\3\uffff"+
            "\1\3\6\uffff\2\3\1\uffff\2\3\20\uffff\3\3\36\uffff\1\3\127\uffff"+
            "\1\3\13\uffff\1\3\2\uffff\1\3\2\uffff\1\3\13\uffff\1\3\13\uffff"+
            "\1\3",
            "",
            ""
    };

    static final short[] DFA4_eot = DFA.unpackEncodedString(DFA4_eotS);
    static final short[] DFA4_eof = DFA.unpackEncodedString(DFA4_eofS);
    static final char[] DFA4_min = DFA.unpackEncodedStringToUnsignedChars(DFA4_minS);
    static final char[] DFA4_max = DFA.unpackEncodedStringToUnsignedChars(DFA4_maxS);
    static final short[] DFA4_accept = DFA.unpackEncodedString(DFA4_acceptS);
    static final short[] DFA4_special = DFA.unpackEncodedString(DFA4_specialS);
    static final short[][] DFA4_transition;

    static {
        int numStates = DFA4_transitionS.length;
        DFA4_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA4_transition[i] = DFA.unpackEncodedString(DFA4_transitionS[i]);
        }
    }

    class DFA4 extends DFA {

        public DFA4(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 4;
            this.eot = DFA4_eot;
            this.eof = DFA4_eof;
            this.min = DFA4_min;
            this.max = DFA4_max;
            this.accept = DFA4_accept;
            this.special = DFA4_special;
            this.transition = DFA4_transition;
        }
        public String getDescription() {
            return "()* loopback of 126:3: ( ( RULE_LINEBREAK )+ ( (lv_d_3_0= ruleDeclaration ) ) )*";
        }
    }
    static final String DFA41_eotS =
        "\135\uffff";
    static final String DFA41_eofS =
        "\135\uffff";
    static final String DFA41_minS =
        "\1\6\1\uffff\3\6\1\uffff\7\6\31\0\2\6\23\15\3\6\3\15\3\6\31\15";
    static final String DFA41_maxS =
        "\1\u00f9\1\uffff\3\u00c2\1\uffff\3\u00c2\3\u00e6\1\6\31\0\1\u00f9"+
        "\1\6\23\u00b3\3\u00c2\3\u00b3\2\u00c2\1\6\31\u00b3";
    static final String DFA41_acceptS =
        "\1\uffff\1\1\3\uffff\1\2\127\uffff";
    static final String DFA41_specialS =
        "\15\uffff\1\24\1\26\1\30\1\1\1\0\1\5\1\3\1\12\1\7\1\20\1\16\1\22"+
        "\1\21\1\11\1\14\1\13\1\6\1\4\1\2\1\17\1\15\1\10\1\27\1\25\1\23\67"+
        "\uffff}>";
    static final String[] DFA41_transitionS = {
            "\5\5\5\uffff\3\5\7\uffff\1\5\2\uffff\1\1\6\uffff\1\5\1\uffff"+
            "\3\5\1\uffff\2\5\1\uffff\1\5\10\uffff\4\5\1\uffff\1\5\2\uffff"+
            "\2\5\13\uffff\4\5\1\uffff\3\1\11\uffff\1\2\1\3\1\4\36\uffff"+
            "\3\5\6\uffff\6\1\22\uffff\3\1\6\uffff\2\5\10\uffff\3\5\6\uffff"+
            "\11\5\6\uffff\36\5\11\uffff\12\5",
            "",
            "\1\1\6\uffff\1\5\2\uffff\1\5\11\uffff\1\1\2\uffff\1\5\2\uffff"+
            "\1\5\3\uffff\1\5\1\uffff\3\1\1\uffff\1\1\1\5\1\uffff\1\1\5\5"+
            "\1\uffff\2\5\2\1\2\5\1\uffff\1\1\14\uffff\3\5\4\1\15\uffff\3"+
            "\1\30\uffff\1\11\1\12\1\13\47\uffff\20\5\1\6\1\7\1\10\11\uffff"+
            "\6\1",
            "\1\1\6\uffff\1\5\2\uffff\1\5\11\uffff\1\1\2\uffff\1\5\2\uffff"+
            "\1\5\3\uffff\1\5\1\uffff\3\1\1\uffff\1\1\1\5\1\uffff\1\1\5\5"+
            "\1\uffff\2\5\2\1\2\5\1\uffff\1\1\14\uffff\3\5\4\1\15\uffff\3"+
            "\1\30\uffff\1\11\1\12\1\13\47\uffff\20\5\1\6\1\7\1\10\11\uffff"+
            "\6\1",
            "\1\1\6\uffff\1\5\2\uffff\1\5\11\uffff\1\1\2\uffff\1\5\2\uffff"+
            "\1\5\3\uffff\1\5\1\uffff\3\1\1\uffff\1\1\1\5\1\uffff\1\1\5\5"+
            "\1\uffff\2\5\2\1\2\5\1\uffff\1\1\14\uffff\3\5\4\1\15\uffff\3"+
            "\1\30\uffff\1\11\1\12\1\13\47\uffff\20\5\1\6\1\7\1\10\11\uffff"+
            "\6\1",
            "",
            "\1\15\23\uffff\1\25\1\uffff\2\1\6\uffff\1\1\1\uffff\1\26\1\30"+
            "\1\27\1\uffff\1\21\2\uffff\1\22\10\uffff\1\23\1\24\3\uffff\1"+
            "\31\17\uffff\1\14\1\16\1\17\1\20\15\uffff\1\40\1\41\1\42\6\1"+
            "\3\uffff\14\1\3\uffff\3\1\6\uffff\3\1\3\uffff\6\1\22\uffff\3"+
            "\1\20\uffff\1\43\1\44\1\45\3\5\6\uffff\1\32\1\33\1\34\1\35\1"+
            "\36\1\37",
            "\1\15\23\uffff\1\25\1\uffff\2\1\6\uffff\1\1\1\uffff\1\26\1\30"+
            "\1\27\1\uffff\1\21\2\uffff\1\22\10\uffff\1\23\1\24\3\uffff\1"+
            "\31\17\uffff\1\14\1\16\1\17\1\20\15\uffff\1\40\1\41\1\42\6\1"+
            "\3\uffff\14\1\3\uffff\3\1\6\uffff\3\1\3\uffff\6\1\22\uffff\3"+
            "\1\20\uffff\1\43\1\44\1\45\3\5\6\uffff\1\32\1\33\1\34\1\35\1"+
            "\36\1\37",
            "\1\15\23\uffff\1\25\1\uffff\2\1\6\uffff\1\1\1\uffff\1\26\1\30"+
            "\1\27\1\uffff\1\21\2\uffff\1\22\10\uffff\1\23\1\24\3\uffff\1"+
            "\31\17\uffff\1\14\1\16\1\17\1\20\15\uffff\1\40\1\41\1\42\6\1"+
            "\3\uffff\14\1\3\uffff\3\1\6\uffff\3\1\3\uffff\6\1\22\uffff\3"+
            "\1\20\uffff\1\43\1\44\1\45\3\5\6\uffff\1\32\1\33\1\34\1\35\1"+
            "\36\1\37",
            "\1\5\23\uffff\1\5\13\uffff\3\5\1\uffff\1\5\1\46\1\uffff\1\5"+
            "\10\uffff\2\5\3\uffff\1\5\17\uffff\4\5\15\uffff\3\5\36\uffff"+
            "\3\5\61\uffff\3\5\11\uffff\6\5\41\uffff\3\5",
            "\1\5\23\uffff\1\5\13\uffff\3\5\1\uffff\1\5\1\46\1\uffff\1\5"+
            "\10\uffff\2\5\3\uffff\1\5\17\uffff\4\5\15\uffff\3\5\36\uffff"+
            "\3\5\61\uffff\3\5\11\uffff\6\5\41\uffff\3\5",
            "\1\5\23\uffff\1\5\13\uffff\3\5\1\uffff\1\5\1\46\1\uffff\1\5"+
            "\10\uffff\2\5\3\uffff\1\5\17\uffff\4\5\15\uffff\3\5\36\uffff"+
            "\3\5\61\uffff\3\5\11\uffff\6\5\41\uffff\3\5",
            "\1\15",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\50\4\5\5\uffff\3\5\7\uffff\1\60\11\uffff\1\5\1\uffff\1\61"+
            "\1\63\1\62\1\uffff\1\54\2\5\1\55\10\uffff\1\56\1\57\2\5\1\uffff"+
            "\1\64\2\uffff\2\5\7\uffff\1\5\3\uffff\1\47\1\51\1\52\1\53\1"+
            "\uffff\3\5\11\uffff\1\73\1\74\1\75\36\uffff\3\5\6\uffff\6\5"+
            "\22\uffff\3\5\6\uffff\2\5\10\uffff\1\76\1\77\1\100\6\uffff\3"+
            "\5\1\65\1\66\1\67\1\70\1\71\1\72\6\uffff\36\5\11\uffff\12\5",
            "\1\50",
            "\1\5\2\uffff\1\5\13\uffff\1\5\3\uffff\1\5\3\uffff\1\101\6\uffff"+
            "\1\5\1\102\1\uffff\5\5\1\uffff\2\5\2\uffff\2\5\16\uffff\3\5"+
            "\54\uffff\3\5\47\uffff\23\5",
            "\1\5\2\uffff\1\5\13\uffff\1\5\3\uffff\1\5\3\uffff\1\101\6\uffff"+
            "\1\5\1\102\1\uffff\5\5\1\uffff\2\5\2\uffff\2\5\16\uffff\3\5"+
            "\54\uffff\3\5\47\uffff\23\5",
            "\1\5\2\uffff\1\5\13\uffff\1\5\3\uffff\1\5\3\uffff\1\101\6\uffff"+
            "\1\5\1\102\1\uffff\5\5\1\uffff\2\5\2\uffff\2\5\16\uffff\3\5"+
            "\54\uffff\3\5\47\uffff\23\5",
            "\1\5\2\uffff\1\5\13\uffff\1\5\3\uffff\1\5\3\uffff\1\101\6\uffff"+
            "\1\5\1\102\1\uffff\5\5\1\uffff\2\5\2\uffff\2\5\16\uffff\3\5"+
            "\54\uffff\3\5\47\uffff\23\5",
            "\1\5\2\uffff\1\5\13\uffff\1\5\3\uffff\1\5\3\uffff\1\101\6\uffff"+
            "\1\5\1\102\1\uffff\5\5\1\uffff\2\5\2\uffff\2\5\16\uffff\3\5"+
            "\54\uffff\3\5\47\uffff\23\5",
            "\1\5\2\uffff\1\5\13\uffff\1\5\3\uffff\1\5\3\uffff\1\101\6\uffff"+
            "\1\5\1\102\1\uffff\5\5\1\uffff\2\5\2\uffff\2\5\16\uffff\3\5"+
            "\54\uffff\3\5\47\uffff\23\5",
            "\1\5\2\uffff\1\5\13\uffff\1\5\3\uffff\1\5\3\uffff\1\101\6\uffff"+
            "\1\5\1\102\1\uffff\5\5\1\uffff\2\5\2\uffff\2\5\16\uffff\3\5"+
            "\54\uffff\3\5\47\uffff\23\5",
            "\1\5\2\uffff\1\5\13\uffff\1\5\3\uffff\1\5\3\uffff\1\101\6\uffff"+
            "\1\5\1\102\1\uffff\5\5\1\uffff\2\5\2\uffff\2\5\16\uffff\3\5"+
            "\54\uffff\3\5\47\uffff\23\5",
            "\1\5\2\uffff\1\5\13\uffff\1\5\3\uffff\1\5\3\uffff\1\101\6\uffff"+
            "\1\5\1\102\1\uffff\5\5\1\uffff\2\5\2\uffff\2\5\16\uffff\3\5"+
            "\54\uffff\3\5\47\uffff\23\5",
            "\1\5\2\uffff\1\5\13\uffff\1\5\3\uffff\1\5\3\uffff\1\101\6\uffff"+
            "\1\5\1\102\1\uffff\5\5\1\uffff\2\5\2\uffff\2\5\16\uffff\3\5"+
            "\54\uffff\3\5\47\uffff\23\5",
            "\1\5\2\uffff\1\5\13\uffff\1\5\3\uffff\1\5\3\uffff\1\101\6\uffff"+
            "\1\5\1\102\1\uffff\5\5\1\uffff\2\5\2\uffff\2\5\16\uffff\3\5"+
            "\54\uffff\3\5\47\uffff\23\5",
            "\1\5\2\uffff\1\5\13\uffff\1\5\3\uffff\1\5\3\uffff\1\101\6\uffff"+
            "\1\5\1\102\1\uffff\5\5\1\uffff\2\5\2\uffff\2\5\16\uffff\3\5"+
            "\54\uffff\3\5\47\uffff\23\5",
            "\1\5\2\uffff\1\5\13\uffff\1\5\3\uffff\1\5\3\uffff\1\101\6\uffff"+
            "\1\5\1\102\1\uffff\5\5\1\uffff\2\5\2\uffff\2\5\16\uffff\3\5"+
            "\54\uffff\3\5\47\uffff\23\5",
            "\1\5\2\uffff\1\5\13\uffff\1\5\3\uffff\1\5\3\uffff\1\101\6\uffff"+
            "\1\5\1\102\1\uffff\5\5\1\uffff\2\5\2\uffff\2\5\16\uffff\3\5"+
            "\54\uffff\3\5\47\uffff\23\5",
            "\1\5\2\uffff\1\5\13\uffff\1\5\3\uffff\1\5\3\uffff\1\101\6\uffff"+
            "\1\5\1\102\1\uffff\5\5\1\uffff\2\5\2\uffff\2\5\16\uffff\3\5"+
            "\54\uffff\3\5\47\uffff\23\5",
            "\1\5\2\uffff\1\5\13\uffff\1\5\3\uffff\1\5\3\uffff\1\101\6\uffff"+
            "\1\5\1\102\1\uffff\5\5\1\uffff\2\5\2\uffff\2\5\16\uffff\3\5"+
            "\54\uffff\3\5\47\uffff\23\5",
            "\1\5\2\uffff\1\5\13\uffff\1\5\3\uffff\1\5\3\uffff\1\101\6\uffff"+
            "\1\5\1\102\1\uffff\5\5\1\uffff\2\5\2\uffff\2\5\16\uffff\3\5"+
            "\54\uffff\3\5\47\uffff\23\5",
            "\1\5\2\uffff\1\5\13\uffff\1\5\3\uffff\1\5\3\uffff\1\101\6\uffff"+
            "\1\5\1\102\1\uffff\5\5\1\uffff\2\5\2\uffff\2\5\16\uffff\3\5"+
            "\54\uffff\3\5\47\uffff\23\5",
            "\1\5\2\uffff\1\5\13\uffff\1\5\3\uffff\1\5\3\uffff\1\101\6\uffff"+
            "\1\5\1\102\1\uffff\5\5\1\uffff\2\5\2\uffff\2\5\16\uffff\3\5"+
            "\54\uffff\3\5\47\uffff\23\5",
            "\1\5\6\uffff\1\5\2\uffff\1\5\11\uffff\1\5\1\uffff\1\5\3\uffff"+
            "\1\5\3\uffff\1\101\1\uffff\3\5\1\uffff\2\5\1\102\6\5\1\uffff"+
            "\6\5\1\uffff\1\5\14\uffff\7\5\15\uffff\3\5\30\uffff\3\5\47\uffff"+
            "\23\5\11\uffff\6\5",
            "\1\5\6\uffff\1\5\2\uffff\1\5\11\uffff\1\5\1\uffff\1\5\3\uffff"+
            "\1\5\3\uffff\1\101\1\uffff\3\5\1\uffff\2\5\1\102\6\5\1\uffff"+
            "\6\5\1\uffff\1\5\14\uffff\7\5\15\uffff\3\5\30\uffff\3\5\47\uffff"+
            "\23\5\11\uffff\6\5",
            "\1\5\6\uffff\1\5\2\uffff\1\5\11\uffff\1\5\1\uffff\1\5\3\uffff"+
            "\1\5\3\uffff\1\101\1\uffff\3\5\1\uffff\2\5\1\102\6\5\1\uffff"+
            "\6\5\1\uffff\1\5\14\uffff\7\5\15\uffff\3\5\30\uffff\3\5\47\uffff"+
            "\23\5\11\uffff\6\5",
            "\1\5\2\uffff\1\5\13\uffff\1\5\3\uffff\1\5\3\uffff\1\101\6\uffff"+
            "\1\5\1\102\1\uffff\5\5\1\uffff\2\5\2\uffff\2\5\16\uffff\3\5"+
            "\54\uffff\3\5\47\uffff\23\5",
            "\1\5\2\uffff\1\5\13\uffff\1\5\3\uffff\1\5\3\uffff\1\101\6\uffff"+
            "\1\5\1\102\1\uffff\5\5\1\uffff\2\5\2\uffff\2\5\16\uffff\3\5"+
            "\54\uffff\3\5\47\uffff\23\5",
            "\1\5\2\uffff\1\5\13\uffff\1\5\3\uffff\1\5\3\uffff\1\101\6\uffff"+
            "\1\5\1\102\1\uffff\5\5\1\uffff\2\5\2\uffff\2\5\16\uffff\3\5"+
            "\54\uffff\3\5\47\uffff\23\5",
            "\1\104\23\uffff\1\114\13\uffff\1\115\1\117\1\116\1\uffff\1\110"+
            "\2\uffff\1\111\10\uffff\1\112\1\113\3\uffff\1\120\17\uffff\1"+
            "\103\1\105\1\106\1\107\12\uffff\3\5\1\127\1\130\1\131\33\uffff"+
            "\6\5\61\uffff\1\132\1\133\1\134\11\uffff\1\121\1\122\1\123\1"+
            "\124\1\125\1\126",
            "\1\1\6\uffff\1\5\14\uffff\1\1\2\uffff\1\5\10\uffff\3\1\1\uffff"+
            "\1\1\2\uffff\1\1\4\uffff\1\5\1\uffff\1\5\1\uffff\2\1\3\uffff"+
            "\1\1\17\uffff\4\1\15\uffff\3\1\102\uffff\6\5\2\uffff\3\5\5\uffff"+
            "\3\1\11\uffff\6\1",
            "\1\104",
            "\1\5\2\uffff\1\5\13\uffff\1\5\3\uffff\1\5\3\uffff\1\101\6\uffff"+
            "\1\5\1\102\1\uffff\5\5\1\uffff\2\5\2\uffff\2\5\16\uffff\3\5"+
            "\54\uffff\3\5\47\uffff\23\5",
            "\1\5\2\uffff\1\5\13\uffff\1\5\3\uffff\1\5\3\uffff\1\101\6\uffff"+
            "\1\5\1\102\1\uffff\5\5\1\uffff\2\5\2\uffff\2\5\16\uffff\3\5"+
            "\54\uffff\3\5\47\uffff\23\5",
            "\1\5\2\uffff\1\5\13\uffff\1\5\3\uffff\1\5\3\uffff\1\101\6\uffff"+
            "\1\5\1\102\1\uffff\5\5\1\uffff\2\5\2\uffff\2\5\16\uffff\3\5"+
            "\54\uffff\3\5\47\uffff\23\5",
            "\1\5\2\uffff\1\5\13\uffff\1\5\3\uffff\1\5\3\uffff\1\101\6\uffff"+
            "\1\5\1\102\1\uffff\5\5\1\uffff\2\5\2\uffff\2\5\16\uffff\3\5"+
            "\54\uffff\3\5\47\uffff\23\5",
            "\1\5\2\uffff\1\5\13\uffff\1\5\3\uffff\1\5\3\uffff\1\101\6\uffff"+
            "\1\5\1\102\1\uffff\5\5\1\uffff\2\5\2\uffff\2\5\16\uffff\3\5"+
            "\54\uffff\3\5\47\uffff\23\5",
            "\1\5\2\uffff\1\5\13\uffff\1\5\3\uffff\1\5\3\uffff\1\101\6\uffff"+
            "\1\5\1\102\1\uffff\5\5\1\uffff\2\5\2\uffff\2\5\16\uffff\3\5"+
            "\54\uffff\3\5\47\uffff\23\5",
            "\1\5\2\uffff\1\5\13\uffff\1\5\3\uffff\1\5\3\uffff\1\101\6\uffff"+
            "\1\5\1\102\1\uffff\5\5\1\uffff\2\5\2\uffff\2\5\16\uffff\3\5"+
            "\54\uffff\3\5\47\uffff\23\5",
            "\1\5\2\uffff\1\5\13\uffff\1\5\3\uffff\1\5\3\uffff\1\101\6\uffff"+
            "\1\5\1\102\1\uffff\5\5\1\uffff\2\5\2\uffff\2\5\16\uffff\3\5"+
            "\54\uffff\3\5\47\uffff\23\5",
            "\1\5\2\uffff\1\5\13\uffff\1\5\3\uffff\1\5\3\uffff\1\101\6\uffff"+
            "\1\5\1\102\1\uffff\5\5\1\uffff\2\5\2\uffff\2\5\16\uffff\3\5"+
            "\54\uffff\3\5\47\uffff\23\5",
            "\1\5\2\uffff\1\5\13\uffff\1\5\3\uffff\1\5\3\uffff\1\101\6\uffff"+
            "\1\5\1\102\1\uffff\5\5\1\uffff\2\5\2\uffff\2\5\16\uffff\3\5"+
            "\54\uffff\3\5\47\uffff\23\5",
            "\1\5\2\uffff\1\5\13\uffff\1\5\3\uffff\1\5\3\uffff\1\101\6\uffff"+
            "\1\5\1\102\1\uffff\5\5\1\uffff\2\5\2\uffff\2\5\16\uffff\3\5"+
            "\54\uffff\3\5\47\uffff\23\5",
            "\1\5\2\uffff\1\5\13\uffff\1\5\3\uffff\1\5\3\uffff\1\101\6\uffff"+
            "\1\5\1\102\1\uffff\5\5\1\uffff\2\5\2\uffff\2\5\16\uffff\3\5"+
            "\54\uffff\3\5\47\uffff\23\5",
            "\1\5\2\uffff\1\5\13\uffff\1\5\3\uffff\1\5\3\uffff\1\101\6\uffff"+
            "\1\5\1\102\1\uffff\5\5\1\uffff\2\5\2\uffff\2\5\16\uffff\3\5"+
            "\54\uffff\3\5\47\uffff\23\5",
            "\1\5\2\uffff\1\5\13\uffff\1\5\3\uffff\1\5\3\uffff\1\101\6\uffff"+
            "\1\5\1\102\1\uffff\5\5\1\uffff\2\5\2\uffff\2\5\16\uffff\3\5"+
            "\54\uffff\3\5\47\uffff\23\5",
            "\1\5\2\uffff\1\5\13\uffff\1\5\3\uffff\1\5\3\uffff\1\101\6\uffff"+
            "\1\5\1\102\1\uffff\5\5\1\uffff\2\5\2\uffff\2\5\16\uffff\3\5"+
            "\54\uffff\3\5\47\uffff\23\5",
            "\1\5\2\uffff\1\5\13\uffff\1\5\3\uffff\1\5\3\uffff\1\101\6\uffff"+
            "\1\5\1\102\1\uffff\5\5\1\uffff\2\5\2\uffff\2\5\16\uffff\3\5"+
            "\54\uffff\3\5\47\uffff\23\5",
            "\1\5\2\uffff\1\5\13\uffff\1\5\3\uffff\1\5\3\uffff\1\101\6\uffff"+
            "\1\5\1\102\1\uffff\5\5\1\uffff\2\5\2\uffff\2\5\16\uffff\3\5"+
            "\54\uffff\3\5\47\uffff\23\5",
            "\1\5\2\uffff\1\5\13\uffff\1\5\3\uffff\1\5\3\uffff\1\101\6\uffff"+
            "\1\5\1\102\1\uffff\5\5\1\uffff\2\5\2\uffff\2\5\16\uffff\3\5"+
            "\54\uffff\3\5\47\uffff\23\5",
            "\1\5\2\uffff\1\5\13\uffff\1\5\3\uffff\1\5\3\uffff\1\101\6\uffff"+
            "\1\5\1\102\1\uffff\5\5\1\uffff\2\5\2\uffff\2\5\16\uffff\3\5"+
            "\54\uffff\3\5\47\uffff\23\5",
            "\1\5\2\uffff\1\5\13\uffff\1\5\3\uffff\1\5\3\uffff\1\101\6\uffff"+
            "\1\5\1\102\1\uffff\5\5\1\uffff\2\5\2\uffff\2\5\16\uffff\3\5"+
            "\54\uffff\3\5\47\uffff\23\5",
            "\1\5\2\uffff\1\5\13\uffff\1\5\3\uffff\1\5\3\uffff\1\101\6\uffff"+
            "\1\5\1\102\1\uffff\5\5\1\uffff\2\5\2\uffff\2\5\16\uffff\3\5"+
            "\54\uffff\3\5\47\uffff\23\5",
            "\1\5\2\uffff\1\5\13\uffff\1\5\3\uffff\1\5\3\uffff\1\101\6\uffff"+
            "\1\5\1\102\1\uffff\5\5\1\uffff\2\5\2\uffff\2\5\16\uffff\3\5"+
            "\54\uffff\3\5\47\uffff\23\5",
            "\1\5\2\uffff\1\5\13\uffff\1\5\3\uffff\1\5\3\uffff\1\101\6\uffff"+
            "\1\5\1\102\1\uffff\5\5\1\uffff\2\5\2\uffff\2\5\16\uffff\3\5"+
            "\54\uffff\3\5\47\uffff\23\5",
            "\1\5\2\uffff\1\5\13\uffff\1\5\3\uffff\1\5\3\uffff\1\101\6\uffff"+
            "\1\5\1\102\1\uffff\5\5\1\uffff\2\5\2\uffff\2\5\16\uffff\3\5"+
            "\54\uffff\3\5\47\uffff\23\5",
            "\1\5\2\uffff\1\5\13\uffff\1\5\3\uffff\1\5\3\uffff\1\101\6\uffff"+
            "\1\5\1\102\1\uffff\5\5\1\uffff\2\5\2\uffff\2\5\16\uffff\3\5"+
            "\54\uffff\3\5\47\uffff\23\5"
    };

    static final short[] DFA41_eot = DFA.unpackEncodedString(DFA41_eotS);
    static final short[] DFA41_eof = DFA.unpackEncodedString(DFA41_eofS);
    static final char[] DFA41_min = DFA.unpackEncodedStringToUnsignedChars(DFA41_minS);
    static final char[] DFA41_max = DFA.unpackEncodedStringToUnsignedChars(DFA41_maxS);
    static final short[] DFA41_accept = DFA.unpackEncodedString(DFA41_acceptS);
    static final short[] DFA41_special = DFA.unpackEncodedString(DFA41_specialS);
    static final short[][] DFA41_transition;

    static {
        int numStates = DFA41_transitionS.length;
        DFA41_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA41_transition[i] = DFA.unpackEncodedString(DFA41_transitionS[i]);
        }
    }

    class DFA41 extends DFA {

        public DFA41(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 41;
            this.eot = DFA41_eot;
            this.eof = DFA41_eof;
            this.min = DFA41_min;
            this.max = DFA41_max;
            this.accept = DFA41_accept;
            this.special = DFA41_special;
            this.transition = DFA41_transition;
        }
        public String getDescription() {
            return "4020:1: ( ( (lv_s_1_0= ruleStatement ) ) | ( (lv_e_2_0= ruleExpression ) ) )";
        }
        public int specialStateTransition(int s, IntStream input) throws NoViableAltException {
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA41_17 = input.LA(1);

                         
                        int index41_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred92()) ) {s = 1;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index41_17);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA41_16 = input.LA(1);

                         
                        int index41_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred92()) ) {s = 1;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index41_16);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA41_31 = input.LA(1);

                         
                        int index41_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred92()) ) {s = 1;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index41_31);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA41_19 = input.LA(1);

                         
                        int index41_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred92()) ) {s = 1;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index41_19);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA41_30 = input.LA(1);

                         
                        int index41_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred92()) ) {s = 1;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index41_30);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA41_18 = input.LA(1);

                         
                        int index41_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred92()) ) {s = 1;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index41_18);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA41_29 = input.LA(1);

                         
                        int index41_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred92()) ) {s = 1;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index41_29);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA41_21 = input.LA(1);

                         
                        int index41_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred92()) ) {s = 1;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index41_21);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA41_34 = input.LA(1);

                         
                        int index41_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred92()) ) {s = 1;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index41_34);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA41_26 = input.LA(1);

                         
                        int index41_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred92()) ) {s = 1;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index41_26);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA41_20 = input.LA(1);

                         
                        int index41_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred92()) ) {s = 1;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index41_20);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA41_28 = input.LA(1);

                         
                        int index41_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred92()) ) {s = 1;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index41_28);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA41_27 = input.LA(1);

                         
                        int index41_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred92()) ) {s = 1;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index41_27);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA41_33 = input.LA(1);

                         
                        int index41_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred92()) ) {s = 1;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index41_33);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA41_23 = input.LA(1);

                         
                        int index41_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred92()) ) {s = 1;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index41_23);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA41_32 = input.LA(1);

                         
                        int index41_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred92()) ) {s = 1;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index41_32);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA41_22 = input.LA(1);

                         
                        int index41_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred92()) ) {s = 1;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index41_22);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA41_25 = input.LA(1);

                         
                        int index41_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred92()) ) {s = 1;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index41_25);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA41_24 = input.LA(1);

                         
                        int index41_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred92()) ) {s = 1;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index41_24);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA41_37 = input.LA(1);

                         
                        int index41_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred92()) ) {s = 1;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index41_37);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA41_13 = input.LA(1);

                         
                        int index41_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred92()) ) {s = 1;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index41_13);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA41_36 = input.LA(1);

                         
                        int index41_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred92()) ) {s = 1;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index41_36);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA41_14 = input.LA(1);

                         
                        int index41_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred92()) ) {s = 1;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index41_14);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA41_35 = input.LA(1);

                         
                        int index41_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred92()) ) {s = 1;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index41_35);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA41_15 = input.LA(1);

                         
                        int index41_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred92()) ) {s = 1;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index41_15);
                        if ( s>=0 ) return s;
                        break;
            }
            if (backtracking>0) {failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 41, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA97_eotS =
        "\135\uffff";
    static final String DFA97_eofS =
        "\135\uffff";
    static final String DFA97_minS =
        "\1\6\1\uffff\3\6\1\uffff\10\6\31\0\1\6\23\15\3\6\3\15\3\6\31\15";
    static final String DFA97_maxS =
        "\1\u00f9\1\uffff\3\u00c2\1\uffff\3\u00e6\3\u00c2\1\u00f9\1\6\31"+
        "\0\1\6\23\u00b3\3\u00c2\3\u00b3\2\u00c2\1\6\31\u00b3";
    static final String DFA97_acceptS =
        "\1\uffff\1\1\3\uffff\1\2\127\uffff";
    static final String DFA97_specialS =
        "\16\uffff\1\2\1\3\1\5\1\22\1\21\1\30\1\25\1\16\1\14\1\20\1\17\1"+
        "\11\1\6\1\4\1\1\1\0\1\7\1\12\1\10\1\23\1\26\1\24\1\13\1\15\1\27"+
        "\66\uffff}>";
    static final String[] DFA97_transitionS = {
            "\5\1\5\uffff\3\1\7\uffff\1\1\11\uffff\1\1\1\uffff\3\1\1\uffff"+
            "\2\1\1\5\1\1\10\uffff\4\1\1\uffff\1\1\2\uffff\2\1\7\uffff\1"+
            "\5\3\uffff\4\1\1\uffff\3\5\11\uffff\1\2\1\3\1\4\36\uffff\3\1"+
            "\6\uffff\6\5\22\uffff\3\5\6\uffff\2\1\10\uffff\3\1\6\uffff\11"+
            "\1\6\uffff\36\1\11\uffff\12\1",
            "",
            "\1\5\6\uffff\1\1\2\uffff\1\1\11\uffff\1\5\1\uffff\1\1\3\uffff"+
            "\1\1\3\uffff\1\1\1\uffff\3\5\1\uffff\1\5\2\1\1\5\5\1\1\uffff"+
            "\2\1\2\5\2\1\1\uffff\1\5\14\uffff\3\1\4\5\15\uffff\3\5\30\uffff"+
            "\1\6\1\7\1\10\47\uffff\20\1\1\11\1\12\1\13\11\uffff\6\5",
            "\1\5\6\uffff\1\1\2\uffff\1\1\11\uffff\1\5\1\uffff\1\1\3\uffff"+
            "\1\1\3\uffff\1\1\1\uffff\3\5\1\uffff\1\5\2\1\1\5\5\1\1\uffff"+
            "\2\1\2\5\2\1\1\uffff\1\5\14\uffff\3\1\4\5\15\uffff\3\5\30\uffff"+
            "\1\6\1\7\1\10\47\uffff\20\1\1\11\1\12\1\13\11\uffff\6\5",
            "\1\5\6\uffff\1\1\2\uffff\1\1\11\uffff\1\5\1\uffff\1\1\3\uffff"+
            "\1\1\3\uffff\1\1\1\uffff\3\5\1\uffff\1\5\2\1\1\5\5\1\1\uffff"+
            "\2\1\2\5\2\1\1\uffff\1\5\14\uffff\3\1\4\5\15\uffff\3\5\30\uffff"+
            "\1\6\1\7\1\10\47\uffff\20\1\1\11\1\12\1\13\11\uffff\6\5",
            "",
            "\1\1\23\uffff\1\1\13\uffff\3\1\1\uffff\1\1\1\14\1\uffff\1\1"+
            "\10\uffff\2\1\3\uffff\1\1\17\uffff\4\1\15\uffff\3\1\36\uffff"+
            "\3\1\61\uffff\3\1\11\uffff\6\1\41\uffff\3\1",
            "\1\1\23\uffff\1\1\13\uffff\3\1\1\uffff\1\1\1\14\1\uffff\1\1"+
            "\10\uffff\2\1\3\uffff\1\1\17\uffff\4\1\15\uffff\3\1\36\uffff"+
            "\3\1\61\uffff\3\1\11\uffff\6\1\41\uffff\3\1",
            "\1\1\23\uffff\1\1\13\uffff\3\1\1\uffff\1\1\1\14\1\uffff\1\1"+
            "\10\uffff\2\1\3\uffff\1\1\17\uffff\4\1\15\uffff\3\1\36\uffff"+
            "\3\1\61\uffff\3\1\11\uffff\6\1\41\uffff\3\1",
            "\1\16\23\uffff\1\26\1\uffff\1\5\7\uffff\1\5\1\uffff\1\27\1\31"+
            "\1\30\1\uffff\1\22\1\uffff\1\5\1\23\10\uffff\1\24\1\25\3\uffff"+
            "\1\32\13\uffff\1\5\3\uffff\1\15\1\17\1\20\1\21\15\uffff\1\41"+
            "\1\42\1\43\6\5\3\uffff\14\5\3\uffff\3\5\6\uffff\3\5\3\uffff"+
            "\6\5\22\uffff\3\5\20\uffff\1\44\1\45\1\46\3\1\6\uffff\1\33\1"+
            "\34\1\35\1\36\1\37\1\40",
            "\1\16\23\uffff\1\26\1\uffff\1\5\7\uffff\1\5\1\uffff\1\27\1\31"+
            "\1\30\1\uffff\1\22\1\uffff\1\5\1\23\10\uffff\1\24\1\25\3\uffff"+
            "\1\32\13\uffff\1\5\3\uffff\1\15\1\17\1\20\1\21\15\uffff\1\41"+
            "\1\42\1\43\6\5\3\uffff\14\5\3\uffff\3\5\6\uffff\3\5\3\uffff"+
            "\6\5\22\uffff\3\5\20\uffff\1\44\1\45\1\46\3\1\6\uffff\1\33\1"+
            "\34\1\35\1\36\1\37\1\40",
            "\1\16\23\uffff\1\26\1\uffff\1\5\7\uffff\1\5\1\uffff\1\27\1\31"+
            "\1\30\1\uffff\1\22\1\uffff\1\5\1\23\10\uffff\1\24\1\25\3\uffff"+
            "\1\32\13\uffff\1\5\3\uffff\1\15\1\17\1\20\1\21\15\uffff\1\41"+
            "\1\42\1\43\6\5\3\uffff\14\5\3\uffff\3\5\6\uffff\3\5\3\uffff"+
            "\6\5\22\uffff\3\5\20\uffff\1\44\1\45\1\46\3\1\6\uffff\1\33\1"+
            "\34\1\35\1\36\1\37\1\40",
            "\1\50\4\1\5\uffff\3\1\7\uffff\1\60\11\uffff\1\1\1\uffff\1\61"+
            "\1\63\1\62\1\uffff\1\54\2\1\1\55\10\uffff\1\56\1\57\2\1\1\uffff"+
            "\1\64\2\uffff\2\1\7\uffff\1\1\3\uffff\1\47\1\51\1\52\1\53\1"+
            "\uffff\3\1\11\uffff\1\73\1\74\1\75\36\uffff\3\1\6\uffff\6\1"+
            "\22\uffff\3\1\6\uffff\2\1\10\uffff\1\76\1\77\1\100\6\uffff\3"+
            "\1\1\65\1\66\1\67\1\70\1\71\1\72\6\uffff\36\1\11\uffff\12\1",
            "\1\16",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\50",
            "\1\1\2\uffff\1\1\13\uffff\1\1\3\uffff\1\1\3\uffff\1\101\6\uffff"+
            "\1\1\1\102\1\uffff\5\1\1\uffff\2\1\2\uffff\2\1\16\uffff\3\1"+
            "\54\uffff\3\1\47\uffff\23\1",
            "\1\1\2\uffff\1\1\13\uffff\1\1\3\uffff\1\1\3\uffff\1\101\6\uffff"+
            "\1\1\1\102\1\uffff\5\1\1\uffff\2\1\2\uffff\2\1\16\uffff\3\1"+
            "\54\uffff\3\1\47\uffff\23\1",
            "\1\1\2\uffff\1\1\13\uffff\1\1\3\uffff\1\1\3\uffff\1\101\6\uffff"+
            "\1\1\1\102\1\uffff\5\1\1\uffff\2\1\2\uffff\2\1\16\uffff\3\1"+
            "\54\uffff\3\1\47\uffff\23\1",
            "\1\1\2\uffff\1\1\13\uffff\1\1\3\uffff\1\1\3\uffff\1\101\6\uffff"+
            "\1\1\1\102\1\uffff\5\1\1\uffff\2\1\2\uffff\2\1\16\uffff\3\1"+
            "\54\uffff\3\1\47\uffff\23\1",
            "\1\1\2\uffff\1\1\13\uffff\1\1\3\uffff\1\1\3\uffff\1\101\6\uffff"+
            "\1\1\1\102\1\uffff\5\1\1\uffff\2\1\2\uffff\2\1\16\uffff\3\1"+
            "\54\uffff\3\1\47\uffff\23\1",
            "\1\1\2\uffff\1\1\13\uffff\1\1\3\uffff\1\1\3\uffff\1\101\6\uffff"+
            "\1\1\1\102\1\uffff\5\1\1\uffff\2\1\2\uffff\2\1\16\uffff\3\1"+
            "\54\uffff\3\1\47\uffff\23\1",
            "\1\1\2\uffff\1\1\13\uffff\1\1\3\uffff\1\1\3\uffff\1\101\6\uffff"+
            "\1\1\1\102\1\uffff\5\1\1\uffff\2\1\2\uffff\2\1\16\uffff\3\1"+
            "\54\uffff\3\1\47\uffff\23\1",
            "\1\1\2\uffff\1\1\13\uffff\1\1\3\uffff\1\1\3\uffff\1\101\6\uffff"+
            "\1\1\1\102\1\uffff\5\1\1\uffff\2\1\2\uffff\2\1\16\uffff\3\1"+
            "\54\uffff\3\1\47\uffff\23\1",
            "\1\1\2\uffff\1\1\13\uffff\1\1\3\uffff\1\1\3\uffff\1\101\6\uffff"+
            "\1\1\1\102\1\uffff\5\1\1\uffff\2\1\2\uffff\2\1\16\uffff\3\1"+
            "\54\uffff\3\1\47\uffff\23\1",
            "\1\1\2\uffff\1\1\13\uffff\1\1\3\uffff\1\1\3\uffff\1\101\6\uffff"+
            "\1\1\1\102\1\uffff\5\1\1\uffff\2\1\2\uffff\2\1\16\uffff\3\1"+
            "\54\uffff\3\1\47\uffff\23\1",
            "\1\1\2\uffff\1\1\13\uffff\1\1\3\uffff\1\1\3\uffff\1\101\6\uffff"+
            "\1\1\1\102\1\uffff\5\1\1\uffff\2\1\2\uffff\2\1\16\uffff\3\1"+
            "\54\uffff\3\1\47\uffff\23\1",
            "\1\1\2\uffff\1\1\13\uffff\1\1\3\uffff\1\1\3\uffff\1\101\6\uffff"+
            "\1\1\1\102\1\uffff\5\1\1\uffff\2\1\2\uffff\2\1\16\uffff\3\1"+
            "\54\uffff\3\1\47\uffff\23\1",
            "\1\1\2\uffff\1\1\13\uffff\1\1\3\uffff\1\1\3\uffff\1\101\6\uffff"+
            "\1\1\1\102\1\uffff\5\1\1\uffff\2\1\2\uffff\2\1\16\uffff\3\1"+
            "\54\uffff\3\1\47\uffff\23\1",
            "\1\1\2\uffff\1\1\13\uffff\1\1\3\uffff\1\1\3\uffff\1\101\6\uffff"+
            "\1\1\1\102\1\uffff\5\1\1\uffff\2\1\2\uffff\2\1\16\uffff\3\1"+
            "\54\uffff\3\1\47\uffff\23\1",
            "\1\1\2\uffff\1\1\13\uffff\1\1\3\uffff\1\1\3\uffff\1\101\6\uffff"+
            "\1\1\1\102\1\uffff\5\1\1\uffff\2\1\2\uffff\2\1\16\uffff\3\1"+
            "\54\uffff\3\1\47\uffff\23\1",
            "\1\1\2\uffff\1\1\13\uffff\1\1\3\uffff\1\1\3\uffff\1\101\6\uffff"+
            "\1\1\1\102\1\uffff\5\1\1\uffff\2\1\2\uffff\2\1\16\uffff\3\1"+
            "\54\uffff\3\1\47\uffff\23\1",
            "\1\1\2\uffff\1\1\13\uffff\1\1\3\uffff\1\1\3\uffff\1\101\6\uffff"+
            "\1\1\1\102\1\uffff\5\1\1\uffff\2\1\2\uffff\2\1\16\uffff\3\1"+
            "\54\uffff\3\1\47\uffff\23\1",
            "\1\1\2\uffff\1\1\13\uffff\1\1\3\uffff\1\1\3\uffff\1\101\6\uffff"+
            "\1\1\1\102\1\uffff\5\1\1\uffff\2\1\2\uffff\2\1\16\uffff\3\1"+
            "\54\uffff\3\1\47\uffff\23\1",
            "\1\1\2\uffff\1\1\13\uffff\1\1\3\uffff\1\1\3\uffff\1\101\6\uffff"+
            "\1\1\1\102\1\uffff\5\1\1\uffff\2\1\2\uffff\2\1\16\uffff\3\1"+
            "\54\uffff\3\1\47\uffff\23\1",
            "\1\1\6\uffff\1\1\2\uffff\1\1\11\uffff\1\1\1\uffff\1\1\3\uffff"+
            "\1\1\3\uffff\1\101\1\uffff\3\1\1\uffff\2\1\1\102\6\1\1\uffff"+
            "\6\1\1\uffff\1\1\14\uffff\7\1\15\uffff\3\1\30\uffff\3\1\47\uffff"+
            "\23\1\11\uffff\6\1",
            "\1\1\6\uffff\1\1\2\uffff\1\1\11\uffff\1\1\1\uffff\1\1\3\uffff"+
            "\1\1\3\uffff\1\101\1\uffff\3\1\1\uffff\2\1\1\102\6\1\1\uffff"+
            "\6\1\1\uffff\1\1\14\uffff\7\1\15\uffff\3\1\30\uffff\3\1\47\uffff"+
            "\23\1\11\uffff\6\1",
            "\1\1\6\uffff\1\1\2\uffff\1\1\11\uffff\1\1\1\uffff\1\1\3\uffff"+
            "\1\1\3\uffff\1\101\1\uffff\3\1\1\uffff\2\1\1\102\6\1\1\uffff"+
            "\6\1\1\uffff\1\1\14\uffff\7\1\15\uffff\3\1\30\uffff\3\1\47\uffff"+
            "\23\1\11\uffff\6\1",
            "\1\1\2\uffff\1\1\13\uffff\1\1\3\uffff\1\1\3\uffff\1\101\6\uffff"+
            "\1\1\1\102\1\uffff\5\1\1\uffff\2\1\2\uffff\2\1\16\uffff\3\1"+
            "\54\uffff\3\1\47\uffff\23\1",
            "\1\1\2\uffff\1\1\13\uffff\1\1\3\uffff\1\1\3\uffff\1\101\6\uffff"+
            "\1\1\1\102\1\uffff\5\1\1\uffff\2\1\2\uffff\2\1\16\uffff\3\1"+
            "\54\uffff\3\1\47\uffff\23\1",
            "\1\1\2\uffff\1\1\13\uffff\1\1\3\uffff\1\1\3\uffff\1\101\6\uffff"+
            "\1\1\1\102\1\uffff\5\1\1\uffff\2\1\2\uffff\2\1\16\uffff\3\1"+
            "\54\uffff\3\1\47\uffff\23\1",
            "\1\104\23\uffff\1\114\13\uffff\1\115\1\117\1\116\1\uffff\1\110"+
            "\2\uffff\1\111\10\uffff\1\112\1\113\3\uffff\1\120\17\uffff\1"+
            "\103\1\105\1\106\1\107\12\uffff\3\1\1\127\1\130\1\131\33\uffff"+
            "\6\1\61\uffff\1\132\1\133\1\134\11\uffff\1\121\1\122\1\123\1"+
            "\124\1\125\1\126",
            "\1\5\6\uffff\1\1\14\uffff\1\5\1\uffff\1\1\11\uffff\3\5\1\uffff"+
            "\1\5\1\uffff\1\1\1\5\4\uffff\1\1\1\uffff\1\1\1\uffff\2\5\3\uffff"+
            "\1\5\17\uffff\4\5\15\uffff\3\5\102\uffff\6\1\2\uffff\3\1\5\uffff"+
            "\3\5\11\uffff\6\5",
            "\1\104",
            "\1\1\2\uffff\1\1\13\uffff\1\1\3\uffff\1\1\3\uffff\1\101\6\uffff"+
            "\1\1\1\102\1\uffff\5\1\1\uffff\2\1\2\uffff\2\1\16\uffff\3\1"+
            "\54\uffff\3\1\47\uffff\23\1",
            "\1\1\2\uffff\1\1\13\uffff\1\1\3\uffff\1\1\3\uffff\1\101\6\uffff"+
            "\1\1\1\102\1\uffff\5\1\1\uffff\2\1\2\uffff\2\1\16\uffff\3\1"+
            "\54\uffff\3\1\47\uffff\23\1",
            "\1\1\2\uffff\1\1\13\uffff\1\1\3\uffff\1\1\3\uffff\1\101\6\uffff"+
            "\1\1\1\102\1\uffff\5\1\1\uffff\2\1\2\uffff\2\1\16\uffff\3\1"+
            "\54\uffff\3\1\47\uffff\23\1",
            "\1\1\2\uffff\1\1\13\uffff\1\1\3\uffff\1\1\3\uffff\1\101\6\uffff"+
            "\1\1\1\102\1\uffff\5\1\1\uffff\2\1\2\uffff\2\1\16\uffff\3\1"+
            "\54\uffff\3\1\47\uffff\23\1",
            "\1\1\2\uffff\1\1\13\uffff\1\1\3\uffff\1\1\3\uffff\1\101\6\uffff"+
            "\1\1\1\102\1\uffff\5\1\1\uffff\2\1\2\uffff\2\1\16\uffff\3\1"+
            "\54\uffff\3\1\47\uffff\23\1",
            "\1\1\2\uffff\1\1\13\uffff\1\1\3\uffff\1\1\3\uffff\1\101\6\uffff"+
            "\1\1\1\102\1\uffff\5\1\1\uffff\2\1\2\uffff\2\1\16\uffff\3\1"+
            "\54\uffff\3\1\47\uffff\23\1",
            "\1\1\2\uffff\1\1\13\uffff\1\1\3\uffff\1\1\3\uffff\1\101\6\uffff"+
            "\1\1\1\102\1\uffff\5\1\1\uffff\2\1\2\uffff\2\1\16\uffff\3\1"+
            "\54\uffff\3\1\47\uffff\23\1",
            "\1\1\2\uffff\1\1\13\uffff\1\1\3\uffff\1\1\3\uffff\1\101\6\uffff"+
            "\1\1\1\102\1\uffff\5\1\1\uffff\2\1\2\uffff\2\1\16\uffff\3\1"+
            "\54\uffff\3\1\47\uffff\23\1",
            "\1\1\2\uffff\1\1\13\uffff\1\1\3\uffff\1\1\3\uffff\1\101\6\uffff"+
            "\1\1\1\102\1\uffff\5\1\1\uffff\2\1\2\uffff\2\1\16\uffff\3\1"+
            "\54\uffff\3\1\47\uffff\23\1",
            "\1\1\2\uffff\1\1\13\uffff\1\1\3\uffff\1\1\3\uffff\1\101\6\uffff"+
            "\1\1\1\102\1\uffff\5\1\1\uffff\2\1\2\uffff\2\1\16\uffff\3\1"+
            "\54\uffff\3\1\47\uffff\23\1",
            "\1\1\2\uffff\1\1\13\uffff\1\1\3\uffff\1\1\3\uffff\1\101\6\uffff"+
            "\1\1\1\102\1\uffff\5\1\1\uffff\2\1\2\uffff\2\1\16\uffff\3\1"+
            "\54\uffff\3\1\47\uffff\23\1",
            "\1\1\2\uffff\1\1\13\uffff\1\1\3\uffff\1\1\3\uffff\1\101\6\uffff"+
            "\1\1\1\102\1\uffff\5\1\1\uffff\2\1\2\uffff\2\1\16\uffff\3\1"+
            "\54\uffff\3\1\47\uffff\23\1",
            "\1\1\2\uffff\1\1\13\uffff\1\1\3\uffff\1\1\3\uffff\1\101\6\uffff"+
            "\1\1\1\102\1\uffff\5\1\1\uffff\2\1\2\uffff\2\1\16\uffff\3\1"+
            "\54\uffff\3\1\47\uffff\23\1",
            "\1\1\2\uffff\1\1\13\uffff\1\1\3\uffff\1\1\3\uffff\1\101\6\uffff"+
            "\1\1\1\102\1\uffff\5\1\1\uffff\2\1\2\uffff\2\1\16\uffff\3\1"+
            "\54\uffff\3\1\47\uffff\23\1",
            "\1\1\2\uffff\1\1\13\uffff\1\1\3\uffff\1\1\3\uffff\1\101\6\uffff"+
            "\1\1\1\102\1\uffff\5\1\1\uffff\2\1\2\uffff\2\1\16\uffff\3\1"+
            "\54\uffff\3\1\47\uffff\23\1",
            "\1\1\2\uffff\1\1\13\uffff\1\1\3\uffff\1\1\3\uffff\1\101\6\uffff"+
            "\1\1\1\102\1\uffff\5\1\1\uffff\2\1\2\uffff\2\1\16\uffff\3\1"+
            "\54\uffff\3\1\47\uffff\23\1",
            "\1\1\2\uffff\1\1\13\uffff\1\1\3\uffff\1\1\3\uffff\1\101\6\uffff"+
            "\1\1\1\102\1\uffff\5\1\1\uffff\2\1\2\uffff\2\1\16\uffff\3\1"+
            "\54\uffff\3\1\47\uffff\23\1",
            "\1\1\2\uffff\1\1\13\uffff\1\1\3\uffff\1\1\3\uffff\1\101\6\uffff"+
            "\1\1\1\102\1\uffff\5\1\1\uffff\2\1\2\uffff\2\1\16\uffff\3\1"+
            "\54\uffff\3\1\47\uffff\23\1",
            "\1\1\2\uffff\1\1\13\uffff\1\1\3\uffff\1\1\3\uffff\1\101\6\uffff"+
            "\1\1\1\102\1\uffff\5\1\1\uffff\2\1\2\uffff\2\1\16\uffff\3\1"+
            "\54\uffff\3\1\47\uffff\23\1",
            "\1\1\2\uffff\1\1\13\uffff\1\1\3\uffff\1\1\3\uffff\1\101\6\uffff"+
            "\1\1\1\102\1\uffff\5\1\1\uffff\2\1\2\uffff\2\1\16\uffff\3\1"+
            "\54\uffff\3\1\47\uffff\23\1",
            "\1\1\2\uffff\1\1\13\uffff\1\1\3\uffff\1\1\3\uffff\1\101\6\uffff"+
            "\1\1\1\102\1\uffff\5\1\1\uffff\2\1\2\uffff\2\1\16\uffff\3\1"+
            "\54\uffff\3\1\47\uffff\23\1",
            "\1\1\2\uffff\1\1\13\uffff\1\1\3\uffff\1\1\3\uffff\1\101\6\uffff"+
            "\1\1\1\102\1\uffff\5\1\1\uffff\2\1\2\uffff\2\1\16\uffff\3\1"+
            "\54\uffff\3\1\47\uffff\23\1",
            "\1\1\2\uffff\1\1\13\uffff\1\1\3\uffff\1\1\3\uffff\1\101\6\uffff"+
            "\1\1\1\102\1\uffff\5\1\1\uffff\2\1\2\uffff\2\1\16\uffff\3\1"+
            "\54\uffff\3\1\47\uffff\23\1",
            "\1\1\2\uffff\1\1\13\uffff\1\1\3\uffff\1\1\3\uffff\1\101\6\uffff"+
            "\1\1\1\102\1\uffff\5\1\1\uffff\2\1\2\uffff\2\1\16\uffff\3\1"+
            "\54\uffff\3\1\47\uffff\23\1",
            "\1\1\2\uffff\1\1\13\uffff\1\1\3\uffff\1\1\3\uffff\1\101\6\uffff"+
            "\1\1\1\102\1\uffff\5\1\1\uffff\2\1\2\uffff\2\1\16\uffff\3\1"+
            "\54\uffff\3\1\47\uffff\23\1"
    };

    static final short[] DFA97_eot = DFA.unpackEncodedString(DFA97_eotS);
    static final short[] DFA97_eof = DFA.unpackEncodedString(DFA97_eofS);
    static final char[] DFA97_min = DFA.unpackEncodedStringToUnsignedChars(DFA97_minS);
    static final char[] DFA97_max = DFA.unpackEncodedStringToUnsignedChars(DFA97_maxS);
    static final short[] DFA97_accept = DFA.unpackEncodedString(DFA97_acceptS);
    static final short[] DFA97_special = DFA.unpackEncodedString(DFA97_specialS);
    static final short[][] DFA97_transition;

    static {
        int numStates = DFA97_transitionS.length;
        DFA97_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA97_transition[i] = DFA.unpackEncodedString(DFA97_transitionS[i]);
        }
    }

    class DFA97 extends DFA {

        public DFA97(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 97;
            this.eot = DFA97_eot;
            this.eof = DFA97_eof;
            this.min = DFA97_min;
            this.max = DFA97_max;
            this.accept = DFA97_accept;
            this.special = DFA97_special;
            this.transition = DFA97_transition;
        }
        public String getDescription() {
            return "7302:1: (this_ExpressionOrVector_7= ruleExpressionOrVector | this_UnionRule_8= ruleUnionRule )";
        }
        public int specialStateTransition(int s, IntStream input) throws NoViableAltException {
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA97_29 = input.LA(1);

                         
                        int index97_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred170()) ) {s = 1;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index97_29);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA97_28 = input.LA(1);

                         
                        int index97_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred170()) ) {s = 1;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index97_28);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA97_14 = input.LA(1);

                         
                        int index97_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred170()) ) {s = 1;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index97_14);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA97_15 = input.LA(1);

                         
                        int index97_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred170()) ) {s = 1;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index97_15);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA97_27 = input.LA(1);

                         
                        int index97_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred170()) ) {s = 1;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index97_27);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA97_16 = input.LA(1);

                         
                        int index97_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred170()) ) {s = 1;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index97_16);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA97_26 = input.LA(1);

                         
                        int index97_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred170()) ) {s = 1;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index97_26);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA97_30 = input.LA(1);

                         
                        int index97_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred170()) ) {s = 1;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index97_30);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA97_32 = input.LA(1);

                         
                        int index97_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred170()) ) {s = 1;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index97_32);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA97_25 = input.LA(1);

                         
                        int index97_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred170()) ) {s = 1;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index97_25);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA97_31 = input.LA(1);

                         
                        int index97_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred170()) ) {s = 1;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index97_31);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA97_36 = input.LA(1);

                         
                        int index97_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred170()) ) {s = 1;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index97_36);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA97_22 = input.LA(1);

                         
                        int index97_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred170()) ) {s = 1;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index97_22);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA97_37 = input.LA(1);

                         
                        int index97_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred170()) ) {s = 1;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index97_37);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA97_21 = input.LA(1);

                         
                        int index97_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred170()) ) {s = 1;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index97_21);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA97_24 = input.LA(1);

                         
                        int index97_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred170()) ) {s = 1;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index97_24);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA97_23 = input.LA(1);

                         
                        int index97_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred170()) ) {s = 1;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index97_23);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA97_18 = input.LA(1);

                         
                        int index97_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred170()) ) {s = 1;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index97_18);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA97_17 = input.LA(1);

                         
                        int index97_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred170()) ) {s = 1;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index97_17);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA97_33 = input.LA(1);

                         
                        int index97_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred170()) ) {s = 1;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index97_33);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA97_35 = input.LA(1);

                         
                        int index97_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred170()) ) {s = 1;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index97_35);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA97_20 = input.LA(1);

                         
                        int index97_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred170()) ) {s = 1;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index97_20);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA97_34 = input.LA(1);

                         
                        int index97_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred170()) ) {s = 1;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index97_34);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA97_38 = input.LA(1);

                         
                        int index97_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred170()) ) {s = 1;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index97_38);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA97_19 = input.LA(1);

                         
                        int index97_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred170()) ) {s = 1;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index97_19);
                        if ( s>=0 ) return s;
                        break;
            }
            if (backtracking>0) {failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 97, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA112_eotS =
        "\135\uffff";
    static final String DFA112_eofS =
        "\135\uffff";
    static final String DFA112_minS =
        "\1\6\1\uffff\3\6\1\uffff\10\6\31\0\1\6\23\15\3\6\3\15\3\6\31\15";
    static final String DFA112_maxS =
        "\1\u00f9\1\uffff\3\u00c2\1\uffff\3\u00e6\3\u00c2\1\u00f9\1\6\31"+
        "\0\1\6\23\u00b3\3\u00c2\3\u00b3\2\u00c2\1\6\31\u00b3";
    static final String DFA112_acceptS =
        "\1\uffff\1\1\3\uffff\1\2\127\uffff";
    static final String DFA112_specialS =
        "\16\uffff\1\12\1\10\1\15\1\17\1\13\1\14\1\26\1\27\1\20\1\24\1\7"+
        "\1\6\1\1\1\0\1\2\1\4\1\11\1\3\1\5\1\21\1\30\1\25\1\16\1\22\1\23"+
        "\66\uffff}>";
    static final String[] DFA112_transitionS = {
            "\5\1\5\uffff\3\1\7\uffff\1\1\11\uffff\1\1\1\uffff\3\1\1\uffff"+
            "\2\1\1\5\1\1\10\uffff\4\1\1\uffff\1\1\2\uffff\2\1\7\uffff\1"+
            "\5\3\uffff\4\1\1\uffff\3\5\11\uffff\1\2\1\3\1\4\36\uffff\3\1"+
            "\6\uffff\6\5\22\uffff\3\5\6\uffff\2\1\10\uffff\3\1\6\uffff\11"+
            "\1\6\uffff\36\1\11\uffff\12\1",
            "",
            "\1\5\6\uffff\1\1\2\uffff\1\1\11\uffff\1\5\1\uffff\1\1\3\uffff"+
            "\1\1\3\uffff\1\1\1\uffff\3\5\1\uffff\1\5\2\1\1\5\5\1\1\uffff"+
            "\2\1\2\5\2\1\1\uffff\1\5\14\uffff\3\1\4\5\15\uffff\3\5\30\uffff"+
            "\1\6\1\7\1\10\47\uffff\20\1\1\11\1\12\1\13\11\uffff\6\5",
            "\1\5\6\uffff\1\1\2\uffff\1\1\11\uffff\1\5\1\uffff\1\1\3\uffff"+
            "\1\1\3\uffff\1\1\1\uffff\3\5\1\uffff\1\5\2\1\1\5\5\1\1\uffff"+
            "\2\1\2\5\2\1\1\uffff\1\5\14\uffff\3\1\4\5\15\uffff\3\5\30\uffff"+
            "\1\6\1\7\1\10\47\uffff\20\1\1\11\1\12\1\13\11\uffff\6\5",
            "\1\5\6\uffff\1\1\2\uffff\1\1\11\uffff\1\5\1\uffff\1\1\3\uffff"+
            "\1\1\3\uffff\1\1\1\uffff\3\5\1\uffff\1\5\2\1\1\5\5\1\1\uffff"+
            "\2\1\2\5\2\1\1\uffff\1\5\14\uffff\3\1\4\5\15\uffff\3\5\30\uffff"+
            "\1\6\1\7\1\10\47\uffff\20\1\1\11\1\12\1\13\11\uffff\6\5",
            "",
            "\1\1\23\uffff\1\1\13\uffff\3\1\1\uffff\1\1\1\14\1\uffff\1\1"+
            "\10\uffff\2\1\3\uffff\1\1\17\uffff\4\1\15\uffff\3\1\36\uffff"+
            "\3\1\61\uffff\3\1\11\uffff\6\1\41\uffff\3\1",
            "\1\1\23\uffff\1\1\13\uffff\3\1\1\uffff\1\1\1\14\1\uffff\1\1"+
            "\10\uffff\2\1\3\uffff\1\1\17\uffff\4\1\15\uffff\3\1\36\uffff"+
            "\3\1\61\uffff\3\1\11\uffff\6\1\41\uffff\3\1",
            "\1\1\23\uffff\1\1\13\uffff\3\1\1\uffff\1\1\1\14\1\uffff\1\1"+
            "\10\uffff\2\1\3\uffff\1\1\17\uffff\4\1\15\uffff\3\1\36\uffff"+
            "\3\1\61\uffff\3\1\11\uffff\6\1\41\uffff\3\1",
            "\1\16\23\uffff\1\26\1\uffff\1\5\7\uffff\1\5\1\uffff\1\27\1\31"+
            "\1\30\1\uffff\1\22\1\uffff\1\5\1\23\10\uffff\1\24\1\25\3\uffff"+
            "\1\32\13\uffff\1\5\3\uffff\1\15\1\17\1\20\1\21\15\uffff\1\41"+
            "\1\42\1\43\6\5\3\uffff\14\5\3\uffff\3\5\6\uffff\3\5\3\uffff"+
            "\6\5\22\uffff\3\5\20\uffff\1\44\1\45\1\46\3\1\6\uffff\1\33\1"+
            "\34\1\35\1\36\1\37\1\40",
            "\1\16\23\uffff\1\26\1\uffff\1\5\7\uffff\1\5\1\uffff\1\27\1\31"+
            "\1\30\1\uffff\1\22\1\uffff\1\5\1\23\10\uffff\1\24\1\25\3\uffff"+
            "\1\32\13\uffff\1\5\3\uffff\1\15\1\17\1\20\1\21\15\uffff\1\41"+
            "\1\42\1\43\6\5\3\uffff\14\5\3\uffff\3\5\6\uffff\3\5\3\uffff"+
            "\6\5\22\uffff\3\5\20\uffff\1\44\1\45\1\46\3\1\6\uffff\1\33\1"+
            "\34\1\35\1\36\1\37\1\40",
            "\1\16\23\uffff\1\26\1\uffff\1\5\7\uffff\1\5\1\uffff\1\27\1\31"+
            "\1\30\1\uffff\1\22\1\uffff\1\5\1\23\10\uffff\1\24\1\25\3\uffff"+
            "\1\32\13\uffff\1\5\3\uffff\1\15\1\17\1\20\1\21\15\uffff\1\41"+
            "\1\42\1\43\6\5\3\uffff\14\5\3\uffff\3\5\6\uffff\3\5\3\uffff"+
            "\6\5\22\uffff\3\5\20\uffff\1\44\1\45\1\46\3\1\6\uffff\1\33\1"+
            "\34\1\35\1\36\1\37\1\40",
            "\1\50\4\1\5\uffff\3\1\7\uffff\1\60\11\uffff\1\1\1\uffff\1\61"+
            "\1\63\1\62\1\uffff\1\54\2\1\1\55\10\uffff\1\56\1\57\2\1\1\uffff"+
            "\1\64\2\uffff\2\1\7\uffff\1\1\3\uffff\1\47\1\51\1\52\1\53\1"+
            "\uffff\3\1\11\uffff\1\73\1\74\1\75\36\uffff\3\1\6\uffff\6\1"+
            "\22\uffff\3\1\6\uffff\2\1\10\uffff\1\76\1\77\1\100\6\uffff\3"+
            "\1\1\65\1\66\1\67\1\70\1\71\1\72\6\uffff\36\1\11\uffff\12\1",
            "\1\16",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\50",
            "\1\1\2\uffff\1\1\13\uffff\1\1\3\uffff\1\1\3\uffff\1\101\6\uffff"+
            "\1\1\1\102\1\uffff\5\1\1\uffff\2\1\2\uffff\2\1\16\uffff\3\1"+
            "\54\uffff\3\1\47\uffff\23\1",
            "\1\1\2\uffff\1\1\13\uffff\1\1\3\uffff\1\1\3\uffff\1\101\6\uffff"+
            "\1\1\1\102\1\uffff\5\1\1\uffff\2\1\2\uffff\2\1\16\uffff\3\1"+
            "\54\uffff\3\1\47\uffff\23\1",
            "\1\1\2\uffff\1\1\13\uffff\1\1\3\uffff\1\1\3\uffff\1\101\6\uffff"+
            "\1\1\1\102\1\uffff\5\1\1\uffff\2\1\2\uffff\2\1\16\uffff\3\1"+
            "\54\uffff\3\1\47\uffff\23\1",
            "\1\1\2\uffff\1\1\13\uffff\1\1\3\uffff\1\1\3\uffff\1\101\6\uffff"+
            "\1\1\1\102\1\uffff\5\1\1\uffff\2\1\2\uffff\2\1\16\uffff\3\1"+
            "\54\uffff\3\1\47\uffff\23\1",
            "\1\1\2\uffff\1\1\13\uffff\1\1\3\uffff\1\1\3\uffff\1\101\6\uffff"+
            "\1\1\1\102\1\uffff\5\1\1\uffff\2\1\2\uffff\2\1\16\uffff\3\1"+
            "\54\uffff\3\1\47\uffff\23\1",
            "\1\1\2\uffff\1\1\13\uffff\1\1\3\uffff\1\1\3\uffff\1\101\6\uffff"+
            "\1\1\1\102\1\uffff\5\1\1\uffff\2\1\2\uffff\2\1\16\uffff\3\1"+
            "\54\uffff\3\1\47\uffff\23\1",
            "\1\1\2\uffff\1\1\13\uffff\1\1\3\uffff\1\1\3\uffff\1\101\6\uffff"+
            "\1\1\1\102\1\uffff\5\1\1\uffff\2\1\2\uffff\2\1\16\uffff\3\1"+
            "\54\uffff\3\1\47\uffff\23\1",
            "\1\1\2\uffff\1\1\13\uffff\1\1\3\uffff\1\1\3\uffff\1\101\6\uffff"+
            "\1\1\1\102\1\uffff\5\1\1\uffff\2\1\2\uffff\2\1\16\uffff\3\1"+
            "\54\uffff\3\1\47\uffff\23\1",
            "\1\1\2\uffff\1\1\13\uffff\1\1\3\uffff\1\1\3\uffff\1\101\6\uffff"+
            "\1\1\1\102\1\uffff\5\1\1\uffff\2\1\2\uffff\2\1\16\uffff\3\1"+
            "\54\uffff\3\1\47\uffff\23\1",
            "\1\1\2\uffff\1\1\13\uffff\1\1\3\uffff\1\1\3\uffff\1\101\6\uffff"+
            "\1\1\1\102\1\uffff\5\1\1\uffff\2\1\2\uffff\2\1\16\uffff\3\1"+
            "\54\uffff\3\1\47\uffff\23\1",
            "\1\1\2\uffff\1\1\13\uffff\1\1\3\uffff\1\1\3\uffff\1\101\6\uffff"+
            "\1\1\1\102\1\uffff\5\1\1\uffff\2\1\2\uffff\2\1\16\uffff\3\1"+
            "\54\uffff\3\1\47\uffff\23\1",
            "\1\1\2\uffff\1\1\13\uffff\1\1\3\uffff\1\1\3\uffff\1\101\6\uffff"+
            "\1\1\1\102\1\uffff\5\1\1\uffff\2\1\2\uffff\2\1\16\uffff\3\1"+
            "\54\uffff\3\1\47\uffff\23\1",
            "\1\1\2\uffff\1\1\13\uffff\1\1\3\uffff\1\1\3\uffff\1\101\6\uffff"+
            "\1\1\1\102\1\uffff\5\1\1\uffff\2\1\2\uffff\2\1\16\uffff\3\1"+
            "\54\uffff\3\1\47\uffff\23\1",
            "\1\1\2\uffff\1\1\13\uffff\1\1\3\uffff\1\1\3\uffff\1\101\6\uffff"+
            "\1\1\1\102\1\uffff\5\1\1\uffff\2\1\2\uffff\2\1\16\uffff\3\1"+
            "\54\uffff\3\1\47\uffff\23\1",
            "\1\1\2\uffff\1\1\13\uffff\1\1\3\uffff\1\1\3\uffff\1\101\6\uffff"+
            "\1\1\1\102\1\uffff\5\1\1\uffff\2\1\2\uffff\2\1\16\uffff\3\1"+
            "\54\uffff\3\1\47\uffff\23\1",
            "\1\1\2\uffff\1\1\13\uffff\1\1\3\uffff\1\1\3\uffff\1\101\6\uffff"+
            "\1\1\1\102\1\uffff\5\1\1\uffff\2\1\2\uffff\2\1\16\uffff\3\1"+
            "\54\uffff\3\1\47\uffff\23\1",
            "\1\1\2\uffff\1\1\13\uffff\1\1\3\uffff\1\1\3\uffff\1\101\6\uffff"+
            "\1\1\1\102\1\uffff\5\1\1\uffff\2\1\2\uffff\2\1\16\uffff\3\1"+
            "\54\uffff\3\1\47\uffff\23\1",
            "\1\1\2\uffff\1\1\13\uffff\1\1\3\uffff\1\1\3\uffff\1\101\6\uffff"+
            "\1\1\1\102\1\uffff\5\1\1\uffff\2\1\2\uffff\2\1\16\uffff\3\1"+
            "\54\uffff\3\1\47\uffff\23\1",
            "\1\1\2\uffff\1\1\13\uffff\1\1\3\uffff\1\1\3\uffff\1\101\6\uffff"+
            "\1\1\1\102\1\uffff\5\1\1\uffff\2\1\2\uffff\2\1\16\uffff\3\1"+
            "\54\uffff\3\1\47\uffff\23\1",
            "\1\1\6\uffff\1\1\2\uffff\1\1\11\uffff\1\1\1\uffff\1\1\3\uffff"+
            "\1\1\3\uffff\1\101\1\uffff\3\1\1\uffff\2\1\1\102\6\1\1\uffff"+
            "\6\1\1\uffff\1\1\14\uffff\7\1\15\uffff\3\1\30\uffff\3\1\47\uffff"+
            "\23\1\11\uffff\6\1",
            "\1\1\6\uffff\1\1\2\uffff\1\1\11\uffff\1\1\1\uffff\1\1\3\uffff"+
            "\1\1\3\uffff\1\101\1\uffff\3\1\1\uffff\2\1\1\102\6\1\1\uffff"+
            "\6\1\1\uffff\1\1\14\uffff\7\1\15\uffff\3\1\30\uffff\3\1\47\uffff"+
            "\23\1\11\uffff\6\1",
            "\1\1\6\uffff\1\1\2\uffff\1\1\11\uffff\1\1\1\uffff\1\1\3\uffff"+
            "\1\1\3\uffff\1\101\1\uffff\3\1\1\uffff\2\1\1\102\6\1\1\uffff"+
            "\6\1\1\uffff\1\1\14\uffff\7\1\15\uffff\3\1\30\uffff\3\1\47\uffff"+
            "\23\1\11\uffff\6\1",
            "\1\1\2\uffff\1\1\13\uffff\1\1\3\uffff\1\1\3\uffff\1\101\6\uffff"+
            "\1\1\1\102\1\uffff\5\1\1\uffff\2\1\2\uffff\2\1\16\uffff\3\1"+
            "\54\uffff\3\1\47\uffff\23\1",
            "\1\1\2\uffff\1\1\13\uffff\1\1\3\uffff\1\1\3\uffff\1\101\6\uffff"+
            "\1\1\1\102\1\uffff\5\1\1\uffff\2\1\2\uffff\2\1\16\uffff\3\1"+
            "\54\uffff\3\1\47\uffff\23\1",
            "\1\1\2\uffff\1\1\13\uffff\1\1\3\uffff\1\1\3\uffff\1\101\6\uffff"+
            "\1\1\1\102\1\uffff\5\1\1\uffff\2\1\2\uffff\2\1\16\uffff\3\1"+
            "\54\uffff\3\1\47\uffff\23\1",
            "\1\104\23\uffff\1\114\13\uffff\1\115\1\117\1\116\1\uffff\1\110"+
            "\2\uffff\1\111\10\uffff\1\112\1\113\3\uffff\1\120\17\uffff\1"+
            "\103\1\105\1\106\1\107\12\uffff\3\1\1\127\1\130\1\131\33\uffff"+
            "\6\1\61\uffff\1\132\1\133\1\134\11\uffff\1\121\1\122\1\123\1"+
            "\124\1\125\1\126",
            "\1\5\6\uffff\1\1\14\uffff\1\5\1\uffff\1\1\11\uffff\3\5\1\uffff"+
            "\1\5\1\uffff\1\1\1\5\4\uffff\1\1\1\uffff\1\1\1\uffff\2\5\3\uffff"+
            "\1\5\17\uffff\4\5\15\uffff\3\5\102\uffff\6\1\2\uffff\3\1\5\uffff"+
            "\3\5\11\uffff\6\5",
            "\1\104",
            "\1\1\2\uffff\1\1\13\uffff\1\1\3\uffff\1\1\3\uffff\1\101\6\uffff"+
            "\1\1\1\102\1\uffff\5\1\1\uffff\2\1\2\uffff\2\1\16\uffff\3\1"+
            "\54\uffff\3\1\47\uffff\23\1",
            "\1\1\2\uffff\1\1\13\uffff\1\1\3\uffff\1\1\3\uffff\1\101\6\uffff"+
            "\1\1\1\102\1\uffff\5\1\1\uffff\2\1\2\uffff\2\1\16\uffff\3\1"+
            "\54\uffff\3\1\47\uffff\23\1",
            "\1\1\2\uffff\1\1\13\uffff\1\1\3\uffff\1\1\3\uffff\1\101\6\uffff"+
            "\1\1\1\102\1\uffff\5\1\1\uffff\2\1\2\uffff\2\1\16\uffff\3\1"+
            "\54\uffff\3\1\47\uffff\23\1",
            "\1\1\2\uffff\1\1\13\uffff\1\1\3\uffff\1\1\3\uffff\1\101\6\uffff"+
            "\1\1\1\102\1\uffff\5\1\1\uffff\2\1\2\uffff\2\1\16\uffff\3\1"+
            "\54\uffff\3\1\47\uffff\23\1",
            "\1\1\2\uffff\1\1\13\uffff\1\1\3\uffff\1\1\3\uffff\1\101\6\uffff"+
            "\1\1\1\102\1\uffff\5\1\1\uffff\2\1\2\uffff\2\1\16\uffff\3\1"+
            "\54\uffff\3\1\47\uffff\23\1",
            "\1\1\2\uffff\1\1\13\uffff\1\1\3\uffff\1\1\3\uffff\1\101\6\uffff"+
            "\1\1\1\102\1\uffff\5\1\1\uffff\2\1\2\uffff\2\1\16\uffff\3\1"+
            "\54\uffff\3\1\47\uffff\23\1",
            "\1\1\2\uffff\1\1\13\uffff\1\1\3\uffff\1\1\3\uffff\1\101\6\uffff"+
            "\1\1\1\102\1\uffff\5\1\1\uffff\2\1\2\uffff\2\1\16\uffff\3\1"+
            "\54\uffff\3\1\47\uffff\23\1",
            "\1\1\2\uffff\1\1\13\uffff\1\1\3\uffff\1\1\3\uffff\1\101\6\uffff"+
            "\1\1\1\102\1\uffff\5\1\1\uffff\2\1\2\uffff\2\1\16\uffff\3\1"+
            "\54\uffff\3\1\47\uffff\23\1",
            "\1\1\2\uffff\1\1\13\uffff\1\1\3\uffff\1\1\3\uffff\1\101\6\uffff"+
            "\1\1\1\102\1\uffff\5\1\1\uffff\2\1\2\uffff\2\1\16\uffff\3\1"+
            "\54\uffff\3\1\47\uffff\23\1",
            "\1\1\2\uffff\1\1\13\uffff\1\1\3\uffff\1\1\3\uffff\1\101\6\uffff"+
            "\1\1\1\102\1\uffff\5\1\1\uffff\2\1\2\uffff\2\1\16\uffff\3\1"+
            "\54\uffff\3\1\47\uffff\23\1",
            "\1\1\2\uffff\1\1\13\uffff\1\1\3\uffff\1\1\3\uffff\1\101\6\uffff"+
            "\1\1\1\102\1\uffff\5\1\1\uffff\2\1\2\uffff\2\1\16\uffff\3\1"+
            "\54\uffff\3\1\47\uffff\23\1",
            "\1\1\2\uffff\1\1\13\uffff\1\1\3\uffff\1\1\3\uffff\1\101\6\uffff"+
            "\1\1\1\102\1\uffff\5\1\1\uffff\2\1\2\uffff\2\1\16\uffff\3\1"+
            "\54\uffff\3\1\47\uffff\23\1",
            "\1\1\2\uffff\1\1\13\uffff\1\1\3\uffff\1\1\3\uffff\1\101\6\uffff"+
            "\1\1\1\102\1\uffff\5\1\1\uffff\2\1\2\uffff\2\1\16\uffff\3\1"+
            "\54\uffff\3\1\47\uffff\23\1",
            "\1\1\2\uffff\1\1\13\uffff\1\1\3\uffff\1\1\3\uffff\1\101\6\uffff"+
            "\1\1\1\102\1\uffff\5\1\1\uffff\2\1\2\uffff\2\1\16\uffff\3\1"+
            "\54\uffff\3\1\47\uffff\23\1",
            "\1\1\2\uffff\1\1\13\uffff\1\1\3\uffff\1\1\3\uffff\1\101\6\uffff"+
            "\1\1\1\102\1\uffff\5\1\1\uffff\2\1\2\uffff\2\1\16\uffff\3\1"+
            "\54\uffff\3\1\47\uffff\23\1",
            "\1\1\2\uffff\1\1\13\uffff\1\1\3\uffff\1\1\3\uffff\1\101\6\uffff"+
            "\1\1\1\102\1\uffff\5\1\1\uffff\2\1\2\uffff\2\1\16\uffff\3\1"+
            "\54\uffff\3\1\47\uffff\23\1",
            "\1\1\2\uffff\1\1\13\uffff\1\1\3\uffff\1\1\3\uffff\1\101\6\uffff"+
            "\1\1\1\102\1\uffff\5\1\1\uffff\2\1\2\uffff\2\1\16\uffff\3\1"+
            "\54\uffff\3\1\47\uffff\23\1",
            "\1\1\2\uffff\1\1\13\uffff\1\1\3\uffff\1\1\3\uffff\1\101\6\uffff"+
            "\1\1\1\102\1\uffff\5\1\1\uffff\2\1\2\uffff\2\1\16\uffff\3\1"+
            "\54\uffff\3\1\47\uffff\23\1",
            "\1\1\2\uffff\1\1\13\uffff\1\1\3\uffff\1\1\3\uffff\1\101\6\uffff"+
            "\1\1\1\102\1\uffff\5\1\1\uffff\2\1\2\uffff\2\1\16\uffff\3\1"+
            "\54\uffff\3\1\47\uffff\23\1",
            "\1\1\2\uffff\1\1\13\uffff\1\1\3\uffff\1\1\3\uffff\1\101\6\uffff"+
            "\1\1\1\102\1\uffff\5\1\1\uffff\2\1\2\uffff\2\1\16\uffff\3\1"+
            "\54\uffff\3\1\47\uffff\23\1",
            "\1\1\2\uffff\1\1\13\uffff\1\1\3\uffff\1\1\3\uffff\1\101\6\uffff"+
            "\1\1\1\102\1\uffff\5\1\1\uffff\2\1\2\uffff\2\1\16\uffff\3\1"+
            "\54\uffff\3\1\47\uffff\23\1",
            "\1\1\2\uffff\1\1\13\uffff\1\1\3\uffff\1\1\3\uffff\1\101\6\uffff"+
            "\1\1\1\102\1\uffff\5\1\1\uffff\2\1\2\uffff\2\1\16\uffff\3\1"+
            "\54\uffff\3\1\47\uffff\23\1",
            "\1\1\2\uffff\1\1\13\uffff\1\1\3\uffff\1\1\3\uffff\1\101\6\uffff"+
            "\1\1\1\102\1\uffff\5\1\1\uffff\2\1\2\uffff\2\1\16\uffff\3\1"+
            "\54\uffff\3\1\47\uffff\23\1",
            "\1\1\2\uffff\1\1\13\uffff\1\1\3\uffff\1\1\3\uffff\1\101\6\uffff"+
            "\1\1\1\102\1\uffff\5\1\1\uffff\2\1\2\uffff\2\1\16\uffff\3\1"+
            "\54\uffff\3\1\47\uffff\23\1",
            "\1\1\2\uffff\1\1\13\uffff\1\1\3\uffff\1\1\3\uffff\1\101\6\uffff"+
            "\1\1\1\102\1\uffff\5\1\1\uffff\2\1\2\uffff\2\1\16\uffff\3\1"+
            "\54\uffff\3\1\47\uffff\23\1"
    };

    static final short[] DFA112_eot = DFA.unpackEncodedString(DFA112_eotS);
    static final short[] DFA112_eof = DFA.unpackEncodedString(DFA112_eofS);
    static final char[] DFA112_min = DFA.unpackEncodedStringToUnsignedChars(DFA112_minS);
    static final char[] DFA112_max = DFA.unpackEncodedStringToUnsignedChars(DFA112_maxS);
    static final short[] DFA112_accept = DFA.unpackEncodedString(DFA112_acceptS);
    static final short[] DFA112_special = DFA.unpackEncodedString(DFA112_specialS);
    static final short[][] DFA112_transition;

    static {
        int numStates = DFA112_transitionS.length;
        DFA112_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA112_transition[i] = DFA.unpackEncodedString(DFA112_transitionS[i]);
        }
    }

    class DFA112 extends DFA {

        public DFA112(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 112;
            this.eot = DFA112_eot;
            this.eof = DFA112_eof;
            this.min = DFA112_min;
            this.max = DFA112_max;
            this.accept = DFA112_accept;
            this.special = DFA112_special;
            this.transition = DFA112_transition;
        }
        public String getDescription() {
            return "7775:1: ( ( ( (lv_e_3_0= ruleExpression ) ) ( ',' ( (lv_e_5_0= ruleExpression ) ) )* ) | ( (lv_s_6_0= ruleUnionRule ) ) )";
        }
        public int specialStateTransition(int s, IntStream input) throws NoViableAltException {
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA112_27 = input.LA(1);

                         
                        int index112_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred193()) ) {s = 1;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index112_27);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA112_26 = input.LA(1);

                         
                        int index112_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred193()) ) {s = 1;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index112_26);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA112_28 = input.LA(1);

                         
                        int index112_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred193()) ) {s = 1;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index112_28);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA112_31 = input.LA(1);

                         
                        int index112_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred193()) ) {s = 1;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index112_31);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA112_29 = input.LA(1);

                         
                        int index112_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred193()) ) {s = 1;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index112_29);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA112_32 = input.LA(1);

                         
                        int index112_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred193()) ) {s = 1;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index112_32);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA112_25 = input.LA(1);

                         
                        int index112_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred193()) ) {s = 1;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index112_25);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA112_24 = input.LA(1);

                         
                        int index112_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred193()) ) {s = 1;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index112_24);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA112_15 = input.LA(1);

                         
                        int index112_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred193()) ) {s = 1;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index112_15);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA112_30 = input.LA(1);

                         
                        int index112_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred193()) ) {s = 1;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index112_30);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA112_14 = input.LA(1);

                         
                        int index112_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred193()) ) {s = 1;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index112_14);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA112_18 = input.LA(1);

                         
                        int index112_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred193()) ) {s = 1;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index112_18);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA112_19 = input.LA(1);

                         
                        int index112_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred193()) ) {s = 1;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index112_19);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA112_16 = input.LA(1);

                         
                        int index112_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred193()) ) {s = 1;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index112_16);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA112_36 = input.LA(1);

                         
                        int index112_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred193()) ) {s = 1;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index112_36);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA112_17 = input.LA(1);

                         
                        int index112_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred193()) ) {s = 1;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index112_17);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA112_22 = input.LA(1);

                         
                        int index112_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred193()) ) {s = 1;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index112_22);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA112_33 = input.LA(1);

                         
                        int index112_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred193()) ) {s = 1;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index112_33);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA112_37 = input.LA(1);

                         
                        int index112_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred193()) ) {s = 1;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index112_37);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA112_38 = input.LA(1);

                         
                        int index112_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred193()) ) {s = 1;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index112_38);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA112_23 = input.LA(1);

                         
                        int index112_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred193()) ) {s = 1;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index112_23);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA112_35 = input.LA(1);

                         
                        int index112_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred193()) ) {s = 1;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index112_35);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA112_20 = input.LA(1);

                         
                        int index112_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred193()) ) {s = 1;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index112_20);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA112_21 = input.LA(1);

                         
                        int index112_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred193()) ) {s = 1;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index112_21);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA112_34 = input.LA(1);

                         
                        int index112_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred193()) ) {s = 1;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index112_34);
                        if ( s>=0 ) return s;
                        break;
            }
            if (backtracking>0) {failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 112, _s, input);
            error(nvae);
            throw nvae;
        }
    }
 

    public static final BitSet FOLLOW_ruleDataDefinition_in_entryRuleDataDefinition81 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleDataDefinition91 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RULE_LINEBREAK_in_ruleDataDefinition126 = new BitSet(new long[]{0x1C00036046804052L,0x0000000008000000L,0x8008000000000000L,0x0000000020020024L});
    public static final BitSet FOLLOW_ruleDeclaration_in_ruleDataDefinition148 = new BitSet(new long[]{0x0000000000000012L});
    public static final BitSet FOLLOW_RULE_LINEBREAK_in_ruleDataDefinition160 = new BitSet(new long[]{0x1C00036046804050L,0x0000000008000000L,0x8008000000000000L,0x0000000020020024L});
    public static final BitSet FOLLOW_ruleDeclaration_in_ruleDataDefinition182 = new BitSet(new long[]{0x0000000000000012L});
    public static final BitSet FOLLOW_RULE_LINEBREAK_in_ruleDataDefinition194 = new BitSet(new long[]{0x0000000000000012L});
    public static final BitSet FOLLOW_ruleDeclaration_in_entryRuleDeclaration231 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleDeclaration241 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleFieldDeclaration_in_ruleDeclaration292 = new BitSet(new long[]{0x0000000000000022L});
    public static final BitSet FOLLOW_ruleTitleDeclaration_in_ruleDeclaration322 = new BitSet(new long[]{0x0000000000000022L});
    public static final BitSet FOLLOW_ruleTypeDeclaration_in_ruleDeclaration352 = new BitSet(new long[]{0x0000000000000022L});
    public static final BitSet FOLLOW_ruleIncludeDeclaration_in_ruleDeclaration382 = new BitSet(new long[]{0x0000000000000022L});
    public static final BitSet FOLLOW_ruleValidationRuleDeclaration_in_ruleDeclaration412 = new BitSet(new long[]{0x0000000000000022L});
    public static final BitSet FOLLOW_ruleFunctionDeclaration_in_ruleDeclaration442 = new BitSet(new long[]{0x0000000000000022L});
    public static final BitSet FOLLOW_ruleNativeValidationRuleDeclaration_in_ruleDeclaration472 = new BitSet(new long[]{0x0000000000000022L});
    public static final BitSet FOLLOW_ruleSubFieldDeclaration_in_ruleDeclaration502 = new BitSet(new long[]{0x0000000000000022L});
    public static final BitSet FOLLOW_RULE_FIELDCOMMENT_in_ruleDeclaration519 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleFieldDeclaration_in_entryRuleFieldDeclaration561 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleFieldDeclaration571 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleIdOrKeyword_in_ruleFieldDeclaration617 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_13_in_ruleFieldDeclaration627 = new BitSet(new long[]{0x0000000447F9C042L});
    public static final BitSet FOLLOW_ruleModifiers_in_ruleFieldDeclaration649 = new BitSet(new long[]{0x0000000447F80040L});
    public static final BitSet FOLLOW_ruleFieldType_in_ruleFieldDeclaration670 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleModifiers_in_entryRuleModifiers708 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleModifiers718 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_14_in_ruleModifiers802 = new BitSet(new long[]{0x000000000001C002L});
    public static final BitSet FOLLOW_15_in_ruleModifiers883 = new BitSet(new long[]{0x000000000001C002L});
    public static final BitSet FOLLOW_16_in_ruleModifiers965 = new BitSet(new long[]{0x0000000000020000L});
    public static final BitSet FOLLOW_17_in_ruleModifiers988 = new BitSet(new long[]{0x000000000001C002L});
    public static final BitSet FOLLOW_16_in_ruleModifiers1058 = new BitSet(new long[]{0x0000000000040000L});
    public static final BitSet FOLLOW_18_in_ruleModifiers1081 = new BitSet(new long[]{0x000000000001C002L});
    public static final BitSet FOLLOW_ruleFieldType_in_entryRuleFieldType1156 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleFieldType1166 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleCharType_in_ruleFieldType1216 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleCharEnum_in_ruleFieldType1246 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_19_in_ruleFieldType1262 = new BitSet(new long[]{0x0000000040000000L});
    public static final BitSet FOLLOW_ruleCharEnum_in_ruleFieldType1287 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleIntEnum_in_ruleFieldType1318 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_19_in_ruleFieldType1334 = new BitSet(new long[]{0x0000000000100000L});
    public static final BitSet FOLLOW_ruleIntEnum_in_ruleFieldType1359 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_20_in_ruleFieldType1398 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_21_in_ruleFieldType1427 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_22_in_ruleFieldType1456 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_23_in_ruleFieldType1485 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_24_in_ruleFieldType1514 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_25_in_ruleFieldType1543 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_26_in_ruleFieldType1572 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rulePointerType_in_ruleFieldType1620 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleSetType_in_ruleFieldType1650 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RULE_ID_in_ruleFieldType1677 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleIntEnum_in_entryRuleIntEnum1713 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleIntEnum1723 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_20_in_ruleIntEnum1766 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_27_in_ruleIntEnum1789 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_ruleEnumValue_in_ruleIntEnum1810 = new BitSet(new long[]{0x0000000030000000L});
    public static final BitSet FOLLOW_28_in_ruleIntEnum1821 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_ruleEnumValue_in_ruleIntEnum1842 = new BitSet(new long[]{0x0000000030000000L});
    public static final BitSet FOLLOW_29_in_ruleIntEnum1854 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleCharEnum_in_entryRuleCharEnum1890 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleCharEnum1900 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_30_in_ruleCharEnum1943 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_27_in_ruleCharEnum1966 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_RULE_STRING_in_ruleCharEnum1983 = new BitSet(new long[]{0x0000000030000000L});
    public static final BitSet FOLLOW_28_in_ruleCharEnum1999 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_RULE_STRING_in_ruleCharEnum2016 = new BitSet(new long[]{0x0000000030000000L});
    public static final BitSet FOLLOW_29_in_ruleCharEnum2033 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleEnumValue_in_entryRuleEnumValue2069 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleEnumValue2079 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RULE_STRING_in_ruleEnumValue2121 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_13_in_ruleEnumValue2136 = new BitSet(new long[]{0x0000000000000300L});
    public static final BitSet FOLLOW_RULE_INT_in_ruleEnumValue2155 = new BitSet(new long[]{0x0000000080000002L});
    public static final BitSet FOLLOW_RULE_SIGNED_INT_in_ruleEnumValue2175 = new BitSet(new long[]{0x0000000080000002L});
    public static final BitSet FOLLOW_31_in_ruleEnumValue2201 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleCharType_in_entryRuleCharType2251 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleCharType2261 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_30_in_ruleCharType2308 = new BitSet(new long[]{0x0000000100000002L});
    public static final BitSet FOLLOW_32_in_ruleCharType2319 = new BitSet(new long[]{0x0000000200000100L});
    public static final BitSet FOLLOW_RULE_INT_in_ruleCharType2336 = new BitSet(new long[]{0x0000000200000000L});
    public static final BitSet FOLLOW_33_in_ruleCharType2352 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rulePointerType_in_entryRulePointerType2390 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRulePointerType2400 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_34_in_rulePointerType2447 = new BitSet(new long[]{0x0800014046800042L,0x0000000008000000L,0x8008000000000000L,0x0000000020020024L});
    public static final BitSet FOLLOW_ruleType_in_rulePointerType2474 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleSetType_in_entryRuleSetType2511 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleSetType2521 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_19_in_ruleSetType2568 = new BitSet(new long[]{0x0800014046800042L,0x0000000008000000L,0x8008000000000000L,0x0000000020020024L});
    public static final BitSet FOLLOW_ruleType_in_ruleSetType2595 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleSubFieldDeclaration_in_entryRuleSubFieldDeclaration2632 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleSubFieldDeclaration2642 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RULE_ID_in_ruleSubFieldDeclaration2689 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_35_in_ruleSubFieldDeclaration2699 = new BitSet(new long[]{0x1C00036046804040L,0x0000000008000000L,0x8008000000000000L,0x0000000020020024L});
    public static final BitSet FOLLOW_ruleDeclaration_in_ruleSubFieldDeclaration2720 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleType_in_entryRuleType2757 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleType2768 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleIdOrKeyword_in_ruleType2815 = new BitSet(new long[]{0x0000001000000002L});
    public static final BitSet FOLLOW_36_in_ruleType2834 = new BitSet(new long[]{0x0800014046800040L,0x0000000008000000L,0x8008000000000000L,0x0000000020020024L});
    public static final BitSet FOLLOW_ruleIdOrKeyword_in_ruleType2856 = new BitSet(new long[]{0x0000001000000002L});
    public static final BitSet FOLLOW_ruleTitleDeclaration_in_entryRuleTitleDeclaration2903 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleTitleDeclaration2913 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_37_in_ruleTitleDeclaration2948 = new BitSet(new long[]{0x0000004000000000L});
    public static final BitSet FOLLOW_38_in_ruleTitleDeclaration2958 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_13_in_ruleTitleDeclaration2968 = new BitSet(new long[]{0x0800014046800040L,0x0000000008000000L,0x8008000000000000L,0x0000000020020024L});
    public static final BitSet FOLLOW_ruleFieldPath_in_ruleTitleDeclaration2990 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleFunctionCall_in_ruleTitleDeclaration3017 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleIncludeDeclaration_in_entryRuleIncludeDeclaration3054 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleIncludeDeclaration3064 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_37_in_ruleIncludeDeclaration3099 = new BitSet(new long[]{0x0000008000000000L});
    public static final BitSet FOLLOW_39_in_ruleIncludeDeclaration3109 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_13_in_ruleIncludeDeclaration3119 = new BitSet(new long[]{0x0800014046800040L,0x0000000008000000L,0x8008000000000000L,0x0000000020020024L});
    public static final BitSet FOLLOW_ruleType_in_ruleIncludeDeclaration3146 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleTypeDeclaration_in_entryRuleTypeDeclaration3182 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleTypeDeclaration3192 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_37_in_ruleTypeDeclaration3227 = new BitSet(new long[]{0x0000010000000000L});
    public static final BitSet FOLLOW_40_in_ruleTypeDeclaration3237 = new BitSet(new long[]{0x0000001000000000L});
    public static final BitSet FOLLOW_36_in_ruleTypeDeclaration3247 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_RULE_ID_in_ruleTypeDeclaration3264 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_13_in_ruleTypeDeclaration3279 = new BitSet(new long[]{0x0000000447F80040L});
    public static final BitSet FOLLOW_ruleFieldType_in_ruleTypeDeclaration3300 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleValidationRuleDeclaration_in_entryRuleValidationRuleDeclaration3336 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleValidationRuleDeclaration3346 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleRangeValidationRuleDeclaration_in_ruleValidationRuleDeclaration3397 = new BitSet(new long[]{0x8000000000000000L});
    public static final BitSet FOLLOW_ruleUniquenessValidationRuleDeclaration_in_ruleValidationRuleDeclaration3427 = new BitSet(new long[]{0x8000000000000000L});
    public static final BitSet FOLLOW_ruleComparisonValidationRuleDeclaration_in_ruleValidationRuleDeclaration3457 = new BitSet(new long[]{0x8000000000000000L});
    public static final BitSet FOLLOW_ruleRegexValidationRuleDeclaration_in_ruleValidationRuleDeclaration3487 = new BitSet(new long[]{0x8000000000000000L});
    public static final BitSet FOLLOW_ruleErrorMessage_in_ruleValidationRuleDeclaration3508 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleComparisonValidationRuleDeclaration_in_entryRuleComparisonValidationRuleDeclaration3544 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleComparisonValidationRuleDeclaration3554 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_41_in_ruleComparisonValidationRuleDeclaration3597 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_ruleFunctionArguments_in_ruleComparisonValidationRuleDeclaration3631 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_27_in_ruleComparisonValidationRuleDeclaration3641 = new BitSet(new long[]{0x08C0254046800140L,0x0000000008000000L,0x8008000000000000L,0x0000000020020024L});
    public static final BitSet FOLLOW_ruleComparisonExpression_in_ruleComparisonValidationRuleDeclaration3662 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_29_in_ruleComparisonValidationRuleDeclaration3672 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleComparisonExpression_in_entryRuleComparisonExpression3708 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleComparisonExpression3718 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleComparisonPart_in_ruleComparisonExpression3764 = new BitSet(new long[]{0x003FC00000002000L});
    public static final BitSet FOLLOW_ruleOperator_in_ruleComparisonExpression3785 = new BitSet(new long[]{0x08C0254046800140L,0x0000000008000000L,0x8008000000000000L,0x0000000020020024L});
    public static final BitSet FOLLOW_ruleComparisonPart_in_ruleComparisonExpression3806 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleComparisonPart_in_entryRuleComparisonPart3842 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleComparisonPart3852 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleFieldPath_in_ruleComparisonPart3898 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RULE_INT_in_ruleComparisonPart3921 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleDateFunction_in_ruleComparisonPart3953 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleUpperFunction_in_ruleComparisonPart3980 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleLowerFunction_in_ruleComparisonPart4007 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleDateConstant_in_ruleComparisonPart4034 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleUpperFunction_in_entryRuleUpperFunction4070 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleUpperFunction4080 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_42_in_ruleUpperFunction4115 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_43_in_ruleUpperFunction4125 = new BitSet(new long[]{0x0800014046800040L,0x0000000008000000L,0x8008000000000000L,0x0000000020020024L});
    public static final BitSet FOLLOW_ruleFieldPath_in_ruleUpperFunction4146 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_44_in_ruleUpperFunction4156 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleLowerFunction_in_entryRuleLowerFunction4192 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleLowerFunction4202 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_45_in_ruleLowerFunction4237 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_43_in_ruleLowerFunction4247 = new BitSet(new long[]{0x0800014046800040L,0x0000000008000000L,0x8008000000000000L,0x0000000020020024L});
    public static final BitSet FOLLOW_ruleFieldPath_in_ruleLowerFunction4268 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_44_in_ruleLowerFunction4278 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleOperator_in_entryRuleOperator4315 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleOperator4326 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_13_in_ruleOperator4364 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_46_in_ruleOperator4383 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_47_in_ruleOperator4402 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_48_in_ruleOperator4421 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_49_in_ruleOperator4440 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_50_in_ruleOperator4459 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_51_in_ruleOperator4478 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_52_in_ruleOperator4497 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_53_in_ruleOperator4516 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleDateConstant_in_entryRuleDateConstant4557 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleDateConstant4568 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_54_in_ruleDateConstant4606 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_55_in_ruleDateConstant4625 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleDateFunction_in_entryRuleDateFunction4666 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleDateFunction4677 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_26_in_ruleDateFunction4715 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_43_in_ruleDateFunction4728 = new BitSet(new long[]{0x00C0000000000100L});
    public static final BitSet FOLLOW_ruleDateFunctionArgument_in_ruleDateFunction4750 = new BitSet(new long[]{0x0000100010000000L});
    public static final BitSet FOLLOW_28_in_ruleDateFunction4769 = new BitSet(new long[]{0x00C0000000000100L});
    public static final BitSet FOLLOW_ruleDateFunctionArgument_in_ruleDateFunction4791 = new BitSet(new long[]{0x0000100010000000L});
    public static final BitSet FOLLOW_44_in_ruleDateFunction4811 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleDateFunctionArgument_in_entryRuleDateFunctionArgument4852 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleDateFunctionArgument4863 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleDateFunctionArgumentMember_in_ruleDateFunctionArgument4910 = new BitSet(new long[]{0x0300000000000002L});
    public static final BitSet FOLLOW_56_in_ruleDateFunctionArgument4930 = new BitSet(new long[]{0x00C0000000000100L});
    public static final BitSet FOLLOW_57_in_ruleDateFunctionArgument4949 = new BitSet(new long[]{0x00C0000000000100L});
    public static final BitSet FOLLOW_ruleDateFunctionArgumentMember_in_ruleDateFunctionArgument4972 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleDateFunctionArgumentMember_in_entryRuleDateFunctionArgumentMember5020 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleDateFunctionArgumentMember5031 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RULE_INT_in_ruleDateFunctionArgumentMember5071 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleDateConstant_in_ruleDateFunctionArgumentMember5104 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleRangeValidationRuleDeclaration_in_entryRuleRangeValidationRuleDeclaration5149 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleRangeValidationRuleDeclaration5159 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_58_in_ruleRangeValidationRuleDeclaration5204 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_59_in_ruleRangeValidationRuleDeclaration5233 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_43_in_ruleRangeValidationRuleDeclaration5259 = new BitSet(new long[]{0x0800014046800040L,0x0000000008000000L,0x8008000000000000L,0x0000000020020024L});
    public static final BitSet FOLLOW_ruleFieldReference_in_ruleRangeValidationRuleDeclaration5280 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_44_in_ruleRangeValidationRuleDeclaration5290 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_27_in_ruleRangeValidationRuleDeclaration5300 = new BitSet(new long[]{0x4000000000000100L});
    public static final BitSet FOLLOW_ruleRange_in_ruleRangeValidationRuleDeclaration5321 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_29_in_ruleRangeValidationRuleDeclaration5331 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleRegexValidationRuleDeclaration_in_entryRuleRegexValidationRuleDeclaration5367 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleRegexValidationRuleDeclaration5377 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_60_in_ruleRegexValidationRuleDeclaration5420 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_43_in_ruleRegexValidationRuleDeclaration5443 = new BitSet(new long[]{0x0800014046800040L,0x0000000008000000L,0x8008000000000000L,0x0000000020020024L});
    public static final BitSet FOLLOW_ruleFieldReference_in_ruleRegexValidationRuleDeclaration5464 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_44_in_ruleRegexValidationRuleDeclaration5474 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_27_in_ruleRegexValidationRuleDeclaration5484 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_ruleREGEX_in_ruleRegexValidationRuleDeclaration5505 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_29_in_ruleRegexValidationRuleDeclaration5515 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleREGEX_in_entryRuleREGEX5552 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleREGEX5563 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RULE_STRING_in_ruleREGEX5602 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleRange_in_entryRuleRange5646 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleRange5656 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleRangeBound_in_ruleRange5702 = new BitSet(new long[]{0x2000000000000000L});
    public static final BitSet FOLLOW_61_in_ruleRange5712 = new BitSet(new long[]{0x4000000000000100L});
    public static final BitSet FOLLOW_ruleRangeBound_in_ruleRange5733 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleRangeBound_in_entryRuleRangeBound5770 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleRangeBound5781 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RULE_INT_in_ruleRangeBound5821 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_62_in_ruleRangeBound5845 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleUniquenessValidationRuleDeclaration_in_entryRuleUniquenessValidationRuleDeclaration5885 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleUniquenessValidationRuleDeclaration5895 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_14_in_ruleUniquenessValidationRuleDeclaration5938 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_ruleFunctionArguments_in_ruleUniquenessValidationRuleDeclaration5972 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleErrorMessage_in_entryRuleErrorMessage6008 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleErrorMessage6018 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_63_in_ruleErrorMessage6053 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_RULE_STRING_in_ruleErrorMessage6070 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleNativeValidationRuleDeclaration_in_entryRuleNativeValidationRuleDeclaration6111 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleNativeValidationRuleDeclaration6121 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RULE_ID_in_ruleNativeValidationRuleDeclaration6168 = new BitSet(new long[]{0x0000001000000000L});
    public static final BitSet FOLLOW_36_in_ruleNativeValidationRuleDeclaration6178 = new BitSet(new long[]{0x0000000000004000L,0x000000000000003FL});
    public static final BitSet FOLLOW_14_in_ruleNativeValidationRuleDeclaration6198 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_64_in_ruleNativeValidationRuleDeclaration6227 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_65_in_ruleNativeValidationRuleDeclaration6256 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_66_in_ruleNativeValidationRuleDeclaration6285 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_67_in_ruleNativeValidationRuleDeclaration6314 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_68_in_ruleNativeValidationRuleDeclaration6343 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_69_in_ruleNativeValidationRuleDeclaration6372 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_13_in_ruleNativeValidationRuleDeclaration6398 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_RULE_STRING_in_ruleNativeValidationRuleDeclaration6415 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleFunctionDeclaration_in_entryRuleFunctionDeclaration6456 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleFunctionDeclaration6466 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RULE_ID_in_ruleFunctionDeclaration6509 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_70_in_ruleFunctionDeclaration6524 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_RULE_ID_in_ruleFunctionDeclaration6543 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_ruleFunctionArgumentDeclaration_in_ruleFunctionDeclaration6569 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_ruleFunctionBody_in_ruleFunctionDeclaration6590 = new BitSet(new long[]{0x8000000000000002L});
    public static final BitSet FOLLOW_ruleErrorMessage_in_ruleFunctionDeclaration6611 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleFunctionArgumentDeclaration_in_entryRuleFunctionArgumentDeclaration6648 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleFunctionArgumentDeclaration6658 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_43_in_ruleFunctionArgumentDeclaration6705 = new BitSet(new long[]{0x0000100457F80000L});
    public static final BitSet FOLLOW_ruleFunctionArgumentBody_in_ruleFunctionArgumentDeclaration6726 = new BitSet(new long[]{0x0000100010000000L});
    public static final BitSet FOLLOW_28_in_ruleFunctionArgumentDeclaration6738 = new BitSet(new long[]{0x0000000447F80000L});
    public static final BitSet FOLLOW_ruleFunctionArgumentBody_in_ruleFunctionArgumentDeclaration6759 = new BitSet(new long[]{0x0000100010000000L});
    public static final BitSet FOLLOW_44_in_ruleFunctionArgumentDeclaration6771 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleFunctionArgumentBody_in_entryRuleFunctionArgumentBody6807 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleFunctionArgumentBody6817 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleCharType_in_ruleFunctionArgumentBody6868 = new BitSet(new long[]{0x0800014046800040L,0x0000000008000000L,0x8008000000000000L,0x0000000020020024L});
    public static final BitSet FOLLOW_ruleIntEnum_in_ruleFunctionArgumentBody6898 = new BitSet(new long[]{0x0800014046800040L,0x0000000008000000L,0x8008000000000000L,0x0000000020020024L});
    public static final BitSet FOLLOW_19_in_ruleFunctionArgumentBody6914 = new BitSet(new long[]{0x0000000000100000L});
    public static final BitSet FOLLOW_ruleIntEnum_in_ruleFunctionArgumentBody6939 = new BitSet(new long[]{0x0800014046800040L,0x0000000008000000L,0x8008000000000000L,0x0000000020020024L});
    public static final BitSet FOLLOW_ruleCharEnum_in_ruleFunctionArgumentBody6970 = new BitSet(new long[]{0x0800014046800040L,0x0000000008000000L,0x8008000000000000L,0x0000000020020024L});
    public static final BitSet FOLLOW_19_in_ruleFunctionArgumentBody6986 = new BitSet(new long[]{0x0000000040000000L});
    public static final BitSet FOLLOW_ruleCharEnum_in_ruleFunctionArgumentBody7011 = new BitSet(new long[]{0x0800014046800040L,0x0000000008000000L,0x8008000000000000L,0x0000000020020024L});
    public static final BitSet FOLLOW_20_in_ruleFunctionArgumentBody7027 = new BitSet(new long[]{0x0800014046800040L,0x0000000008000000L,0x8008000000000000L,0x0000000020020024L});
    public static final BitSet FOLLOW_21_in_ruleFunctionArgumentBody7043 = new BitSet(new long[]{0x0800014046800040L,0x0000000008000000L,0x8008000000000000L,0x0000000020020024L});
    public static final BitSet FOLLOW_22_in_ruleFunctionArgumentBody7059 = new BitSet(new long[]{0x0800014046800040L,0x0000000008000000L,0x8008000000000000L,0x0000000020020024L});
    public static final BitSet FOLLOW_23_in_ruleFunctionArgumentBody7075 = new BitSet(new long[]{0x0800014046800040L,0x0000000008000000L,0x8008000000000000L,0x0000000020020024L});
    public static final BitSet FOLLOW_24_in_ruleFunctionArgumentBody7091 = new BitSet(new long[]{0x0800014046800040L,0x0000000008000000L,0x8008000000000000L,0x0000000020020024L});
    public static final BitSet FOLLOW_25_in_ruleFunctionArgumentBody7107 = new BitSet(new long[]{0x0800014046800040L,0x0000000008000000L,0x8008000000000000L,0x0000000020020024L});
    public static final BitSet FOLLOW_26_in_ruleFunctionArgumentBody7123 = new BitSet(new long[]{0x0800014046800040L,0x0000000008000000L,0x8008000000000000L,0x0000000020020024L});
    public static final BitSet FOLLOW_34_in_ruleFunctionArgumentBody7140 = new BitSet(new long[]{0x0800014046800040L,0x0000000008000000L,0x8008000000000000L,0x0000000020020024L});
    public static final BitSet FOLLOW_ruleType_in_ruleFunctionArgumentBody7149 = new BitSet(new long[]{0x0800014046800040L,0x0000000008000000L,0x8008000000000000L,0x0000000020020024L});
    public static final BitSet FOLLOW_19_in_ruleFunctionArgumentBody7159 = new BitSet(new long[]{0x0800014046800040L,0x0000000008000000L,0x8008000000000000L,0x0000000020020024L});
    public static final BitSet FOLLOW_ruleType_in_ruleFunctionArgumentBody7168 = new BitSet(new long[]{0x0800014046800040L,0x0000000008000000L,0x8008000000000000L,0x0000000020020024L});
    public static final BitSet FOLLOW_ruleIdOrKeyword_in_ruleFunctionArgumentBody7183 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleFunctionCall_in_entryRuleFunctionCall7219 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleFunctionCall7229 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RULE_ID_in_ruleFunctionCall7276 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_ruleFunctionArguments_in_ruleFunctionCall7297 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleFieldPath_in_entryRuleFieldPath7333 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleFieldPath7343 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleIdOrKeyword_in_ruleFieldPath7395 = new BitSet(new long[]{0x0000001000000002L});
    public static final BitSet FOLLOW_36_in_ruleFieldPath7406 = new BitSet(new long[]{0x0800014046800040L,0x0000000008000000L,0x8008000000000000L,0x0000000020020024L});
    public static final BitSet FOLLOW_ruleFieldPath_in_ruleFieldPath7427 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleFieldReference_in_entryRuleFieldReference7465 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleFieldReference7475 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleIdOrKeyword_in_ruleFieldReference7526 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleFunctionArguments_in_entryRuleFunctionArguments7561 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleFunctionArguments7571 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_43_in_ruleFunctionArguments7618 = new BitSet(new long[]{0x0800114046800040L,0x0000000008000000L,0x8008000000000000L,0x0000000020020024L});
    public static final BitSet FOLLOW_ruleFieldPath_in_ruleFunctionArguments7640 = new BitSet(new long[]{0x0000100010000000L});
    public static final BitSet FOLLOW_28_in_ruleFunctionArguments7651 = new BitSet(new long[]{0x0800014046800040L,0x0000000008000000L,0x8008000000000000L,0x0000000020020024L});
    public static final BitSet FOLLOW_ruleFieldPath_in_ruleFunctionArguments7672 = new BitSet(new long[]{0x0000100010000000L});
    public static final BitSet FOLLOW_44_in_ruleFunctionArguments7686 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleFunctionBody_in_entryRuleFunctionBody7722 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleFunctionBody7732 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_27_in_ruleFunctionBody7767 = new BitSet(new long[]{0xCBC02DD0240707C0L,0xE000000070077800L,0xFC0E0181C0000FC0L,0x03FF007FFFFFFE07L});
    public static final BitSet FOLLOW_ruleStatement_in_ruleFunctionBody7789 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_ruleExpression_in_ruleFunctionBody7816 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_29_in_ruleFunctionBody7827 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleStatement_in_entryRuleStatement7863 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleStatement7873 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleQueryRule_in_ruleStatement7922 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleUnionRule_in_entryRuleUnionRule7956 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleUnionRule7966 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleQueryRule_in_ruleUnionRule8012 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000080L});
    public static final BitSet FOLLOW_71_in_ruleUnionRule8023 = new BitSet(new long[]{0x0000000000000002L,0x0000000070070080L,0x00000001C0000FC0L});
    public static final BitSet FOLLOW_ruleQueryRule_in_ruleUnionRule8044 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000080L});
    public static final BitSet FOLLOW_ruleQueryRule_in_entryRuleQueryRule8082 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleQueryRule8092 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleSelectFrom_in_ruleQueryRule8142 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x00000001C0000FC0L});
    public static final BitSet FOLLOW_ruleWhereClause_in_ruleQueryRule8162 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000FC0L});
    public static final BitSet FOLLOW_ruleGroupByClause_in_ruleQueryRule8184 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000E00L});
    public static final BitSet FOLLOW_ruleOrderByClause_in_ruleQueryRule8206 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleSelectFrom_in_entryRuleSelectFrom8243 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleSelectFrom8253 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleSelectClause_in_ruleSelectFrom8311 = new BitSet(new long[]{0x0000000000000002L,0x0000000070000000L});
    public static final BitSet FOLLOW_ruleFromClause_in_ruleSelectFrom8333 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleSelectClause_in_entryRuleSelectClause8370 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleSelectClause8380 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleSELECT_in_ruleSelectClause8426 = new BitSet(new long[]{0xCBC02DD0040707C0L,0xE00000007FF87800L,0xFC0E018000000000L,0x03FF007FFFFFFE07L});
    public static final BitSet FOLLOW_ruleDISTINCT_in_ruleSelectClause8428 = new BitSet(new long[]{0xCBC02DD0040707C0L,0xE00000007FC07800L,0xFC0E018000000000L,0x03FF007FFFFFFE07L});
    public static final BitSet FOLLOW_ruleSelectedPropertiesList_in_ruleSelectClause8444 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleNewExpression_in_ruleSelectClause8471 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleSelectObject_in_ruleSelectClause8486 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleNewExpression_in_entryRuleNewExpression8515 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleNewExpression8525 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleNEW_in_ruleNewExpression8559 = new BitSet(new long[]{0x08C025C004000040L,0x0000000070007800L,0xE00E000000000000L,0x0000000000000007L});
    public static final BitSet FOLLOW_rulePath_in_ruleNewExpression8572 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_43_in_ruleNewExpression8582 = new BitSet(new long[]{0xCBC02DD0040707C0L,0xE000000070007800L,0xFC0E018000000000L,0x03FF007FFFFFFE07L});
    public static final BitSet FOLLOW_ruleSelectedPropertiesList_in_ruleNewExpression8603 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_44_in_ruleNewExpression8613 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleSelectObject_in_entryRuleSelectObject8650 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleSelectObject8661 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleOBJECT_in_ruleSelectObject8708 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_43_in_ruleSelectObject8726 = new BitSet(new long[]{0x08C025C004000040L,0x0000000070007800L,0xE00E000000000000L,0x0000000000000007L});
    public static final BitSet FOLLOW_ruleIdentifier_in_ruleSelectObject8748 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_44_in_ruleSelectObject8766 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleFromClause_in_entryRuleFromClause8806 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleFromClause8816 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleFROM_in_ruleFromClause8850 = new BitSet(new long[]{0x08C025C004000040L,0x0380000070007800L,0xE00E000000000000L,0x0000000000000007L});
    public static final BitSet FOLLOW_ruleFromRange_in_ruleFromClause8863 = new BitSet(new long[]{0x0000000010000002L,0x0001FF1F80000000L});
    public static final BitSet FOLLOW_ruleFromJoin_in_ruleFromClause8885 = new BitSet(new long[]{0x0000000010000002L,0x0001FF1F80000000L});
    public static final BitSet FOLLOW_28_in_ruleFromClause8902 = new BitSet(new long[]{0x08C025C004000040L,0x0380000070007800L,0xE00E000000000000L,0x0000000000000007L});
    public static final BitSet FOLLOW_ruleFromRange_in_ruleFromClause8923 = new BitSet(new long[]{0x0000000010000002L,0x0001FF1F80000000L});
    public static final BitSet FOLLOW_ruleFromJoin_in_entryRuleFromJoin8962 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleFromJoin8972 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleLEFT_in_ruleFromJoin9009 = new BitSet(new long[]{0x0000000000000000L,0x0001C0E000000000L});
    public static final BitSet FOLLOW_ruleRIGHT_in_ruleFromJoin9016 = new BitSet(new long[]{0x0000000000000000L,0x0001C0E000000000L});
    public static final BitSet FOLLOW_ruleOUTER_in_ruleFromJoin9019 = new BitSet(new long[]{0x0000000000000000L,0x0001C00000000000L});
    public static final BitSet FOLLOW_ruleFULL_in_ruleFromJoin9029 = new BitSet(new long[]{0x0000000000000000L,0x0001C00000000000L});
    public static final BitSet FOLLOW_ruleINNER_in_ruleFromJoin9036 = new BitSet(new long[]{0x0000000000000000L,0x0001C00000000000L});
    public static final BitSet FOLLOW_ruleJOIN_in_ruleFromJoin9039 = new BitSet(new long[]{0x08C025C004000040L,0x000E000070007800L,0xE00E000000000000L,0x0000000000000007L});
    public static final BitSet FOLLOW_ruleFETCH_in_ruleFromJoin9041 = new BitSet(new long[]{0x08C025C004000040L,0x0000000070007800L,0xE00E000000000000L,0x0000000000000007L});
    public static final BitSet FOLLOW_ruleFromClassOrOuterQueryPath_in_ruleFromJoin9060 = new BitSet(new long[]{0x0000000000000002L,0x0070000000000000L});
    public static final BitSet FOLLOW_ruleWithClause_in_ruleFromJoin9080 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleWithClause_in_entryRuleWithClause9117 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleWithClause9127 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleWITH_in_ruleWithClause9161 = new BitSet(new long[]{0xCBC02DD0040707C0L,0xE000000070007800L,0xFC0E018000000000L,0x03FF007FFFFFFE07L});
    public static final BitSet FOLLOW_ruleExpression_in_ruleWithClause9174 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleFromRange_in_entryRuleFromRange9210 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleFromRange9220 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleFromClassOrOuterQueryPath_in_ruleFromRange9270 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleIdentifier_in_ruleFromRange9297 = new BitSet(new long[]{0x0000000000000000L,0x0380000000000000L});
    public static final BitSet FOLLOW_ruleIN_CLASS_in_ruleFromRange9306 = new BitSet(new long[]{0x08C025C004000040L,0x0000000070007800L,0xE00E000000000000L,0x0000000000000007L});
    public static final BitSet FOLLOW_rulePath_in_ruleFromRange9319 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleIN_in_ruleFromRange9336 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_43_in_ruleFromRange9338 = new BitSet(new long[]{0x08C025C004000040L,0x0000000070007800L,0xE00E000000000000L,0x0000000000000007L});
    public static final BitSet FOLLOW_rulePath_in_ruleFromRange9359 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_44_in_ruleFromRange9369 = new BitSet(new long[]{0x08C025C004000040L,0x0000000070007800L,0xE00E000000000000L,0x0000000000000007L});
    public static final BitSet FOLLOW_ruleIdentifier_in_ruleFromRange9390 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleInCollectionElementsDeclaration_in_ruleFromRange9422 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleFromClassOrOuterQueryPath_in_entryRuleFromClassOrOuterQueryPath9457 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleFromClassOrOuterQueryPath9467 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rulePath_in_ruleFromClassOrOuterQueryPath9525 = new BitSet(new long[]{0x08C025C004000042L,0x000E000070007800L,0xE00E000000000007L,0x0000000000000007L});
    public static final BitSet FOLLOW_ruleAS_in_ruleFromClassOrOuterQueryPath9536 = new BitSet(new long[]{0x08C025C004000040L,0x0000000070007800L,0xE00E000000000000L,0x0000000000000007L});
    public static final BitSet FOLLOW_ruleIdentifier_in_ruleFromClassOrOuterQueryPath9551 = new BitSet(new long[]{0x0000000000000002L,0x000E000000000000L});
    public static final BitSet FOLLOW_rulePropertyFetch_in_ruleFromClassOrOuterQueryPath9574 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleInCollectionElementsDeclaration_in_entryRuleInCollectionElementsDeclaration9611 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleInCollectionElementsDeclaration9621 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleIdentifier_in_ruleInCollectionElementsDeclaration9667 = new BitSet(new long[]{0x0000000000000000L,0x0380000000000000L});
    public static final BitSet FOLLOW_ruleIN_ELEMENTS_in_ruleInCollectionElementsDeclaration9676 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_43_in_ruleInCollectionElementsDeclaration9678 = new BitSet(new long[]{0x08C025C004000040L,0x0000000070007800L,0xE00E000000000000L,0x0000000000000007L});
    public static final BitSet FOLLOW_rulePath_in_ruleInCollectionElementsDeclaration9699 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_44_in_ruleInCollectionElementsDeclaration9709 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rulePropertyFetch_in_entryRulePropertyFetch9746 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRulePropertyFetch9757 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleFETCH_in_rulePropertyFetch9804 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000038000L});
    public static final BitSet FOLLOW_ruleALL_in_rulePropertyFetch9831 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000038L});
    public static final BitSet FOLLOW_rulePROPERTIES_in_rulePropertyFetch9858 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleGroupByClause_in_entryRuleGroupByClause9903 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleGroupByClause9913 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleGROUP_BY_in_ruleGroupByClause9947 = new BitSet(new long[]{0xCBC02DD0040707C0L,0xE000000070007800L,0xFC0E018000000000L,0x03FF007FFFFFFE07L});
    public static final BitSet FOLLOW_ruleExpression_in_ruleGroupByClause9960 = new BitSet(new long[]{0x0000000010000002L,0x0000000000000000L,0x0000000038000000L});
    public static final BitSet FOLLOW_28_in_ruleGroupByClause9971 = new BitSet(new long[]{0xCBC02DD0040707C0L,0xE000000070007800L,0xFC0E018000000000L,0x03FF007FFFFFFE07L});
    public static final BitSet FOLLOW_ruleExpression_in_ruleGroupByClause9992 = new BitSet(new long[]{0x0000000010000002L,0x0000000000000000L,0x0000000038000000L});
    public static final BitSet FOLLOW_ruleHavingClause_in_ruleGroupByClause10015 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleOrderByClause_in_entryRuleOrderByClause10052 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleOrderByClause10062 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleORDER_BY_in_ruleOrderByClause10096 = new BitSet(new long[]{0xCBC02DD0040707C0L,0xE000000070007800L,0xFC0E018000000000L,0x03FF007FFFFFFE07L});
    public static final BitSet FOLLOW_ruleOrderElement_in_ruleOrderByClause10109 = new BitSet(new long[]{0x0000000010000002L});
    public static final BitSet FOLLOW_28_in_ruleOrderByClause10120 = new BitSet(new long[]{0xCBC02DD0040707C0L,0xE000000070007800L,0xFC0E018000000000L,0x03FF007FFFFFFE07L});
    public static final BitSet FOLLOW_ruleOrderElement_in_ruleOrderByClause10141 = new BitSet(new long[]{0x0000000010000002L});
    public static final BitSet FOLLOW_ruleOrderElement_in_entryRuleOrderElement10179 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleOrderElement10189 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleExpression_in_ruleOrderElement10239 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000007FF8000L});
    public static final BitSet FOLLOW_ruleAscendingOrDescending_in_ruleOrderElement10248 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleAscendingOrDescending_in_entryRuleAscendingOrDescending10279 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleAscendingOrDescending10290 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleASC_in_ruleAscendingOrDescending10337 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleDESC_in_ruleAscendingOrDescending10370 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleHavingClause_in_entryRuleHavingClause10415 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleHavingClause10425 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleHAVING_in_ruleHavingClause10459 = new BitSet(new long[]{0xCBC02DD0040707C0L,0xE000000070007800L,0xFC0E018000000000L,0x03FF007FFFFFFE07L});
    public static final BitSet FOLLOW_ruleExpression_in_ruleHavingClause10472 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleWhereClause_in_entryRuleWhereClause10508 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleWhereClause10518 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleWHERE_in_ruleWhereClause10552 = new BitSet(new long[]{0xCBC02DD0040707C0L,0xE000000070007800L,0xFC0E018000000000L,0x03FF007FFFFFFE07L});
    public static final BitSet FOLLOW_ruleExpression_in_ruleWhereClause10565 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleSelectedPropertiesList_in_entryRuleSelectedPropertiesList10601 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleSelectedPropertiesList10611 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleAliasedExpression_in_ruleSelectedPropertiesList10657 = new BitSet(new long[]{0x0000000010000002L});
    public static final BitSet FOLLOW_28_in_ruleSelectedPropertiesList10668 = new BitSet(new long[]{0xCBC02DD0040707C0L,0xE000000070007800L,0xFC0E018000000000L,0x03FF007FFFFFFE07L});
    public static final BitSet FOLLOW_ruleAliasedExpression_in_ruleSelectedPropertiesList10689 = new BitSet(new long[]{0x0000000010000002L});
    public static final BitSet FOLLOW_ruleAliasedExpression_in_entryRuleAliasedExpression10727 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleAliasedExpression10737 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleExpression_in_ruleAliasedExpression10787 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000007L});
    public static final BitSet FOLLOW_ruleAS_in_ruleAliasedExpression10796 = new BitSet(new long[]{0x08C025C004000040L,0x0000000070007800L,0xE00E000000000000L,0x0000000000000007L});
    public static final BitSet FOLLOW_ruleIdentifier_in_ruleAliasedExpression10809 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleExpression_in_entryRuleExpression10847 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleExpression10857 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleLogicalOrExpression_in_ruleExpression10906 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleLogicalOrExpression_in_entryRuleLogicalOrExpression10940 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleLogicalOrExpression10950 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleLogicalAndExpression_in_ruleLogicalOrExpression10996 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000E00000000L});
    public static final BitSet FOLLOW_ruleOR_in_ruleLogicalOrExpression11006 = new BitSet(new long[]{0xCBC02DD0040707C0L,0xE000000070007800L,0xFC0E018000000000L,0x03FF007FFFFFFE07L});
    public static final BitSet FOLLOW_ruleLogicalAndExpression_in_ruleLogicalOrExpression11019 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000E00000000L});
    public static final BitSet FOLLOW_ruleLogicalAndExpression_in_entryRuleLogicalAndExpression11057 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleLogicalAndExpression11067 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleNegatedExpression_in_ruleLogicalAndExpression11113 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000007000000000L});
    public static final BitSet FOLLOW_ruleAND_in_ruleLogicalAndExpression11123 = new BitSet(new long[]{0xCBC02DD0040707C0L,0xE000000070007800L,0xFC0E018000000000L,0x03FF007FFFFFFE07L});
    public static final BitSet FOLLOW_ruleNegatedExpression_in_ruleLogicalAndExpression11136 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000007000000000L});
    public static final BitSet FOLLOW_ruleNegatedExpression_in_entryRuleNegatedExpression11174 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleNegatedExpression11184 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleNOT_in_ruleNegatedExpression11219 = new BitSet(new long[]{0xCBC02DD0040707C0L,0xE000000070007800L,0xFC0E018000000000L,0x03FF007FFFFFFE07L});
    public static final BitSet FOLLOW_ruleNegatedExpression_in_ruleNegatedExpression11232 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleEqualityExpression_in_ruleNegatedExpression11264 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleEqualityExpression_in_entryRuleEqualityExpression11299 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleEqualityExpression11309 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleRelationalExpression_in_ruleEqualityExpression11355 = new BitSet(new long[]{0x0014000000002002L,0x0000000000000000L,0x00000E0000000000L});
    public static final BitSet FOLLOW_13_in_ruleEqualityExpression11367 = new BitSet(new long[]{0xCBC02DD0040607C0L,0xE000000070007800L,0xFC0E000000000000L,0x03FF007FFFFFFE07L});
    public static final BitSet FOLLOW_ruleIS_in_ruleEqualityExpression11383 = new BitSet(new long[]{0xCBC02DD0040707C0L,0xE000000070007800L,0xFC0E018000000000L,0x03FF007FFFFFFE07L});
    public static final BitSet FOLLOW_ruleNOT_in_ruleEqualityExpression11385 = new BitSet(new long[]{0xCBC02DD0040607C0L,0xE000000070007800L,0xFC0E000000000000L,0x03FF007FFFFFFE07L});
    public static final BitSet FOLLOW_50_in_ruleEqualityExpression11396 = new BitSet(new long[]{0xCBC02DD0040607C0L,0xE000000070007800L,0xFC0E000000000000L,0x03FF007FFFFFFE07L});
    public static final BitSet FOLLOW_52_in_ruleEqualityExpression11412 = new BitSet(new long[]{0xCBC02DD0040607C0L,0xE000000070007800L,0xFC0E000000000000L,0x03FF007FFFFFFE07L});
    public static final BitSet FOLLOW_ruleRelationalExpression_in_ruleEqualityExpression11434 = new BitSet(new long[]{0x0014000000002002L,0x0000000000000000L,0x00000E0000000000L});
    public static final BitSet FOLLOW_ruleRelationalExpression_in_entryRuleRelationalExpression11472 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleRelationalExpression11482 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleConcatenation_in_ruleRelationalExpression11532 = new BitSet(new long[]{0x0023C00000010002L,0x0380000000000000L,0x000FF18000000000L});
    public static final BitSet FOLLOW_46_in_ruleRelationalExpression11544 = new BitSet(new long[]{0xCBC02DD0040607C0L,0xE000000070007800L,0xFC0E000000000000L,0x03FF007FFFFFFE07L});
    public static final BitSet FOLLOW_47_in_ruleRelationalExpression11560 = new BitSet(new long[]{0xCBC02DD0040607C0L,0xE000000070007800L,0xFC0E000000000000L,0x03FF007FFFFFFE07L});
    public static final BitSet FOLLOW_48_in_ruleRelationalExpression11576 = new BitSet(new long[]{0xCBC02DD0040607C0L,0xE000000070007800L,0xFC0E000000000000L,0x03FF007FFFFFFE07L});
    public static final BitSet FOLLOW_49_in_ruleRelationalExpression11592 = new BitSet(new long[]{0xCBC02DD0040607C0L,0xE000000070007800L,0xFC0E000000000000L,0x03FF007FFFFFFE07L});
    public static final BitSet FOLLOW_ruleAdditiveExpression_in_ruleRelationalExpression11614 = new BitSet(new long[]{0x0003C00000000002L});
    public static final BitSet FOLLOW_ruleNOT_in_ruleRelationalExpression11633 = new BitSet(new long[]{0x0020000000000000L,0x0380000000000000L,0x000FF00000000000L});
    public static final BitSet FOLLOW_ruleIN_in_ruleRelationalExpression11638 = new BitSet(new long[]{0x08C02DC004000040L,0xE000000070007800L,0xE00E000000000000L,0x0000007000000007L});
    public static final BitSet FOLLOW_ruleCompoundExpr_in_ruleRelationalExpression11651 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleBETWEEN_in_ruleRelationalExpression11668 = new BitSet(new long[]{0xCBC02DD0040607C0L,0xE000000070007800L,0xFC0E000000000000L,0x03FF007FFFFFFE07L});
    public static final BitSet FOLLOW_ruleBetweenList_in_ruleRelationalExpression11681 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleLIKE_in_ruleRelationalExpression11698 = new BitSet(new long[]{0xCBC02DD0040607C0L,0xE000000070007800L,0xFC0E000000000000L,0x03FF007FFFFFFE07L});
    public static final BitSet FOLLOW_ruleConcatenation_in_ruleRelationalExpression11711 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0380000000000000L});
    public static final BitSet FOLLOW_ruleLikeEscape_in_ruleRelationalExpression11732 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleMEMBER_in_ruleRelationalExpression11749 = new BitSet(new long[]{0x08C025C004000040L,0x0000000070007800L,0xE07E000000000000L,0x0000000000000007L});
    public static final BitSet FOLLOW_ruleOF_in_ruleRelationalExpression11751 = new BitSet(new long[]{0x08C025C004000040L,0x0000000070007800L,0xE00E000000000000L,0x0000000000000007L});
    public static final BitSet FOLLOW_rulePath_in_ruleRelationalExpression11766 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleLikeEscape_in_entryRuleLikeEscape11806 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleLikeEscape11816 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleESCAPE_in_ruleLikeEscape11863 = new BitSet(new long[]{0xCBC02DD0040607C0L,0xE000000070007800L,0xFC0E000000000000L,0x03FF007FFFFFFE07L});
    public static final BitSet FOLLOW_ruleConcatenation_in_ruleLikeEscape11876 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleBetweenList_in_entryRuleBetweenList11914 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleBetweenList11924 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleConcatenation_in_ruleBetweenList11970 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000007000000000L});
    public static final BitSet FOLLOW_ruleAND_in_ruleBetweenList11979 = new BitSet(new long[]{0xCBC02DD0040607C0L,0xE000000070007800L,0xFC0E000000000000L,0x03FF007FFFFFFE07L});
    public static final BitSet FOLLOW_ruleConcatenation_in_ruleBetweenList11992 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleConcatenation_in_entryRuleConcatenation12028 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleConcatenation12038 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleAdditiveExpression_in_ruleConcatenation12088 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000100L});
    public static final BitSet FOLLOW_72_in_ruleConcatenation12098 = new BitSet(new long[]{0xCBC02DD0040607C0L,0xE000000070007800L,0xFC0E000000000000L,0x03FF007FFFFFFE07L});
    public static final BitSet FOLLOW_ruleAdditiveExpression_in_ruleConcatenation12119 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000100L});
    public static final BitSet FOLLOW_72_in_ruleConcatenation12130 = new BitSet(new long[]{0xCBC02DD0040607C0L,0xE000000070007800L,0xFC0E000000000000L,0x03FF007FFFFFFE07L});
    public static final BitSet FOLLOW_ruleAdditiveExpression_in_ruleConcatenation12151 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000100L});
    public static final BitSet FOLLOW_ruleAdditiveExpression_in_entryRuleAdditiveExpression12191 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleAdditiveExpression12201 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleMultiplyExpression_in_ruleAdditiveExpression12247 = new BitSet(new long[]{0x0300000000000002L});
    public static final BitSet FOLLOW_56_in_ruleAdditiveExpression12259 = new BitSet(new long[]{0xCBC02DD0040607C0L,0xE000000070007800L,0xFC0E000000000000L,0x03FF007FFFFFFE07L});
    public static final BitSet FOLLOW_57_in_ruleAdditiveExpression12275 = new BitSet(new long[]{0xCBC02DD0040607C0L,0xE000000070007800L,0xFC0E000000000000L,0x03FF007FFFFFFE07L});
    public static final BitSet FOLLOW_ruleMultiplyExpression_in_ruleAdditiveExpression12297 = new BitSet(new long[]{0x0300000000000002L});
    public static final BitSet FOLLOW_ruleMultiplyExpression_in_entryRuleMultiplyExpression12335 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleMultiplyExpression12345 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleUnaryExpression_in_ruleMultiplyExpression12391 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000600L});
    public static final BitSet FOLLOW_73_in_ruleMultiplyExpression12403 = new BitSet(new long[]{0xCBC02DD0040607C0L,0xE000000070007800L,0xFC0E000000000000L,0x03FF007FFFFFFE07L});
    public static final BitSet FOLLOW_74_in_ruleMultiplyExpression12419 = new BitSet(new long[]{0xCBC02DD0040607C0L,0xE000000070007800L,0xFC0E000000000000L,0x03FF007FFFFFFE07L});
    public static final BitSet FOLLOW_ruleUnaryExpression_in_ruleMultiplyExpression12441 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000600L});
    public static final BitSet FOLLOW_ruleUnaryExpression_in_entryRuleUnaryExpression12479 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleUnaryExpression12489 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_57_in_ruleUnaryExpression12525 = new BitSet(new long[]{0xCBC02DD0040607C0L,0xE000000070007800L,0xFC0E000000000000L,0x03FF007FFFFFFE07L});
    public static final BitSet FOLLOW_ruleUnaryExpression_in_ruleUnaryExpression12546 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_56_in_ruleUnaryExpression12564 = new BitSet(new long[]{0xCBC02DD0040607C0L,0xE000000070007800L,0xFC0E000000000000L,0x03FF007FFFFFFE07L});
    public static final BitSet FOLLOW_ruleUnaryExpression_in_ruleUnaryExpression12585 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleCaseExpression_in_ruleUnaryExpression12617 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleQuantifiedExpression_in_ruleUnaryExpression12647 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleAtom_in_ruleUnaryExpression12677 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleCaseExpression_in_entryRuleCaseExpression12712 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleCaseExpression12722 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleCASE_in_ruleCaseExpression12757 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000007L});
    public static final BitSet FOLLOW_ruleWhenClause_in_ruleCaseExpression12770 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0xE000000000000000L,0x00000000000001C7L});
    public static final BitSet FOLLOW_ruleElseClause_in_ruleCaseExpression12792 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0xE000000000000000L});
    public static final BitSet FOLLOW_ruleEND_in_ruleCaseExpression12802 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleCASE_in_ruleCaseExpression12811 = new BitSet(new long[]{0xCBC02DD0040607C0L,0xE000000070007800L,0xFC0E000000000000L,0x03FF007FFFFFFE07L});
    public static final BitSet FOLLOW_ruleUnaryExpression_in_ruleCaseExpression12824 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000007L});
    public static final BitSet FOLLOW_ruleAltWhenClause_in_ruleCaseExpression12845 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0xE000000000000000L,0x00000000000001C7L});
    public static final BitSet FOLLOW_ruleElseClause_in_ruleCaseExpression12867 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0xE000000000000000L});
    public static final BitSet FOLLOW_ruleEND_in_ruleCaseExpression12877 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleWhenClause_in_entryRuleWhenClause12906 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleWhenClause12916 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleWHEN_in_ruleWhenClause12950 = new BitSet(new long[]{0xCBC02DD0040707C0L,0xE000000070007800L,0xFC0E018000000000L,0x03FF007FFFFFFE07L});
    public static final BitSet FOLLOW_ruleExpression_in_ruleWhenClause12963 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000038L});
    public static final BitSet FOLLOW_ruleTHEN_in_ruleWhenClause12972 = new BitSet(new long[]{0xCBC02DD0040607C0L,0xE000000070007800L,0xFC0E000000000000L,0x03FF007FFFFFFE07L});
    public static final BitSet FOLLOW_ruleUnaryExpression_in_ruleWhenClause12985 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleAltWhenClause_in_entryRuleAltWhenClause13021 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleAltWhenClause13031 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleWHEN_in_ruleAltWhenClause13065 = new BitSet(new long[]{0xCBC02DD0040607C0L,0xE000000070007800L,0xFC0E000000000000L,0x03FF007FFFFFFE07L});
    public static final BitSet FOLLOW_ruleUnaryExpression_in_ruleAltWhenClause13078 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000038L});
    public static final BitSet FOLLOW_ruleTHEN_in_ruleAltWhenClause13087 = new BitSet(new long[]{0xCBC02DD0040607C0L,0xE000000070007800L,0xFC0E000000000000L,0x03FF007FFFFFFE07L});
    public static final BitSet FOLLOW_ruleUnaryExpression_in_ruleAltWhenClause13100 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleElseClause_in_entryRuleElseClause13136 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleElseClause13146 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleELSE_in_ruleElseClause13180 = new BitSet(new long[]{0xCBC02DD0040607C0L,0xE000000070007800L,0xFC0E000000000000L,0x03FF007FFFFFFE07L});
    public static final BitSet FOLLOW_ruleUnaryExpression_in_ruleElseClause13193 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleQuantifiedExpression_in_entryRuleQuantifiedExpression13229 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleQuantifiedExpression13239 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleSOME_in_ruleQuantifiedExpression13286 = new BitSet(new long[]{0x08C02DC004000040L,0xE000000070007800L,0xE00E000000000000L,0x0000007000000007L});
    public static final BitSet FOLLOW_ruleEXISTS_in_ruleQuantifiedExpression13293 = new BitSet(new long[]{0x08C02DC004000040L,0xE000000070007800L,0xE00E000000000000L,0x0000007000000007L});
    public static final BitSet FOLLOW_ruleALL_in_ruleQuantifiedExpression13300 = new BitSet(new long[]{0x08C02DC004000040L,0xE000000070007800L,0xE00E000000000000L,0x0000007000000007L});
    public static final BitSet FOLLOW_ruleANY_in_ruleQuantifiedExpression13307 = new BitSet(new long[]{0x08C02DC004000040L,0xE000000070007800L,0xE00E000000000000L,0x0000007000000007L});
    public static final BitSet FOLLOW_ruleIdentifier_in_ruleQuantifiedExpression13310 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleCollectionExpr_in_ruleQuantifiedExpression13317 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_43_in_ruleQuantifiedExpression13326 = new BitSet(new long[]{0x0000100000000000L,0x0000000070070080L,0x00000001C0000FC0L});
    public static final BitSet FOLLOW_ruleUnionRule_in_ruleQuantifiedExpression13347 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_44_in_ruleQuantifiedExpression13357 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleAtom_in_entryRuleAtom13395 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleAtom13405 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rulePrimaryExpression_in_ruleAtom13464 = new BitSet(new long[]{0x0000001100000002L});
    public static final BitSet FOLLOW_36_in_ruleAtom13476 = new BitSet(new long[]{0x08C025C004000040L,0x0000000070007800L,0xE00E000000000000L,0x0000000000000007L});
    public static final BitSet FOLLOW_ruleIdentifier_in_ruleAtom13485 = new BitSet(new long[]{0x0000081100000002L});
    public static final BitSet FOLLOW_43_in_ruleAtom13488 = new BitSet(new long[]{0xCBC03DD0040707C0L,0xE000000070007800L,0xFC0E018000000000L,0x03FFFFFFFFFFFE07L});
    public static final BitSet FOLLOW_ruleExprList_in_ruleAtom13509 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_44_in_ruleAtom13519 = new BitSet(new long[]{0x0000001100000002L});
    public static final BitSet FOLLOW_32_in_ruleAtom13539 = new BitSet(new long[]{0xCBC02DD0040707C0L,0xE000000070007800L,0xFC0E018000000000L,0x03FF007FFFFFFE07L});
    public static final BitSet FOLLOW_ruleExpression_in_ruleAtom13560 = new BitSet(new long[]{0x0000000200000000L});
    public static final BitSet FOLLOW_33_in_ruleAtom13570 = new BitSet(new long[]{0x0000001100000002L});
    public static final BitSet FOLLOW_rulePrimaryExpression_in_entryRulePrimaryExpression13610 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRulePrimaryExpression13620 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleIdentPrimary_in_rulePrimaryExpression13671 = new BitSet(new long[]{0x0000001000000002L});
    public static final BitSet FOLLOW_36_in_rulePrimaryExpression13681 = new BitSet(new long[]{0x0000000000000000L,0x1C00000000000000L});
    public static final BitSet FOLLOW_ruleCLASS_in_rulePrimaryExpression13690 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleConstant_in_rulePrimaryExpression13700 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_63_in_rulePrimaryExpression13709 = new BitSet(new long[]{0x08C025C004000040L,0x0000000070007800L,0xE00E000000000000L,0x0000000000000007L});
    public static final BitSet FOLLOW_ruleIdentifier_in_rulePrimaryExpression13718 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_43_in_rulePrimaryExpression13728 = new BitSet(new long[]{0xCBC03DD0040707C0L,0xE000000070077880L,0xFC0E0181C0000FC0L,0x03FF007FFFFFFE07L});
    public static final BitSet FOLLOW_ruleExpressionOrVector_in_rulePrimaryExpression13754 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_ruleUnionRule_in_rulePrimaryExpression13784 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_44_in_rulePrimaryExpression13794 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_62_in_rulePrimaryExpression13812 = new BitSet(new long[]{0x0000000000000102L});
    public static final BitSet FOLLOW_RULE_INT_in_rulePrimaryExpression13822 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleExpressionOrVector_in_entryRuleExpressionOrVector13860 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleExpressionOrVector13870 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleExpression_in_ruleExpressionOrVector13920 = new BitSet(new long[]{0x0000000010000002L});
    public static final BitSet FOLLOW_ruleVectorExpr_in_ruleExpressionOrVector13940 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleVectorExpr_in_entryRuleVectorExpr13977 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleVectorExpr13987 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_28_in_ruleVectorExpr14022 = new BitSet(new long[]{0xCBC02DD0040707C0L,0xE000000070007800L,0xFC0E018000000000L,0x03FF007FFFFFFE07L});
    public static final BitSet FOLLOW_ruleExpression_in_ruleVectorExpr14043 = new BitSet(new long[]{0x0000000010000002L});
    public static final BitSet FOLLOW_28_in_ruleVectorExpr14054 = new BitSet(new long[]{0xCBC02DD0040707C0L,0xE000000070007800L,0xFC0E018000000000L,0x03FF007FFFFFFE07L});
    public static final BitSet FOLLOW_ruleExpression_in_ruleVectorExpr14075 = new BitSet(new long[]{0x0000000010000002L});
    public static final BitSet FOLLOW_ruleIdentPrimary_in_entryRuleIdentPrimary14113 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleIdentPrimary14123 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleIdentifier_in_ruleIdentPrimary14171 = new BitSet(new long[]{0x0000081000000002L});
    public static final BitSet FOLLOW_36_in_ruleIdentPrimary14175 = new BitSet(new long[]{0x08C025C004000040L,0x0000000070007800L,0xE00E000000000000L,0x0000000000000007L});
    public static final BitSet FOLLOW_ruleIdentifier_in_ruleIdentPrimary14184 = new BitSet(new long[]{0x0000081000000002L});
    public static final BitSet FOLLOW_36_in_ruleIdentPrimary14194 = new BitSet(new long[]{0x0000000000000000L,0xE000000000000000L});
    public static final BitSet FOLLOW_ruleELEMENTS_in_ruleIdentPrimary14203 = new BitSet(new long[]{0x0000081000000002L});
    public static final BitSet FOLLOW_36_in_ruleIdentPrimary14213 = new BitSet(new long[]{0x0000000000000000L,0x000000000E000000L});
    public static final BitSet FOLLOW_ruleOBJECT_in_ruleIdentPrimary14222 = new BitSet(new long[]{0x0000081000000002L});
    public static final BitSet FOLLOW_43_in_ruleIdentPrimary14228 = new BitSet(new long[]{0xCBC03DD0040707C0L,0xE000000070007800L,0xFC0E018000000000L,0x03FFFFFFFFFFFE07L});
    public static final BitSet FOLLOW_ruleExprList_in_ruleIdentPrimary14249 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_44_in_ruleIdentPrimary14259 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleAggregate_in_ruleIdentPrimary14294 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleAggregate_in_entryRuleAggregate14329 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleAggregate14339 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleSUM_in_ruleAggregate14387 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_ruleAVG_in_ruleAggregate14394 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_ruleMAX_in_ruleAggregate14401 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_ruleMIN_in_ruleAggregate14408 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_43_in_ruleAggregate14411 = new BitSet(new long[]{0xCBC02DD0040607C0L,0xE000000070007800L,0xFC0E000000000000L,0x03FF007FFFFFFE07L});
    public static final BitSet FOLLOW_ruleAdditiveExpression_in_ruleAggregate14432 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_44_in_ruleAggregate14442 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleCOUNT_in_ruleAggregate14471 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_43_in_ruleAggregate14473 = new BitSet(new long[]{0x08C025C004000040L,0xE000000070387A00L,0xE00E000000000000L,0x0000007000038007L});
    public static final BitSet FOLLOW_73_in_ruleAggregate14484 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_ruleDISTINCT_in_ruleAggregate14501 = new BitSet(new long[]{0x08C025C004000040L,0xE000000070007800L,0xE00E000000000000L,0x0000007000000007L});
    public static final BitSet FOLLOW_ruleALL_in_ruleAggregate14508 = new BitSet(new long[]{0x08C025C004000040L,0xE000000070007800L,0xE00E000000000000L,0x0000007000000007L});
    public static final BitSet FOLLOW_rulePath_in_ruleAggregate14512 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_ruleCollectionExpr_in_ruleAggregate14519 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_44_in_ruleAggregate14524 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleCollectionExpr_in_ruleAggregate14540 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleCollectionExpr_in_entryRuleCollectionExpr14569 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleCollectionExpr14580 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleELEMENTS_in_ruleCollectionExpr14628 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_ruleINDICES_in_ruleCollectionExpr14661 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_43_in_ruleCollectionExpr14680 = new BitSet(new long[]{0x08C025C004000040L,0x0000000070007800L,0xE00E000000000000L,0x0000000000000007L});
    public static final BitSet FOLLOW_rulePath_in_ruleCollectionExpr14702 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_44_in_ruleCollectionExpr14720 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleCompoundExpr_in_entryRuleCompoundExpr14760 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleCompoundExpr14770 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleCollectionExpr_in_ruleCompoundExpr14804 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rulePath_in_ruleCompoundExpr14811 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_43_in_ruleCompoundExpr14820 = new BitSet(new long[]{0xCBC03DD0040707C0L,0xE000000070077880L,0xFC0E0181C0000FC0L,0x03FF007FFFFFFE07L});
    public static final BitSet FOLLOW_ruleExpression_in_ruleCompoundExpr14843 = new BitSet(new long[]{0x0000100010000000L});
    public static final BitSet FOLLOW_28_in_ruleCompoundExpr14854 = new BitSet(new long[]{0xCBC02DD0040707C0L,0xE000000070007800L,0xFC0E018000000000L,0x03FF007FFFFFFE07L});
    public static final BitSet FOLLOW_ruleExpression_in_ruleCompoundExpr14875 = new BitSet(new long[]{0x0000100010000000L});
    public static final BitSet FOLLOW_ruleUnionRule_in_ruleCompoundExpr14905 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_44_in_ruleCompoundExpr14916 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleExprList_in_entryRuleExprList14953 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleExprList14963 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleTRAILING_in_ruleExprList14998 = new BitSet(new long[]{0xCBC02DD0040707C2L,0xE000000070007800L,0xFC0E018000000000L,0x03FF007FFFFFFE07L});
    public static final BitSet FOLLOW_ruleLEADING_in_ruleExprList15005 = new BitSet(new long[]{0xCBC02DD0040707C2L,0xE000000070007800L,0xFC0E018000000000L,0x03FF007FFFFFFE07L});
    public static final BitSet FOLLOW_ruleBOTH_in_ruleExprList15012 = new BitSet(new long[]{0xCBC02DD0040707C2L,0xE000000070007800L,0xFC0E018000000000L,0x03FF007FFFFFFE07L});
    public static final BitSet FOLLOW_ruleExpression_in_ruleExprList15029 = new BitSet(new long[]{0x0000000010000002L,0x0000000070000000L,0x0000000000000007L});
    public static final BitSet FOLLOW_28_in_ruleExprList15041 = new BitSet(new long[]{0xCBC02DD0040707C0L,0xE000000070007800L,0xFC0E018000000000L,0x03FF007FFFFFFE07L});
    public static final BitSet FOLLOW_ruleExpression_in_ruleExprList15062 = new BitSet(new long[]{0x0000000010000002L});
    public static final BitSet FOLLOW_ruleFROM_in_ruleExprList15080 = new BitSet(new long[]{0xCBC02DD0040707C0L,0xE000000070007800L,0xFC0E018000000000L,0x03FF007FFFFFFE07L});
    public static final BitSet FOLLOW_ruleExpression_in_ruleExprList15093 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleAS_in_ruleExprList15110 = new BitSet(new long[]{0x08C025C004000040L,0x0000000070007800L,0xE00E000000000000L,0x0000000000000007L});
    public static final BitSet FOLLOW_ruleIdentifier_in_ruleExprList15123 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleFROM_in_ruleExprList15143 = new BitSet(new long[]{0xCBC02DD0040707C0L,0xE000000070007800L,0xFC0E018000000000L,0x03FF007FFFFFFE07L});
    public static final BitSet FOLLOW_ruleExpression_in_ruleExprList15156 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleConstant_in_entryRuleConstant15196 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleConstant15207 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleNumber_in_ruleConstant15254 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RULE_STRING_in_ruleConstant15280 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleNULL_in_ruleConstant15313 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleTRUE_in_ruleConstant15346 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleFALSE_in_ruleConstant15379 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleEMPTY_in_ruleConstant15412 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rulePath_in_entryRulePath15458 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRulePath15469 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleIdentifier_in_rulePath15516 = new BitSet(new long[]{0x0000001000000002L});
    public static final BitSet FOLLOW_36_in_rulePath15535 = new BitSet(new long[]{0x08C025C004000040L,0x0000000070007800L,0xE00E000000000000L,0x0000000000000007L});
    public static final BitSet FOLLOW_ruleIdentifier_in_rulePath15557 = new BitSet(new long[]{0x0000001000000002L});
    public static final BitSet FOLLOW_ruleIdentifier_in_entryRuleIdentifier15605 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleIdentifier15616 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_75_in_ruleIdentifier15656 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_RULE_ID_in_ruleIdentifier15673 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_76_in_ruleIdentifier15698 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_77_in_ruleIdentifier15717 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_78_in_ruleIdentifier15736 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_42_in_ruleIdentifier15755 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_45_in_ruleIdentifier15774 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_54_in_ruleIdentifier15793 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_55_in_ruleIdentifier15812 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_26_in_ruleIdentifier15831 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_38_in_ruleIdentifier15850 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_40_in_ruleIdentifier15869 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_39_in_ruleIdentifier15888 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_59_in_ruleIdentifier15907 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleEND_in_ruleIdentifier15935 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleWHEN_in_ruleIdentifier15968 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleFROM_in_ruleIdentifier16001 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleMEMBER_in_ruleIdentifier16034 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleNumber_in_entryRuleNumber16080 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleNumber16091 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_36_in_ruleNumber16130 = new BitSet(new long[]{0x0000000000000102L});
    public static final BitSet FOLLOW_RULE_INT_in_ruleNumber16146 = new BitSet(new long[]{0x0000000000000002L,0x0000000000007000L});
    public static final BitSet FOLLOW_76_in_ruleNumber16165 = new BitSet(new long[]{0x0300000000000100L});
    public static final BitSet FOLLOW_56_in_ruleNumber16179 = new BitSet(new long[]{0x0000000000000100L});
    public static final BitSet FOLLOW_57_in_ruleNumber16198 = new BitSet(new long[]{0x0000000000000100L});
    public static final BitSet FOLLOW_RULE_INT_in_ruleNumber16215 = new BitSet(new long[]{0x0000000000000002L,0x0000000000006000L});
    public static final BitSet FOLLOW_77_in_ruleNumber16236 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_78_in_ruleNumber16255 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RULE_HEX_in_ruleNumber16283 = new BitSet(new long[]{0x0000001000000002L,0x000000000000F000L});
    public static final BitSet FOLLOW_RULE_INT_in_ruleNumber16309 = new BitSet(new long[]{0x0000001000000002L,0x000000000000F000L});
    public static final BitSet FOLLOW_RULE_SIGNED_INT_in_ruleNumber16335 = new BitSet(new long[]{0x0000001000000002L,0x000000000000F000L});
    public static final BitSet FOLLOW_79_in_ruleNumber16355 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_36_in_ruleNumber16376 = new BitSet(new long[]{0x0000000000000102L,0x0000000000007000L});
    public static final BitSet FOLLOW_RULE_INT_in_ruleNumber16392 = new BitSet(new long[]{0x0000000000000002L,0x0000000000007000L});
    public static final BitSet FOLLOW_76_in_ruleNumber16413 = new BitSet(new long[]{0x0300000000000100L});
    public static final BitSet FOLLOW_56_in_ruleNumber16427 = new BitSet(new long[]{0x0000000000000100L});
    public static final BitSet FOLLOW_57_in_ruleNumber16446 = new BitSet(new long[]{0x0000000000000100L});
    public static final BitSet FOLLOW_RULE_INT_in_ruleNumber16463 = new BitSet(new long[]{0x0000000000000002L,0x0000000000006000L});
    public static final BitSet FOLLOW_77_in_ruleNumber16484 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_78_in_ruleNumber16503 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_76_in_ruleNumber16526 = new BitSet(new long[]{0x0300000000000100L});
    public static final BitSet FOLLOW_56_in_ruleNumber16540 = new BitSet(new long[]{0x0000000000000100L});
    public static final BitSet FOLLOW_57_in_ruleNumber16559 = new BitSet(new long[]{0x0000000000000100L});
    public static final BitSet FOLLOW_RULE_INT_in_ruleNumber16576 = new BitSet(new long[]{0x0000000000000002L,0x0000000000006000L});
    public static final BitSet FOLLOW_77_in_ruleNumber16595 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_78_in_ruleNumber16614 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_77_in_ruleNumber16636 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_78_in_ruleNumber16655 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleSELECT_in_entryRuleSELECT16700 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleSELECT16711 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_80_in_ruleSELECT16749 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_81_in_ruleSELECT16768 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_82_in_ruleSELECT16787 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleDISTINCT_in_entryRuleDISTINCT16828 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleDISTINCT16839 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_83_in_ruleDISTINCT16877 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_84_in_ruleDISTINCT16896 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_85_in_ruleDISTINCT16915 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleNEW_in_entryRuleNEW16956 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleNEW16967 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_86_in_ruleNEW17005 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_87_in_ruleNEW17024 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_88_in_ruleNEW17043 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleOBJECT_in_entryRuleOBJECT17084 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleOBJECT17095 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_89_in_ruleOBJECT17133 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_90_in_ruleOBJECT17152 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_91_in_ruleOBJECT17171 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleFROM_in_entryRuleFROM17212 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleFROM17223 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_92_in_ruleFROM17261 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_93_in_ruleFROM17280 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_94_in_ruleFROM17299 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleLEFT_in_entryRuleLEFT17340 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleLEFT17351 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_95_in_ruleLEFT17389 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_96_in_ruleLEFT17408 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_97_in_ruleLEFT17427 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleRIGHT_in_entryRuleRIGHT17468 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleRIGHT17479 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_98_in_ruleRIGHT17517 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_99_in_ruleRIGHT17536 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_100_in_ruleRIGHT17555 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleOUTER_in_entryRuleOUTER17596 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleOUTER17607 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_101_in_ruleOUTER17645 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_102_in_ruleOUTER17664 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_103_in_ruleOUTER17683 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleFULL_in_entryRuleFULL17724 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleFULL17735 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_104_in_ruleFULL17773 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_105_in_ruleFULL17792 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_106_in_ruleFULL17811 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleINNER_in_entryRuleINNER17852 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleINNER17863 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_107_in_ruleINNER17901 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_108_in_ruleINNER17920 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_109_in_ruleINNER17939 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleJOIN_in_entryRuleJOIN17980 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleJOIN17991 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_110_in_ruleJOIN18029 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_111_in_ruleJOIN18048 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_112_in_ruleJOIN18067 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleFETCH_in_entryRuleFETCH18108 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleFETCH18119 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_113_in_ruleFETCH18157 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_114_in_ruleFETCH18176 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_115_in_ruleFETCH18195 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleWITH_in_entryRuleWITH18236 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleWITH18247 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_116_in_ruleWITH18285 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_117_in_ruleWITH18304 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_118_in_ruleWITH18323 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleIN_in_entryRuleIN18364 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleIN18375 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_119_in_ruleIN18413 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_120_in_ruleIN18432 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_121_in_ruleIN18451 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleCLASS_in_entryRuleCLASS18492 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleCLASS18503 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_122_in_ruleCLASS18541 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_123_in_ruleCLASS18560 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_124_in_ruleCLASS18579 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleIN_CLASS_in_entryRuleIN_CLASS18620 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleIN_CLASS18631 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleIN_in_ruleIN_CLASS18678 = new BitSet(new long[]{0x0000000000000000L,0x1C00000000000000L});
    public static final BitSet FOLLOW_ruleCLASS_in_ruleIN_CLASS18705 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleELEMENTS_in_entryRuleELEMENTS18751 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleELEMENTS18762 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_125_in_ruleELEMENTS18800 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_126_in_ruleELEMENTS18819 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_127_in_ruleELEMENTS18838 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleIN_ELEMENTS_in_entryRuleIN_ELEMENTS18879 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleIN_ELEMENTS18890 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleIN_in_ruleIN_ELEMENTS18937 = new BitSet(new long[]{0x0000000000000000L,0xE000000000000000L});
    public static final BitSet FOLLOW_ruleELEMENTS_in_ruleIN_ELEMENTS18964 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleAS_in_entryRuleAS19010 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleAS19021 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_128_in_ruleAS19059 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_129_in_ruleAS19078 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_130_in_ruleAS19097 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rulePROPERTIES_in_entryRulePROPERTIES19138 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRulePROPERTIES19149 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_131_in_rulePROPERTIES19187 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_132_in_rulePROPERTIES19206 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_133_in_rulePROPERTIES19225 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleGROUP_BY_in_entryRuleGROUP_BY19266 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleGROUP_BY19277 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_134_in_ruleGROUP_BY19316 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000007000L});
    public static final BitSet FOLLOW_135_in_ruleGROUP_BY19335 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000007000L});
    public static final BitSet FOLLOW_136_in_ruleGROUP_BY19354 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000007000L});
    public static final BitSet FOLLOW_ruleBY_in_ruleGROUP_BY19377 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleORDER_BY_in_entryRuleORDER_BY19423 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleORDER_BY19434 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_137_in_ruleORDER_BY19473 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000007000L});
    public static final BitSet FOLLOW_138_in_ruleORDER_BY19492 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000007000L});
    public static final BitSet FOLLOW_139_in_ruleORDER_BY19511 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000007000L});
    public static final BitSet FOLLOW_ruleBY_in_ruleORDER_BY19534 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleBY_in_entryRuleBY19580 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleBY19591 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_140_in_ruleBY19629 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_141_in_ruleBY19648 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_142_in_ruleBY19667 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleASC_in_entryRuleASC19708 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleASC19719 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_143_in_ruleASC19757 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_144_in_ruleASC19776 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_145_in_ruleASC19795 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_146_in_ruleASC19814 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_147_in_ruleASC19833 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_148_in_ruleASC19852 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleDESC_in_entryRuleDESC19893 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleDESC19904 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_149_in_ruleDESC19942 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_150_in_ruleDESC19961 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_151_in_ruleDESC19980 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_152_in_ruleDESC19999 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_153_in_ruleDESC20018 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_154_in_ruleDESC20037 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleHAVING_in_entryRuleHAVING20078 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleHAVING20089 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_155_in_ruleHAVING20127 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_156_in_ruleHAVING20146 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_157_in_ruleHAVING20165 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleWHERE_in_entryRuleWHERE20206 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleWHERE20217 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_158_in_ruleWHERE20255 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_159_in_ruleWHERE20274 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_160_in_ruleWHERE20293 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleOR_in_entryRuleOR20334 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleOR20345 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_161_in_ruleOR20383 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_162_in_ruleOR20402 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_163_in_ruleOR20421 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleAND_in_entryRuleAND20462 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleAND20473 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_164_in_ruleAND20511 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_165_in_ruleAND20530 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_166_in_ruleAND20549 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleNOT_in_entryRuleNOT20590 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleNOT20601 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_167_in_ruleNOT20639 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_168_in_ruleNOT20658 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_16_in_ruleNOT20677 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleIS_in_entryRuleIS20718 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleIS20729 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_169_in_ruleIS20767 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_170_in_ruleIS20786 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_171_in_ruleIS20805 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleBETWEEN_in_entryRuleBETWEEN20846 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleBETWEEN20857 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_172_in_ruleBETWEEN20895 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_173_in_ruleBETWEEN20914 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_174_in_ruleBETWEEN20933 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleLIKE_in_entryRuleLIKE20974 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleLIKE20985 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_175_in_ruleLIKE21023 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_176_in_ruleLIKE21042 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_53_in_ruleLIKE21061 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleMEMBER_in_entryRuleMEMBER21102 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleMEMBER21113 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_177_in_ruleMEMBER21151 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_178_in_ruleMEMBER21170 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_179_in_ruleMEMBER21189 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleOF_in_entryRuleOF21230 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleOF21241 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_180_in_ruleOF21279 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_181_in_ruleOF21298 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_182_in_ruleOF21317 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleESCAPE_in_entryRuleESCAPE21358 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleESCAPE21369 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_183_in_ruleESCAPE21407 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_184_in_ruleESCAPE21426 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_185_in_ruleESCAPE21445 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleCASE_in_entryRuleCASE21486 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleCASE21497 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_186_in_ruleCASE21535 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_187_in_ruleCASE21554 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_188_in_ruleCASE21573 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleEND_in_entryRuleEND21614 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleEND21625 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_189_in_ruleEND21663 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_190_in_ruleEND21682 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_191_in_ruleEND21701 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleWHEN_in_entryRuleWHEN21742 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleWHEN21753 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_192_in_ruleWHEN21791 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_193_in_ruleWHEN21810 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_194_in_ruleWHEN21829 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleTHEN_in_entryRuleTHEN21870 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleTHEN21881 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_195_in_ruleTHEN21919 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_196_in_ruleTHEN21938 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_197_in_ruleTHEN21957 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleELSE_in_entryRuleELSE21998 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleELSE22009 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_198_in_ruleELSE22047 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_199_in_ruleELSE22066 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_200_in_ruleELSE22085 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleSOME_in_entryRuleSOME22126 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleSOME22137 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_201_in_ruleSOME22175 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_202_in_ruleSOME22194 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_203_in_ruleSOME22213 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleEXISTS_in_entryRuleEXISTS22254 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleEXISTS22265 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_204_in_ruleEXISTS22303 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_205_in_ruleEXISTS22322 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_206_in_ruleEXISTS22341 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleALL_in_entryRuleALL22382 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleALL22393 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_207_in_ruleALL22431 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_208_in_ruleALL22450 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_209_in_ruleALL22469 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleANY_in_entryRuleANY22510 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleANY22521 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_210_in_ruleANY22559 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_211_in_ruleANY22578 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_212_in_ruleANY22597 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleSUM_in_entryRuleSUM22638 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleSUM22649 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_213_in_ruleSUM22687 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_214_in_ruleSUM22706 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_215_in_ruleSUM22725 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleAVG_in_entryRuleAVG22766 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleAVG22777 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_216_in_ruleAVG22815 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_217_in_ruleAVG22834 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_218_in_ruleAVG22853 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleMAX_in_entryRuleMAX22894 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleMAX22905 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_219_in_ruleMAX22943 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_220_in_ruleMAX22962 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_221_in_ruleMAX22981 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleMIN_in_entryRuleMIN23022 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleMIN23033 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_222_in_ruleMIN23071 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_223_in_ruleMIN23090 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_224_in_ruleMIN23109 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleCOUNT_in_entryRuleCOUNT23150 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleCOUNT23161 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_225_in_ruleCOUNT23199 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_226_in_ruleCOUNT23218 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_227_in_ruleCOUNT23237 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleINDICES_in_entryRuleINDICES23278 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleINDICES23289 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_228_in_ruleINDICES23327 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_229_in_ruleINDICES23346 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_230_in_ruleINDICES23365 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleTRAILING_in_entryRuleTRAILING23406 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleTRAILING23417 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_231_in_ruleTRAILING23455 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_232_in_ruleTRAILING23474 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_233_in_ruleTRAILING23493 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleLEADING_in_entryRuleLEADING23534 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleLEADING23545 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_234_in_ruleLEADING23583 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_235_in_ruleLEADING23602 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_236_in_ruleLEADING23621 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleBOTH_in_entryRuleBOTH23662 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleBOTH23673 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_237_in_ruleBOTH23711 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_238_in_ruleBOTH23730 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_239_in_ruleBOTH23749 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleNULL_in_entryRuleNULL23790 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleNULL23801 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_240_in_ruleNULL23839 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_241_in_ruleNULL23858 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_17_in_ruleNULL23877 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleTRUE_in_entryRuleTRUE23918 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleTRUE23929 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_242_in_ruleTRUE23967 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_243_in_ruleTRUE23986 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_244_in_ruleTRUE24005 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleFALSE_in_entryRuleFALSE24046 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleFALSE24057 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_245_in_ruleFALSE24095 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_246_in_ruleFALSE24114 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_247_in_ruleFALSE24133 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleEMPTY_in_entryRuleEMPTY24174 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleEMPTY24185 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_248_in_ruleEMPTY24223 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_249_in_ruleEMPTY24242 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_18_in_ruleEMPTY24261 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleIdOrKeyword_in_entryRuleIdOrKeyword24302 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleIdOrKeyword24313 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RULE_ID_in_ruleIdOrKeyword24353 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleKeyword_in_ruleIdOrKeyword24386 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleKeyword_in_entryRuleKeyword24432 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_entryRuleKeyword24443 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_209_in_ruleKeyword24481 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_59_in_ruleKeyword24500 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_30_in_ruleKeyword24519 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_40_in_ruleKeyword24538 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_25_in_ruleKeyword24557 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_23_in_ruleKeyword24576 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_38_in_ruleKeyword24595 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_221_in_ruleKeyword24614 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_194_in_ruleKeyword24633 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_179_in_ruleKeyword24652 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_191_in_ruleKeyword24671 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_91_in_ruleKeyword24690 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_26_in_ruleKeyword24709 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_197_in_ruleKeyword24728 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RULE_LINEBREAK_in_synpred1126 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RULE_FIELDCOMMENT_in_synpred13519 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_14_in_synpred15802 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_15_in_synpred16883 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_16_in_synpred17965 = new BitSet(new long[]{0x0000000000020000L});
    public static final BitSet FOLLOW_17_in_synpred17988 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_16_in_synpred181058 = new BitSet(new long[]{0x0000000000040000L});
    public static final BitSet FOLLOW_18_in_synpred181081 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleStatement_in_synpred927789 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleCASE_in_synpred15512757 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000007L});
    public static final BitSet FOLLOW_ruleWhenClause_in_synpred15512770 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0xE000000000000000L,0x00000000000001C7L});
    public static final BitSet FOLLOW_ruleElseClause_in_synpred15512792 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0xE000000000000000L});
    public static final BitSet FOLLOW_ruleEND_in_synpred15512802 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleExpressionOrVector_in_synpred17013754 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_36_in_synpred17514175 = new BitSet(new long[]{0x08C025C004000040L,0x0000000070007800L,0xE00E000000000000L,0x0000000000000007L});
    public static final BitSet FOLLOW_ruleIdentifier_in_synpred17514184 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleExpression_in_synpred19314843 = new BitSet(new long[]{0x0000000010000002L});
    public static final BitSet FOLLOW_28_in_synpred19314854 = new BitSet(new long[]{0xCBC02DD0040707C0L,0xE000000070007800L,0xFC0E018000000000L,0x03FF007FFFFFFE07L});
    public static final BitSet FOLLOW_ruleExpression_in_synpred19314875 = new BitSet(new long[]{0x0000000010000002L});
    public static final BitSet FOLLOW_ruleExpression_in_synpred20115029 = new BitSet(new long[]{0x0000000010000002L,0x0000000070000000L,0x0000000000000007L});
    public static final BitSet FOLLOW_28_in_synpred20115041 = new BitSet(new long[]{0xCBC02DD0040707C0L,0xE000000070007800L,0xFC0E018000000000L,0x03FF007FFFFFFE07L});
    public static final BitSet FOLLOW_ruleExpression_in_synpred20115062 = new BitSet(new long[]{0x0000000010000002L});
    public static final BitSet FOLLOW_ruleFROM_in_synpred20115080 = new BitSet(new long[]{0xCBC02DD0040707C0L,0xE000000070007800L,0xFC0E018000000000L,0x03FF007FFFFFFE07L});
    public static final BitSet FOLLOW_ruleExpression_in_synpred20115093 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleAS_in_synpred20115110 = new BitSet(new long[]{0x08C025C004000040L,0x0000000070007800L,0xE00E000000000000L,0x0000000000000007L});
    public static final BitSet FOLLOW_ruleIdentifier_in_synpred20115123 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleFROM_in_synpred20215143 = new BitSet(new long[]{0xCBC02DD0040707C0L,0xE000000070007800L,0xFC0E018000000000L,0x03FF007FFFFFFE07L});
    public static final BitSet FOLLOW_ruleExpression_in_synpred20215156 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_36_in_synpred24916376 = new BitSet(new long[]{0x0000000000000102L,0x0000000000007000L});
    public static final BitSet FOLLOW_RULE_INT_in_synpred24916392 = new BitSet(new long[]{0x0000000000000002L,0x0000000000007000L});
    public static final BitSet FOLLOW_76_in_synpred24916413 = new BitSet(new long[]{0x0300000000000100L});
    public static final BitSet FOLLOW_set_in_synpred24916422 = new BitSet(new long[]{0x0000000000000100L});
    public static final BitSet FOLLOW_RULE_INT_in_synpred24916463 = new BitSet(new long[]{0x0000000000000002L,0x0000000000006000L});
    public static final BitSet FOLLOW_set_in_synpred24916479 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_76_in_synpred24916526 = new BitSet(new long[]{0x0300000000000100L});
    public static final BitSet FOLLOW_set_in_synpred24916535 = new BitSet(new long[]{0x0000000000000100L});
    public static final BitSet FOLLOW_RULE_INT_in_synpred24916576 = new BitSet(new long[]{0x0000000000000002L,0x0000000000006000L});
    public static final BitSet FOLLOW_set_in_synpred24916590 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_77_in_synpred24916636 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_78_in_synpred24916655 = new BitSet(new long[]{0x0000000000000002L});

}
