<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
    <modelVersion>4.0.0</modelVersion>


    <parent>
        <groupId>org.makumba</groupId>
        <artifactId>makumba</artifactId>
        <version>1.0-SNAPSHOT</version>
    </parent>

    <artifactId>makumba-jsp-test</artifactId>
    <packaging>war</packaging>

    <name>makumba jsp integration tests</name>

    <properties>
        <main.basedir>${project.basedir}/..</main.basedir>
    </properties>

    <!--
    README FIRST before messing around with this

    this is a test webapp, and its sources are in the test path (src/test/webapp). this is for a good reason: we depend on the
    test classes of the makumba-core module for our execution, and will only inherit them if we too run in the test path.
    thus, all of our configuration needs to be adapted to point towards the test classpath. this is because by default, maven
    expects the webapp to sit in src/main/webapp.
    -->


    <dependencies>

        <!-- Shared resources -->
        <dependency>
            <groupId>${project.groupId}</groupId>
            <artifactId>shared-resources</artifactId>
            <version>${project.version}</version>
            <classifier>resources</classifier>
            <type>zip</type>
            <scope>provided</scope>
        </dependency>

        <!-- dependency on makumba-core -->
        <dependency>
            <groupId>${project.groupId}</groupId>
            <artifactId>makumba-core</artifactId>
            <version>${project.version}</version>
            <scope>compile</scope>
        </dependency>

        <!-- dependency on makumba-core test API -->
        <dependency>
            <groupId>${project.groupId}</groupId>
            <artifactId>makumba-core</artifactId>
            <version>${project.version}</version>
            <type>test-jar</type>
            <scope>compile</scope>
        </dependency>

        <dependency>
            <groupId>org.apache.cactus</groupId>
            <artifactId>cactus.core.framework.uberjar.javaEE.15</artifactId>
            <version>1.8.1</version>
            <scope>compile</scope>
            <exclusions>
                <exclusion>
                    <groupId>org.mortbay.jetty</groupId>
                    <artifactId>org.mortbay.jetty</artifactId>
                </exclusion>
                <exclusion>
                    <groupId>tomcat</groupId>
                    <artifactId>jasper-runtime</artifactId>
                </exclusion>
                <exclusion>
                    <groupId>tomcat</groupId>
                    <artifactId>jasper-compiler</artifactId>
                </exclusion>
                <exclusion>
                    <groupId>javax.servlet</groupId>
                    <artifactId>jsp-api</artifactId>
                </exclusion>
                <exclusion>
                    <groupId>javax.servlet</groupId>
                    <artifactId>servlet-api</artifactId>
                </exclusion>
            </exclusions>
        </dependency>

        <dependency>
            <groupId>org.codehaus.cargo</groupId>
            <artifactId>cargo-core-uberjar</artifactId>
            <version>1.0.3</version>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>commons-httpclient</groupId>
            <artifactId>commons-httpclient</artifactId>
            <version>3.1</version>
            <scope>compile</scope>
        </dependency>
        <dependency>
            <groupId>commons-codec</groupId>
            <artifactId>commons-codec</artifactId>
            <version>1.3</version>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>aspectj</groupId>
            <artifactId>aspectjrt</artifactId>
            <version>1.5.3</version>
            <scope>compile</scope>
        </dependency>
        <dependency>
            <groupId>httpunit</groupId>
            <artifactId>httpunit</artifactId>
            <version>1.6</version>
            <scope>compile</scope>
        </dependency>
        <dependency>
            <groupId>jdom</groupId>
            <artifactId>jdom</artifactId>
            <version>1.0</version>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>htmlunit</groupId>
            <artifactId>htmlunit</artifactId>
            <version>1.10</version>
            <scope>compile</scope>
        </dependency>
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>3.8.2</version>
            <scope>compile</scope>
        </dependency>

        <!-- Database drivers for webapp runtime -->

        <dependency>
            <groupId>org.hsqldb</groupId>
            <artifactId>hsqldb</artifactId>
            <version>2.0.0</version>
            <scope>compile</scope>
        </dependency>

        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
            <version>5.1.13</version>
            <scope>compile</scope>
        </dependency>

    </dependencies>

    <build>
        <finalName>makumba-jsp-test</finalName>

        <!-- set the test and source directory to be the same, so that all classes are bundled in the WAR -->
        <sourceDirectory>src/test/java</sourceDirectory>
        <testSourceDirectory>src/test/java</testSourceDirectory>

        <!-- accomodate the tomcat plugin that doesn't automatically switch to generated-test-resources -->
        <resources>
            <resource>
                <directory>${basedir}/src/test/resources</directory>
            </resource>
            <resource>
                <directory>${project.build.directory}/generated-test-resources</directory>
            </resource>
        </resources>

        <testResources>
            <testResource>
                <directory>${basedir}/src/test/resources</directory>
            </testResource>
            <testResource>
                <directory>${project.build.directory}/generated-test-resources</directory>
            </testResource>
        </testResources>

        <plugins>

            <!-- Produce WAR artifact for the integration tests
                 Note: this will run twice, but it's ok! it runs once by default because this artifact
                 is of type war, and once more, after the resources have been generated -->
            <plugin>
                <artifactId>maven-war-plugin</artifactId>
                <configuration>
                    <useCache>false</useCache>
                    <warSourceDirectory>src/test/webapp</warSourceDirectory>
                    <webXml>src/test/webapp/WEB-INF/web.xml</webXml>
                    <warSourceIncludes>
                        *.jsp, */**/*.jsp, WEB-INF/classes/**,
                        WEB-INF/lib/*
                    </warSourceIncludes>
                    <warName>${project.artifactId}-${project.version}</warName>
                    <webResources>
                        <resource>
                            <directory>${project.build.directory}/generated-test-resources</directory>
                            <targetPath>WEB-INF/classes</targetPath>
                        </resource>
                    </webResources>
                </configuration>
                <executions>
                    <execution>
                        <id>create-cargo-war-archive</id>
                        <phase>pre-integration-test</phase>
                        <goals>
                            <goal>war</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>

            <!-- Jetty plugin -->
            <plugin>
                <groupId>org.mortbay.jetty</groupId>
                <artifactId>jetty-maven-plugin</artifactId>
                <version>7.0.2.v20100331</version>
                <configuration>
                    <scanIntervalSeconds>10</scanIntervalSeconds>
                    <webAppConfig>
                        <contextPath>/tests</contextPath>
                    </webAppConfig>
                    <webAppSourceDirectory>src/test/webapp</webAppSourceDirectory>
                    <classesDirectory>${project.build.testOutputDirectory}</classesDirectory>
                    <scanTargets>
                        <scanTarget>${project.build.testOutputDirectory}</scanTarget>
                    </scanTargets>
                    <!-- If we need additional classes one day, this is how it's done
                    <webAppConfig>
                        <contextPath>/tests</contextPath>
                        <extraClasspath>target/classes;../makumba-core/target/test-classes</extraClasspath>
                    </webAppConfig>
                    <scanTargets>
                        <scanTarget>../makumba-core/target/test-classes</scanTarget>
                    </scanTargets> -->
                </configuration>
            </plugin>


            <!-- Embedded Tomcat (tomcat:run) -->
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>tomcat-maven-plugin</artifactId>
                <configuration>
                    <path>/tests</path>
                    <port>8080</port>
                    <warSourceDirectory>src/test/webapp</warSourceDirectory>
                    <classesDir>target/test-classes</classesDir>
                    <!--
                      The default authentication credentials for remote deployment are username "admin" with no password To
                      override credentials, define a server in settings.xml and activate it using the <server> element
                    -->
                    <url>http://localhost:8080/manager</url>
                </configuration>
            </plugin>

            <!-- Cargo plugin, to deploy the integration tests on a container -->
            <plugin>
                <groupId>org.codehaus.cargo</groupId>
                <artifactId>cargo-maven2-plugin</artifactId>
                <version>1.0.3</version>
                <executions>
                    <execution>
                        <id>start-container</id>
                        <phase>pre-integration-test</phase>
                        <goals>
                            <goal>start</goal>
                        </goals>
                    </execution>
                    <execution>
                        <id>stop-container</id>
                        <phase>post-integration-test</phase>
                        <goals>
                            <goal>stop</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <wait>false</wait>
                    <container>
                        <containerId>tomcat6x</containerId>
                        <log>${project.build.directory}/cargo.log</log>
                        <output>${project.build.directory}/output.log</output>
                        <!--If you don't want cargo to download the container, just comment
                                  the bottom lines and specify a [home] parameter -->
                        <zipUrlInstaller>
                            <url>http://mirrors.axint.net/apache/tomcat/tomcat-6/v6.0.29/bin/apache-tomcat-6.0.29.zip
                            </url>
                            <installDir>${project.basedir}/install</installDir>
                        </zipUrlInstaller>
                    </container>
                    <configuration>
                        <properties>
                            <cargo.servlet.port>${server.port}</cargo.servlet.port>
                        </properties>
                        <deployables>
                            <deployable>
                                <location>
                                    ${project.build.directory}/${project.artifactId}-${project.version}.war <!-- -cactified -->
                                </location>
                                <type>war</type>
                                <properties>
                                    <context>/tests</context>
                                </properties>
                                <pingURL>http://localhost:${server.port}/</pingURL>
                            </deployable>
                        </deployables>
                    </configuration>
                </configuration>
            </plugin>


            <!-- Surefire plugin, to actually run the tests-->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <configuration>
                    <!-- don't mess around with this, or you too will spend hours debugging
                         integration tests should NOT run during the test phase,
                         but only after, or they will fail due to a lack of container -->
                    <skip>true</skip>
                    <excludes>
                        <exclude>**/ExceptionTest.java</exclude>
                        <exclude>**/FormsHQLTest.java</exclude>
                        <exclude>**/ListHQLTest.java</exclude>
                    </excludes>
                </configuration>
                <executions>
                    <execution>
                        <id>surefire-it</id>
                        <phase>integration-test</phase>
                        <goals>
                            <goal>test</goal>
                        </goals>
                        <configuration>
                            <skip>false</skip>
                            <!--The next line is because we need the tests in src/main/java to
                                       ensure that the classes are included in the archive. -->
                            <testSourceDirectory>src/test/java</testSourceDirectory>
                            <testClassesDirectory>target/test-classes</testClassesDirectory>
                            <systemProperties>
                                <property>
                                    <name>cactus.contextURL</name>
                                    <value>http://localhost:8080/tests</value>
                                </property>
                            </systemProperties>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <!-- Eclipse IDE configuration -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-eclipse-plugin</artifactId>
                <version>2.8</version>
                <configuration>
                    <additionalConfig>
                        <file>
                            <name>.settings/org.eclipse.jdt.core.prefs</name>
                            <location>../etc/eclipse-settings/org.eclipse.jdt.core.prefs</location>
                        </file>
                        <file>
                            <name>.settings/org.eclipse.jdt.ui.prefs</name>
                            <location>../etc/eclipse-settings/org.eclipse.jdt.ui.prefs</location>
                        </file>
                        <file>
                            <name>.settings/org.maven.ide.eclipse.prefs</name>
                            <location>../etc/eclipse-settings/org.maven.ide.eclipse.prefs</location>
                        </file>
                    </additionalConfig>
                </configuration>
            </plugin>
            

            <!-- Fetch shared resources -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-dependency-plugin</artifactId>
                <executions>
                    <execution>
                        <id>unpack-shared-resources</id>
                        <goals>
                            <goal>unpack-dependencies</goal>
                        </goals>
                        <phase>generate-test-resources</phase>
                        <configuration>
                            <!-- unpack in the classes dir, that will be picked up by the war plugin -->
                            <outputDirectory>${project.build.directory}/generated-test-resources</outputDirectory>
                            <includeArtifactIds>shared-resources</includeArtifactIds>
                            <includeGroupIds>${project.groupId}</includeGroupIds>
                            <excludeTransitive>true</excludeTransitive>
                            <!--use as much as needed to be specific...also scope,type,classifier etc-->
                        </configuration>
                    </execution>
                </executions>
            </plugin>


        </plugins>
    </build>

</project>
