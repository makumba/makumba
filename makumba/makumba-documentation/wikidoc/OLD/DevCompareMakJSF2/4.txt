!!!Comparison between makumba and JSF 2.0

Both technologies seem to have evolved in parallel. An integration of JSF 2.0 as view for makumba seems to make a lot of sense.

[{Table

|| Concern || Makumba || JSF 2.0 || Comments

| display action results / messages to the user
| <mak:response /> - displays form messages indicated in the <mak:form> 'message' attribute, the application logic and the validation error messages that could not be assigned to a form element
| <h:messages /> - displays all messages that come from validators or set in the application logic through FacesMessage\\
| pretty much the same thing

| send message from application logic
| %%prettify {{{
throw new LogicException("This is an error");}}}%%
| %%prettify {{{
FacesMessage message = new FacesMessage("Invalid email address");
throw new ValidatorException(message);}}}%%
| FacesMessage brings support for localization

| display form annotation messages
| <mak:form annotation="after/before/both/none">
| <h:message for="inputId" />
| mak seems to automate this process more than JSF 2.0

| form validation
| validation rules in MDD or custom application logic
| application logic, greatly simplified through validation annotations ([JSR 303|http://jcp.org/en/jsr/detail?id=303])
|

| navigation
| simple navigation model using <mak:form> 'action' attribute, or reloading of the page in case of errors if this is the configured behavior
| - <h:commandButton> 'action' attribute forwards to JSF page with same name as the action (if found)\\
- navigation rules specified in faces-config.xml, much in the same fashion as Struts does
| JSF navigation model is clearly more powerful and closer to model 2, yet JSF 2.0 introduces simple 'action' elements that have the benefit of being simple and contained in the page. additionally, JSF has a range of UI components that execute actions (implement the ActionSource interface), thus being more flexible than the <mak:submit> which really only is part of a form.

}]

!!!Comparison between JSP and JSF

[{Table

|| Concern || JSP || JSF || Comments

| markup | JSP tags, java, HTML | XHTML | no java, only tags, with namespaces declared in the beginning
| templating | not really, <jsp:include> makes some code-reuse possible | designed for code re-use through component composition
| tag-libraries | custom taglibs | custom taglibs and custom UI components | JSF desgin makes tag library development much easier, tag / component developers have access to the full page tree


}]


%%invisible [Category Documentation] %%
