<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE document PUBLIC "-//MAKUMBA//DTD Documentation V2.0//EN" "document-v20-mak.dtd">
<document>
  <header>
    <title>Designing the data model: Makumba Data Definitions</title>
  </header>
  <body>

    <p>Makumba uses so-called Makumba Data Definitions (MDDs) in order to represent objects. These definitions are also referred to as <strong>type</strong> of an object.
      This section provides examples and guidelines on how to design MDDs, check the <a
        href="../doc/datadef.html">reference documentation</a> for more details on MDDs.</p>

	<section>
		<title>General principles</title>
		
		<p>MDDs are stored as files that are located in the
			<code>WEB-INF/classes/dataDefinitions</code> folder of your webapp. Their
			file extensions are
			<code>.mdd</code> and the resulting Makumba type name is using the same naming
			principle of Java packages, i.e. the MDD stored in
			<code>WEB-INF/classes/dataDefinitions/general/Person.mdd</code> will
			have as type name
			<code>general.Person</code>. </p>
		<p>MDDs contain following elements: </p>
		<ul>
			<li>the
				<a href="../doc/datadef.html#Fields">field definitions</a></li>
			<li>
				<a href="../doc/valrules.html">validation rules</a> referring to one
				or more fields</li>
			<li>
				<a href="../doc/queryfunct.html">query functions</a>
			</li>
		</ul>
		<p>We will further explain those type of fields by using the following example of a
			company that has employees, each working in a department and assigned to several
			projects:</p>
			<figure alt="Example EER" src="../images/example-eer.png" />
		<p>Let's take a look at how the related Makumba Data Definitions would look like:</p>
		
		<source><strong>company.Company (company/Company.mdd)</strong>
			<![CDATA[
name = char[50]
turnover = real
suppliers = set company.Company
targetMarkets = set general.Country
logo = file]]></source>
		
		<source><strong>company.Department (company/Department.mdd)</strong>
			<![CDATA[
name = char[50]
manager = ptr company.Employee
leader = ptr general.Employee]]></source>
		<source><strong>company.Employee (company/Employee.mdd)</strong>
			<![CDATA[
name = char[200]
surname = char[200]
gender = int{"Male" = 10, "Female" = 20}
birthdate = date
salary = real

projects = set
projects->project = ptr company.Project
projects->timePercentage = int ;percentage assigned]]></source>		
		<source><strong>company.Project (company/Project.mdd)</strong>
			<![CDATA[
name = char[255]
leader = ptr company.Employee]]></source>		
	</section>

    <section>
      <title>Field definitions</title>
		
		<p>This section gives a short overview of the different types of field types that exist in Makumba:</p>
      <section><title>Primitive types</title>
      
    <table>
        <tr>
          <th>Field definition type</th>
          <th>Description</th>
          <th>Default edit user interface</th>
          <th>Relational database type (orientative)</th>
          <th>Java type (orientative)</th>
        </tr>
        
        <tr>
          <td><a href="/doc/datadef.html#int">int</a></td>
          <td>a simple integer</td>
          <td>text field</td>
          <td rowspan="2">integer</td>
          <td rowspan="2">java.lang.Integer</td>
        </tr>
        <tr>
          <td><a href="/doc/datadef.html#int">int{}</a></td>
          <td>Integer enumeration, allowing for a set of predefined values</td>
          <td>dropdown choice or radio button</td>
        </tr>

        <tr>
          <td><a href="/doc/datadef.html#real">real</a></td>
          <td>a real number</td>
          <td>text field</td>
          <td>double</td>
          <td>java.lang.Double</td>
        </tr>
        <tr>
          <td><a href="/doc/datadef.html#date">date</a></td>
          <td>a date</td>
          <td>date</td>
          <td>date and time</td>
          <td>java.util.Date</td>
        </tr>
        <tr>
          <td><a href="/doc/datadef.html#char">char[]</a></td>
          <td>a limited text (maximum length is 255)</td>
          <td>text field</td>
          <td>limited char</td>
          <td>java.lang.String</td>
        </tr>
        <tr>
          <td><a href="/doc/datadef.html#text">text</a></td>
          <td>an unlimited text</td>
          <td>text area</td>
          <td>unlimited characters</td>
          <td>org.makumba.Text</td>
        </tr>
        <tr>
          <td><a href="/doc/datadef.html#binary">binary</a></td>
          <td>a binary content, e.g. an image</td>
          <td>binary area</td>
          <td>unlimited byte</td>
          <td>org.makumba.Text</td>
        </tr>
      <tr>
        <td><a href="/doc/datadef.html#file">file</a></td>
        <td>a file including its meta-data (content type, size, ...)</td>
        <td>file upload</td>
        <td>preferably a long (foreign index) <br/>
        + table</td>
        <td></td>
      </tr>
    </table></section>
      <section>
        <title>Relational types and collections</title>
      </section>
      <table>
        <tr>
          <th>Field definition type</th>
          <th>Description</th>
          <th>Default edit user interface</th>
          <th>Relational database type (orientative)</th>
          <th>Java type (orientative)</th>
        </tr>
        
        <tr>
          <td><a href="/doc/datadef.html#ptr">ptr</a></td>
          <td>a pointer to another type record</td>
          <td>dropdown select of record titles.</td>
          <td>preferably a long (foreign index)</td>
          <td><a href="api/org/makumba/Pointer.html">org.makumba.Pointer</a></td>
        </tr>
        
        <tr>
          <td><a href="/doc/datadef.html#set">set</a></td>
          <td>a set of records of another type (which could be re-used in another type) TODO: set chooser link</td>
          <td>multiple choice of record titles.</td>
          <td>table with ptrRel to the parent table and ptr to the foreign table</td>
          <td>java.util.Vector of <a href="api/org/makumba/Pointer.html">org.makumba.Pointer</a></td>

        </tr>
        <tr>
          <td><a href="/doc/datadef.html#set">fieldName=set <br/>
          fieldName-&gt; ...</a></td>
          <td>an internal set that relates to one specific record</td>
          <td></td>
          <td>table with ptrRel to the parent table, and the rest of the fields</td>
          <td><br/>
          </td>
        </tr>
        <tr>
          <td><a href="/doc/datadef.html#set">set int{}</a></td>
          <td>a set of predefined values</td>
          <td>multiple choice from values</td>
          <td>table with ptrRel to the parent table, and an int field</td>
          <td>java.util.Vector of java.lang.Integer</td>
        </tr>
     </table>
    </section>
    <section>
      <title>Validation rules</title>
      <p>Explanation of validation rules, of where they do take places, link to validation rule page
      and to validation usage page</p>
      <p><a href="/doc/valrules.html">Validation rules</a> make it possible to automatically ensure the validity of the data entered by the user in forms. These rules take place at the client level (if <a href="/configuration/configuration.html#Controller+behavior+[controllerConfig]">client-side validation</a> is enabled) and at the server level.
      </p>
    </section>
    <section>
      <title>Query functions</title>
      <p>Explanation of what they are, how they can be used (in queries, in other functions, at the
        presentation level...), link to technical reference</p>
    </section>

    <section>
      <title>Interaction with the database schema</title>
    </section>
    <p>how makumba generates tables based on the schema, alter#, makumba table names, link to db
      config options related to schema, what happens when a field name is changed in MDD / type is
      changed in MDD (warnings etc.) </p>
  </body>
</document>