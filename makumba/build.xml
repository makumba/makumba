<!-- $Header$ -->

<project name="Makumba" default="compile" basedir=".">
       <path id="project.class.path">
	 <fileset dir="lib">
	  <include name="**/*.jar" />
	  <exclude name="**/makumba.jar" />
	 </fileset>	
       </path>

	<!-- jikes as default compiler
       	<property name="build.compiler" value="jikes" />
 -->
	<!-- jikes options for ant -emacs  -->
       	<property name="build.compiler.emacs" value="true" />

	<property name="temp.dir" value="work/temp" />

	<property environment="env"/>

	<property name="jar.place" value="." />

	<target name="install" depends="version">
	<mkdir dir="work/temp"/>
	<mkdir dir="tomcat/temp"/>
	<mkdir dir="work/generated-hibernate-classes"/>
	<mkdir dir="work/generated-hibernate-mappings"/>
	</target>
	
	<target name="detectHqlTokens">
		<javac srcdir="classes"
         destdir="classes"
	     includes="org/makumba/db/hibernate/hql/DetectHQLTokenTypes.java">
	     <classpath refid="project.class.path" />
		</javac>
		<java	classname="org.makumba.db.hibernate.hql.DetectHQLTokenTypes" 
			failonerror="true" dir="." fork="true" taskname="detecting tokens"			
		>
		     <classpath>
		     	<path refid="project.class.path" />
		     	<pathelement path="classes"/>
		     </classpath>
	 	</java>		
		<antcall target="eclipse-antlr-warning"></antcall>
	</target>
	
	<target name="eclipse-antlr-warning">
		<echo>
			Please note that proper Makumba building in Eclipse requires the antlr-eclipse tool.
			http://antlreclipse.sourceforge.net
			Currently used version: latest or 4.1.1
			Use Help/Software Updates for installation, chose http://antlreclipse.sourceforge.net/updates
		</echo>
	</target>
	<!-- check if the OQL grammar has changed since last OQL parser generation-->
	<target name="checkAntlr">
		<condition property="antlr.notRequired">
		<and>
		<uptodate
		      targetfile="classes/org/makumba/db/sql/oql/OQLParser.java" >

		      <srcfiles dir= "classes/org/makumba/db/sql/oql/" 
				includes="**/OQL-translator.g"/>
		</uptodate>
		<uptodate
		      targetfile="classes/org/makumba/db/hibernate/hql/HqlAnalyzeBaseWalker.java" >
			      <srcfiles dir= "classes/org/makumba/db/hibernate/hql" 
					includes="**/hql-analyze.g"/>
		</uptodate>		
		</and>
		</condition>
	</target>

	<!-- if the OQL grammar has changed, call antlr to re-generate the parser -->
	<target name= "OQLParserGeneration" depends="checkAntlr, install, version, detectHqlTokens"
                unless="antlr.notRequired">

		<java	classname="antlr.Tool" fork="true"  dir="classes/org/makumba/db/hibernate/hql"
			failonerror="true" taskname="antlr"
		>
		     <classpath refid="project.class.path" />
			<arg value="hql-analyze.g"/>
	 	</java>

		<java	classname="antlr.Tool" fork="true"  dir="classes/org/makumba/db/sql/oql/"
			failonerror="true" taskname="antlr"
		>
		     <classpath refid="project.class.path" />
			<arg value="OQL-translator.g"/>
	 	</java>
	</target>
    
	<target name="version">
		<tstamp>
		  <format property="CURDATE" pattern="yyyyMMddHHmmss" locale="en"/> 
		</tstamp> 
		<echo message="buildDate=${CURDATE}" file="classes/org/makumba/versionBuildDate.properties"/> 
    </target>
	
	<target name="compile" depends="OQLParserGeneration"
		description="compile all java files"
	>
		<javac srcdir="classes" source="1.4" target="1.4">
		     <classpath refid="project.class.path" />
		</javac>
	</target>

       <target name="clean"
	description="delete all generated files and backups"
	>
       <delete includeEmptyDirs="true" failonerror="false">
       		<fileset dir="classes" 
		includes="**/*.class,**/*.*~,org/makumba/db/sql/oql/OQLParser.java"
		defaultExcludes="no"	
		/>
       		<fileset dir="doc/api" 
		includes="**/*.html,**/*.css,**/package-list"
		excludes="API_users_guide.html"
		defaultExcludes="no"	
		/>
       		<fileset dir="doc/api/org" />
       		<fileset dir="doc/hacking/javadoc" />
       		<fileset dir="META-INF"/>
       		<fileset dir="lib" includes="makumba.jar" />
       		<fileset dir="work" />
       		<fileset dir="." includes="manifest-replace.properties,manifest.mf"/>
       </delete>
       </target>

       <target name="checkManifest" >
       <mkdir dir="META-INF"/>
       <condition property="meta-inf.ok">
       <and>
       <uptodate srcfile="servlet_context/WEB-INF/makumba.tld" targetfile="META-INF/makumba.tld" />
       <uptodate srcfile="servlet_context/WEB-INF/makumba-hibernate.tld" targetfile="META-INF/makumba-hibernate.tld" />
       <uptodate srcfile="manifest.template" targetfile="META-INF/manifest.mf" />
       </and>
       </condition>
       </target>

       <target name="makeManifest" depends="checkManifest" unless="meta-inf.ok" >
        <java classname="org.makumba.version" fork="true" output="manifest-replace.properties">   
        	<classpath>
		<pathelement path="classes/"/>
		<pathelement path="${java.class.path}"/>
	</classpath>
	</java>

        <!-- Filters -->
        <filter token="user" value="${user.name}"/>
        <filter filtersfile="manifest-replace.properties"/>

         <!-- Copy the manifest in order to replace the version token filter -->
         <copy file="manifest.template" tofile="manifest.mf" filtering="on" overwrite="true"/>
         <copy file="servlet_context/WEB-INF/makumba.tld" todir="META-INF" filtering="on" overwrite="true"/>
         <copy file="servlet_context/WEB-INF/makumba-hibernate.tld" todir="META-INF" filtering="on" overwrite="true"/>
         <copy file="META-INF/makumba.tld" tofile="META-INF/taglib.tld" filtering="off" overwrite="true"/>
         <copy file="META-INF/makumba-hibernate.tld" tofile="META-INF/taglib-hibernate.tld" filtering="off" overwrite="true"/>
       </target>


       <target name="jar" description="make a jar in ./lib"  depends="compile">
       <mkdir dir="${jar.place}/lib" />
	<antcall target="makeManifest" />
        <jar jarfile="${jar.place}/lib/makumba.jar" manifest="manifest.mf">
   	<fileset dir="classes" 
		includes="org/makumba/**/*.mdd, org/**/*.class, org/**/*.properties, org/makumba/devel/codeTemplates/*.properties"
		defaultExcludes="no"
		/>	
   	<fileset dir="." 
		includes="COPYING.txt"
		defaultExcludes="no"
		/>	
   	<metainf dir="META-INF" 
		includes="**/*.tld"
		defaultExcludes="no"
		/>	
	</jar>
       </target>


	<target name="doc" depends="compile" 
	description="generates documentation">
        <tstamp>
                <format property="javadoc.startup.time" pattern="yyyy-MM-dd HH:mm"/>
        </tstamp>

	<echo>- generating doc/api</echo>
	<javadoc 
		destdir="doc/api" 
		sourcepath="classes" 	
		packagenames="org.makumba"
		notree="true"
		noindex="true"
		nohelp="true"
		windowtitle="Makumba"
		classpathref="project.class.path"
		Version="true"
		Author="true"
		additionalparam="-breakiterator"
		doctitle="Makumba API Documentation"
		stylesheetfile="doc/api/javadoc.css"
	>
            <bottom><![CDATA[
                <div class='pageFooter'>
                Docs generated on ${javadoc.startup.time}
                </div>

		<script type='text/javascript' src='../../../main.js'></script>
		<script type='text/javascript'>makeNavBar('../../../');</script>
            ]]></bottom>
	    <link href="http://java.sun.com/j2se/1.4.2/docs/api/"/>
	</javadoc> 

	<echo>- generating doc/hacking/javadoc</echo>
	<javadoc 
		destdir="doc/hacking/javadoc" 
		sourcepath="classes" 	
		packagenames="*"
		windowtitle="Makumba [hacking docs]"
		classpathref="project.class.path"
		Version="true"
		Author="true"
		additionalparam="-breakiterator"
		access="package"
		use="true"
		doctitle="Documentation of Makumba classes for Makumba developers"
		stylesheetfile="doc/hacking/javadoc.css"
	>
            <bottom><![CDATA[
                <div class='pageFooter'>
                Docs generated on ${javadoc.startup.time}
                </div>
            ]]></bottom>
            <header><![CDATA[
                <TABLE BORDER='0' CELLPADDING='3' CELLSPACING='3'>
                <TD aCLASS='NavBarCell1' valign=top>
		   <a href='http://www.makumba.org' target='_top'><img src='http://www.makumba.org/makumba-logo-small.gif' border='0'></a>
                </TD><TR>
                <TD VALIGN='top' CLASS='NavBarCell3'><FONT SIZE='-2'>
                <script type='text/javascript'>
                   url=document.location.href;
                   clas=url.substring(url.indexOf('/javadoc/'));
                   clas=clas.substring(9);
                   clas=clas.substring(0, clas.indexOf('.html') );
                   clasUrl='';
                   if((clas.indexOf('org/makumba')==0||clas.indexOf('test/')==0) && clas.indexOf('package-use')<=0 && clas.indexOf('class-use')<=0)
		   {
                        cvsLink='';
			if(clas.indexOf('package-summary')<0 && clas.indexOf('package-tree')<=0) 
			{
				clasUrl=clasUrl.concat('',clas,'.java');
				cvsLink=cvsLink.concat('<a href=http://makumba.cvs.sourceforge.net/makumba/makumba/classes/',clasUrl,'?revision=HEAD&view=markup>SOURCE</a> in ');
			} else {
				clasUrl=clas.substring(0, clas.lastIndexOf('/') );
			}
                        cvsLink=cvsLink.concat('<a href=http://makumba.cvs.sourceforge.net/makumba/makumba/classes/',clasUrl,'>CVS</a>');
		   	document.write(cvsLink);
		   } 
                </script>
                </font>
                </td>
                </table>
            ]]></header>
	    <link href="http://java.sun.com/j2se/1.4.2/docs/api/"/>
	    <link href="http://java.sun.com/products/servlet/2.2/javadoc/"/>
	    <link href="http://junit.sourceforge.net/javadoc/"/>
	</javadoc> 

	</target>


	<target name="tagJar" depends="compile" if="tag" 
	        description="tags a version from the current checked out branch, and jar-s it locally to ./lib">
	  <antcall target="tagThis" />
	  <antcall target="makeJar"><param name="jar.place" value="." /></antcall>
	</target>


	<target name="tagThis" depends="compile" if="tag" 
 	        description="tags a version from the current checked out branch, no jar making">
	  <cvs command="tag -d ${tag}" dest="." />
	  <cvs command="tag ${tag}" dest="." />
	</target>


	<target name="makeJar" if="tag" description="makes the jar and a src tarball of the given version">
	<mkdir dir="work/makumba.distrib" />
	<delete dir="work/makumba.distrib/makumba/" />
	<cvs command="export -r ${tag} makumba" cvsroot=":pserver:anonymous@makumba.cvs.sourceforge.net:/cvsroot/makumba" dest="work/makumba.distrib/"/>
	<mkdir dir="${jar.place}/lib" />

	<!-- make the source tarball: -->
	<zip zipfile="lib/${tag}-src.zip">
		<fileset dir="work/makumba.distrib/">
		  <include name="makumba/**" />
		</fileset>
	</zip>

	<!-- make the jar: -->
	<java classname="org.apache.tools.ant.Main" fork="true" dir="work/makumba.distrib/makumba/" taskname="buildingJar">
        	<classpath>
		<pathelement path="${project.class.path}"/>
		<pathelement path="${java.class.path}"/>
		</classpath>
            <sysproperty key="jar.place" path="${jar.place}" />
            <arg value="jar"/>
	</java>
	<delete dir="work/makumba.distrib" />
	<copy file="${jar.place}/lib/makumba.jar" tofile="${jar.place}/lib/${tag}.jar"/>
	</target>

	<target name="uploadJar" depends="compile" if="tag" 
	description="makes the jar and a src tarball of the given version, puts it in ./lib and publishes it on the web WITHOUT making it default version" >
	<mkdir dir="work/makumba.distrib" />
	<delete dir="work/makumba.distrib/makumba/" />
	<antcall target="makeJar"><param name="jar.place" value="." /></antcall>
	<antcall target="uploadMadeJar" />
	</target>

	<target name="uploadMadeJar" 
		description="uplads a jar and a src tarball of the given version (made by a makeJar or a failed uploadJar), puts it in ./lib and publishes it on the web WITHOUT making it default version" 
		>	
	<ftp server="download.makumba.org"
		userid="ftp-mak"
		password="ftp-mak"
		remotedir="makumba/doc/download"
		binary="yes"
	>
    	<fileset dir="lib/">
                <include name="${tag}.jar"/>
                <include name="${tag}-src.zip"/>
    	</fileset>
	</ftp>
		<ftp server="upload.sourceforge.net"
			userid="anonymous"
			password="makumba.developer@makumba.org"
			remotedir="incoming"
			binary="yes"
		>
	    	<fileset dir="lib/">
	                <include name="${tag}.jar"/>
	                <include name="${tag}-src.zip"/>
		</fileset>
		</ftp>
		<echo>${tag}.jar and ${tag}-src.zip uploaded to sourceforge.net. To make it a release visit:
			http://sourceforge.net/project/admin/qrs.php?group_id=25704
			within the next 24 hours.
		</echo>
	</target>	

	<target name="publishJar" depends="compile" if="tag" 
	description="makes the jar and a src tarball of the given version, puts it in ./lib and publishes it on the web" >
	<mkdir dir="work/makumba.distrib" />
	<delete dir="work/makumba.distrib/makumba/" />
	<echo>Warning! publishJar changed semantics. You have to tag the version manually, or use tagThis</echo>
	<antcall target="uploadJar"></antcall>

	<ftp server="download.makumba.org"
		userid="ftp-mak"
		password="ftp-mak"
		remotedir="makumba/doc/download"
		binary="yes"
	>
    	<fileset dir="lib/">
      		<include name="makumba.jar" />
    	</fileset>
	</ftp>
    </target>


	<target name="publishDoc" description="publishes the documentation (and website)">
	<antcall target="zipdoc" />
	<antcall target="uploadMadeDoc"/>
	</target>
		
    <target name="uploadMadeDoc" description="uploads the documentation (and website) made by zipdoc or a failed publisDoc">
	<echo>updating zip for distribution</echo>
	<ftp server="download.makumba.org"
		userid="ftp-mak"
		password="ftp-mak"
		remotedir="makumba/doc/download"
		binary="yes"
	>
	<fileset dir="lib" includes="makumbadoc.zip"/>
	</ftp>
	</target>

	<target name="zipdoc" description="makes the documentation and zips it" >
	<delete file="${temp.dir}/makumbadoc.zip" />
	<antcall target="doc" />
	<fileset id="wwwdocs" dir="..">
		<include name="makumba/CHANGELOG.txt" />
		<include name="makumba/COPYING.txt" />
		<include name="makumba/README.txt" />
     		<include name="makumba/doc/**" />
      		<exclude name="makumba/doc/api/API_users_guide.html" />
	</fileset>

	<!-- make sure the files to be published are readable to everyone (zip keeps permissions, bug 329) -->
	<chmod perm="ugo+r" type="both">
	  <fileset refid="wwwdocs"/>
	</chmod>
	<zip zipfile="${temp.dir}/makumbadoc.zip">
	  <fileset refid="wwwdocs"/>
	</zip>
	<copy file="${temp.dir}/makumbadoc.zip" tofile="lib/makumbadoc.zip"/>

    </target>	

	<target name= "test" depends="compile" description="run all test cases" >	
		<java classname="test.all" fork="true" failonerror="true" classpath="classes" classpathref="project.class.path" taskname="junit"/>
	</target>

	<target name= "test.table" depends="compile" description="run database test cases" >	
		<java classname="test.table" fork="true" failonerror="true" classpath="classes" classpathref="project.class.path" taskname="junit"/>
	</target>

	<target name= "test.mdd" depends="compile" description="run MDD test cases" >	
		<java classname="test.mdd" fork="true" failonerror="true" classpath="classes" classpathref="project.class.path" taskname="junit"/>
	</target>

	<target name= "test.config" depends="compile" description="run config test cases" >	
		<java classname="test.config" fork="true" failonerror="true" classpath="classes" classpathref="project.class.path" taskname="junit"/>
	</target>

	<target name= "test.lock" depends="compile" description="run locking test cases" >	
		<java classname="test.lock" fork="true" failonerror="true" classpath="classes" classpathref="project.class.path" taskname="junit"/>
	</target>

	<target name="statcvs" description="generate CVS statistics with StatCVS">
		<echo>Get StatCVS, http://statcvs.sf.net/:
		cd .. (you should be in sources/ afterwards)
		cvs -d:pserver:anonymous@cvs.sourceforge.net:/cvsroot/statcvs login
		cvs -z3 -d:pserver:anonymous@cvs.sourceforge.net:/cvsroot/statcvs co statcvs
		Get needed libs from: http://belnet.dl.sourceforge.net/sourceforge/statcvs/developer-libs-0.7.zip
		..and unzip them into statcvs/lib directory.
		cd statcvs
		ant compile
		ant dist

		yep, ant could do all this automagically in a seperate target getStatCvs ;)
		note: statistics looks better if you update the sources first (cvs update)
		</echo>
		<mkdir dir="./doc/statcvs"/>
		<cvs command="log" dest="." output="./doc/statcvs/cvs.log"/>
		<!--property name="java.awt.headless" value="true" /-->
                <java classname="net.sf.statcvs.Main" fork="yes">
                        <arg line="-title Makumba -output-dir ./doc/statcvs -viewcvs http://cvs.makumba.org ./doc/statcvs/cvs.log ."/>
                        <classpath>
				<fileset dir="../statcvs/">
				        <include name="**/*.jar"/>
			        </fileset>
                                <!--path refid="project.class.path"/-->
                        </classpath>
                </java>

	</target>

	<target name="insertLicense">
	  <replace dir="classes" includes="**/*.java" summary="true">
		    <not>
		        <contains text="MERCHANTABILITY"/>
		    </not>
	    <replacetoken><![CDATA[package org.makumba]]></replacetoken>
	    <replacevalue><![CDATA[///////////////////////////////
//  Makumba, Makumba tag library
//  Copyright (C) 2000-2003  http://www.makumba.org
//
//  This library is free software; you can redistribute it and/or
//  modify it under the terms of the GNU Lesser General Public
//  License as published by the Free Software Foundation; either
//  version 2.1 of the License, or (at your option) any later version.
//
//  This library is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//  Lesser General Public License for more details.
//
//  You should have received a copy of the GNU Lesser General Public
//  License along with this library; if not, write to the Free Software
//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
//
//  -------------
//  $Id$
//  $Name$
/////////////////////////////////////

package org.makumba]]></replacevalue>
	  </replace>
	</target>

	<target name="fixcrlf" >
	  <fixcrlf srcDir="." includes="**/*.jsp, **/*.mdd, **/*.idd, **/*.java, **/*.properties" />
	</target>

	<target name="make12tld" >
	  <copy 	file  ="servlet_context/WEB-INF/makumba.tld" 
			tofile="servlet_context/WEB-INF/makumba.tld-1_2" 
			overwrite="true"/>
	  <replace file="servlet_context/WEB-INF/makumba.tld-1_2" summary="true">
	     <replacefilter
	  	token="DTD JSP Tag Library 1.1"
		value="DTD JSP Tag Library 1.2"/>
	     <replacefilter
	  	token="http://java.sun.com/j2ee/dtds/web-jsptaglibrary_1_1.dtd"
		value="http://java.sun.com/dtd/web-jsptaglibrary_1_2.dtd"/>
	     <replacefilter token="jspversion>" value="jsp-version>"/>
	     <replacefilter token="shortname>" value="short-name>"/>
	     <replacefilter token="info>" value="description>"/>
	     <replacefilter token="tagclass>" value="tag-class>"/>
	     <replacefilter token="teiclass>" value="tei-class>"/>
	     <replacefilter token="bodycontent>" value="body-content>"/>
	  </replace>
	</target>


</project>

       
