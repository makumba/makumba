!!!Introduction

Makumba can produce four types of forms: new, add, edit and generic forms. In addition to the forms, it is also possible to delete records. 

All forms have a number of common features:
* they can include a number of <mak:input> tags, which will render controls to manipulate data.
* they accept an attribute to specify the action page, i.e. the page that will be loaded after the form is submitted, just as in normal HTML forms
* they accept an attribute to specify the message to be displayed upon successful completion of the action
* the form method (%%code get%% or &&code post%%) can be set via an attribute, just as in normal HTML forms
* the form name can be set via an attribute
* forms can have handler methods to do post-processing, validation, e-mail sending, ... The handler methods are part of the [Makumba Business Logics|JavaBusinessLogic].

!!Non-generic (type specific) forms
[New|NewFormTag], [edit|EditFormTag] and [add|AddFormTag] forms are type specific. Their fields must be named after the fields in the respective type (and related fields).

For other purposes, a generic [<mak:form>|FormTag] tag is available.

!!Multiple forms
Multiple forms are a powerful feature of Makumba which makes it possible to:
* embed several forms in one, so as to have only one submit button
* create or edit multiple data sets at once, in combination with Makumba lists

!!!Basic form operations

!!Entering new data: newForm
In order to create new data of a specific type ([Makumba Data Definition|DataDefinition]). The fields in the form must be defined in the data definition specified, otherwise a [NoSuchFieldException] will be thrown.

To make a new record of the type %%code Employee%%, one could do a form as follows:

[{Code

<mak:newForm type="company.Employee" action="employeeList.jsp" method="post">
    <mak:input name="name"/>
    <mak:input name="surname"/>
    <input type="submit">
</mak:newForm>
}]

!!Editing existing data: editForm

The [<mak:editForm>|EditFormTag] allows to edit existing records in the database. To allow editing, the record has to be first fetched by a [<mak:object>|ObjectTag] or [<mak:list>|ListTag].

[{Code

<mak:object from="company.Employee e" where="e=$employee">
    <mak:editForm object="e" action="employeeList.jsp" method="post">
        <mak:input name="name"/>
        <mak:input name="surname"/>
    </mak:editForm>
</mak:object>
}]

Note that in this example, we assume that the where-condition in the [<mak:object>|ObjectTag] is constructed by comparing the [Pointer] to a parameter passed in the URL, e.g. in a page %%code employeeEdit.jsp?employee=hhiwx47%%.

When we have fetched the record to edit, we have to specify that we want to edit that very same object in the <mak:editForm> by using the attribute %%code object%%.

!!Adding data to sets: addForm

!!Deleting data: delete and deleteLink

!!Generic forms: form

!!Combining forms: multiple forms
Makumba allows to combine several forms into each other, enabling the user to edit several objects at the same time. For example, one can edit the assignment of several employees to projects at the same time. More details can be found in the [multiple forms documentation|MultipleListsAndFormsHowto]

!!!Form submission: form actions, validation and business logics

[{Box

Fixme (manu)
what happens at form submission (validation, authorisation, BL - in which order, where...), link to the relevant chapters.
}]

!!!Form annotation
Form validation errors are either reported in the Makumba response which would be displayed on the form action page, or can for improved usability be annotated in the form itself. In the latter case, on a form validation error, the form page itself would be displayed again, and errors are displayed next to the inputs that failed validation.

An example can be seen below:
age 	  invalid integer: 1r
weight 	  invalid real: 24b

The annotation message will be put inside a <span class="formAnnotation">; this CSS-class can be used to add custom formatting to the message.

Reloading the form page on errors can be triggered by the attribute reloadFormOnError, the location of the annotation message by the attribute annotation.

Additionally, form validation can be done also on the client-side, i.e. in the browser. Client-side validation can be either live, i.e. on entering data in an input, or before form submission; this is controlled by the attribute clientSideValidation.


!!!MOVE ME: Handler methods
Fixme (manu)
move this whole section to the BL part

Handler methods (if they exist) are executed by the Makumba controller, when the form is submitted to another Makumba page.

If there is a business logic class, the engine will look (once after each page compilation) for the corresponding handler method. The handler methods are executed before the default action and may prevent the action from being executed by throwing an exception. Some forms also have an after-action handler method.

If the handler class exists but no handler method can be found, an error is thrown (the site is not allowed to do the operation, e.g. StudentHandler will never have a on_newLibraryBook() method). If the handler class wishes to allow the action, it can define an empty handler method.

----
[Category Usage]
