# temporary file, should be removed once new parser works

!type.yesNo=int{"No"=0, "Yes"=1}
!type.genTyp=int{"Female"=0, "Male"=1}
#!title= fullName()
!title= indiv.name

indiv = unique fixed not null ptr test.IndividualNew ;lala

birthdate=date		 ;Birthdate
#birthdate%compare = birthdate <= date($now, $now, $now - 15, 0, 0, 0) : You have to be at least 15 years old!
#birthdate%compare = birthdate >= date($now, $now, $now - 105, 0, 0, 0) : Maximum age is 105!

firstSex = date

myapp_username=char[80] ; username for this user

password=char[80] ; password for this user

beginDate = date;a

#beginDate%compare = beginDate >= $now : Begin date can't be in the past!
#beginDate%compare = beginDate >= date($now,$now,$now - 5) : Begin date can't be longer than 5 years ago!

gender=genTyp		 ;Gender
all=char[25]             ;test a reserved word
field=char[80]           ;another reserved word

militarySucksAndEverybodyKnowsItButDoesNotSpeakOutLoudAboutIt=yesNo           ;A very long fieldname
driver=yesNo		 ;Driving Licence

age=int				;Age
range(age) {12..99} : Age must be between 12 and 99!

makumbaTillDeath = not null yesNo	; makumbian or not
designer = yesNo	; are you a designer?

weight=real ; weight in kilos


# test some QL functions as field names
length=int ; height in cm
max=int ; max value

extraData=ptr
extraData->something=char[20]
extraData->what=int


#for uniqness tests:
uniqInt=unique int		            ;test int uniqness
uniqChar=unique char[33]	        ;test char uniqness
uniqDate=unique date		        ;test date uniqness
uniqPtr=unique ptr test.Language    ;test ptr uniqness

speaks=set test.Language
intSet= set int {"a"=0, "b"=1, "c"=2 }

charSet=set char{ "d", "e", "f" }

email = char[40]
#email%matches = .+@.+\.[a-z]+ : Email address is not valid!


address=set			 ;Addresses
  address->!title=description
  address->description=char[30]	;Description (home address, study-time address, ...)
  address->streetno=char[100]	      ;Street  
  address->zipcode=char[10]		;Zipcode
  address->city=char[40]		;City
  address->country=char[20]             ;Country
  address->phone=char[20]		;Phone
  address->fax=char[20]			;Fax
  address->email=char[40]		;E-Mail
  address->usagestart=date		;Use from
  address->usageend=date		;Use till
  address->homepage=char[50]
  address->languages = set test.Language ; languages spoken in that address
  address->length(description) {3..?} : Description must be at least 3 letters long!

#  address->sth=ptr
#  address->sth->aaa=char[20]
#  address->sth->aaa%len = [3..?] : aaa must be at least 3 letters long!
#  address->sth->someSuperNestedFunction() { 1 + 2 } Some nested nested message 

#  address->someFunction() { 1 + 2 } Some nested message 
#  address->homepage%matches = http://.+ : the homepage must start with http://
#  address->notAllLowerDescription%compare = lower(description) != description : Description cannot all be lower case!


toys=set
  toys->name=char[30]
  
groupMembers = set test.PersonNew

# comparison validation rules spanning over more than one field
#ageWeight%compare = weight < age : You should not be more heavy than you're old!
#firstSex%compare = firstSex >= birthdate : Can't have sex before you'are born!
#lowerMail%compare = lower(email) = email : E-mail address must be all lower case!
#lowerName%compare = lower(indiv.name) != indiv.name : Your name can't be all lower cases!

# multi-field uniqueness keys
unique() { age, email } : these need to be unique!
unique() { indiv.name, indiv.surname } : these too!
