<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE document PUBLIC "-//MAKUMBA//DTD Documentation V2.0//EN" "document-v20-mak.dtd">
<document>
  <header>
    <title>Java Business Logic</title>
  </header>
  <body>

    <section>
      <title>Introduction</title>
      <p>makumba Business Logic (BL) is executed at form submission time. It makes it possible to perform additional
        validation, data manipulation and other processing tasks. Makumba BL is associated with JSP pages through a special discovery
        mechanism, and further through the usage of so-called handler methods. Data manipulation can be performed using the most important makumba API elements.</p>
    </section>
    
    <section><title>Business Logic discovery</title>
    
    <p>
      Each JSP page will determine its handler class on first access, after being compiled. If the class changes on disk, a web-app reload is generally needed for the new class to take effect.
      </p>
      <p>
      The handler is "discovered" by decomposing the full path of the JSP page, and finding a class with a matching name. 
      Decomposition breaks the full path at every capital letter, or forward slash. For example, with the page path /employee/profile/personalProfile.jsp, the following criteria are applied, in order:
      </p>
      <table>
          <tr>
              <th>criterium</th>
              <th>Java classes checked for</th>
          </tr>                   
          <tr>
              <td>page name</td>
              <td>EmployeeProfilePersonalProfileLogic</td>
          </tr>
          <tr>
              <td>caps parts of page/directory name</td>
              <td>EmployeeProfilePersonalLogic</td>
          </tr>
          <tr>
              <td>directory name</td>
              <td>EmployeeProfile</td>
          </tr>
          <tr>
              <td>parent directory name(s)</td>
              <td>EmployeeLogic, Logic</td>
          </tr>
      </table>

        <p>
            The class name prefix (e.g. java package name) can be regulated per parts of the site in in the Makumba.conf configuration file, in the <a href="/configuration/configuration.html#BL">[businessLogicPackages] section</a>. 
            For example, the section can contain:</p>
<source><![CDATA[/employee = org.myCompany.employee
/makumba = org.makumba
/=test]]>
</source>
    
        <table>
                <tr>
                    <th>path</th>
                    <th>Java classes checked for</th>
                </tr>                   
                <tr>
                    <td>/employee/profile/index.jsp</td>
                    <td>org.myCompany.employee.ProfilePersonalProfileLogic<br/>
                    org.myCompany.ProfileLogic<br/>
                    org.myCompany.Logic</td>
                </tr>               
                <tr>
                    <td>/makumba/tests/x.jsp</td>
                    <td>org.makumba.TestsXLogic<br/>
                    org.makumba.TestsLogic<br/>
                    org.makumba.Logic</td>
                </tr>
                <tr>
                    <td>/some.jsp</td>
                    <td>test.SomeLogic<br/>
                    test.Logic</td>
                </tr>
            </table>
            
        <p>
        There are good reasons to take into account the name of the response page of a form when looking for the business logic. Still, it is the name of the page that contains the form which matters, not the name of the action page.
        It is good practice for both pages to actually have the same handler class.
        </p>
    
    </section>
    
    <section><title>Business Logic handler methods</title>
    
    <p>On form submission, the data in the form can be accessed for validation and processing purposes. Depending on the action at hand, 
    there are different kind of generic handlers that can be used. It is also possible to define custom handlers.
    </p>
    
    <section><title>Generic handler methods</title>
    
    <p>These are the handlers used by <a href="/doc/taglib/maknewForm.html">mak:newForm</a>, <a href="/doc/taglib/makeditForm.html">mak:editForm</a>, <a href="/doc/taglib/makaddForm.html">mak:addForm</a> and <a href="/doc/taglib/makdelete.html">mak:delete</a>.
    Their name is constructed on the handler type, the action type, and the type of the MDD that is being processed by the form.</p>

    <p>When creating, editing, adding to and deleting the type company.Project, the generic handler methods are:</p>
    
    <table>
        <tr>
            <th>action</th>
            <th>generic handler methods</th>
        </tr>
        <tr>
            <td>new</td>
            <td><source><![CDATA[on_newCompanyProject(Dictionary<String, Object> d, Attributes a, Transaction t) {}
after_newCompanyProject(Pointer p, Dictionary<String, Object> d, Attributes a, Transaction t) {}]]></source></td>
        </tr>
        <tr>
            <td>add</td>
            <td><source><![CDATA[on_addCompanyProject(Pointer p, Dictionary<String, Object> d, Attributes a, Transaction t) {}
after_addCompanyProject(Pointer p, Dictionary<String, Object> d, Attributes a, Transaction t) {}]]></source></td>
        </tr>
        <tr>
            <td>edit</td>
            <td><source><![CDATA[on_editCompanyProject(Pointer p, Dictionary<String, Object> d, Attributes a, Transaction t) {}
after_editCompanyProject(Pointer p, Dictionary<String, Object> d, Attributes a, Transaction t) {}]]></source></td>
        </tr>
        <tr>
            <td>delete</td>
            <td><source><![CDATA[on_deleteCompanyProject(Pointer p, Attributes a, Transaction t) {}
after_deleteCompanyProject(Pointer p, Attributes a, Transaction t) {}]]></source></td>
        </tr>
    
    </table>

    <p>These methods make it possible to access the form data contained in the Dictionary object and the page and request data held by the Attributes object.
    Additional queries and/or operations on the database can be performed using the Transaction, whilst the Pointer is a relational object that uniquely identifies the record that is being manipulated.
    </p>
    
    </section>
    
    <section><title>Custom handler methods</title></section>
    
      <p>When using the <a href="/doc/taglib/makform.html">mak:form</a> tag, it is possible to define custom handler methods by specifying their name in the <code>handler</code> attribute of the tag.</p>
      <p>The handler can then be placed in the Business Logic file corresponding to the page.</p>
    
    </section>

    <section><title>Main makumba API elements</title>
    
    <section><title>Pointer</title>
    
    <p>A makumba Pointer is an object that uniquely identifies a database record. It can have different forms:</p>
<ul>
<li>the internal form, which is used by makumba to access the object in the database</li>
<li>the Java form, as Pointer object</li>
<li>the external form, which is a 7 character long string that uniquely identifies the record and its type. This form is mostly used in JSP pages, as CGI parameters.</li>
</ul>
<p>For instance, let’s consider the following JSP page listProjects.jsp:</p>

<source><![CDATA[<%@ taglib uri="http://www.makumba.org/presentation" prefix="mak"%>

<mak:list from=”company.Project p” where=”p = $project”>
    <mak:value expr=”p.name” />, pointer: <mak:value expr=”p” /><br />
    <mak:value expr=”p” var=”projectPointer” />
</mak:list>]]></source>

<p>This page can then be called with the following URI: <code>listProjects.jsp?projects=nxdcdc2</code></p>

<p><code>nxdcdc2</code> is the external form of the makumba pointer to a specific record.</p>
<p>The <code>&lt;mak:value expr="p" /&gt;</code> will also print this string, whereas the second mak:value will not result in any printed result, 
but will make "projectPointer" accessible as a Java page attribute inside the mak:list, having Pointer as its type.
It could then be used by casting it to a Pointer, however, this is rarely needed, since the "project" page parameter can be used in all 
makumba tags through the $project attribute.</p>
    
    
    </section>
    
    
    <section><title>Attributes</title>
    
    </section>
    
    <section><title>Transaction</title></section>
    
    </section>


  </body>

</document>
