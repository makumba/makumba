/*
* generated by Xtext
*/
package org.makumba.devel.eclipse.mdd.ui.outline;

import java.util.ArrayList;
import java.util.List;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.ui.editor.outline.transformer.AbstractDeclarativeSemanticModelTransformer;
import org.makumba.devel.eclipse.mdd.MDDUtils;
import org.makumba.devel.eclipse.mdd.MDD.CharType;
import org.makumba.devel.eclipse.mdd.MDD.Declaration;
import org.makumba.devel.eclipse.mdd.MDD.FieldDeclaration;
import org.makumba.devel.eclipse.mdd.MDD.FieldType;
import org.makumba.devel.eclipse.mdd.MDD.FunctionArgumentDeclaration;
import org.makumba.devel.eclipse.mdd.MDD.FunctionBody;
import org.makumba.devel.eclipse.mdd.MDD.FunctionDeclaration;
import org.makumba.devel.eclipse.mdd.MDD.IntEnum;
import org.makumba.devel.eclipse.mdd.MDD.Modifiers;
import org.makumba.devel.eclipse.mdd.MDD.NativeValidationRuleDeclaration;
import org.makumba.devel.eclipse.mdd.MDD.PointerType;
import org.makumba.devel.eclipse.mdd.MDD.SetType;
import org.makumba.devel.eclipse.mdd.MDD.SubFieldDeclaration;
import org.makumba.devel.eclipse.mdd.MDD.TitleDeclaration;
import org.makumba.devel.eclipse.mdd.MDD.ValidationRuleDeclaration;

/**
 * customization of the default outline structure
 * 
 */
public class MDDTransformer extends AbstractDeclarativeSemanticModelTransformer {

	public boolean consumeNode(Modifiers node) {
		return false;
	}

	public boolean consumeNode(CharType node) {
		return false;
	}

	public boolean consumeNode(IntEnum node) {
		return false;
	}

	public boolean consumeNode(FieldType node) {
		return false;
	}

	public boolean consumeNode(FunctionArgumentDeclaration node) {
		return false;
	}

	public boolean consumeNode(FunctionBody node) {
		return false;
	}

	public boolean consumeNode(SubFieldDeclaration node) {
		return false;
	}

	public List<EObject> getChildren(FunctionDeclaration semanticNode) {
		return NO_CHILDREN;
	}

	public List<EObject> getChildren(ValidationRuleDeclaration semanticNode) {
		return NO_CHILDREN;
	}

	public List<EObject> getChildren(SubFieldDeclaration semanticNode) {
		return NO_CHILDREN;
	}

	public List<EObject> getChildren(TitleDeclaration semanticNode) {
		return NO_CHILDREN;
	}

	public List<EObject> getChildren(NativeValidationRuleDeclaration semanticNode) {
		return NO_CHILDREN;
	}

	public List<EObject> getChildren(FieldDeclaration field) {
		if (field.getTypedef() instanceof SetType) {
			if (((SetType) field.getTypedef()).getRef() == null) {
				List<EObject> result = new ArrayList<EObject>();
				for (Declaration d : MDDUtils.getChildrenOf(field)) {
					result.add(d);
				}
				return result;
			}
		} else if (field.getTypedef() instanceof PointerType) {
			if (((PointerType) field.getTypedef()).getRef() == null) {
				List<EObject> result = new ArrayList<EObject>();
				for (Declaration d : MDDUtils.getChildrenOf(field)) {
					result.add(d);
				}
				return result;
			}
		}
		return NO_CHILDREN;
	}

	//	public ContentOutlineNode createNode(
	//		      Attribute semanticNode, ContentOutlineNode parentNode) {
	//		    ContentOutlineNode node = super.newOutlineNode(semanticNode, parentNode);
	//		    node.setLabel("special " + node.getLabel());
	//		    return node;
	//		  }

}
