<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
    <modelVersion>4.0.0</modelVersion>


    <parent>
        <groupId>org.makumba</groupId>
        <artifactId>makumba</artifactId>
        <version>0.9.8-SNAPSHOT</version>
        <relativePath>../makumba-parent/pom.xml</relativePath>
    </parent>

    <artifactId>makumba-jsp-test</artifactId>
    <packaging>war</packaging>

    <name>makumba jsp integration tests</name>

    <properties>
        <main.basedir>${project.basedir}/..</main.basedir>
        <properties.location>${main.basedir}/makumba-parent/build.properties</properties.location>
    </properties>

    <!--
	This module produces a WAR for the sole purpose of integration testing. It does not install or deploy the WAR.
	For reason explained below, all test source is exceptionally placed in src/main
    -->


    <dependencies>
        <dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>servlet-api</artifactId>
            <version>2.5</version>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>javax.servlet.jsp</groupId>
            <artifactId>jsp-api</artifactId>
            <version>2.1</version>
            <scope>provided</scope>
        </dependency>
         <dependency>
            <groupId>javax.el</groupId>
            <artifactId>el-api</artifactId>
            <version>2.2</version>
            <scope>provided</scope>
        </dependency>

         <dependency> 
          	<groupId>jstl</groupId> 
          	<artifactId>jstl</artifactId> 
          	<version>1.2</version> 
          	<!--  JSTL is needed in the WAR so we don't mark it as provided -->
         </dependency>
         
         
         <dependency>
            <groupId>org.makumba</groupId>
            <artifactId>makumba-core</artifactId>
            <version>${project.version}</version>
            <scope>compile</scope>
        </dependency>

        <dependency>
            <groupId>org.makumba</groupId>
            <artifactId>makumba-jsp</artifactId>
            <version>${project.version}</version>
            <scope>compile</scope>
       </dependency>

        <!-- dependency on makumba-core test API -->
        <dependency>
            <groupId>org.makumba</groupId>
            <artifactId>makumba-core</artifactId>
            <version>${project.version}</version>
            <type>test-jar</type>
            <scope>pre-integration-test</scope>
        </dependency>

        <dependency>
            <groupId>org.makumba</groupId>
            <artifactId>makumba-core</artifactId>
            <version>${project.version}</version>
            <type>test-jar</type>
            <scope>compile</scope>
        </dependency>

        <dependency>
            <groupId>org.apache.cactus</groupId>
            <artifactId>cactus.core.framework.uberjar.javaEE.15</artifactId>
            <version>1.8.1</version>
            <scope>compile</scope>
            <exclusions>
                <exclusion>
                    <groupId>org.mortbay.jetty</groupId>
                    <artifactId>org.mortbay.jetty</artifactId>
                </exclusion>
                <exclusion>
                    <groupId>tomcat</groupId>
                    <artifactId>jasper-runtime</artifactId>
                </exclusion>
                <exclusion>
                    <groupId>tomcat</groupId>
                    <artifactId>jasper-compiler</artifactId>
                </exclusion>
                <exclusion>
                    <groupId>javax.servlet</groupId>
                    <artifactId>jsp-api</artifactId>
                </exclusion>
                <exclusion>
                    <groupId>javax.servlet</groupId>
                    <artifactId>servlet-api</artifactId>
                </exclusion>
            </exclusions>
        </dependency>


        <dependency>
            <groupId>httpunit</groupId>
            <artifactId>httpunit</artifactId>
            <version>1.6</version>
            <scope>compile</scope>
	    	<exclusions>
	      		<exclusion>
					<groupId>javax.servlet</groupId>
					<artifactId>servlet-api</artifactId>
	      		</exclusion>
	    	</exclusions>
        </dependency>

        <!-- Database drivers for webapp runtime -->

        <dependency>
            <groupId>org.hsqldb</groupId>
            <artifactId>hsqldb</artifactId>
            <version>2.0.0</version>
            <scope>compile</scope>
        </dependency>

        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
            <version>5.1.13</version>
            <scope>compile</scope>
        </dependency>
        
    </dependencies>

    <build>
	<!-- the WAR plugin takes content from src/main, and the test classes must be both in the war and in the client side of the tests, 
	     so we exceptionally run tests from src/main, since this is a testing module anyway
	  -->
	<testSourceDirectory>src/main/java</testSourceDirectory>
        <plugins>
            <!-- Cargo plugin, to deploy the integration tests on a container. 
		 Cargo will deploy by default the WAR created by the WAR plugin -->
            <plugin>
              <groupId>org.codehaus.cargo</groupId>
              <artifactId>cargo-maven2-plugin</artifactId>
              <version>1.1.0</version>
              <executions>
                <execution>
                  <id>start-container</id>
                  <phase>pre-integration-test</phase>
                  <goals>
                    <goal>start</goal>
                  </goals>
                </execution>
                <execution>
                  <id>stop-container</id>
                  <phase>post-integration-test</phase>
                  <goals>
                    <goal>stop</goal>
                  </goals>
                </execution>
              </executions>
              <configuration>
                <wait>false</wait>
                <container>
                  <containerId>tomcat7x</containerId>
                  <log>${project.build.directory}/cargo.log</log>
                  <output>${project.build.directory}/output.log</output>
		  <artifactInstaller>
		    <groupId>org.apache.tomcat</groupId>
		    <artifactId>tomcat</artifactId>
		    <version>7.0.52</version>
		  </artifactInstaller>
                </container>
                <configuration>
                  <properties>
                    <cargo.servlet.port>${server.port}</cargo.servlet.port>
                  </properties>
                </configuration>
              </configuration>
            </plugin>
	    
	    
            <!-- Surefire plugin, to actually run the tests-->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <configuration>
                    <!-- normally surefire runs in the test phase, we don't want that. It is configured below to run in the 
			 integration-test phase -->
                    <skip>true</skip>
                    <excludes>
                        <exclude>**/ExceptionTest.java</exclude>
                        <exclude>**/FormsHQLTest.java</exclude>
                        <exclude>**/ListHQLTest.java</exclude>
                    </excludes>
                </configuration>
                <executions>
                    <execution>
                        <id>surefire-it</id>
                        <phase>integration-test</phase>
                        <goals>
                            <goal>test</goal>
                        </goals>
                        <configuration>
                            <skip>false</skip>
                            <systemProperties>
                                <property>
				    <!-- the webapp context path is forced to /tests in src/main/webapp/META-INF/context.xml 
					 no matter what the WAR name is! this is needed because expected HTML output contains tests paths
				      -->
                                    <name>cactus.contextURL</name>
                                    <value>http://localhost:${server.port}/tests</value>
                                </property>
                            </systemProperties>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <!-- skip installation -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-install-plugin</artifactId>
                <version>2.4</version>
                <configuration>
                    <skip>true</skip>
                </configuration>
            </plugin>
            <!-- skip deployment -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-deploy-plugin</artifactId>
                <version>2.4</version>
                <configuration>
                    <skip>true</skip>
                </configuration>
            </plugin>


            <!-- Jetty plugin -->
            <plugin>
  					<groupId>org.eclipse.jetty</groupId>
  					<artifactId>jetty-maven-plugin</artifactId>
  					<version>9.0.0.v20130308</version>   					
                <configuration>
                    <scanIntervalSeconds>10</scanIntervalSeconds>
                    <webApp>
                        <contextPath>/tests</contextPath>
                    </webApp>                    
                    <webAppSourceDirectory>${main.basedir}/makumba-jsp-test/src/test/webapp</webAppSourceDirectory>
                    <scanTargets>
                        <scanTarget>../makumba-core/target/classes</scanTarget>
                    </scanTargets>
                </configuration>
            </plugin>


            <!-- Embedded Tomcat (tomcat:run) -->
	        <plugin>
	          <groupId>org.apache.tomcat.maven</groupId>
	          <artifactId>tomcat6-maven-plugin</artifactId>	          
	                <configuration>
	                <goalPrefix>tomcat6</goalPrefix>
	                    <path>/tests</path>
	                    <port>${server.port}</port>
	                    <warSourceDirectory>${main.basedir}/makumba-jsp-test/src/test/webapp</warSourceDirectory>
	                    <classesDir>${main.basedir}/makumba-jsp-test/target/test-classes</classesDir>
	                    <url>http://localhost:${server.port}/manager</url>
	                </configuration>
	        </plugin>
	        <plugin>
	          <groupId>org.apache.tomcat.maven</groupId>
	          <artifactId>tomcat7-maven-plugin</artifactId>
	                <configuration>
	                    <path>/tests</path>
	                    <port>${server.port}</port>	                   
	                    <url>http://localhost:${server.port}/manager/text</url>
	                </configuration>
	        </plugin>
        </plugins>


    </build>

</project>
