/*
* generated by Xtext
*/
package org.makumba.devel.eclipse.mdd.ui.labeling;

import org.eclipse.emf.edit.ui.provider.AdapterFactoryLabelProvider;
import org.eclipse.jface.viewers.StyledString;
import org.eclipse.xtext.impl.KeywordImpl;
import org.eclipse.xtext.naming.IQualifiedNameProvider;
import org.eclipse.xtext.parsetree.LeafNode;
import org.eclipse.xtext.parsetree.NodeUtil;
import org.eclipse.xtext.ui.label.DefaultEObjectLabelProvider;
import org.makumba.devel.eclipse.mdd.MDD.CharEnum;
import org.makumba.devel.eclipse.mdd.MDD.CharType;
import org.makumba.devel.eclipse.mdd.MDD.ComparisonValidationRuleDeclaration;
import org.makumba.devel.eclipse.mdd.MDD.DataDefinition;
import org.makumba.devel.eclipse.mdd.MDD.EnumValue;
import org.makumba.devel.eclipse.mdd.MDD.FieldDeclaration;
import org.makumba.devel.eclipse.mdd.MDD.FieldPath;
import org.makumba.devel.eclipse.mdd.MDD.FieldReference;
import org.makumba.devel.eclipse.mdd.MDD.FieldType;
import org.makumba.devel.eclipse.mdd.MDD.FunctionArgumentBody;
import org.makumba.devel.eclipse.mdd.MDD.FunctionArguments;
import org.makumba.devel.eclipse.mdd.MDD.FunctionDeclaration;
import org.makumba.devel.eclipse.mdd.MDD.IncludeDeclaration;
import org.makumba.devel.eclipse.mdd.MDD.IntEnum;
import org.makumba.devel.eclipse.mdd.MDD.NativeValidationRuleDeclaration;
import org.makumba.devel.eclipse.mdd.MDD.PointerType;
import org.makumba.devel.eclipse.mdd.MDD.RangeValidationRuleDeclaration;
import org.makumba.devel.eclipse.mdd.MDD.RegexValidationRuleDeclaration;
import org.makumba.devel.eclipse.mdd.MDD.SetType;
import org.makumba.devel.eclipse.mdd.MDD.SubFieldDeclaration;
import org.makumba.devel.eclipse.mdd.MDD.TitleDeclaration;
import org.makumba.devel.eclipse.mdd.MDD.TypeDeclaration;
import org.makumba.devel.eclipse.mdd.MDD.UniquenessValidationRuleDeclaration;
import org.makumba.devel.eclipse.mdd.MDD.ValidationRuleDeclaration;

import com.google.inject.Inject;

/**
 * Provides labels for a EObjects.
 * 
 * see
 * http://www.eclipse.org/Xtext/documentation/latest/xtext.html#labelProvider
 */
public class MDDLabelProvider extends DefaultEObjectLabelProvider {

	@Inject
	public MDDLabelProvider(AdapterFactoryLabelProvider delegate) {
		super(delegate);
	}

	@Inject
	IQualifiedNameProvider nameProvider;

	public static enum Type {
		DATA_DEFINITION, FUNCTION, FIELD, VALIDATION, TYPE, INCLUDE, FUNCTION_ARGUMENT
	};

	//TODO: add images

	StyledString text(FieldPath fieldPath) {
		StyledString result = new StyledString();
		result.append(fieldPath.getField().getName(), StyledString.QUALIFIER_STYLER);
		if (fieldPath.getSubField() != null)
			result.append("." + text(fieldPath.getSubField()), StyledString.QUALIFIER_STYLER);
		return result;
	}

	StyledString text(DataDefinition dd) {
		return dataDefinitionLabel(nameProvider.getQualifiedName(dd));
	}

	public static StyledString dataDefinitionLabel(String qualifiedName) {
		StyledString result = new StyledString();
		String className = qualifiedName;
		String packageName = null;
		if (qualifiedName.contains(".")) {
			className = qualifiedName.substring(qualifiedName.lastIndexOf(".") + 1);
			packageName = qualifiedName.substring(0, qualifiedName.lastIndexOf("."));
		}
		result.append(className);
		if (packageName != null) {
			result.append(" - " + packageName, StyledString.DECORATIONS_STYLER);
		}
		return result;
	}

	StyledString text(TitleDeclaration title) {
		//TODO: fix title
		StyledString result = new StyledString();
		if (title.getField() != null)
			result.append(text(title.getField()));
		else if (title.getFunction() != null)
			result.append(title.getFunction().getFunction().getName() + "()");
		return result;
	}

	StyledString text(FieldDeclaration field) {
		StyledString result = new StyledString();
		result.append(field.getName());
		FieldType fieldType = field.getTypedef();
		result.append(" : " + getDescription(fieldType), StyledString.DECORATIONS_STYLER);
		return result;

	}

	StyledString text(NativeValidationRuleDeclaration validation) {
		StyledString result = new StyledString();
		result.append(validation.getField().getName() + ".", StyledString.QUALIFIER_STYLER);
		result.append(validation.getType());
		result.append(" : " + validation.getMessage(), StyledString.DECORATIONS_STYLER);
		return result;
	}

	StyledString text(SubFieldDeclaration field) {
		StyledString result = new StyledString();
		result.append(field.getSubFieldOf().getName() + "->", StyledString.QUALIFIER_STYLER);
		Object text = doGetText(field.getD());
		if (text instanceof String)
			result.append((String) text);
		else if (text instanceof StyledString)
			result.append((StyledString) text);
		return result;
	}

	private String getDescription(FieldType fieldType) {
		if (fieldType instanceof CharType)
			return "char"
					+ (((CharType) fieldType).getLength() > 0 ? " [" + ((CharType) fieldType).getLength() + "]" : "");
		else if (fieldType instanceof CharEnum)
			return "charEnum [" + (((CharEnum) fieldType).getValues().size()) + "]";
		else if (fieldType instanceof IntEnum)
			return "intEnum [" + (((IntEnum) fieldType).getValues().size()) + "]";
		else if (fieldType instanceof PointerType) {
			PointerType pointer = (PointerType) fieldType;
			if (pointer.getRef() != null)
				return text(pointer.getRef()).getString();
			else
				return "ptr";
		} else if (fieldType instanceof SetType) {
			SetType set = (SetType) fieldType;
			if (set.getRef() != null)
				return text(set.getRef()).getString();
			else
				return "set";
		} else if (fieldType.getTypeDec() != null) {
			return fieldType.getTypeDec().getName() + " -> " + getDescription(fieldType.getTypeDec().getFieldType());
		} else {
			for (LeafNode node : NodeUtil.getNode(fieldType).getLeafNodes()) {
				if (node.getGrammarElement() instanceof KeywordImpl)
					return node.getText();
			}
			return "<unknown>";
		}
	}

	StyledString text(EnumValue value) {
		StyledString result = new StyledString();
		result.append(value.getName());
		result.append(" : " + value.getValue(), StyledString.DECORATIONS_STYLER);
		return result;
	}

	StyledString text(ValidationRuleDeclaration rule) {
		StyledString result = new StyledString();
		result.append(rule.getName() + "(");
		if (rule instanceof RangeValidationRuleDeclaration)
			result.append(text(((RangeValidationRuleDeclaration) rule).getArg()));
		if (rule instanceof RegexValidationRuleDeclaration)
			result.append(text(((RegexValidationRuleDeclaration) rule).getArg()));
		if (rule instanceof ComparisonValidationRuleDeclaration)
			result.append(getArguments(((ComparisonValidationRuleDeclaration) rule).getArgs()));
		if (rule instanceof UniquenessValidationRuleDeclaration)
			result.append(getArguments(((UniquenessValidationRuleDeclaration) rule).getArgs()));
		result.append(")");
		result.append(" : " + rule.getErrorMessage().getMessage(), StyledString.DECORATIONS_STYLER);
		return result;
	}

	StyledString text(FieldReference field) {
		StyledString result = new StyledString();
		if (field.getField() != null)
			result.append(field.getField().getName(), StyledString.QUALIFIER_STYLER);
		return result;
	}

	StyledString getArguments(FunctionArguments args) {
		StyledString result = new StyledString();
		for (FieldPath field : args.getArgs()) {
			if (result.length() > 0)
				result.append(",");
			result.append(text(field));
		}
		return result;
	}

	//TODO: fix argument body in function declaration
	StyledString text(FunctionDeclaration funct) {
		StyledString result = new StyledString();
		if (funct.getB() != null)
			result.append(funct.getB() + "%", StyledString.QUALIFIER_STYLER);
		result.append(funct.getName());
		String args = "";
		for (FunctionArgumentBody fab : funct.getArg().getF())
			args += (fab.getName() + ",");
		if (!args.equals(""))
			args = args.replaceAll(",$", "");
		result.append("(" + args + ")");
		if (funct.getM() != null)
			result.append(" : " + funct.getM().getMessage(), StyledString.DECORATIONS_STYLER);
		return result;
	}

	StyledString text(TypeDeclaration type) {
		StyledString result = new StyledString();
		result.append(type.getName());
		result.append(" : " + getDescription(type.getFieldType()), StyledString.DECORATIONS_STYLER);
		return result;
	}

	StyledString text(IncludeDeclaration include) {
		StyledString result = new StyledString();
		result.append(nameProvider.getQualifiedName(include.getImportedNamespace()));
		return result;
	}

	String image(IncludeDeclaration include) {
		return image(Type.INCLUDE);
	}

	String image(FieldDeclaration field) {
		return image(Type.FIELD);
	}

	String image(FunctionDeclaration funct) {
		return image(Type.FUNCTION);
	}

	String image(DataDefinition dataDefinition) {
		return image(Type.DATA_DEFINITION);
	}

	String image(SubFieldDeclaration subField) {
		if (doGetImage(subField.getD()) instanceof String)
			return doGetImage(subField.getD()).toString();
		return null;
	}

	String image(TypeDeclaration type) {
		return image(Type.TYPE);
	}

	String image(ValidationRuleDeclaration rule) {
		return image(Type.VALIDATION);
	}

	String image(NativeValidationRuleDeclaration rule) {
		return image(Type.VALIDATION);
	}

	//TODO: arrange icons a bit better
	String image(Type type) {
		switch (type) {
		case DATA_DEFINITION:
			return "DataDefinition16.png";
		case FIELD:
			return "field2.gif";
		case FUNCTION:
			return "method2.gif";
		case TYPE:
			return "type.gif";
		case VALIDATION:
			return "validate.gif";
		case INCLUDE:
			return "import-model.gif";
		default:
			return "";
		}
	}
}
